

// Support for growable heap + pthreads, where the buffer may change, so JS views
// must be updated.
function GROWABLE_HEAP_I8() {
  if (wasmMemory.buffer != buffer) {
    updateGlobalBufferAndViews(wasmMemory.buffer);
  }
  return HEAP8;
}
function GROWABLE_HEAP_U8() {
  if (wasmMemory.buffer != buffer) {
    updateGlobalBufferAndViews(wasmMemory.buffer);
  }
  return HEAPU8;
}
function GROWABLE_HEAP_I16() {
  if (wasmMemory.buffer != buffer) {
    updateGlobalBufferAndViews(wasmMemory.buffer);
  }
  return HEAP16;
}
function GROWABLE_HEAP_U16() {
  if (wasmMemory.buffer != buffer) {
    updateGlobalBufferAndViews(wasmMemory.buffer);
  }
  return HEAPU16;
}
function GROWABLE_HEAP_I32() {
  if (wasmMemory.buffer != buffer) {
    updateGlobalBufferAndViews(wasmMemory.buffer);
  }
  return HEAP32;
}
function GROWABLE_HEAP_U32() {
  if (wasmMemory.buffer != buffer) {
    updateGlobalBufferAndViews(wasmMemory.buffer);
  }
  return HEAPU32;
}
function GROWABLE_HEAP_F32() {
  if (wasmMemory.buffer != buffer) {
    updateGlobalBufferAndViews(wasmMemory.buffer);
  }
  return HEAPF32;
}
function GROWABLE_HEAP_F64() {
  if (wasmMemory.buffer != buffer) {
    updateGlobalBufferAndViews(wasmMemory.buffer);
  }
  return HEAPF64;
}

var Module = typeof Module !== "undefined" ? Module : {};

if (!Module.expectedDataFileDownloads) {
 Module.expectedDataFileDownloads = 0;
}

Module.expectedDataFileDownloads++;

(function() {
 var loadPackage = function(metadata) {
  function runWithFS() {
   function assert(check, msg) {
    if (!check) throw msg + new Error().stack;
   }
   Module["FS_createPath"]("/", "craftos", true, true);
   Module["FS_createPath"]("/craftos", "rom", true, true);
   Module["FS_createPath"]("/craftos/rom", "apis", true, true);
   Module["FS_createPath"]("/craftos/rom/apis", "turtle", true, true);
   Module["FS_createPath"]("/craftos/rom/apis", "command", true, true);
   Module["FS_createPath"]("/craftos/rom", "autorun", true, true);
   Module["FS_createPath"]("/craftos/rom", "programs", true, true);
   Module["FS_createPath"]("/craftos/rom/programs", "pocket", true, true);
   Module["FS_createPath"]("/craftos/rom/programs", "advanced", true, true);
   Module["FS_createPath"]("/craftos/rom/programs", "turtle", true, true);
   Module["FS_createPath"]("/craftos/rom/programs", "rednet", true, true);
   Module["FS_createPath"]("/craftos/rom/programs", "fun", true, true);
   Module["FS_createPath"]("/craftos/rom/programs/fun", "advanced", true, true);
   Module["FS_createPath"]("/craftos/rom/programs/fun/advanced", "levels", true, true);
   Module["FS_createPath"]("/craftos/rom/programs", "http", true, true);
   Module["FS_createPath"]("/craftos/rom/programs", "command", true, true);
   Module["FS_createPath"]("/craftos/rom", "modules", true, true);
   Module["FS_createPath"]("/craftos/rom/modules", "turtle", true, true);
   Module["FS_createPath"]("/craftos/rom/modules", "command", true, true);
   Module["FS_createPath"]("/craftos/rom/modules", "main", true, true);
   Module["FS_createPath"]("/craftos/rom/modules/main", "cc", true, true);
   Module["FS_createPath"]("/craftos/rom/modules/main/cc", "shell", true, true);
   Module["FS_createPath"]("/craftos/rom/modules/main/cc", "image", true, true);
   Module["FS_createPath"]("/craftos/rom/modules/main/cc", "http", true, true);
   Module["FS_createPath"]("/craftos/rom", "help", true, true);
   Module["FS_createPath"]("/craftos", "debug", true, true);
   var fileData0 = "AAAAAUJ1ZDEAABAAAAAIAAAAEAAAAAQKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAA8AAAABAAAQAAAuAGwAdQBhSWxvYwwAAAAgAYgBpAG8AcwAuAGwAdQBhSWxvY2Jsb2IAAAAQAAAAXgAAACX///////8AAAAAAAUAZABlAGIAdQBnSWxvY2Jsb2IAAAAQAAABBgAAACX///////8AAAAAAAUAZABlAGIAdQBnYndzcGJsb2IAAADJYnBsaXN0MDDXAQIDBAUGBwgICAsIDQhdU2hvd1N0YXR1c0JhcltTaG93UGF0aGJhcltTaG93VG9vbGJhcltTaG93VGFiVmlld18QFENvbnRhaW5lclNob3dTaWRlYmFyXFdpbmRvd0JvdW5kc1tTaG93U2lkZWJhcgkJCQgJXxAYe3sxNTEsIDQzMH0sIHs3NzAsIDUyOH19CQgXJTE9SWBteXp7fH1+mQAAAAAAAAEBAAAAAAAAAA8AAAAAAAAAAAAAAAAAAACaAAAABQBkAGUAYgB1AGdsZzFTY29tcAAAAAAAAN//AAAABQBkAGUAYgB1AGdtb0REYmxvYgAAAAgAAADJBsrCQQAAAAUAZABlAGIAdQBnbW9kRGJsb2IAAAAIAAAAyQbKwkEAAAAFAGQAZQBiAHUAZ3BoMVNjb21wAAAAAAABMAAAAAAFAGQAZQBiAHUAZ3ZTcm5sb25nAAAAAQAAAAMAcgBvAG1JbG9jYmxvYgAAABAAAABeAAAAg////////wAAAAAAAwByAG8AbWJ3c3BibG9iAAAAt2JwbGlzdDAw1gECAwQFBgcICAgLCF1TaG93U3RhdHVzQmFyW1Nob3dUb29sYmFyW1Nob3dUYWJWaWV3XxAUQ29udGFpbmVyU2hvd1NpZGViYXJcV2luZG93Qm91bmRzW1Nob3dTaWRlYmFyCAkJCV8QF3t7NzU5LCA5M30sIHs3NzAsIDU4OX19CQgVIy87Ul9rbG1ub4kAAAAAAAABAQAAAAAAAAANAAAAAAAAAAAAAAAAAAAAigAAAAMAcgBvAG1sZzFTY29tcAAAAAAAC41gAAAAAwByAG8AbW1vRERibG9iAAAACBEHVDeNfsNBAAAAAwByAG8AbW1vZERibG9iAAAACBEHVDeNfsNBAAAAAwByAG8AbXBoMVNjb21wAAAAAAAWcAAAAAADAHIAbwBtdlNybmxvbmcAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAgsAAABFAAAECggAAAAYAAAAAAAAAAABAAAgAAAAAAEAAEAAAAAAAQAAgAAAAAABAAEAAAAAAAEAAgAAAAAAAQAEAAAAAAABAAgAAAAAAAEAEAAAAAAAAQAgAAAAAAABAEAAAAAAAAEAgAAAAAAAAQEAAAAAAAABAgAAAAAAAAEEAAAAAAAAAQgAAAAAAAABEAAAAAAAAAEgAAAAAAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==";
   Module["FS_createDataFile"]("/craftos", ".DS_Store", decodeBase64(fileData0), true, true, false);
   var fileData1 = "LS0gTG9hZCBpbiBleHBlY3QgZnJvbSB0aGUgbW9kdWxlIHBhdGguCi0tCi0tIElkZWFsbHkgd2UnZCB1c2UgcmVxdWlyZSwgYnV0IHRoYXQgaXMgcGFydCBvZiB0aGUgc2hlbGwsIGFuZCBzbyBpcyBub3QKLS0gYXZhaWxhYmxlIHRvIHRoZSBCSU9TIG9yIGFueSBBUElzLiBBbGwgQVBJcyBsb2FkIHRoaXMgdXNpbmcgZG9maWxlLCBidXQgdGhhdAotLSBoYXMgbm90IGJlZW4gZGVmaW5lZCBhdCB0aGlzIHBvaW50Lgpsb2NhbCBleHBlY3QKCmRvCiAgICBsb2NhbCBoID0gZnMub3Blbigicm9tL21vZHVsZXMvbWFpbi9jYy9leHBlY3QubHVhIiwgInIiKQogICAgbG9jYWwgZiwgZXJyID0gKF9WRVJTSU9OID09ICJMdWEgNS4xIiBhbmQgbG9hZHN0cmluZyBvciBsb2FkKShoLnJlYWRBbGwoKSwgIkBleHBlY3QubHVhIikKICAgIGguY2xvc2UoKQoKICAgIGlmIG5vdCBmIHRoZW4gZXJyb3IoZXJyKSBlbmQKICAgIGV4cGVjdCA9IGYoKS5leHBlY3QKZW5kCgotLSBIaXN0b3JpY2FsbHkgbG9hZC9sb2Fkc3RyaW5nIHdvdWxkIGhhbmRsZSB0aGUgY2h1bmsgbmFtZSBhcyBpZiBpdCBoYXMKLS0gYmVlbiBwcmVmaXhlZCB3aXRoICI9Ii4gV2UgZW11bGF0ZSB0aGF0IGJlaGF2aW91ciBoZXJlLgpsb2NhbCBmdW5jdGlvbiBwcmVmaXgoY2h1bmtuYW1lKQogICAgaWYgdHlwZShjaHVua25hbWUpIH49ICJzdHJpbmciIHRoZW4gcmV0dXJuIGNodW5rbmFtZSBlbmQKICAgIGxvY2FsIGhlYWQgPSBjaHVua25hbWU6c3ViKDEsIDEpCiAgICBpZiBoZWFkID09ICI9IiBvciBoZWFkID09ICJAIiB0aGVuCiAgICAgICAgcmV0dXJuIGNodW5rbmFtZQogICAgZWxzZQogICAgICAgIHJldHVybiAiPSIgLi4gY2h1bmtuYW1lCiAgICBlbmQKZW5kCgppZiBfVkVSU0lPTiA9PSAiTHVhIDUuMSIgdGhlbgogICAgLS0gSWYgd2UncmUgb24gTHVhIDUuMSwgaW5zdGFsbCBwYXJ0cyBvZiB0aGUgTHVhIDUuMi81LjMgQVBJIHNvIHRoYXQgcHJvZ3JhbXMgY2FuIGJlIHdyaXR0ZW4gYWdhaW5zdCBpdAogICAgbG9jYWwgdHlwZSA9IHR5cGUKICAgIGxvY2FsIG5hdGl2ZWxvYWQgPSBsb2FkCiAgICBsb2NhbCBuYXRpdmVsb2Fkc3RyaW5nID0gbG9hZHN0cmluZwogICAgbG9jYWwgbmF0aXZlc2V0ZmVudiA9IHNldGZlbnYKCiAgICBmdW5jdGlvbiBsb2FkKHgsIG5hbWUsIG1vZGUsIGVudikKICAgICAgICBleHBlY3QoMSwgeCwgImZ1bmN0aW9uIiwgInN0cmluZyIpCiAgICAgICAgZXhwZWN0KDIsIG5hbWUsICJzdHJpbmciLCAibmlsIikKICAgICAgICBleHBlY3QoMywgbW9kZSwgInN0cmluZyIsICJuaWwiKQogICAgICAgIGV4cGVjdCg0LCBlbnYsICJ0YWJsZSIsICJuaWwiKQoKICAgICAgICBsb2NhbCBvaywgcDEsIHAyID0gcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICBpZiB0eXBlKHgpID09ICJzdHJpbmciIHRoZW4KICAgICAgICAgICAgICAgIGxvY2FsIHJlc3VsdCwgZXJyID0gbmF0aXZlbG9hZHN0cmluZyh4LCBuYW1lKQogICAgICAgICAgICAgICAgaWYgcmVzdWx0IHRoZW4KICAgICAgICAgICAgICAgICAgICBpZiBlbnYgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBlbnYuX0VOViA9IGVudgogICAgICAgICAgICAgICAgICAgICAgICBuYXRpdmVzZXRmZW52KHJlc3VsdCwgZW52KQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmlsLCBlcnIKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBsb2NhbCByZXN1bHQsIGVyciA9IG5hdGl2ZWxvYWQoeCwgbmFtZSkKICAgICAgICAgICAgICAgIGlmIHJlc3VsdCB0aGVuCiAgICAgICAgICAgICAgICAgICAgaWYgZW52IHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgZW52Ll9FTlYgPSBlbnYKICAgICAgICAgICAgICAgICAgICAgICAgbmF0aXZlc2V0ZmVudihyZXN1bHQsIGVudikKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0CiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5pbCwgZXJyCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kKQogICAgICAgIGlmIG9rIHRoZW4KICAgICAgICAgICAgcmV0dXJuIHAxLCBwMgogICAgICAgIGVsc2UKICAgICAgICAgICAgZXJyb3IocDEsIDIpCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICBpZiBfQ0NfRElTQUJMRV9MVUE1MV9GRUFUVVJFUyB0aGVuCiAgICAgICAgLS0gUmVtb3ZlIHRoZSBMdWEgNS4xIGZlYXR1cmVzIHRoYXQgd2lsbCBiZSByZW1vdmVkIHdoZW4gd2UgdXBkYXRlIHRvIEx1YSA1LjIsIGZvciBjb21wYXRpYmlsaXR5IHRlc3RpbmcuCiAgICAgICAgLS0gU2VlICJkaXNhYmxlX2x1YTUxX2Z1bmN0aW9ucyIgaW4gQ29tcHV0ZXJDcmFmdC5jZmcKICAgICAgICBzZXRmZW52ID0gbmlsCiAgICAgICAgZ2V0ZmVudiA9IG5pbAogICAgICAgIGxvYWRzdHJpbmcgPSBuaWwKICAgICAgICB1bnBhY2sgPSBuaWwKICAgICAgICBtYXRoLmxvZzEwID0gbmlsCiAgICAgICAgdGFibGUubWF4biA9IG5pbAogICAgZWxzZQogICAgICAgIGxvYWRzdHJpbmcgPSBmdW5jdGlvbihzdHJpbmcsIGNodW5rbmFtZSkgcmV0dXJuIG5hdGl2ZWxvYWRzdHJpbmcoc3RyaW5nLCBwcmVmaXgoY2h1bmtuYW1lKSkgZW5kCgogICAgICAgIC0tIEluamVjdCBhIHN0dWIgZm9yIHRoZSBvbGQgYml0IGxpYnJhcnkKICAgICAgICBfRy5iaXQgPSB7CiAgICAgICAgICAgIGJub3QgPSBiaXQzMi5ibm90LAogICAgICAgICAgICBiYW5kID0gYml0MzIuYmFuZCwKICAgICAgICAgICAgYm9yID0gYml0MzIuYm9yLAogICAgICAgICAgICBieG9yID0gYml0MzIuYnhvciwKICAgICAgICAgICAgYnJzaGlmdCA9IGJpdDMyLmFyc2hpZnQsCiAgICAgICAgICAgIGJsc2hpZnQgPSBiaXQzMi5sc2hpZnQsCiAgICAgICAgICAgIGJsb2dpY19yc2hpZnQgPSBiaXQzMi5yc2hpZnQsCiAgICAgICAgfQogICAgZW5kCmVsc2VpZiBub3QgX0NDX0RJU0FCTEVfTFVBNTFfRkVBVFVSRVMgdGhlbgogICAgLS0gUmVzdG9yZSBvbGQgTHVhIDUuMSBmdW5jdGlvbnMgZm9yIGNvbXBhdGliaWxpdHkKICAgIC0tIHNldGZlbnYvZ2V0ZmVudiByZXBsYWNlbWVudHMgZnJvbSBodHRwczovL2xlYWZvLm5ldC9ndWlkZXMvc2V0ZmVudi1pbi1sdWE1Mi1hbmQtYWJvdmUuaHRtbAogICAgZnVuY3Rpb24gc2V0ZmVudihmbiwgZW52KQogICAgICAgIGlmIG5vdCBkZWJ1ZyB0aGVuIGVycm9yKCJjb3VsZCBub3Qgc2V0IGVudmlyb25tZW50IiwgMikgZW5kCiAgICAgICAgbG9jYWwgaSA9IDEKICAgICAgICB3aGlsZSB0cnVlIGRvCiAgICAgICAgICAgIGxvY2FsIG5hbWUgPSBkZWJ1Zy5nZXR1cHZhbHVlKGZuLCBpKQogICAgICAgICAgICBpZiBuYW1lID09ICJfRU5WIiB0aGVuCiAgICAgICAgICAgICAgICBkZWJ1Zy51cHZhbHVlam9pbihmbiwgaSwgKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW52CiAgICAgICAgICAgICAgICBlbmQpLCAxKQogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgZWxzZWlmIG5vdCBuYW1lIHRoZW4KICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgaSA9IGkgKyAxCiAgICAgICAgZW5kCgogICAgICAgIHJldHVybiBmbgogICAgZW5kCgogICAgZnVuY3Rpb24gZ2V0ZmVudihmbikKICAgICAgICBsb2NhbCBpID0gMQogICAgICAgIHdoaWxlIHRydWUgZG8KICAgICAgICAgICAgbG9jYWwgbmFtZSwgdmFsID0gZGVidWcuZ2V0dXB2YWx1ZShmbiwgaSkKICAgICAgICAgICAgaWYgbmFtZSA9PSAiX0VOViIgdGhlbgogICAgICAgICAgICAgICAgcmV0dXJuIHZhbAogICAgICAgICAgICBlbHNlaWYgbm90IG5hbWUgdGhlbgogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGkgPSBpICsgMQogICAgICAgIGVuZAogICAgZW5kCgogICAgZnVuY3Rpb24gdGFibGUubWF4bih0YWIpCiAgICAgICAgbG9jYWwgbnVtID0gMAogICAgICAgIGZvciBrIGluIHBhaXJzKHRhYikgZG8KICAgICAgICAgICAgaWYgdHlwZShrKSA9PSAibnVtYmVyIiBhbmQgayA+IG51bSB0aGVuCiAgICAgICAgICAgICAgICBudW0gPSBrCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgICAgIHJldHVybiBudW0KICAgIGVuZAoKICAgIG1hdGgubG9nMTAgPSBmdW5jdGlvbih4KSByZXR1cm4gbWF0aC5sb2coeCwgMTApIGVuZAogICAgbG9hZHN0cmluZyA9IGZ1bmN0aW9uKHN0cmluZywgY2h1bmtuYW1lKSByZXR1cm4gbG9hZChzdHJpbmcsIHByZWZpeChjaHVua25hbWUpKSBlbmQKICAgIHVucGFjayA9IHRhYmxlLnVucGFjawoKICAgIC0tIEluamVjdCBhIHN0dWIgZm9yIHRoZSBvbGQgYml0IGxpYnJhcnkKICAgIF9HLmJpdCA9IHsKICAgICAgICBibm90ID0gYml0MzIuYm5vdCwKICAgICAgICBiYW5kID0gYml0MzIuYmFuZCwKICAgICAgICBib3IgPSBiaXQzMi5ib3IsCiAgICAgICAgYnhvciA9IGJpdDMyLmJ4b3IsCiAgICAgICAgYnJzaGlmdCA9IGJpdDMyLmFyc2hpZnQsCiAgICAgICAgYmxzaGlmdCA9IGJpdDMyLmxzaGlmdCwKICAgICAgICBibG9naWNfcnNoaWZ0ID0gYml0MzIucnNoaWZ0LAogICAgfQplbmQKCi0tIEluc3RhbGwgbHVhIHBhcnRzIG9mIHRoZSBvcyBhcGkKZnVuY3Rpb24gb3MudmVyc2lvbigpCiAgICByZXR1cm4gIkNyYWZ0T1MgMS44IgplbmQKCmZ1bmN0aW9uIG9zLnB1bGxFdmVudFJhdyhzRmlsdGVyKQogICAgcmV0dXJuIGNvcm91dGluZS55aWVsZChzRmlsdGVyKQplbmQKCmZ1bmN0aW9uIG9zLnB1bGxFdmVudChzRmlsdGVyKQogICAgbG9jYWwgZXZlbnREYXRhID0gdGFibGUucGFjayhvcy5wdWxsRXZlbnRSYXcoc0ZpbHRlcikpCiAgICBpZiBldmVudERhdGFbMV0gPT0gInRlcm1pbmF0ZSIgdGhlbgogICAgICAgIGVycm9yKCJUZXJtaW5hdGVkIiwgMCkKICAgIGVuZAogICAgcmV0dXJuIHRhYmxlLnVucGFjayhldmVudERhdGEsIDEsIGV2ZW50RGF0YS5uKQplbmQKCi0tIEluc3RhbGwgZ2xvYmFscwpmdW5jdGlvbiBzbGVlcChuVGltZSkKICAgIGV4cGVjdCgxLCBuVGltZSwgIm51bWJlciIsICJuaWwiKQogICAgbG9jYWwgdGltZXIgPSBvcy5zdGFydFRpbWVyKG5UaW1lIG9yIDApCiAgICByZXBlYXQKICAgICAgICBsb2NhbCBfLCBwYXJhbSA9IG9zLnB1bGxFdmVudCgidGltZXIiKQogICAgdW50aWwgcGFyYW0gPT0gdGltZXIKZW5kCgpmdW5jdGlvbiB3cml0ZShzVGV4dCkKICAgIGV4cGVjdCgxLCBzVGV4dCwgInN0cmluZyIsICJudW1iZXIiKQoKICAgIGxvY2FsIHcsIGggPSB0ZXJtLmdldFNpemUoKQogICAgbG9jYWwgeCwgeSA9IHRlcm0uZ2V0Q3Vyc29yUG9zKCkKCiAgICBsb2NhbCBuTGluZXNQcmludGVkID0gMAogICAgbG9jYWwgZnVuY3Rpb24gbmV3TGluZSgpCiAgICAgICAgaWYgeSArIDEgPD0gaCB0aGVuCiAgICAgICAgICAgIHRlcm0uc2V0Q3Vyc29yUG9zKDEsIHkgKyAxKQogICAgICAgIGVsc2UKICAgICAgICAgICAgdGVybS5zZXRDdXJzb3JQb3MoMSwgaCkKICAgICAgICAgICAgdGVybS5zY3JvbGwoMSkKICAgICAgICBlbmQKICAgICAgICB4LCB5ID0gdGVybS5nZXRDdXJzb3JQb3MoKQogICAgICAgIG5MaW5lc1ByaW50ZWQgPSBuTGluZXNQcmludGVkICsgMQogICAgZW5kCgogICAgLS0gUHJpbnQgdGhlIGxpbmUgd2l0aCBwcm9wZXIgd29yZCB3cmFwcGluZwogICAgc1RleHQgPSB0b3N0cmluZyhzVGV4dCkKICAgIHdoaWxlICNzVGV4dCA+IDAgZG8KICAgICAgICBsb2NhbCB3aGl0ZXNwYWNlID0gc3RyaW5nLm1hdGNoKHNUZXh0LCAiXlsgXHRdKyIpCiAgICAgICAgaWYgd2hpdGVzcGFjZSB0aGVuCiAgICAgICAgICAgIC0tIFByaW50IHdoaXRlc3BhY2UKICAgICAgICAgICAgdGVybS53cml0ZSh3aGl0ZXNwYWNlKQogICAgICAgICAgICB4LCB5ID0gdGVybS5nZXRDdXJzb3JQb3MoKQogICAgICAgICAgICBzVGV4dCA9IHN0cmluZy5zdWIoc1RleHQsICN3aGl0ZXNwYWNlICsgMSkKICAgICAgICBlbmQKCiAgICAgICAgbG9jYWwgbmV3bGluZSA9IHN0cmluZy5tYXRjaChzVGV4dCwgIl5cbiIpCiAgICAgICAgaWYgbmV3bGluZSB0aGVuCiAgICAgICAgICAgIC0tIFByaW50IG5ld2xpbmVzCiAgICAgICAgICAgIG5ld0xpbmUoKQogICAgICAgICAgICBzVGV4dCA9IHN0cmluZy5zdWIoc1RleHQsIDIpCiAgICAgICAgZW5kCgogICAgICAgIGxvY2FsIHRleHQgPSBzdHJpbmcubWF0Y2goc1RleHQsICJeW14gXHRcbl0rIikKICAgICAgICBpZiB0ZXh0IHRoZW4KICAgICAgICAgICAgc1RleHQgPSBzdHJpbmcuc3ViKHNUZXh0LCAjdGV4dCArIDEpCiAgICAgICAgICAgIGlmICN0ZXh0ID4gdyB0aGVuCiAgICAgICAgICAgICAgICAtLSBQcmludCBhIG11bHRpbGluZSB3b3JkCiAgICAgICAgICAgICAgICB3aGlsZSAjdGV4dCA+IDAgZG8KICAgICAgICAgICAgICAgICAgICBpZiB4ID4gdyB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0xpbmUoKQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIHRlcm0ud3JpdGUodGV4dCkKICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gc3RyaW5nLnN1Yih0ZXh0LCB3IC0geCArIDIpCiAgICAgICAgICAgICAgICAgICAgeCwgeSA9IHRlcm0uZ2V0Q3Vyc29yUG9zKCkKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAtLSBQcmludCBhIHdvcmQgbm9ybWFsbHkKICAgICAgICAgICAgICAgIGlmIHggKyAjdGV4dCAtIDEgPiB3IHRoZW4KICAgICAgICAgICAgICAgICAgICBuZXdMaW5lKCkKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgdGVybS53cml0ZSh0ZXh0KQogICAgICAgICAgICAgICAgeCwgeSA9IHRlcm0uZ2V0Q3Vyc29yUG9zKCkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICByZXR1cm4gbkxpbmVzUHJpbnRlZAplbmQKCmZ1bmN0aW9uIHByaW50KC4uLikKICAgIGxvY2FsIG5MaW5lc1ByaW50ZWQgPSAwCiAgICBsb2NhbCBuTGltaXQgPSBzZWxlY3QoIiMiLCAuLi4pCiAgICBmb3IgbiA9IDEsIG5MaW1pdCBkbwogICAgICAgIGxvY2FsIHMgPSB0b3N0cmluZyhzZWxlY3QobiwgLi4uKSkKICAgICAgICBpZiBuIDwgbkxpbWl0IHRoZW4KICAgICAgICAgICAgcyA9IHMgLi4gIlx0IgogICAgICAgIGVuZAogICAgICAgIG5MaW5lc1ByaW50ZWQgPSBuTGluZXNQcmludGVkICsgd3JpdGUocykKICAgIGVuZAogICAgbkxpbmVzUHJpbnRlZCA9IG5MaW5lc1ByaW50ZWQgKyB3cml0ZSgiXG4iKQogICAgcmV0dXJuIG5MaW5lc1ByaW50ZWQKZW5kCgpmdW5jdGlvbiBwcmludEVycm9yKC4uLikKICAgIGxvY2FsIG9sZENvbG91cgogICAgaWYgdGVybS5pc0NvbG91cigpIHRoZW4KICAgICAgICBvbGRDb2xvdXIgPSB0ZXJtLmdldFRleHRDb2xvdXIoKQogICAgICAgIHRlcm0uc2V0VGV4dENvbG91cihjb2xvcnMucmVkKQogICAgZW5kCiAgICBwcmludCguLi4pCiAgICBpZiB0ZXJtLmlzQ29sb3VyKCkgdGhlbgogICAgICAgIHRlcm0uc2V0VGV4dENvbG91cihvbGRDb2xvdXIpCiAgICBlbmQKZW5kCgotLVtbIEx1YSA1LjQhISEKZnVuY3Rpb24gcHJpbnRXYXJuaW5nKC4uLikKICAgIGxvY2FsIG9sZENvbG91cgogICAgaWYgdGVybS5pc0NvbG91cigpIHRoZW4KICAgICAgICBvbGRDb2xvdXIgPSB0ZXJtLmdldFRleHRDb2xvdXIoKQogICAgICAgIHRlcm0uc2V0VGV4dENvbG91cihjb2xvcnMueWVsbG93KQogICAgZW5kCiAgICBwcmludCguLi4pCiAgICBpZiB0ZXJtLmlzQ29sb3VyKCkgdGhlbgogICAgICAgIHRlcm0uc2V0VGV4dENvbG91cihvbGRDb2xvdXIpCiAgICBlbmQKZW5kCi0tXV0KCmZ1bmN0aW9uIHJlYWQoX3NSZXBsYWNlQ2hhciwgX3RIaXN0b3J5LCBfZm5Db21wbGV0ZSwgX3NEZWZhdWx0KQogICAgZXhwZWN0KDEsIF9zUmVwbGFjZUNoYXIsICJzdHJpbmciLCAibmlsIikKICAgIGV4cGVjdCgyLCBfdEhpc3RvcnksICJ0YWJsZSIsICJuaWwiKQogICAgZXhwZWN0KDMsIF9mbkNvbXBsZXRlLCAiZnVuY3Rpb24iLCAibmlsIikKICAgIGV4cGVjdCg0LCBfc0RlZmF1bHQsICJzdHJpbmciLCAibmlsIikKCiAgICB0ZXJtLnNldEN1cnNvckJsaW5rKHRydWUpCgogICAgbG9jYWwgc0xpbmUKICAgIGlmIHR5cGUoX3NEZWZhdWx0KSA9PSAic3RyaW5nIiB0aGVuCiAgICAgICAgc0xpbmUgPSBfc0RlZmF1bHQKICAgIGVsc2UKICAgICAgICBzTGluZSA9ICIiCiAgICBlbmQKICAgIGxvY2FsIG5IaXN0b3J5UG9zCiAgICBsb2NhbCBuUG9zLCBuU2Nyb2xsID0gI3NMaW5lLCAwCiAgICBpZiBfc1JlcGxhY2VDaGFyIHRoZW4KICAgICAgICBfc1JlcGxhY2VDaGFyID0gc3RyaW5nLnN1Yihfc1JlcGxhY2VDaGFyLCAxLCAxKQogICAgZW5kCgogICAgbG9jYWwgdENvbXBsZXRpb25zCiAgICBsb2NhbCBuQ29tcGxldGlvbgogICAgbG9jYWwgZnVuY3Rpb24gcmVjb21wbGV0ZSgpCiAgICAgICAgaWYgX2ZuQ29tcGxldGUgYW5kIG5Qb3MgPT0gI3NMaW5lIHRoZW4KICAgICAgICAgICAgdENvbXBsZXRpb25zID0gX2ZuQ29tcGxldGUoc0xpbmUpCiAgICAgICAgICAgIGlmIHRDb21wbGV0aW9ucyBhbmQgI3RDb21wbGV0aW9ucyA+IDAgdGhlbgogICAgICAgICAgICAgICAgbkNvbXBsZXRpb24gPSAxCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIG5Db21wbGV0aW9uID0gbmlsCiAgICAgICAgICAgIGVuZAogICAgICAgIGVsc2UKICAgICAgICAgICAgdENvbXBsZXRpb25zID0gbmlsCiAgICAgICAgICAgIG5Db21wbGV0aW9uID0gbmlsCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICBsb2NhbCBmdW5jdGlvbiB1bmNvbXBsZXRlKCkKICAgICAgICB0Q29tcGxldGlvbnMgPSBuaWwKICAgICAgICBuQ29tcGxldGlvbiA9IG5pbAogICAgZW5kCgogICAgbG9jYWwgdyA9IHRlcm0uZ2V0U2l6ZSgpCiAgICBsb2NhbCBzeCA9IHRlcm0uZ2V0Q3Vyc29yUG9zKCkKCiAgICBsb2NhbCBmdW5jdGlvbiByZWRyYXcoX2JDbGVhcikKICAgICAgICBsb2NhbCBjdXJzb3JfcG9zID0gblBvcyAtIG5TY3JvbGwKICAgICAgICBpZiBzeCArIGN1cnNvcl9wb3MgPj0gdyB0aGVuCiAgICAgICAgICAgIC0tIFdlJ3ZlIG1vdmVkIGJleW9uZCB0aGUgUkhTLCBlbnN1cmUgd2UncmUgb24gdGhlIGVkZ2UuCiAgICAgICAgICAgIG5TY3JvbGwgPSBzeCArIG5Qb3MgLSB3CiAgICAgICAgZWxzZWlmIGN1cnNvcl9wb3MgPCAwIHRoZW4KICAgICAgICAgICAgLS0gV2UndmUgbW92ZWQgYmV5b25kIHRoZSBMSFMsIGVuc3VyZSB3ZSdyZSBvbiB0aGUgZWRnZS4KICAgICAgICAgICAgblNjcm9sbCA9IG5Qb3MKICAgICAgICBlbmQKCiAgICAgICAgbG9jYWwgXywgY3kgPSB0ZXJtLmdldEN1cnNvclBvcygpCiAgICAgICAgdGVybS5zZXRDdXJzb3JQb3Moc3gsIGN5KQogICAgICAgIGxvY2FsIHNSZXBsYWNlID0gX2JDbGVhciBhbmQgIiAiIG9yIF9zUmVwbGFjZUNoYXIKICAgICAgICBpZiBzUmVwbGFjZSB0aGVuCiAgICAgICAgICAgIHRlcm0ud3JpdGUoc3RyaW5nLnJlcChzUmVwbGFjZSwgbWF0aC5tYXgoI3NMaW5lIC0gblNjcm9sbCwgMCkpKQogICAgICAgIGVsc2UKICAgICAgICAgICAgdGVybS53cml0ZShzdHJpbmcuc3ViKHNMaW5lLCBuU2Nyb2xsICsgMSkpCiAgICAgICAgZW5kCgogICAgICAgIGlmIG5Db21wbGV0aW9uIHRoZW4KICAgICAgICAgICAgbG9jYWwgc0NvbXBsZXRpb24gPSB0Q29tcGxldGlvbnNbbkNvbXBsZXRpb25dCiAgICAgICAgICAgIGxvY2FsIG9sZFRleHQsIG9sZEJnCiAgICAgICAgICAgIGlmIG5vdCBfYkNsZWFyIHRoZW4KICAgICAgICAgICAgICAgIG9sZFRleHQgPSB0ZXJtLmdldFRleHRDb2xvcigpCiAgICAgICAgICAgICAgICBvbGRCZyA9IHRlcm0uZ2V0QmFja2dyb3VuZENvbG9yKCkKICAgICAgICAgICAgICAgIHRlcm0uc2V0VGV4dENvbG9yKGNvbG9ycy53aGl0ZSkKICAgICAgICAgICAgICAgIHRlcm0uc2V0QmFja2dyb3VuZENvbG9yKGNvbG9ycy5ncmF5KQogICAgICAgICAgICBlbmQKICAgICAgICAgICAgaWYgc1JlcGxhY2UgdGhlbgogICAgICAgICAgICAgICAgdGVybS53cml0ZShzdHJpbmcucmVwKHNSZXBsYWNlLCAjc0NvbXBsZXRpb24pKQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICB0ZXJtLndyaXRlKHNDb21wbGV0aW9uKQogICAgICAgICAgICBlbmQKICAgICAgICAgICAgaWYgbm90IF9iQ2xlYXIgdGhlbgogICAgICAgICAgICAgICAgdGVybS5zZXRUZXh0Q29sb3Iob2xkVGV4dCkKICAgICAgICAgICAgICAgIHRlcm0uc2V0QmFja2dyb3VuZENvbG9yKG9sZEJnKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKCiAgICAgICAgdGVybS5zZXRDdXJzb3JQb3Moc3ggKyBuUG9zIC0gblNjcm9sbCwgY3kpCiAgICBlbmQKCiAgICBsb2NhbCBmdW5jdGlvbiBjbGVhcigpCiAgICAgICAgcmVkcmF3KHRydWUpCiAgICBlbmQKCiAgICByZWNvbXBsZXRlKCkKICAgIHJlZHJhdygpCgogICAgbG9jYWwgZnVuY3Rpb24gYWNjZXB0Q29tcGxldGlvbigpCiAgICAgICAgaWYgbkNvbXBsZXRpb24gdGhlbgogICAgICAgICAgICAtLSBDbGVhcgogICAgICAgICAgICBjbGVhcigpCgogICAgICAgICAgICAtLSBGaW5kIHRoZSBjb21tb24gcHJlZml4IG9mIGFsbCB0aGUgb3RoZXIgc3VnZ2VzdGlvbnMgd2hpY2ggc3RhcnQgd2l0aCB0aGUgc2FtZSBsZXR0ZXIgYXMgdGhlIGN1cnJlbnQgb25lCiAgICAgICAgICAgIGxvY2FsIHNDb21wbGV0aW9uID0gdENvbXBsZXRpb25zW25Db21wbGV0aW9uXQogICAgICAgICAgICBzTGluZSA9IHNMaW5lIC4uIHNDb21wbGV0aW9uCiAgICAgICAgICAgIG5Qb3MgPSAjc0xpbmUKCiAgICAgICAgICAgIC0tIFJlZHJhdwogICAgICAgICAgICByZWNvbXBsZXRlKCkKICAgICAgICAgICAgcmVkcmF3KCkKICAgICAgICBlbmQKICAgIGVuZAogICAgd2hpbGUgdHJ1ZSBkbwogICAgICAgIGxvY2FsIHNFdmVudCwgcGFyYW0sIHBhcmFtMSwgcGFyYW0yID0gb3MucHVsbEV2ZW50KCkKICAgICAgICBpZiBzRXZlbnQgPT0gImNoYXIiIHRoZW4KICAgICAgICAgICAgLS0gVHlwZWQga2V5CiAgICAgICAgICAgIGNsZWFyKCkKICAgICAgICAgICAgc0xpbmUgPSBzdHJpbmcuc3ViKHNMaW5lLCAxLCBuUG9zKSAuLiBwYXJhbSAuLiBzdHJpbmcuc3ViKHNMaW5lLCBuUG9zICsgMSkKICAgICAgICAgICAgblBvcyA9IG5Qb3MgKyAxCiAgICAgICAgICAgIHJlY29tcGxldGUoKQogICAgICAgICAgICByZWRyYXcoKQoKICAgICAgICBlbHNlaWYgc0V2ZW50ID09ICJwYXN0ZSIgdGhlbgogICAgICAgICAgICAtLSBQYXN0ZWQgdGV4dAogICAgICAgICAgICBjbGVhcigpCiAgICAgICAgICAgIHNMaW5lID0gc3RyaW5nLnN1YihzTGluZSwgMSwgblBvcykgLi4gcGFyYW0gLi4gc3RyaW5nLnN1YihzTGluZSwgblBvcyArIDEpCiAgICAgICAgICAgIG5Qb3MgPSBuUG9zICsgI3BhcmFtCiAgICAgICAgICAgIHJlY29tcGxldGUoKQogICAgICAgICAgICByZWRyYXcoKQoKICAgICAgICBlbHNlaWYgc0V2ZW50ID09ICJrZXkiIHRoZW4KICAgICAgICAgICAgaWYgcGFyYW0gPT0ga2V5cy5lbnRlciBvciBwYXJhbSA9PSBrZXlzLm51bVBhZEVudGVyIHRoZW4KICAgICAgICAgICAgICAgIC0tIEVudGVyL051bXBhZCBFbnRlcgogICAgICAgICAgICAgICAgaWYgbkNvbXBsZXRpb24gdGhlbgogICAgICAgICAgICAgICAgICAgIGNsZWFyKCkKICAgICAgICAgICAgICAgICAgICB1bmNvbXBsZXRlKCkKICAgICAgICAgICAgICAgICAgICByZWRyYXcoKQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBicmVhawoKICAgICAgICAgICAgZWxzZWlmIHBhcmFtID09IGtleXMubGVmdCB0aGVuCiAgICAgICAgICAgICAgICAtLSBMZWZ0CiAgICAgICAgICAgICAgICBpZiBuUG9zID4gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgY2xlYXIoKQogICAgICAgICAgICAgICAgICAgIG5Qb3MgPSBuUG9zIC0gMQogICAgICAgICAgICAgICAgICAgIHJlY29tcGxldGUoKQogICAgICAgICAgICAgICAgICAgIHJlZHJhdygpCiAgICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgIGVsc2VpZiBwYXJhbSA9PSBrZXlzLnJpZ2h0IHRoZW4KICAgICAgICAgICAgICAgIC0tIFJpZ2h0CiAgICAgICAgICAgICAgICBpZiBuUG9zIDwgI3NMaW5lIHRoZW4KICAgICAgICAgICAgICAgICAgICAtLSBNb3ZlIHJpZ2h0CiAgICAgICAgICAgICAgICAgICAgY2xlYXIoKQogICAgICAgICAgICAgICAgICAgIG5Qb3MgPSBuUG9zICsgMQogICAgICAgICAgICAgICAgICAgIHJlY29tcGxldGUoKQogICAgICAgICAgICAgICAgICAgIHJlZHJhdygpCiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgLS0gQWNjZXB0IGF1dG9jb21wbGV0ZQogICAgICAgICAgICAgICAgICAgIGFjY2VwdENvbXBsZXRpb24oKQogICAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICBlbHNlaWYgcGFyYW0gPT0ga2V5cy51cCBvciBwYXJhbSA9PSBrZXlzLmRvd24gdGhlbgogICAgICAgICAgICAgICAgLS0gVXAgb3IgZG93bgogICAgICAgICAgICAgICAgaWYgbkNvbXBsZXRpb24gdGhlbgogICAgICAgICAgICAgICAgICAgIC0tIEN5Y2xlIGNvbXBsZXRpb25zCiAgICAgICAgICAgICAgICAgICAgY2xlYXIoKQogICAgICAgICAgICAgICAgICAgIGlmIHBhcmFtID09IGtleXMudXAgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBuQ29tcGxldGlvbiA9IG5Db21wbGV0aW9uIC0gMQogICAgICAgICAgICAgICAgICAgICAgICBpZiBuQ29tcGxldGlvbiA8IDEgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbkNvbXBsZXRpb24gPSAjdENvbXBsZXRpb25zCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVsc2VpZiBwYXJhbSA9PSBrZXlzLmRvd24gdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBuQ29tcGxldGlvbiA9IG5Db21wbGV0aW9uICsgMQogICAgICAgICAgICAgICAgICAgICAgICBpZiBuQ29tcGxldGlvbiA+ICN0Q29tcGxldGlvbnMgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbkNvbXBsZXRpb24gPSAxCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIHJlZHJhdygpCgogICAgICAgICAgICAgICAgZWxzZWlmIF90SGlzdG9yeSB0aGVuCiAgICAgICAgICAgICAgICAgICAgLS0gQ3ljbGUgaGlzdG9yeQogICAgICAgICAgICAgICAgICAgIGNsZWFyKCkKICAgICAgICAgICAgICAgICAgICBpZiBwYXJhbSA9PSBrZXlzLnVwIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgLS0gVXAKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbkhpc3RvcnlQb3MgPT0gbmlsIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICNfdEhpc3RvcnkgPiAwIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuSGlzdG9yeVBvcyA9ICNfdEhpc3RvcnkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBlbHNlaWYgbkhpc3RvcnlQb3MgPiAxIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5IaXN0b3J5UG9zID0gbkhpc3RvcnlQb3MgLSAxCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgLS0gRG93bgogICAgICAgICAgICAgICAgICAgICAgICBpZiBuSGlzdG9yeVBvcyA9PSAjX3RIaXN0b3J5IHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5IaXN0b3J5UG9zID0gbmlsCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VpZiBuSGlzdG9yeVBvcyB+PSBuaWwgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbkhpc3RvcnlQb3MgPSBuSGlzdG9yeVBvcyArIDEKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgaWYgbkhpc3RvcnlQb3MgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBzTGluZSA9IF90SGlzdG9yeVtuSGlzdG9yeVBvc10KICAgICAgICAgICAgICAgICAgICAgICAgblBvcywgblNjcm9sbCA9ICNzTGluZSwgMAogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgc0xpbmUgPSAiIgogICAgICAgICAgICAgICAgICAgICAgICBuUG9zLCBuU2Nyb2xsID0gMCwgMAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIHVuY29tcGxldGUoKQogICAgICAgICAgICAgICAgICAgIHJlZHJhdygpCgogICAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICBlbHNlaWYgcGFyYW0gPT0ga2V5cy5iYWNrc3BhY2UgdGhlbgogICAgICAgICAgICAgICAgLS0gQmFja3NwYWNlCiAgICAgICAgICAgICAgICBpZiBuUG9zID4gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgY2xlYXIoKQogICAgICAgICAgICAgICAgICAgIHNMaW5lID0gc3RyaW5nLnN1YihzTGluZSwgMSwgblBvcyAtIDEpIC4uIHN0cmluZy5zdWIoc0xpbmUsIG5Qb3MgKyAxKQogICAgICAgICAgICAgICAgICAgIG5Qb3MgPSBuUG9zIC0gMQogICAgICAgICAgICAgICAgICAgIGlmIG5TY3JvbGwgPiAwIHRoZW4gblNjcm9sbCA9IG5TY3JvbGwgLSAxIGVuZAogICAgICAgICAgICAgICAgICAgIHJlY29tcGxldGUoKQogICAgICAgICAgICAgICAgICAgIHJlZHJhdygpCiAgICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgIGVsc2VpZiBwYXJhbSA9PSBrZXlzLmhvbWUgdGhlbgogICAgICAgICAgICAgICAgLS0gSG9tZQogICAgICAgICAgICAgICAgaWYgblBvcyA+IDAgdGhlbgogICAgICAgICAgICAgICAgICAgIGNsZWFyKCkKICAgICAgICAgICAgICAgICAgICBuUG9zID0gMAogICAgICAgICAgICAgICAgICAgIHJlY29tcGxldGUoKQogICAgICAgICAgICAgICAgICAgIHJlZHJhdygpCiAgICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgIGVsc2VpZiBwYXJhbSA9PSBrZXlzLmRlbGV0ZSB0aGVuCiAgICAgICAgICAgICAgICAtLSBEZWxldGUKICAgICAgICAgICAgICAgIGlmIG5Qb3MgPCAjc0xpbmUgdGhlbgogICAgICAgICAgICAgICAgICAgIGNsZWFyKCkKICAgICAgICAgICAgICAgICAgICBzTGluZSA9IHN0cmluZy5zdWIoc0xpbmUsIDEsIG5Qb3MpIC4uIHN0cmluZy5zdWIoc0xpbmUsIG5Qb3MgKyAyKQogICAgICAgICAgICAgICAgICAgIHJlY29tcGxldGUoKQogICAgICAgICAgICAgICAgICAgIHJlZHJhdygpCiAgICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgIGVsc2VpZiBwYXJhbSA9PSBrZXlzWyJlbmQiXSB0aGVuCiAgICAgICAgICAgICAgICAtLSBFbmQKICAgICAgICAgICAgICAgIGlmIG5Qb3MgPCAjc0xpbmUgdGhlbgogICAgICAgICAgICAgICAgICAgIGNsZWFyKCkKICAgICAgICAgICAgICAgICAgICBuUG9zID0gI3NMaW5lCiAgICAgICAgICAgICAgICAgICAgcmVjb21wbGV0ZSgpCiAgICAgICAgICAgICAgICAgICAgcmVkcmF3KCkKICAgICAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgZWxzZWlmIHBhcmFtID09IGtleXMudGFiIHRoZW4KICAgICAgICAgICAgICAgIC0tIFRhYiAoYWNjZXB0IGF1dG9jb21wbGV0ZSkKICAgICAgICAgICAgICAgIGFjY2VwdENvbXBsZXRpb24oKQoKICAgICAgICAgICAgZW5kCgogICAgICAgIGVsc2VpZiBzRXZlbnQgPT0gIm1vdXNlX2NsaWNrIiBvciBzRXZlbnQgPT0gIm1vdXNlX2RyYWciIGFuZCBwYXJhbSA9PSAxIHRoZW4KICAgICAgICAgICAgbG9jYWwgXywgY3kgPSB0ZXJtLmdldEN1cnNvclBvcygpCiAgICAgICAgICAgIGlmIHBhcmFtMSA+PSBzeCBhbmQgcGFyYW0xIDw9IHcgYW5kIHBhcmFtMiA9PSBjeSB0aGVuCiAgICAgICAgICAgICAgICAtLSBFbnN1cmUgd2UgZG9uJ3Qgc2Nyb2xsIGJleW9uZCB0aGUgY3VycmVudCBsaW5lCiAgICAgICAgICAgICAgICBuUG9zID0gbWF0aC5taW4obWF0aC5tYXgoblNjcm9sbCArIHBhcmFtMSAtIHN4LCAwKSwgI3NMaW5lKQogICAgICAgICAgICAgICAgcmVkcmF3KCkKICAgICAgICAgICAgZW5kCgogICAgICAgIGVsc2VpZiBzRXZlbnQgPT0gInRlcm1fcmVzaXplIiB0aGVuCiAgICAgICAgICAgIC0tIFRlcm1pbmFsIHJlc2l6ZWQKICAgICAgICAgICAgdyA9IHRlcm0uZ2V0U2l6ZSgpCiAgICAgICAgICAgIHJlZHJhdygpCgogICAgICAgIGVuZAogICAgZW5kCgogICAgbG9jYWwgXywgY3kgPSB0ZXJtLmdldEN1cnNvclBvcygpCiAgICB0ZXJtLnNldEN1cnNvckJsaW5rKGZhbHNlKQogICAgdGVybS5zZXRDdXJzb3JQb3ModyArIDEsIGN5KQogICAgcHJpbnQoKQoKICAgIHJldHVybiBzTGluZQplbmQKCmZ1bmN0aW9uIGxvYWRmaWxlKGZpbGVuYW1lLCBtb2RlLCBlbnYpCiAgICAtLSBTdXBwb3J0IHRoZSBwcmV2aW91cyBgbG9hZGZpbGUoZmlsZW5hbWUsIGVudilgIGZvcm0gaW5zdGVhZC4KICAgIGlmIHR5cGUobW9kZSkgPT0gInRhYmxlIiBhbmQgZW52ID09IG5pbCB0aGVuCiAgICAgICAgbW9kZSwgZW52ID0gbmlsLCBtb2RlCiAgICBlbmQKCiAgICBleHBlY3QoMSwgZmlsZW5hbWUsICJzdHJpbmciKQogICAgZXhwZWN0KDIsIG1vZGUsICJzdHJpbmciLCAibmlsIikKICAgIGV4cGVjdCgzLCBlbnYsICJ0YWJsZSIsICJuaWwiKQoKICAgIGxvY2FsIGZpbGUgPSBmcy5vcGVuKGZpbGVuYW1lLCAiciIpCiAgICBpZiBub3QgZmlsZSB0aGVuIHJldHVybiBuaWwsICJGaWxlIG5vdCBmb3VuZCIgZW5kCgogICAgbG9jYWwgZnVuYywgZXJyID0gbG9hZChmaWxlLnJlYWRBbGwoKSwgIkAiIC4uIGZpbGVuYW1lLCBtb2RlLCBlbnYpCiAgICBmaWxlLmNsb3NlKCkKICAgIHJldHVybiBmdW5jLCBlcnIKZW5kCgpmdW5jdGlvbiBkb2ZpbGUoX3NGaWxlKQogICAgZXhwZWN0KDEsIF9zRmlsZSwgInN0cmluZyIpCgogICAgbG9jYWwgZm5GaWxlLCBlID0gbG9hZGZpbGUoX3NGaWxlLCBuaWwsIF9HKQogICAgaWYgZm5GaWxlIHRoZW4KICAgICAgICByZXR1cm4gZm5GaWxlKCkKICAgIGVsc2UKICAgICAgICBlcnJvcihlLCAyKQogICAgZW5kCmVuZAoKLS0gSW5zdGFsbCB0aGUgcmVzdCBvZiB0aGUgT1MgYXBpCmZ1bmN0aW9uIG9zLnJ1bihfdEVudiwgX3NQYXRoLCAuLi4pCiAgICBleHBlY3QoMSwgX3RFbnYsICJ0YWJsZSIpCiAgICBleHBlY3QoMiwgX3NQYXRoLCAic3RyaW5nIikKCiAgICBsb2NhbCB0RW52ID0gX3RFbnYKICAgIHNldG1ldGF0YWJsZSh0RW52LCB7IF9faW5kZXggPSBfRyB9KQoKICAgIGlmIHNldHRpbmdzLmdldCgiYmlvcy5zdHJpY3RfZ2xvYmFscyIsIGZhbHNlKSB0aGVuCiAgICAgICAgLS0gbG9hZCB3aWxsIGF0dGVtcHQgdG8gc2V0IF9FTlYgb24gdGhpcyBlbnZpcm9ubWVudCwgd2hpY2gKICAgICAgICAtLSB0aHJvd3MgYW4gZXJyb3Igd2l0aCB0aGlzIHByb3RlY3Rpb24gZW5hYmxlZC4gVGh1cyB3ZSBzZXQgaXQgaGVyZSBmaXJzdC4KICAgICAgICB0RW52Ll9FTlYgPSB0RW52CiAgICAgICAgZ2V0bWV0YXRhYmxlKHRFbnYpLl9fbmV3aW5kZXggPSBmdW5jdGlvbihfLCBuYW1lKQogICAgICAgICAgZXJyb3IoIkF0dGVtcHQgdG8gY3JlYXRlIGdsb2JhbCAiIC4uIHRvc3RyaW5nKG5hbWUpLCAyKQogICAgICAgIGVuZAogICAgZW5kCgogICAgbG9jYWwgZm5GaWxlLCBlcnIgPSBsb2FkZmlsZShfc1BhdGgsIG5pbCwgdEVudikKICAgIGlmIGZuRmlsZSB0aGVuCiAgICAgICAgbG9jYWwgb2ssIGVyciA9IHBjYWxsKGZuRmlsZSwgLi4uKQogICAgICAgIGlmIG5vdCBvayB0aGVuCiAgICAgICAgICAgIGlmIGVyciBhbmQgZXJyIH49ICIiIHRoZW4KICAgICAgICAgICAgICAgIHByaW50RXJyb3IoZXJyKQogICAgICAgICAgICBlbmQKICAgICAgICAgICAgcmV0dXJuIGZhbHNlCiAgICAgICAgZW5kCiAgICAgICAgcmV0dXJuIHRydWUKICAgIGVuZAogICAgaWYgZXJyIGFuZCBlcnIgfj0gIiIgdGhlbgogICAgICAgIHByaW50RXJyb3IoZXJyKQogICAgZW5kCiAgICByZXR1cm4gZmFsc2UKZW5kCgpsb2NhbCB0QVBJc0xvYWRpbmcgPSB7fQpmdW5jdGlvbiBvcy5sb2FkQVBJKF9zUGF0aCkKICAgIGV4cGVjdCgxLCBfc1BhdGgsICJzdHJpbmciKQogICAgbG9jYWwgc05hbWUgPSBmcy5nZXROYW1lKF9zUGF0aCkKICAgIGlmIHNOYW1lOnN1YigtNCkgPT0gIi5sdWEiIHRoZW4KICAgICAgICBzTmFtZSA9IHNOYW1lOnN1YigxLCAtNSkKICAgIGVuZAogICAgaWYgdEFQSXNMb2FkaW5nW3NOYW1lXSA9PSB0cnVlIHRoZW4KICAgICAgICBwcmludEVycm9yKCJBUEkgIiAuLiBzTmFtZSAuLiAiIGlzIGFscmVhZHkgYmVpbmcgbG9hZGVkIikKICAgICAgICByZXR1cm4gZmFsc2UKICAgIGVuZAogICAgdEFQSXNMb2FkaW5nW3NOYW1lXSA9IHRydWUKCiAgICBsb2NhbCB0RW52ID0ge30KICAgIHNldG1ldGF0YWJsZSh0RW52LCB7IF9faW5kZXggPSBfRyB9KQogICAgbG9jYWwgZm5BUEksIGVyciA9IGxvYWRmaWxlKF9zUGF0aCwgbmlsLCB0RW52KQogICAgaWYgZm5BUEkgdGhlbgogICAgICAgIGxvY2FsIG9rLCBlcnIgPSBwY2FsbChmbkFQSSkKICAgICAgICBpZiBub3Qgb2sgdGhlbgogICAgICAgICAgICB0QVBJc0xvYWRpbmdbc05hbWVdID0gbmlsCiAgICAgICAgICAgIHJldHVybiBlcnJvcigiRmFpbGVkIHRvIGxvYWQgQVBJICIgLi4gc05hbWUgLi4gIiBkdWUgdG8gIiAuLiBlcnIsIDEpCiAgICAgICAgZW5kCiAgICBlbHNlCiAgICAgICAgdEFQSXNMb2FkaW5nW3NOYW1lXSA9IG5pbAogICAgICAgIHJldHVybiBlcnJvcigiRmFpbGVkIHRvIGxvYWQgQVBJICIgLi4gc05hbWUgLi4gIiBkdWUgdG8gIiAuLiBlcnIsIDEpCiAgICBlbmQKCiAgICBsb2NhbCB0QVBJID0ge30KICAgIGZvciBrLCB2IGluIHBhaXJzKHRFbnYpIGRvCiAgICAgICAgaWYgayB+PSAiX0VOViIgdGhlbgogICAgICAgICAgICB0QVBJW2tdID0gIHYKICAgICAgICBlbmQKICAgIGVuZAoKICAgIF9HW3NOYW1lXSA9IHRBUEkKICAgIHRBUElzTG9hZGluZ1tzTmFtZV0gPSBuaWwKICAgIHJldHVybiB0cnVlCmVuZAoKZnVuY3Rpb24gb3MudW5sb2FkQVBJKF9zTmFtZSkKICAgIGV4cGVjdCgxLCBfc05hbWUsICJzdHJpbmciKQogICAgaWYgX3NOYW1lIH49ICJfRyIgYW5kIHR5cGUoX0dbX3NOYW1lXSkgPT0gInRhYmxlIiB0aGVuCiAgICAgICAgX0dbX3NOYW1lXSA9IG5pbAogICAgZW5kCmVuZAoKZnVuY3Rpb24gb3Muc2xlZXAoblRpbWUpCiAgICBzbGVlcChuVGltZSkKZW5kCgpsb2NhbCBuYXRpdmVTaHV0ZG93biA9IG9zLnNodXRkb3duCmZ1bmN0aW9uIG9zLnNodXRkb3duKC4uLikKICAgIG5hdGl2ZVNodXRkb3duKC4uLikKICAgIHdoaWxlIHRydWUgZG8KICAgICAgICBjb3JvdXRpbmUueWllbGQoKQogICAgZW5kCmVuZAoKbG9jYWwgbmF0aXZlUmVib290ID0gb3MucmVib290CmZ1bmN0aW9uIG9zLnJlYm9vdCgpCiAgICBuYXRpdmVSZWJvb3QoKQogICAgd2hpbGUgdHJ1ZSBkbwogICAgICAgIGNvcm91dGluZS55aWVsZCgpCiAgICBlbmQKZW5kCgotLSBJbnN0YWxsIHRoZSBsdWEgcGFydCBvZiB0aGUgSFRUUCBhcGkgKGlmIGVuYWJsZWQpCmlmIGh0dHAgdGhlbgogICAgbG9jYWwgbmF0aXZlSFRUUFJlcXVlc3QgPSBodHRwLnJlcXVlc3QKCiAgICBsb2NhbCBtZXRob2RzID0gewogICAgICAgIEdFVCA9IHRydWUsIFBPU1QgPSB0cnVlLCBIRUFEID0gdHJ1ZSwKICAgICAgICBPUFRJT05TID0gdHJ1ZSwgUFVUID0gdHJ1ZSwgREVMRVRFID0gdHJ1ZSwKICAgICAgICBQQVRDSCA9IHRydWUsIFRSQUNFID0gdHJ1ZSwKICAgIH0KCiAgICBsb2NhbCBmdW5jdGlvbiBjaGVja0tleShvcHRpb25zLCBrZXksIHR5LCBvcHQpCiAgICAgICAgbG9jYWwgdmFsdWUgPSBvcHRpb25zW2tleV0KICAgICAgICBsb2NhbCB2YWx1ZVR5ID0gdHlwZSh2YWx1ZSkKCiAgICAgICAgaWYgKHZhbHVlIH49IG5pbCBvciBub3Qgb3B0KSBhbmQgdmFsdWVUeSB+PSB0eSB0aGVuCiAgICAgICAgICAgIGVycm9yKCgiYmFkIGZpZWxkICclcycgKGV4cGVjdGVkICVzLCBnb3QgJXMiKTpmb3JtYXQoa2V5LCB0eSwgdmFsdWVUeSksIDQpCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICBsb2NhbCBmdW5jdGlvbiBjaGVja09wdGlvbnMob3B0aW9ucywgYm9keSkKICAgICAgICBjaGVja0tleShvcHRpb25zLCAidXJsIiwgInN0cmluZyIpCiAgICAgICAgaWYgYm9keSA9PSBmYWxzZSB0aGVuCiAgICAgICAgICBjaGVja0tleShvcHRpb25zLCAiYm9keSIsICJuaWwiKQogICAgICAgIGVsc2UKICAgICAgICAgIGNoZWNrS2V5KG9wdGlvbnMsICJib2R5IiwgInN0cmluZyIsIG5vdCBib2R5KQogICAgICAgIGVuZAogICAgICAgIGNoZWNrS2V5KG9wdGlvbnMsICJoZWFkZXJzIiwgInRhYmxlIiwgdHJ1ZSkKICAgICAgICBjaGVja0tleShvcHRpb25zLCAibWV0aG9kIiwgInN0cmluZyIsIHRydWUpCiAgICAgICAgY2hlY2tLZXkob3B0aW9ucywgInJlZGlyZWN0IiwgImJvb2xlYW4iLCB0cnVlKQoKICAgICAgICBpZiBvcHRpb25zLm1ldGhvZCBhbmQgbm90IG1ldGhvZHNbb3B0aW9ucy5tZXRob2RdIHRoZW4KICAgICAgICAgICAgZXJyb3IoIlVuc3VwcG9ydGVkIEhUVFAgbWV0aG9kIiwgMykKICAgICAgICBlbmQKICAgIGVuZAoKICAgIGxvY2FsIGZ1bmN0aW9uIHdyYXBSZXF1ZXN0KF91cmwsIC4uLikKICAgICAgICBsb2NhbCBvaywgZXJyID0gbmF0aXZlSFRUUFJlcXVlc3QoLi4uKQogICAgICAgIGlmIG9rIHRoZW4KICAgICAgICAgICAgd2hpbGUgdHJ1ZSBkbwogICAgICAgICAgICAgICAgbG9jYWwgZXZlbnQsIHBhcmFtMSwgcGFyYW0yLCBwYXJhbTMgPSBvcy5wdWxsRXZlbnQoKQogICAgICAgICAgICAgICAgaWYgZXZlbnQgPT0gImh0dHBfc3VjY2VzcyIgYW5kIHBhcmFtMSA9PSBfdXJsIHRoZW4KICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyYW0yCiAgICAgICAgICAgICAgICBlbHNlaWYgZXZlbnQgPT0gImh0dHBfZmFpbHVyZSIgYW5kIHBhcmFtMSA9PSBfdXJsIHRoZW4KICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmlsLCBwYXJhbTIsIHBhcmFtMwogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgICAgIHJldHVybiBuaWwsIGVycgogICAgZW5kCgogICAgaHR0cC5nZXQgPSBmdW5jdGlvbihfdXJsLCBfaGVhZGVycywgX2JpbmFyeSkKICAgICAgICBpZiB0eXBlKF91cmwpID09ICJ0YWJsZSIgdGhlbgogICAgICAgICAgICBjaGVja09wdGlvbnMoX3VybCwgZmFsc2UpCiAgICAgICAgICAgIHJldHVybiB3cmFwUmVxdWVzdChfdXJsLnVybCwgX3VybCkKICAgICAgICBlbmQKCiAgICAgICAgZXhwZWN0KDEsIF91cmwsICJzdHJpbmciKQogICAgICAgIGV4cGVjdCgyLCBfaGVhZGVycywgInRhYmxlIiwgIm5pbCIpCiAgICAgICAgZXhwZWN0KDMsIF9iaW5hcnksICJib29sZWFuIiwgIm5pbCIpCiAgICAgICAgcmV0dXJuIHdyYXBSZXF1ZXN0KF91cmwsIF91cmwsIG5pbCwgX2hlYWRlcnMsIF9iaW5hcnkpCiAgICBlbmQKCiAgICBodHRwLnBvc3QgPSBmdW5jdGlvbihfdXJsLCBfcG9zdCwgX2hlYWRlcnMsIF9iaW5hcnkpCiAgICAgICAgaWYgdHlwZShfdXJsKSA9PSAidGFibGUiIHRoZW4KICAgICAgICAgICAgY2hlY2tPcHRpb25zKF91cmwsIHRydWUpCiAgICAgICAgICAgIHJldHVybiB3cmFwUmVxdWVzdChfdXJsLnVybCwgX3VybCkKICAgICAgICBlbmQKCiAgICAgICAgZXhwZWN0KDEsIF91cmwsICJzdHJpbmciKQogICAgICAgIGV4cGVjdCgyLCBfcG9zdCwgInN0cmluZyIpCiAgICAgICAgZXhwZWN0KDMsIF9oZWFkZXJzLCAidGFibGUiLCAibmlsIikKICAgICAgICBleHBlY3QoNCwgX2JpbmFyeSwgImJvb2xlYW4iLCAibmlsIikKICAgICAgICByZXR1cm4gd3JhcFJlcXVlc3QoX3VybCwgX3VybCwgX3Bvc3QsIF9oZWFkZXJzLCBfYmluYXJ5KQogICAgZW5kCgogICAgZm9yIGsgaW4gcGFpcnMobWV0aG9kcykgZG8gaWYgayB+PSAiR0VUIiBhbmQgayB+PSAiUE9TVCIgdGhlbgogICAgICAgIGh0dHBbazpsb3dlcigpXSA9IGZ1bmN0aW9uKF91cmwsIF9wb3N0LCBfaGVhZGVycywgX2JpbmFyeSkKICAgICAgICAgICAgaWYgdHlwZShfdXJsKSA9PSAidGFibGUiIHRoZW4KICAgICAgICAgICAgICAgIGNoZWNrT3B0aW9ucyhfdXJsLCB0cnVlKQogICAgICAgICAgICAgICAgcmV0dXJuIHdyYXBSZXF1ZXN0KF91cmwudXJsLCBfdXJsKQogICAgICAgICAgICBlbmQKCiAgICAgICAgICAgIGV4cGVjdCgxLCBfdXJsLCAic3RyaW5nIikKICAgICAgICAgICAgZXhwZWN0KDIsIF9wb3N0LCAic3RyaW5nIikKICAgICAgICAgICAgZXhwZWN0KDMsIF9oZWFkZXJzLCAidGFibGUiLCAibmlsIikKICAgICAgICAgICAgZXhwZWN0KDQsIF9iaW5hcnksICJib29sZWFuIiwgIm5pbCIpCiAgICAgICAgICAgIHJldHVybiB3cmFwUmVxdWVzdChfdXJsLCB7dXJsID0gX3VybCwgYm9keSA9IF9wb3N0LCBoZWFkZXJzID0gX2hlYWRlcnMsIGJpbmFyeSA9IF9iaW5hcnksIG1ldGhvZCA9IGt9KQogICAgICAgIGVuZAogICAgZW5kIGVuZAoKICAgIGh0dHAucmVxdWVzdCA9IGZ1bmN0aW9uKF91cmwsIF9wb3N0LCBfaGVhZGVycywgX2JpbmFyeSkKICAgICAgICBsb2NhbCB1cmwKICAgICAgICBpZiB0eXBlKF91cmwpID09ICJ0YWJsZSIgdGhlbgogICAgICAgICAgICBjaGVja09wdGlvbnMoX3VybCkKICAgICAgICAgICAgdXJsID0gX3VybC51cmwKICAgICAgICBlbHNlCiAgICAgICAgICAgIGV4cGVjdCgxLCBfdXJsLCAic3RyaW5nIikKICAgICAgICAgICAgZXhwZWN0KDIsIF9wb3N0LCAic3RyaW5nIiwgIm5pbCIpCiAgICAgICAgICAgIGV4cGVjdCgzLCBfaGVhZGVycywgInRhYmxlIiwgIm5pbCIpCiAgICAgICAgICAgIGV4cGVjdCg0LCBfYmluYXJ5LCAiYm9vbGVhbiIsICJuaWwiKQogICAgICAgICAgICB1cmwgPSBfdXJsLnVybAogICAgICAgIGVuZAoKICAgICAgICBsb2NhbCBvaywgZXJyID0gbmF0aXZlSFRUUFJlcXVlc3QoX3VybCwgX3Bvc3QsIF9oZWFkZXJzLCBfYmluYXJ5KQogICAgICAgIGlmIG5vdCBvayB0aGVuCiAgICAgICAgICAgIG9zLnF1ZXVlRXZlbnQoImh0dHBfZmFpbHVyZSIsIHVybCwgZXJyKQogICAgICAgIGVuZAogICAgICAgIHJldHVybiBvaywgZXJyCiAgICBlbmQKCiAgICBpZiBodHRwLmFkZExpc3RlbmVyIHRoZW4KICAgICAgICBodHRwLmxpc3RlbiA9IGZ1bmN0aW9uKCBfcG9ydCwgX2NhbGxiYWNrICkKICAgICAgICAgICAgZXhwZWN0KDEsIF9wb3J0LCAibnVtYmVyIikKICAgICAgICAgICAgZXhwZWN0KDIsIF9jYWxsYmFjaywgImZ1bmN0aW9uIikKICAgICAgICAgICAgaHR0cC5hZGRMaXN0ZW5lciggX3BvcnQgKQogICAgICAgICAgICB3aGlsZSB0cnVlIGRvCiAgICAgICAgICAgICAgICBsb2NhbCBldiwgcDEsIHAyLCBwMyA9IG9zLnB1bGxFdmVudCgpCiAgICAgICAgICAgICAgICBpZiBldiA9PSAic2VydmVyX3N0b3AiIHRoZW4KICAgICAgICAgICAgICAgICAgICBodHRwLnJlbW92ZUxpc3RlbmVyKCBfcG9ydCApCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIGVsc2VpZiBldiA9PSAiaHR0cF9yZXF1ZXN0IiBhbmQgcDEgPT0gX3BvcnQgdGhlbgogICAgICAgICAgICAgICAgICAgIGlmIF9jYWxsYmFjayggcDIsIHAzICkgdGhlbiAKICAgICAgICAgICAgICAgICAgICAgICAgaHR0cC5yZW1vdmVMaXN0ZW5lciggX3BvcnQgKQogICAgICAgICAgICAgICAgICAgICAgICBicmVhayAKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAoKICAgIGxvY2FsIG5hdGl2ZUNoZWNrVVJMID0gaHR0cC5jaGVja1VSTAogICAgaHR0cC5jaGVja1VSTEFzeW5jID0gbmF0aXZlQ2hlY2tVUkwKICAgIGh0dHAuY2hlY2tVUkwgPSBmdW5jdGlvbihfdXJsKQogICAgICAgIGV4cGVjdCgxLCBfdXJsLCAic3RyaW5nIikKICAgICAgICBsb2NhbCBvaywgZXJyID0gbmF0aXZlQ2hlY2tVUkwoX3VybCkKICAgICAgICBpZiBub3Qgb2sgdGhlbiByZXR1cm4gb2ssIGVyciBlbmQKCiAgICAgICAgd2hpbGUgdHJ1ZSBkbwogICAgICAgICAgICBsb2NhbCBfLCB1cmwsIG9rLCBlcnIgPSBvcy5wdWxsRXZlbnQoImh0dHBfY2hlY2siKQogICAgICAgICAgICBpZiB1cmwgPT0gX3VybCB0aGVuIHJldHVybiBvaywgZXJyIGVuZAogICAgICAgIGVuZAogICAgZW5kCgogICAgbG9jYWwgbmF0aXZlV2Vic29ja2V0ID0gaHR0cC53ZWJzb2NrZXQKICAgIGh0dHAud2Vic29ja2V0QXN5bmMgPSBuYXRpdmVXZWJzb2NrZXQKICAgIGh0dHAud2Vic29ja2V0ID0gZnVuY3Rpb24oX3VybCwgX2hlYWRlcnMpCiAgICAgICAgZXhwZWN0KDEsIF91cmwsICJzdHJpbmciLCAibnVtYmVyIikKICAgICAgICBleHBlY3QoMiwgX2hlYWRlcnMsICJ0YWJsZSIsICJuaWwiKQoKICAgICAgICBsb2NhbCBvaywgZXJyID0gbmF0aXZlV2Vic29ja2V0KF91cmwsIF9oZWFkZXJzKQogICAgICAgIGlmIG5vdCBvayB0aGVuIHJldHVybiBvaywgZXJyIGVuZAoKICAgICAgICB3aGlsZSB0cnVlIGRvCiAgICAgICAgICAgIGxvY2FsIGV2ZW50LCB1cmwsIHBhcmFtLCB3c2lkID0gb3MucHVsbEV2ZW50KCApCiAgICAgICAgICAgIGlmIGV2ZW50ID09ICJ3ZWJzb2NrZXRfc3VjY2VzcyIgYW5kIHVybCA9PSBfdXJsIHRoZW4KICAgICAgICAgICAgICAgIHJldHVybiBwYXJhbSwgd3NpZAogICAgICAgICAgICBlbHNlaWYgZXZlbnQgPT0gIndlYnNvY2tldF9mYWlsdXJlIiBhbmQgdXJsID09IF91cmwgdGhlbgogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlLCBwYXJhbQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAplbmQKCi0tIEluc3RhbGwgdGhlIGx1YSBwYXJ0IG9mIHRoZSBGUyBhcGkKbG9jYWwgdEVtcHR5ID0ge30KZnVuY3Rpb24gZnMuY29tcGxldGUoc1BhdGgsIHNMb2NhdGlvbiwgYkluY2x1ZGVGaWxlcywgYkluY2x1ZGVEaXJzKQogICAgZXhwZWN0KDEsIHNQYXRoLCAic3RyaW5nIikKICAgIGV4cGVjdCgyLCBzTG9jYXRpb24sICJzdHJpbmciKQogICAgZXhwZWN0KDMsIGJJbmNsdWRlRmlsZXMsICJib29sZWFuIiwgIm5pbCIpCiAgICBleHBlY3QoNCwgYkluY2x1ZGVEaXJzLCAiYm9vbGVhbiIsICJuaWwiKQoKICAgIGJJbmNsdWRlRmlsZXMgPSBiSW5jbHVkZUZpbGVzIH49IGZhbHNlCiAgICBiSW5jbHVkZURpcnMgPSBiSW5jbHVkZURpcnMgfj0gZmFsc2UKICAgIGxvY2FsIHNEaXIgPSBzTG9jYXRpb24KICAgIGxvY2FsIG5TdGFydCA9IDEKICAgIGxvY2FsIG5TbGFzaCA9IHN0cmluZy5maW5kKHNQYXRoLCAiWy9cXF0iLCBuU3RhcnQpCiAgICBpZiBuU2xhc2ggPT0gMSB0aGVuCiAgICAgICAgc0RpciA9ICIiCiAgICAgICAgblN0YXJ0ID0gMgogICAgZW5kCiAgICBsb2NhbCBzTmFtZQogICAgd2hpbGUgbm90IHNOYW1lIGRvCiAgICAgICAgbG9jYWwgblNsYXNoID0gc3RyaW5nLmZpbmQoc1BhdGgsICJbL1xcXSIsIG5TdGFydCkKICAgICAgICBpZiBuU2xhc2ggdGhlbgogICAgICAgICAgICBsb2NhbCBzUGFydCA9IHN0cmluZy5zdWIoc1BhdGgsIG5TdGFydCwgblNsYXNoIC0gMSkKICAgICAgICAgICAgc0RpciA9IGZzLmNvbWJpbmUoc0Rpciwgc1BhcnQpCiAgICAgICAgICAgIG5TdGFydCA9IG5TbGFzaCArIDEKICAgICAgICBlbHNlCiAgICAgICAgICAgIHNOYW1lID0gc3RyaW5nLnN1YihzUGF0aCwgblN0YXJ0KQogICAgICAgIGVuZAogICAgZW5kCgogICAgaWYgZnMuaXNEaXIoc0RpcikgdGhlbgogICAgICAgIGxvY2FsIHRSZXN1bHRzID0ge30KICAgICAgICBpZiBiSW5jbHVkZURpcnMgYW5kIHNQYXRoID09ICIiIHRoZW4KICAgICAgICAgICAgdGFibGUuaW5zZXJ0KHRSZXN1bHRzLCAiLiIpCiAgICAgICAgZW5kCiAgICAgICAgaWYgc0RpciB+PSAiIiB0aGVuCiAgICAgICAgICAgIGlmIHNQYXRoID09ICIiIHRoZW4KICAgICAgICAgICAgICAgIHRhYmxlLmluc2VydCh0UmVzdWx0cywgYkluY2x1ZGVEaXJzIGFuZCAiLi4iIG9yICIuLi8iKQogICAgICAgICAgICBlbHNlaWYgc1BhdGggPT0gIi4iIHRoZW4KICAgICAgICAgICAgICAgIHRhYmxlLmluc2VydCh0UmVzdWx0cywgYkluY2x1ZGVEaXJzIGFuZCAiLiIgb3IgIi4vIikKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAgICAgbG9jYWwgdEZpbGVzID0gZnMubGlzdChzRGlyKQogICAgICAgIGZvciBuID0gMSwgI3RGaWxlcyBkbwogICAgICAgICAgICBsb2NhbCBzRmlsZSA9IHRGaWxlc1tuXQogICAgICAgICAgICBpZiAjc0ZpbGUgPj0gI3NOYW1lIGFuZCBzdHJpbmcuc3ViKHNGaWxlLCAxLCAjc05hbWUpID09IHNOYW1lIHRoZW4KICAgICAgICAgICAgICAgIGxvY2FsIGJJc0RpciA9IGZzLmlzRGlyKGZzLmNvbWJpbmUoc0Rpciwgc0ZpbGUpKQogICAgICAgICAgICAgICAgbG9jYWwgc1Jlc3VsdCA9IHN0cmluZy5zdWIoc0ZpbGUsICNzTmFtZSArIDEpCiAgICAgICAgICAgICAgICBpZiBiSXNEaXIgdGhlbgogICAgICAgICAgICAgICAgICAgIHRhYmxlLmluc2VydCh0UmVzdWx0cywgc1Jlc3VsdCAuLiAiLyIpCiAgICAgICAgICAgICAgICAgICAgaWYgYkluY2x1ZGVEaXJzIGFuZCAjc1Jlc3VsdCA+IDAgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICB0YWJsZS5pbnNlcnQodFJlc3VsdHMsIHNSZXN1bHQpCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgaWYgYkluY2x1ZGVGaWxlcyBhbmQgI3NSZXN1bHQgPiAwIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgdGFibGUuaW5zZXJ0KHRSZXN1bHRzLCBzUmVzdWx0KQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgICAgIHJldHVybiB0UmVzdWx0cwogICAgZW5kCiAgICByZXR1cm4gdEVtcHR5CmVuZAoKZnVuY3Rpb24gZnMuaXNEcml2ZVJvb3Qoc1BhdGgpCiAgICBleHBlY3QoMSwgc1BhdGgsICJzdHJpbmciKQogICAgLS0gRm9yY2UgdGhlIHJvb3QgZGlyZWN0b3J5IHRvIGJlIGEgbW91bnQuCiAgICByZXR1cm4gZnMuZ2V0RGlyKHNQYXRoKSA9PSAiLi4iIG9yIGZzLmdldERyaXZlKHNQYXRoKSB+PSBmcy5nZXREcml2ZShmcy5nZXREaXIoc1BhdGgpKQplbmQKCi0tIExvYWQgQVBJcwpsb2NhbCBiQVBJRXJyb3IgPSBmYWxzZQpsb2NhbCB0QXBpcyA9IGZzLmxpc3QoInJvbS9hcGlzIikKZm9yIF8sIHNGaWxlIGluIGlwYWlycyh0QXBpcykgZG8KICAgIGlmIHN0cmluZy5zdWIoc0ZpbGUsIDEsIDEpIH49ICIuIiB0aGVuCiAgICAgICAgbG9jYWwgc1BhdGggPSBmcy5jb21iaW5lKCJyb20vYXBpcyIsIHNGaWxlKQogICAgICAgIGlmIG5vdCBmcy5pc0RpcihzUGF0aCkgdGhlbgogICAgICAgICAgICBpZiBub3Qgb3MubG9hZEFQSShzUGF0aCkgdGhlbgogICAgICAgICAgICAgICAgYkFQSUVycm9yID0gdHJ1ZQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAplbmQKCmlmIHR1cnRsZSBhbmQgZnMuaXNEaXIoInJvbS9hcGlzL3R1cnRsZSIpIHRoZW4KICAgIC0tIExvYWQgdHVydGxlIEFQSXMKICAgIGxvY2FsIHRBcGlzID0gZnMubGlzdCgicm9tL2FwaXMvdHVydGxlIikKICAgIGZvciBfLCBzRmlsZSBpbiBpcGFpcnModEFwaXMpIGRvCiAgICAgICAgaWYgc3RyaW5nLnN1YihzRmlsZSwgMSwgMSkgfj0gIi4iIHRoZW4KICAgICAgICAgICAgbG9jYWwgc1BhdGggPSBmcy5jb21iaW5lKCJyb20vYXBpcy90dXJ0bGUiLCBzRmlsZSkKICAgICAgICAgICAgaWYgbm90IGZzLmlzRGlyKHNQYXRoKSB0aGVuCiAgICAgICAgICAgICAgICBpZiBub3Qgb3MubG9hZEFQSShzUGF0aCkgdGhlbgogICAgICAgICAgICAgICAgICAgIGJBUElFcnJvciA9IHRydWUKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAplbmQKCmlmIHBvY2tldCBhbmQgZnMuaXNEaXIoInJvbS9hcGlzL3BvY2tldCIpIHRoZW4KICAgIC0tIExvYWQgcG9ja2V0IEFQSXMKICAgIGxvY2FsIHRBcGlzID0gZnMubGlzdCgicm9tL2FwaXMvcG9ja2V0IikKICAgIGZvciBfLCBzRmlsZSBpbiBpcGFpcnModEFwaXMpIGRvCiAgICAgICAgaWYgc3RyaW5nLnN1YihzRmlsZSwgMSwgMSkgfj0gIi4iIHRoZW4KICAgICAgICAgICAgbG9jYWwgc1BhdGggPSBmcy5jb21iaW5lKCJyb20vYXBpcy9wb2NrZXQiLCBzRmlsZSkKICAgICAgICAgICAgaWYgbm90IGZzLmlzRGlyKHNQYXRoKSB0aGVuCiAgICAgICAgICAgICAgICBpZiBub3Qgb3MubG9hZEFQSShzUGF0aCkgdGhlbgogICAgICAgICAgICAgICAgICAgIGJBUElFcnJvciA9IHRydWUKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAplbmQKCmlmIGNvbW1hbmRzIGFuZCBmcy5pc0Rpcigicm9tL2FwaXMvY29tbWFuZCIpIHRoZW4KICAgIC0tIExvYWQgY29tbWFuZCBBUElzCiAgICBpZiBvcy5sb2FkQVBJKCJyb20vYXBpcy9jb21tYW5kL2NvbW1hbmRzLmx1YSIpIHRoZW4KICAgICAgICAtLSBBZGQgYSBzcGVjaWFsIGNhc2UtaW5zZW5zaXRpdmUgbWV0YXRhYmxlIHRvIHRoZSBjb21tYW5kcyBhcGkKICAgICAgICBsb2NhbCB0Q2FzZUluc2Vuc2l0aXZlTWV0YXRhYmxlID0gewogICAgICAgICAgICBfX2luZGV4ID0gZnVuY3Rpb24odGFibGUsIGtleSkKICAgICAgICAgICAgICAgIGxvY2FsIHZhbHVlID0gcmF3Z2V0KHRhYmxlLCBrZXkpCiAgICAgICAgICAgICAgICBpZiB2YWx1ZSB+PSBuaWwgdGhlbgogICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBpZiB0eXBlKGtleSkgPT0gInN0cmluZyIgdGhlbgogICAgICAgICAgICAgICAgICAgIGxvY2FsIHZhbHVlID0gcmF3Z2V0KHRhYmxlLCBzdHJpbmcubG93ZXIoa2V5KSkKICAgICAgICAgICAgICAgICAgICBpZiB2YWx1ZSB+PSBuaWwgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgcmV0dXJuIG5pbAogICAgICAgICAgICBlbmQsCiAgICAgICAgfQogICAgICAgIHNldG1ldGF0YWJsZShjb21tYW5kcywgdENhc2VJbnNlbnNpdGl2ZU1ldGF0YWJsZSkKICAgICAgICBzZXRtZXRhdGFibGUoY29tbWFuZHMuYXN5bmMsIHRDYXNlSW5zZW5zaXRpdmVNZXRhdGFibGUpCgogICAgICAgIC0tIEFkZCBnbG9iYWwgImV4ZWMiIGZ1bmN0aW9uCiAgICAgICAgZXhlYyA9IGNvbW1hbmRzLmV4ZWMKICAgIGVsc2UKICAgICAgICBiQVBJRXJyb3IgPSB0cnVlCiAgICBlbmQKZW5kCgppZiBiQVBJRXJyb3IgdGhlbgogICAgcHJpbnQoIlByZXNzIGFueSBrZXkgdG8gY29udGludWUiKQogICAgb3MucHVsbEV2ZW50KCJrZXkiKQogICAgdGVybS5jbGVhcigpCiAgICB0ZXJtLnNldEN1cnNvclBvcygxLCAxKQplbmQKCi0tIFNldCBkZWZhdWx0IHNldHRpbmdzCnNldHRpbmdzLmRlZmluZSgic2hlbGwuYWxsb3dfc3RhcnR1cCIsIHsKICAgIGRlZmF1bHQgPSB0cnVlLAogICAgZGVzY3JpcHRpb24gPSAiUnVuIHN0YXJ0dXAgZmlsZXMgd2hlbiB0aGUgY29tcHV0ZXIgdHVybnMgb24uIiwKICAgIHR5cGUgPSAiYm9vbGVhbiIsCn0pCnNldHRpbmdzLmRlZmluZSgic2hlbGwuYWxsb3dfZGlza19zdGFydHVwIiwgewogICAgZGVmYXVsdCA9IGNvbW1hbmRzID09IG5pbCwKICAgIGRlc2NyaXB0aW9uID0gIlJ1biBzdGFydHVwIGZpbGVzIGZyb20gZGlzayBkcml2ZXMgd2hlbiB0aGUgY29tcHV0ZXIgdHVybnMgb24uIiwKICAgIHR5cGUgPSAiYm9vbGVhbiIsCn0pCgpzZXR0aW5ncy5kZWZpbmUoInNoZWxsLmF1dG9jb21wbGV0ZSIsIHsKICAgIGRlZmF1bHQgPSB0cnVlLAogICAgZGVzY3JpcHRpb24gPSAiQXV0b2NvbXBsZXRlIHByb2dyYW0gYW5kIGFyZ3VtZW50cyBpbiB0aGUgc2hlbGwuIiwKICAgIHR5cGUgPSAiYm9vbGVhbiIsCn0pCnNldHRpbmdzLmRlZmluZSgiZWRpdC5hdXRvY29tcGxldGUiLCB7CiAgICBkZWZhdWx0ID0gdHJ1ZSwKICAgIGRlc2NyaXB0aW9uID0gIkF1dG9jb21wbGV0ZSBBUEkgYW5kIGZ1bmN0aW9uIG5hbWVzIGluIHRoZSBlZGl0b3IuIiwKICAgICAgICB0eXBlID0gImJvb2xlYW4iLAp9KQpzZXR0aW5ncy5kZWZpbmUoImx1YS5hdXRvY29tcGxldGUiLCB7CiAgICBkZWZhdWx0ID0gdHJ1ZSwKICAgIGRlc2NyaXB0aW9uID0gIkF1dG9jb21wbGV0ZSBBUEkgYW5kIGZ1bmN0aW9uIG5hbWVzIGluIHRoZSBMdWEgUkVQTC4iLAogICAgICAgIHR5cGUgPSAiYm9vbGVhbiIsCn0pCgpzZXR0aW5ncy5kZWZpbmUoImVkaXQuZGVmYXVsdF9leHRlbnNpb24iLCB7CiAgICBkZWZhdWx0ID0gImx1YSIsCiAgICBkZXNjcmlwdGlvbiA9IFtbVGhlIGZpbGUgZXh0ZW5zaW9uIHRoZSBlZGl0b3Igd2lsbCB1c2UgaWYgbm9uZSBpcyBnaXZlbi4gU2V0IHRvICIiIHRvIGRpc2FibGUuXV0sCiAgICB0eXBlID0gInN0cmluZyIsCn0pCnNldHRpbmdzLmRlZmluZSgicGFpbnQuZGVmYXVsdF9leHRlbnNpb24iLCB7CiAgICBkZWZhdWx0ID0gIm5mcCIsCiAgICBkZXNjcmlwdGlvbiA9IFtbVGhlIGZpbGUgZXh0ZW5zaW9uIHRoZSBwYWludCBwcm9ncmFtIHdpbGwgdXNlIGlmIG5vbmUgaXMgZ2l2ZW4uIFNldCB0byAiIiB0byBkaXNhYmxlLl1dLAogICAgdHlwZSA9ICJzdHJpbmciLAp9KQoKc2V0dGluZ3MuZGVmaW5lKCJsaXN0LnNob3dfaGlkZGVuIiwgewogICAgZGVmYXVsdCA9IGZhbHNlLAogICAgZGVzY3JpcHRpb24gPSBbW1Nob3cgaGlkZGVuIGZpbGVzICh0aG9zZSBzdGFydGluZyB3aXRoICIuIiBpbiB0aGUgTHVhIFJFUEwpXV0sCiAgICB0eXBlID0gImJvb2xlYW4iLAp9KQoKc2V0dGluZ3MuZGVmaW5lKCJtb3RkLmVuYWJsZSIsIHsKICAgIGRlZmF1bHQgPSBwb2NrZXQgPT0gbmlsLAogICAgZGVzY3JpcHRpb24gPSAiRGlzcGxheSBhIHJhbmRvbSBtZXNzYWdlIHdoZW4gdGhlIGNvbXB1dGVyIHN0YXJ0cyB1cC4iLAogICAgdHlwZSA9ICJib29sZWFuIiwKfSkKc2V0dGluZ3MuZGVmaW5lKCJtb3RkLnBhdGgiLCB7CiAgICBkZWZhdWx0ID0gIi9yb20vbW90ZC50eHQ6L21vdGQudHh0IiwKICAgIGRlc2NyaXB0aW9uID0gW1tUaGUgcGF0aCB0byBsb2FkIHJhbmRvbSBtZXNzYWdlcyBmcm9tLiBTaG91bGQgYmUgYSBjb2xvbiAoIjoiKSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGZpbGUgcGF0aHMuXV0sCiAgICB0eXBlID0gInN0cmluZyIsCn0pCgpzZXR0aW5ncy5kZWZpbmUoImx1YS53YXJuX2FnYWluc3RfdXNlX29mX2xvY2FsIiwgewogICAgZGVmYXVsdCA9IHRydWUsCiAgICBkZXNjcmlwdGlvbiA9IFtbUHJpbnQgYSBtZXNzYWdlIHdoZW4gaW5wdXQgaW4gdGhlIEx1YSBSRVBMIHN0YXJ0cyB3aXRoIHRoZSB3b3JkICdsb2NhbCcuIExvY2FsIHZhcmlhYmxlcyBkZWZpbmVkIGluIHRoZSBMdWEgUkVQTCBhcmUgYmUgaW5hY2Nlc3NhYmxlIG9uIHRoZSBuZXh0IGlucHV0Ll1dLAogICAgdHlwZSA9ICJib29sZWFuIiwKfSkKc2V0dGluZ3MuZGVmaW5lKCJsdWEuZnVuY3Rpb25fYXJncyIsIHsKICAgIGRlZmF1bHQgPSB0cnVlLAogICAgZGVzY3JpcHRpb24gPSAiU2hvdyBmdW5jdGlvbiBhcmd1bWVudHMgd2hlbiBwcmludGluZyBmdW5jdGlvbnMuIiwKICAgIHR5cGUgPSAiYm9vbGVhbiIsCn0pCnNldHRpbmdzLmRlZmluZSgibHVhLmZ1bmN0aW9uX3NvdXJjZSIsIHsKICAgIGRlZmF1bHQgPSBmYWxzZSwKICAgIGRlc2NyaXB0aW9uID0gIlNob3cgd2hlcmUgYSBmdW5jdGlvbiB3YXMgZGVmaW5lZCB3aGVuIHByaW50aW5nIGZ1bmN0aW9ucy4iLAogICAgdHlwZSA9ICJib29sZWFuIiwKfSkKc2V0dGluZ3MuZGVmaW5lKCJiaW9zLnN0cmljdF9nbG9iYWxzIiwgewogICAgZGVmYXVsdCA9IGZhbHNlLAogICAgZGVzY3JpcHRpb24gPSAiUHJldmVudHMgYXNzaWduaW5nIHZhcmlhYmxlcyBpbnRvIGEgcHJvZ3JhbSdzIGVudmlyb25tZW50LiBNYWtlIHN1cmUgeW91IHVzZSB0aGUgbG9jYWwga2V5d29yZCBvciBhc3NpZ24gdG8gX0cgZXhwbGljaXRseS4iLAogICAgdHlwZSA9ICJib29sZWFuIiwKfSkKCnNldHRpbmdzLmRlZmluZSgic2hlbGwucmVwb3J0X3BsdWdpbl9lcnJvcnMiLCB7CiAgICBkZWZhdWx0ID0gdHJ1ZSwKICAgIGRlc2NyaXB0aW9uID0gIlNob3cgZXJyb3JzIG9uIHN0YXJ0dXAgaWYgYSBwbHVnaW4ocykgZmFpbGVkIHRvIGxvYWQuIiwKICAgIHR5cGUgPSAiYm9vbGVhbiIsCn0pCnNldHRpbmdzLmRlZmluZSgic2hlbGwubW9iaWxlX3Jlc2l6ZV93aXRoX2tleWJvYXJkIiwgewogICAgZGVmYXVsdCA9IHRydWUsCiAgICBkZXNjcmlwdGlvbiA9ICJBdXRvbWF0aWNhbGx5IHJlc2l6ZSB0aGUgc2hlbGwgd2hlbiB0aGUga2V5Ym9hcmQgaXMgb3BlbmVkIG9yIGNsb3NlZC4iLAogICAgdHlwZSA9ICJib29sZWFuIiwKfSkKCnNldHRpbmdzLmRlZmluZSgiYmlvcy51c2VfY2FzaCIsIHsKICAgIGRlZmF1bHQgPSBmYWxzZSwKICAgIGRlc2NyaXB0aW9uID0gW1tTd2l0Y2ggdGhlIGRlZmF1bHQgc2hlbGwgaW50ZXJwcmV0ZXIgdG8gY2FzaCwgYSBCb3VybmUtY29tcGF0aWJsZSBzaGVsbC4gKEJldGEpXV0sCiAgICB0eXBlID0gImJvb2xlYW4iLAp9KQppZiB0ZXJtLmlzQ29sb3VyKCkgdGhlbgogICAgc2V0dGluZ3MuZGVmaW5lKCJiaW9zLnVzZV9tdWx0aXNoZWxsIiwgewogICAgICAgIGRlZmF1bHQgPSB0cnVlLAogICAgICAgIGRlc2NyaXB0aW9uID0gW1tBbGxvdyBydW5uaW5nIG11bHRpcGxlIHByb2dyYW1zIGF0IG9uY2UsIHRocm91Z2ggdGhlIHVzZSBvZiB0aGUgImZnIiBhbmQgImJnIiBwcm9ncmFtcy5dXSwKICAgICAgICB0eXBlID0gImJvb2xlYW4iLAogICAgfSkKZW5kCmlmIF9DQ19ERUZBVUxUX1NFVFRJTkdTIHRoZW4KICAgIGZvciBzUGFpciBpbiBzdHJpbmcuZ21hdGNoKF9DQ19ERUZBVUxUX1NFVFRJTkdTLCAiW14sXSsiKSBkbwogICAgICAgIGxvY2FsIHNOYW1lLCBzVmFsdWUgPSBzdHJpbmcubWF0Y2goc1BhaXIsICIoW149XSopPSguKikiKQogICAgICAgIGlmIHNOYW1lIGFuZCBzVmFsdWUgdGhlbgogICAgICAgICAgICBsb2NhbCB2YWx1ZQogICAgICAgICAgICBpZiBzVmFsdWUgPT0gInRydWUiIHRoZW4KICAgICAgICAgICAgICAgIHZhbHVlID0gdHJ1ZQogICAgICAgICAgICBlbHNlaWYgc1ZhbHVlID09ICJmYWxzZSIgdGhlbgogICAgICAgICAgICAgICAgdmFsdWUgPSBmYWxzZQogICAgICAgICAgICBlbHNlaWYgc1ZhbHVlID09ICJuaWwiIHRoZW4KICAgICAgICAgICAgICAgIHZhbHVlID0gbmlsCiAgICAgICAgICAgIGVsc2VpZiB0b251bWJlcihzVmFsdWUpIHRoZW4KICAgICAgICAgICAgICAgIHZhbHVlID0gdG9udW1iZXIoc1ZhbHVlKQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICB2YWx1ZSA9IHNWYWx1ZQogICAgICAgICAgICBlbmQKICAgICAgICAgICAgaWYgdmFsdWUgfj0gbmlsIHRoZW4KICAgICAgICAgICAgICAgIHNldHRpbmdzLnNldChzTmFtZSwgdmFsdWUpCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHNldHRpbmdzLnVuc2V0KHNOYW1lKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAplbmQKCi0tIExvYWQgdXNlciBzZXR0aW5ncwppZiBmcy5leGlzdHMoIi5zZXR0aW5ncyIpIHRoZW4KICAgIHNldHRpbmdzLmxvYWQoIi5zZXR0aW5ncyIpCmVuZAoKLS0gUnVuIHRoZSBzaGVsbApsb2NhbCBvaywgZXJyID0gcGNhbGwocGFyYWxsZWwud2FpdEZvckFueSwKICAgIGZ1bmN0aW9uKCkKICAgICAgICBsb2NhbCBzU2hlbGwKICAgICAgICBpZiB0ZXJtLmlzQ29sb3VyKCkgYW5kIHNldHRpbmdzLmdldCgiYmlvcy51c2VfbXVsdGlzaGVsbCIpIHRoZW4KICAgICAgICAgICAgc1NoZWxsID0gInJvbS9wcm9ncmFtcy9hZHZhbmNlZC9tdWx0aXNoZWxsLmx1YSIKICAgICAgICBlbHNlaWYgc2V0dGluZ3MuZ2V0KCJiaW9zLnVzZV9jYXNoIikgdGhlbgogICAgICAgICAgICBzU2hlbGwgPSAicm9tL3Byb2dyYW1zL2Nhc2gubHVhIgogICAgICAgIGVsc2UKICAgICAgICAgICAgc1NoZWxsID0gInJvbS9wcm9ncmFtcy9zaGVsbC5sdWEiCiAgICAgICAgZW5kCiAgICAgICAgb3MucnVuKHt9LCBzU2hlbGwpCiAgICAgICAgb3MucnVuKHt9LCAicm9tL3Byb2dyYW1zL3NodXRkb3duLmx1YSIpCiAgICBlbmQsCiAgICByZWRuZXQucnVuCikKCi0tIElmIHRoZSBzaGVsbCBlcnJvcmVkLCBsZXQgdGhlIHVzZXIgcmVhZCBpdC4KdGVybS5yZWRpcmVjdCh0ZXJtLm5hdGl2ZSgpKQppZiBub3Qgb2sgdGhlbgogICAgcHJpbnRFcnJvcihlcnIpCiAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgdGVybS5zZXRDdXJzb3JCbGluayhmYWxzZSkKICAgICAgICBwcmludCgiUHJlc3MgYW55IGtleSB0byBjb250aW51ZSIpCiAgICAgICAgb3MucHVsbEV2ZW50KCJrZXkiKQogICAgZW5kKQplbmQKCi0tIEVuZApvcy5zaHV0ZG93bigpCg==";
   Module["FS_createDataFile"]("/craftos", "bios.lua", decodeBase64(fileData1), true, true, false);
   var fileData2 = "";
   Module["FS_createDataFile"]("/craftos/rom", ".DS_Store", decodeBase64(fileData2), true, true, false);
   var fileData3 = "bG9jYWwgY29tcGxldGlvbiA9IHJlcXVpcmUgImNjLnNoZWxsLmNvbXBsZXRpb24iCgotLSBTZXR1cCBwYXRocwpsb2NhbCBzUGF0aCA9ICIuOi9yb20vcHJvZ3JhbXMiCmlmIHRlcm0uaXNDb2xvcigpIHRoZW4KICAgIHNQYXRoID0gc1BhdGggLi4gIjovcm9tL3Byb2dyYW1zL2FkdmFuY2VkIgplbmQKaWYgdHVydGxlIHRoZW4KICAgIHNQYXRoID0gc1BhdGggLi4gIjovcm9tL3Byb2dyYW1zL3R1cnRsZSIKZWxzZQogICAgc1BhdGggPSBzUGF0aCAuLiAiOi9yb20vcHJvZ3JhbXMvcmVkbmV0Oi9yb20vcHJvZ3JhbXMvZnVuIgogICAgaWYgdGVybS5pc0NvbG9yKCkgdGhlbgogICAgICAgIHNQYXRoID0gc1BhdGggLi4gIjovcm9tL3Byb2dyYW1zL2Z1bi9hZHZhbmNlZCIKICAgIGVuZAplbmQKaWYgcG9ja2V0IHRoZW4KICAgIHNQYXRoID0gc1BhdGggLi4gIjovcm9tL3Byb2dyYW1zL3BvY2tldCIKZW5kCmlmIGNvbW1hbmRzIHRoZW4KICAgIHNQYXRoID0gc1BhdGggLi4gIjovcm9tL3Byb2dyYW1zL2NvbW1hbmQiCmVuZAppZiBodHRwIHRoZW4KICAgIHNQYXRoID0gc1BhdGggLi4gIjovcm9tL3Byb2dyYW1zL2h0dHAiCmVuZApzaGVsbC5zZXRQYXRoKHNQYXRoKQpoZWxwLnNldFBhdGgoIi9yb20vaGVscCIpCgotLSBTZXR1cCBhbGlhc2VzCnNoZWxsLnNldEFsaWFzKCJscyIsICJsaXN0IikKc2hlbGwuc2V0QWxpYXMoImRpciIsICJsaXN0IikKc2hlbGwuc2V0QWxpYXMoImNwIiwgImNvcHkiKQpzaGVsbC5zZXRBbGlhcygibXYiLCAibW92ZSIpCnNoZWxsLnNldEFsaWFzKCJybSIsICJkZWxldGUiKQpzaGVsbC5zZXRBbGlhcygiY2xyIiwgImNsZWFyIikKc2hlbGwuc2V0QWxpYXMoInJzIiwgInJlZHN0b25lIikKc2hlbGwuc2V0QWxpYXMoInNoIiwgInNoZWxsIikKaWYgdGVybS5pc0NvbG9yKCkgdGhlbgogICAgc2hlbGwuc2V0QWxpYXMoImJhY2tncm91bmQiLCAiYmciKQogICAgc2hlbGwuc2V0QWxpYXMoImZvcmVncm91bmQiLCAiZmciKQplbmQKCi0tIFNldHVwIGNvbXBsZXRpb24gZnVuY3Rpb25zCgpsb2NhbCBmdW5jdGlvbiBjb21wbGV0ZVBhc3RlYmluUHV0KHNoZWxsLCB0ZXh0LCBwcmV2aW91cykKICAgIGlmIHByZXZpb3VzWzJdID09ICJwdXQiIHRoZW4KICAgICAgICByZXR1cm4gZnMuY29tcGxldGUodGV4dCwgc2hlbGwuZGlyKCksIHRydWUsIGZhbHNlKQogICAgZW5kCmVuZAoKbG9jYWwgZnVuY3Rpb24gY29tcGxldGVDb25maWdQYXJ0MihzaGVsbCwgdGV4dCwgcHJldmlvdXMpCiAgICBpZiBwcmV2aW91c1syXSA9PSAiZ2V0IiBvciBwcmV2aW91c1syXSA9PSAic2V0IiB0aGVuCiAgICAgICAgcmV0dXJuIGNvbXBsZXRpb24uY2hvaWNlKHNoZWxsLCB0ZXh0LCBwcmV2aW91cywgY29uZmlnLmxpc3QoKSwgcHJldmlvdXNbMl0gPT0gInNldCIpCiAgICBlbmQKZW5kCgpsb2NhbCBmdW5jdGlvbiBjb21wbGV0ZUNvbmZpZ1BhcnQzKHNoZWxsLCB0ZXh0LCBwcmV2aW91cykKICAgIGlmIHByZXZpb3VzWzJdID09ICJzZXQiIHRoZW4KICAgICAgICBpZiBjb25maWcuZ2V0VHlwZShwcmV2aW91c1szXSkgPT0gImJvb2xlYW4iIHRoZW4gcmV0dXJuIGNvbXBsZXRpb24uY2hvaWNlKHNoZWxsLCB0ZXh0LCBwcmV2aW91cywgeyJ0cnVlIiwgImZhbHNlIn0pCiAgICAgICAgZWxzZWlmIHByZXZpb3VzWzNdID09ICJtb3VudF9tb2RlIiB0aGVuIHJldHVybiBjb21wbGV0aW9uLmNob2ljZShzaGVsbCwgdGV4dCwgcHJldmlvdXMsIHsibm9uZSIsICJybyIsICJyb19zdHJpY3QiLCAicncifSkgZW5kCiAgICBlbmQKZW5kCgpzaGVsbC5zZXRDb21wbGV0aW9uRnVuY3Rpb24oInJvbS9wcm9ncmFtcy9hbGlhcy5sdWEiLCBjb21wbGV0aW9uLmJ1aWxkKG5pbCwgY29tcGxldGlvbi5wcm9ncmFtKSkKc2hlbGwuc2V0Q29tcGxldGlvbkZ1bmN0aW9uKCJyb20vcHJvZ3JhbXMvY2QubHVhIiwgY29tcGxldGlvbi5idWlsZChjb21wbGV0aW9uLmRpcikpCnNoZWxsLnNldENvbXBsZXRpb25GdW5jdGlvbigicm9tL3Byb2dyYW1zL2NsZWFyLmx1YSIsIGNvbXBsZXRpb24uYnVpbGQoeyBjb21wbGV0aW9uLmNob2ljZSwgeyAic2NyZWVuIiwgInBhbGV0dGUiLCAiYWxsIiB9IH0pKQpzaGVsbC5zZXRDb21wbGV0aW9uRnVuY3Rpb24oInJvbS9wcm9ncmFtcy9jb3B5Lmx1YSIsIGNvbXBsZXRpb24uYnVpbGQoCiAgICB7IGNvbXBsZXRpb24uZGlyT3JGaWxlLCB0cnVlIH0sCiAgICBjb21wbGV0aW9uLmRpck9yRmlsZQopKQpzaGVsbC5zZXRDb21wbGV0aW9uRnVuY3Rpb24oInJvbS9wcm9ncmFtcy9kZWxldGUubHVhIiwgY29tcGxldGlvbi5idWlsZCh7IGNvbXBsZXRpb24uZGlyT3JGaWxlLCBtYW55ID0gdHJ1ZSB9KSkKc2hlbGwuc2V0Q29tcGxldGlvbkZ1bmN0aW9uKCJyb20vcHJvZ3JhbXMvZHJpdmUubHVhIiwgY29tcGxldGlvbi5idWlsZChjb21wbGV0aW9uLmRpcikpCnNoZWxsLnNldENvbXBsZXRpb25GdW5jdGlvbigicm9tL3Byb2dyYW1zL2VkaXQubHVhIiwgY29tcGxldGlvbi5idWlsZChjb21wbGV0aW9uLmZpbGUpKQpzaGVsbC5zZXRDb21wbGV0aW9uRnVuY3Rpb24oInJvbS9wcm9ncmFtcy9lamVjdC5sdWEiLCBjb21wbGV0aW9uLmJ1aWxkKGNvbXBsZXRpb24ucGVyaXBoZXJhbCkpCnNoZWxsLnNldENvbXBsZXRpb25GdW5jdGlvbigicm9tL3Byb2dyYW1zL2dwcy5sdWEiLCBjb21wbGV0aW9uLmJ1aWxkKHsgY29tcGxldGlvbi5jaG9pY2UsIHsgImhvc3QiLCAiaG9zdCAiLCAibG9jYXRlIiB9IH0pKQpzaGVsbC5zZXRDb21wbGV0aW9uRnVuY3Rpb24oInJvbS9wcm9ncmFtcy9oZWxwLmx1YSIsIGNvbXBsZXRpb24uYnVpbGQoY29tcGxldGlvbi5oZWxwKSkKc2hlbGwuc2V0Q29tcGxldGlvbkZ1bmN0aW9uKCJyb20vcHJvZ3JhbXMvaWQubHVhIiwgY29tcGxldGlvbi5idWlsZChjb21wbGV0aW9uLnBlcmlwaGVyYWwpKQpzaGVsbC5zZXRDb21wbGV0aW9uRnVuY3Rpb24oInJvbS9wcm9ncmFtcy9sYWJlbC5sdWEiLCBjb21wbGV0aW9uLmJ1aWxkKAogICAgeyBjb21wbGV0aW9uLmNob2ljZSwgeyAiZ2V0IiwgImdldCAiLCAic2V0ICIsICJjbGVhciIsICJjbGVhciAiIH0gfSwKICAgIGNvbXBsZXRpb24ucGVyaXBoZXJhbAopKQpzaGVsbC5zZXRDb21wbGV0aW9uRnVuY3Rpb24oInJvbS9wcm9ncmFtcy9saXN0Lmx1YSIsIGNvbXBsZXRpb24uYnVpbGQoY29tcGxldGlvbi5kaXIpKQpzaGVsbC5zZXRDb21wbGV0aW9uRnVuY3Rpb24oInJvbS9wcm9ncmFtcy9ta2Rpci5sdWEiLCBjb21wbGV0aW9uLmJ1aWxkKHsgY29tcGxldGlvbi5kaXIsIG1hbnkgPSB0cnVlIH0pKQoKbG9jYWwgY29tcGxldGVfbW9uaXRvcl9leHRyYSA9IHsgInNjYWxlIiB9CnNoZWxsLnNldENvbXBsZXRpb25GdW5jdGlvbigicm9tL3Byb2dyYW1zL21vbml0b3IubHVhIiwgY29tcGxldGlvbi5idWlsZCgKICAgIGZ1bmN0aW9uKHNoZWxsLCB0ZXh0LCBwcmV2aW91cykKICAgICAgICBsb2NhbCBjaG9pY2VzID0gY29tcGxldGlvbi5wZXJpcGhlcmFsKHNoZWxsLCB0ZXh0LCBwcmV2aW91cywgdHJ1ZSkKICAgICAgICBmb3IgXywgb3B0aW9uIGluIHBhaXJzKGNvbXBsZXRpb24uY2hvaWNlKHNoZWxsLCB0ZXh0LCBwcmV2aW91cywgY29tcGxldGVfbW9uaXRvcl9leHRyYSwgdHJ1ZSkpIGRvCiAgICAgICAgICAgIGNob2ljZXNbI2Nob2ljZXMgKyAxXSA9IG9wdGlvbgogICAgICAgIGVuZAogICAgICAgIHJldHVybiBjaG9pY2VzCiAgICBlbmQsCiAgICBmdW5jdGlvbihzaGVsbCwgdGV4dCwgcHJldmlvdXMpCiAgICAgICAgaWYgcHJldmlvdXNbMl0gPT0gInNjYWxlIiB0aGVuCiAgICAgICAgICAgIHJldHVybiBjb21wbGV0aW9uLnBlcmlwaGVyYWwoc2hlbGwsIHRleHQsIHByZXZpb3VzLCB0cnVlKQogICAgICAgIGVsc2UKICAgICAgICAgICAgcmV0dXJuIGNvbXBsZXRpb24ucHJvZ3JhbVdpdGhBcmdzKHNoZWxsLCB0ZXh0LCBwcmV2aW91cywgMykKICAgICAgICBlbmQKICAgIGVuZCwKICAgIHsKICAgICAgICBmdW5jdGlvbihzaGVsbCwgdGV4dCwgcHJldmlvdXMpCiAgICAgICAgICAgIGlmIHByZXZpb3VzWzJdIH49ICJzY2FsZSIgdGhlbgogICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBsZXRpb24ucHJvZ3JhbVdpdGhBcmdzKHNoZWxsLCB0ZXh0LCBwcmV2aW91cywgMykKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kLAogICAgICAgIG1hbnkgPSB0cnVlLAogICAgfQopKQoKc2hlbGwuc2V0Q29tcGxldGlvbkZ1bmN0aW9uKCJyb20vcHJvZ3JhbXMvbW92ZS5sdWEiLCBjb21wbGV0aW9uLmJ1aWxkKAogICAgeyBjb21wbGV0aW9uLmRpck9yRmlsZSwgdHJ1ZSB9LAogICAgY29tcGxldGlvbi5kaXJPckZpbGUKKSkKc2hlbGwuc2V0Q29tcGxldGlvbkZ1bmN0aW9uKCJyb20vcHJvZ3JhbXMvcmVkc3RvbmUubHVhIiwgY29tcGxldGlvbi5idWlsZCgKICAgIHsgY29tcGxldGlvbi5jaG9pY2UsIHsgInByb2JlIiwgInNldCAiLCAicHVsc2UgIiB9IH0sCiAgICBjb21wbGV0aW9uLnNpZGUKKSkKc2hlbGwuc2V0Q29tcGxldGlvbkZ1bmN0aW9uKCJyb20vcHJvZ3JhbXMvcmVuYW1lLmx1YSIsIGNvbXBsZXRpb24uYnVpbGQoCiAgICB7IGNvbXBsZXRpb24uZGlyT3JGaWxlLCB0cnVlIH0sCiAgICBjb21wbGV0aW9uLmRpck9yRmlsZQopKQpzaGVsbC5zZXRDb21wbGV0aW9uRnVuY3Rpb24oInJvbS9wcm9ncmFtcy9zaGVsbC5sdWEiLCBjb21wbGV0aW9uLmJ1aWxkKHsgY29tcGxldGlvbi5wcm9ncmFtV2l0aEFyZ3MsIDIsIG1hbnkgPSB0cnVlIH0pKQpzaGVsbC5zZXRDb21wbGV0aW9uRnVuY3Rpb24oInJvbS9wcm9ncmFtcy90eXBlLmx1YSIsIGNvbXBsZXRpb24uYnVpbGQoY29tcGxldGlvbi5kaXJPckZpbGUpKQpzaGVsbC5zZXRDb21wbGV0aW9uRnVuY3Rpb24oInJvbS9wcm9ncmFtcy9zZXQubHVhIiwgY29tcGxldGlvbi5idWlsZCh7IGNvbXBsZXRpb24uc2V0dGluZywgdHJ1ZSB9KSkKc2hlbGwuc2V0Q29tcGxldGlvbkZ1bmN0aW9uKCJyb20vcHJvZ3JhbXMvYWR2YW5jZWQvYmcubHVhIiwgY29tcGxldGlvbi5idWlsZCh7IGNvbXBsZXRpb24ucHJvZ3JhbVdpdGhBcmdzLCAyLCBtYW55ID0gdHJ1ZSB9KSkKc2hlbGwuc2V0Q29tcGxldGlvbkZ1bmN0aW9uKCJyb20vcHJvZ3JhbXMvYWR2YW5jZWQvZmcubHVhIiwgY29tcGxldGlvbi5idWlsZCh7IGNvbXBsZXRpb24ucHJvZ3JhbVdpdGhBcmdzLCAyLCBtYW55ID0gdHJ1ZSB9KSkKc2hlbGwuc2V0Q29tcGxldGlvbkZ1bmN0aW9uKCJyb20vcHJvZ3JhbXMvZnVuL2RqLmx1YSIsIGNvbXBsZXRpb24uYnVpbGQoCiAgICB7IGNvbXBsZXRpb24uY2hvaWNlLCB7ICJwbGF5IiwgInBsYXkgIiwgInN0b3AgIiB9IH0sCiAgICBjb21wbGV0aW9uLnBlcmlwaGVyYWwKKSkKc2hlbGwuc2V0Q29tcGxldGlvbkZ1bmN0aW9uKCJyb20vcHJvZ3JhbXMvZnVuL2FkdmFuY2VkL3BhaW50Lmx1YSIsIGNvbXBsZXRpb24uYnVpbGQoY29tcGxldGlvbi5maWxlKSkKc2hlbGwuc2V0Q29tcGxldGlvbkZ1bmN0aW9uKCJyb20vcHJvZ3JhbXMvaHR0cC9wYXN0ZWJpbi5sdWEiLCBjb21wbGV0aW9uLmJ1aWxkKAogICAgeyBjb21wbGV0aW9uLmNob2ljZSwgeyAicHV0ICIsICJnZXQgIiwgInJ1biAiIH0gfSwKICAgIGNvbXBsZXRlUGFzdGViaW5QdXQKKSkKc2hlbGwuc2V0Q29tcGxldGlvbkZ1bmN0aW9uKCJyb20vcHJvZ3JhbXMvaHR0cC9naXN0Lmx1YSIsIGNvbXBsZXRpb24uYnVpbGQoCiAgICB7IGNvbXBsZXRpb24uY2hvaWNlLCB7ICJwdXQgIiwgImdldCAiLCAicnVuICIsICJlZGl0ICIsICJpbmZvICIsICJkZWxldGUgIiB9IH0sCiAgICBjb21wbGV0ZVBhc3RlYmluUHV0CikpCnNoZWxsLnNldENvbXBsZXRpb25GdW5jdGlvbigicm9tL3Byb2dyYW1zL3JlZG5ldC9jaGF0Lmx1YSIsIGNvbXBsZXRpb24uYnVpbGQoeyBjb21wbGV0aW9uLmNob2ljZSwgeyAiaG9zdCAiLCAiam9pbiAiIH0gfSkpCnNoZWxsLnNldENvbXBsZXRpb25GdW5jdGlvbigicm9tL3Byb2dyYW1zL2NvbW1hbmQvZXhlYy5sdWEiLCBjb21wbGV0aW9uLmJ1aWxkKGNvbXBsZXRpb24uY29tbWFuZCkpCnNoZWxsLnNldENvbXBsZXRpb25GdW5jdGlvbigicm9tL3Byb2dyYW1zL2h0dHAvd2dldC5sdWEiLCBjb21wbGV0aW9uLmJ1aWxkKHsgY29tcGxldGlvbi5jaG9pY2UsIHsgInJ1biAiIH0gfSkpCgppZiBwZXJpcGhlbXUgYW5kIGNvbmZpZyBhbmQgbW91bnRlciB0aGVuCiAgICBzaGVsbC5zZXRDb21wbGV0aW9uRnVuY3Rpb24oInJvbS9wcm9ncmFtcy9hdHRhY2gubHVhIiwgY29tcGxldGlvbi5idWlsZCgKICAgICAgICBjb21wbGV0aW9uLnBlcmlwaGVyYWwsCiAgICAgICAgeyBjb21wbGV0aW9uLmNob2ljZSwgcGVyaXBoZW11Lm5hbWVzKCkgfQogICAgKSkKICAgIHNoZWxsLnNldENvbXBsZXRpb25GdW5jdGlvbigicm9tL3Byb2dyYW1zL2RldGFjaC5sdWEiLCBjb21wbGV0aW9uLmJ1aWxkKGNvbXBsZXRpb24ucGVyaXBoZXJhbCkpCiAgICBzaGVsbC5zZXRDb21wbGV0aW9uRnVuY3Rpb24oInJvbS9wcm9ncmFtcy9jb25maWcubHVhIiwgY29tcGxldGlvbi5idWlsZCgKICAgICAgICB7IGNvbXBsZXRpb24uY2hvaWNlLCB7ICJnZXQgIiwgInNldCAiLCAibGlzdCAiIH0gfSwKICAgICAgICBjb21wbGV0ZUNvbmZpZ1BhcnQyLAogICAgICAgIGNvbXBsZXRlQ29uZmlnUGFydDMKICAgICkpCiAgICBzaGVsbC5zZXRDb21wbGV0aW9uRnVuY3Rpb24oInJvbS9wcm9ncmFtcy9tb3VudC5sdWEiLCBjb21wbGV0aW9uLmJ1aWxkKGNvbXBsZXRpb24uZGlyKSkKICAgIHNoZWxsLnNldENvbXBsZXRpb25GdW5jdGlvbigicm9tL3Byb2dyYW1zL3VubW91bnQubHVhIiwgY29tcGxldGlvbi5idWlsZChjb21wbGV0aW9uLmRpcikpCmVuZAoKaWYgdHVydGxlIHRoZW4KICAgIHNoZWxsLnNldENvbXBsZXRpb25GdW5jdGlvbigicm9tL3Byb2dyYW1zL3R1cnRsZS9nby5sdWEiLCBjb21wbGV0aW9uLmJ1aWxkKAogICAgICAgIHsgY29tcGxldGlvbi5jaG9pY2UsIHsgImxlZnQiLCAicmlnaHQiLCAiZm9yd2FyZCIsICJiYWNrIiwgImRvd24iLCAidXAiIH0sIHRydWUsIG1hbnkgPSB0cnVlIH0KICAgICkpCiAgICBzaGVsbC5zZXRDb21wbGV0aW9uRnVuY3Rpb24oInJvbS9wcm9ncmFtcy90dXJ0bGUvdHVybi5sdWEiLCBjb21wbGV0aW9uLmJ1aWxkKAogICAgICAgIHsgY29tcGxldGlvbi5jaG9pY2UsIHsgImxlZnQiLCAicmlnaHQiIH0sIHRydWUsIG1hbnkgPSB0cnVlIH0KICAgICkpCiAgICBzaGVsbC5zZXRDb21wbGV0aW9uRnVuY3Rpb24oInJvbS9wcm9ncmFtcy90dXJ0bGUvZXF1aXAubHVhIiwgY29tcGxldGlvbi5idWlsZCgKICAgICAgICBuaWwsCiAgICAgICAgeyBjb21wbGV0aW9uLmNob2ljZSwgeyAibGVmdCIsICJyaWdodCIgfSB9CiAgICApKQogICAgc2hlbGwuc2V0Q29tcGxldGlvbkZ1bmN0aW9uKCJyb20vcHJvZ3JhbXMvdHVydGxlL3VuZXF1aXAubHVhIiwgY29tcGxldGlvbi5idWlsZCgKICAgICAgICB7IGNvbXBsZXRpb24uY2hvaWNlLCB7ICJsZWZ0IiwgInJpZ2h0IiB9IH0KICAgICkpCmVuZAoKLS0gUnVuIGF1dG9ydW4gZmlsZXMKaWYgZnMuZXhpc3RzKCIvcm9tL2F1dG9ydW4iKSBhbmQgZnMuaXNEaXIoIi9yb20vYXV0b3J1biIpIHRoZW4KICAgIGxvY2FsIHRGaWxlcyA9IGZzLmxpc3QoIi9yb20vYXV0b3J1biIpCiAgICBmb3IgXywgc0ZpbGUgaW4gaXBhaXJzKHRGaWxlcykgZG8KICAgICAgICBpZiBzdHJpbmcuc3ViKHNGaWxlLCAxLCAxKSB+PSAiLiIgdGhlbgogICAgICAgICAgICBsb2NhbCBzUGF0aCA9ICIvcm9tL2F1dG9ydW4vIiAuLiBzRmlsZQogICAgICAgICAgICBpZiBub3QgZnMuaXNEaXIoc1BhdGgpIHRoZW4KICAgICAgICAgICAgICAgIHNoZWxsLnJ1bihzUGF0aCkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCgpsb2NhbCBmdW5jdGlvbiBmaW5kU3RhcnR1cHMoc0Jhc2VEaXIpCiAgICBsb2NhbCB0U3RhcnR1cHMgPSBuaWwKICAgIGxvY2FsIHNCYXNlUGF0aCA9ICIvIiAuLiBmcy5jb21iaW5lKHNCYXNlRGlyLCAic3RhcnR1cCIpCiAgICBsb2NhbCBzU3RhcnR1cE5vZGUgPSBzaGVsbC5yZXNvbHZlUHJvZ3JhbShzQmFzZVBhdGgpCiAgICBpZiBzU3RhcnR1cE5vZGUgdGhlbgogICAgICAgIHRTdGFydHVwcyA9IHsgc1N0YXJ0dXBOb2RlIH0KICAgIGVuZAogICAgLS0gSXQncyBwb3NzaWJsZSB0aGF0IHRoZXJlIGlzIGEgc3RhcnR1cCBkaXJlY3RvcnkgYW5kIGEgc3RhcnR1cC5sdWEgZmlsZSwgc28gdGhpcyBoYXMgdG8gYmUKICAgIC0tIGV4ZWN1dGVkIGV2ZW4gaWYgYSBmaWxlIGhhcyBhbHJlYWR5IGJlZW4gZm91bmQuCiAgICBpZiBmcy5pc0RpcihzQmFzZVBhdGgpIHRoZW4KICAgICAgICBpZiB0U3RhcnR1cHMgPT0gbmlsIHRoZW4KICAgICAgICAgICAgdFN0YXJ0dXBzID0ge30KICAgICAgICBlbmQKICAgICAgICBmb3IgXywgdiBpbiBwYWlycyhmcy5saXN0KHNCYXNlUGF0aCkpIGRvCiAgICAgICAgICAgIGxvY2FsIHNQYXRoID0gIi8iIC4uIGZzLmNvbWJpbmUoc0Jhc2VQYXRoLCB2KQogICAgICAgICAgICBpZiBub3QgZnMuaXNEaXIoc1BhdGgpIHRoZW4KICAgICAgICAgICAgICAgIHRTdGFydHVwc1sjdFN0YXJ0dXBzICsgMV0gPSBzUGF0aAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAogICAgcmV0dXJuIHRTdGFydHVwcwplbmQKCi0tIFNob3cgTU9URAppZiBzZXR0aW5ncy5nZXQoIm1vdGQuZW5hYmxlIikgdGhlbgogICAgc2hlbGwucnVuKCJtb3RkIikKZW5kCgotLSBSdW4gc3RhcnR1cCBwYXNzZWQgd2l0aCAtLXNjcmlwdCBpZiBhdmFpbGFibGUKaWYgX0NDUENfU1RBUlRVUF9TQ1JJUFQgdGhlbgogICAgbG9jYWwgZm4sIGVyciA9IGxvYWQoX0NDUENfU1RBUlRVUF9TQ1JJUFQsICJAc3RhcnR1cC5sdWEiLCAidCIsIF9FTlYpCiAgICBpZiBmbiB0aGVuCiAgICAgICAgbG9jYWwgYXJncyA9IHt9CiAgICAgICAgaWYgX0NDUENfU1RBUlRVUF9BUkdTIHRoZW4gZm9yIG4gaW4gX0NDUENfU1RBUlRVUF9BUkdTOmdtYXRjaCgiW14gXSsiKSBkbyB0YWJsZS5pbnNlcnQoYXJncywgbikgZW5kIGVuZAogICAgICAgIGZuKHRhYmxlLnVucGFjayhhcmdzKSkKICAgIGVsc2UgcHJpbnRFcnJvcigiQ291bGQgbm90IGxvYWQgc3RhcnR1cCBzY3JpcHQ6ICIgLi4gZXJyKSBlbmQKZW5kCgotLSBSdW4gdGhlIHVzZXIgY3JlYXRlZCBzdGFydHVwLCBlaXRoZXIgZnJvbSBkaXNrIGRyaXZlcyBvciB0aGUgcm9vdApsb2NhbCB0VXNlclN0YXJ0dXBzID0gbmlsCmlmIHNldHRpbmdzLmdldCgic2hlbGwuYWxsb3dfc3RhcnR1cCIpIHRoZW4KICAgIHRVc2VyU3RhcnR1cHMgPSBmaW5kU3RhcnR1cHMoIi8iKQplbmQKaWYgc2V0dGluZ3MuZ2V0KCJzaGVsbC5hbGxvd19kaXNrX3N0YXJ0dXAiKSB0aGVuCiAgICBmb3IgXywgc05hbWUgaW4gcGFpcnMocGVyaXBoZXJhbC5nZXROYW1lcygpKSBkbwogICAgICAgIGlmIGRpc2suaXNQcmVzZW50KHNOYW1lKSBhbmQgZGlzay5oYXNEYXRhKHNOYW1lKSB0aGVuCiAgICAgICAgICAgIGxvY2FsIHN0YXJ0dXBzID0gZmluZFN0YXJ0dXBzKGRpc2suZ2V0TW91bnRQYXRoKHNOYW1lKSkKICAgICAgICAgICAgaWYgc3RhcnR1cHMgdGhlbgogICAgICAgICAgICAgICAgdFVzZXJTdGFydHVwcyA9IHN0YXJ0dXBzCiAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAplbmQKaWYgdFVzZXJTdGFydHVwcyB0aGVuCiAgICBmb3IgXywgdiBpbiBwYWlycyh0VXNlclN0YXJ0dXBzKSBkbwogICAgICAgIHNoZWxsLnJ1bih2KQogICAgZW5kCmVuZAoKaWYgX0NDUENfUExVR0lOX0VSUk9SUyBhbmQgc2V0dGluZ3MuZ2V0KCJzaGVsbC5yZXBvcnRfcGx1Z2luX2Vycm9ycyIpIHRoZW4KICAgIHByaW50RXJyb3IoIlNvbWUgcGx1Z2lucyBmYWlsZWQgdG8gbG9hZDoiKQogICAgZm9yIGssdiBpbiBwYWlycyhfQ0NQQ19QTFVHSU5fRVJST1JTKSBkbwogICAgICAgIHByaW50RXJyb3IoIiAgIiAuLiBrIC4uICIgLSAiIC4uIHYpCiAgICBlbmQKZW5kCg==";
   Module["FS_createDataFile"]("/craftos/rom", "startup.lua", decodeBase64(fileData3), true, true, false);
   var fileData4 = "VmlzaXQgdGhlIHdlYnNpdGUgYXQgaHR0cHM6Ly93d3cuY3JhZnRvcy1wYy5jYwpQbGVhc2UgcmVwb3J0IGJ1Z3MgYXQgaHR0cHM6Ly93d3cuY3JhZnRvcy1wYy5jYy9idWdyZXBvcnQuIFRoYW5rcyEKVmlldyB0aGUgZG9jdW1lbnRhdGlvbiBhdCBodHRwczovL3dpa2kuY29tcHV0ZXJjcmFmdC5jYwpTaG93IG9mZiB5b3VyIHByb2dyYW1zIG9yIGFzayBmb3IgaGVscCBhdCBvdXIgZm9ydW06IGh0dHBzOi8vZm9ydW1zLmNvbXB1dGVyY3JhZnQuY2MKWW91IGNhbiBkaXNhYmxlIHRoZXNlIG1lc3NhZ2VzIGJ5IHJ1bm5pbmcgInNldCBtb3RkLmVuYWJsZSBmYWxzZSIuClVzZSAicGFzdGViaW4gcHV0IiB0byB1cGxvYWQgYSBwcm9ncmFtIHRvIHBhc3RlYmluLgpVc2UgdGhlICJlZGl0IiBwcm9ncmFtIHRvIGNyZWF0ZSBhbmQgZWRpdCB5b3VyIHByb2dyYW1zLgpZb3UgY2FuIHVzZSAid2dldCIgdG8gZG93bmxvYWQgYSBmaWxlIGZyb20gdGhlIGludGVybmV0LgpPbiBhbiBhZHZhbmNlZCBjb21wdXRlciB5b3UgY2FuIHVzZSAiZmciIG9yICJiZyIgdG8gcnVuIG11bHRpcGxlIHByb2dyYW1zIGF0IHRoZSBzYW1lIHRpbWUuClVzZSBhbiBhZHZhbmNlZCBjb21wdXRlciB0byB1c2UgY29sb3VycywgZ3JhcGhpY3MgbW9kZSwgYW5kIHRoZSBtb3VzZS4KV2l0aCBhIHNwZWFrZXIgeW91IGNhbiBwbGF5IHNvdW5kcy4KUHJvZ3JhbXMgdGhhdCBhcmUgcGxhY2VkIGluIHRoZSAic3RhcnR1cCIgZm9sZGVyIGluIHRoZSByb290IG9mIGEgY29tcHV0ZXIgYXJlIHN0YXJ0ZWQgb24gYm9vdC4KVXNlIGEgbW9kZW0gdG8gY29ubmVjdCB3aXRoIG90aGVyIGNvbXB1dGVycy4KVXNlICJtb25pdG9yIiB0byBydW4gYSBwcm9ncmFtIG9uIGEgYXR0YWNoZWQgbW9uaXRvci4KRG9uJ3QgZm9yZ2V0IHRvIGxhYmVsIHlvdXIgY29tcHV0ZXIgd2l0aCAibGFiZWwgc2V0Ii4KRmVlbGluZyBjcmVhdGl2ZT8gVXNlIGEgcHJpbnRlciB0byBwcmludCBhIGJvb2shCkZpbGVzIGJlZ2lubmluZyB3aXRoIGEgIi4iIGFyZSBoaWRkZW4gZnJvbSAibGlzdCIgYnkgZGVmYXVsdC4KUnVubmluZyAic2V0IiBsaXN0cyB0aGUgY3VycmVudCB2YWx1ZXMgb2YgYWxsIHNldHRpbmdzLgpIb2xkaW5nIHRoZSBDdHJsIGFuZCBUIGtleXMgdGVybWluYXRlcyB0aGUgcnVubmluZyBwcm9ncmFtLgpZb3UgY2FuIGF0dGFjaCBwZXJpcGhlcmFscyB1c2luZyB0aGUgImF0dGFjaCIgcHJvZ3JhbS4KWW91IGNhbiBjaGFuZ2UgdG8gdGhlIGFsdGVybmF0ZSBjYXNoIHNoZWxsIHdpdGggInNldCBiaW9zLnVzZV9jYXNoIHRydWUiLgpDaGVjayBvdXQgdGhlIHNvdXJjZSBjb2RlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9NQ0phY2sxMjMvY3JhZnRvczIuCklzIGEgcHJvZ3JhbSBub3Qgd29ya2luZyBjb3JyZWN0bHk/IFBsZWFzZSByZXBvcnQgaXQgdG8gaHR0cHM6Ly93d3cuY3JhZnRvcy1wYy5jYy9jb21wYXRpYmlsaXR5LgpEaWQgeW91IGtub3cgdGhlcmUncyBhIENvbXB1dGVyQ3JhZnQgRGlzY29yZCBzZXJ2ZXI/IEpvaW4gdXMgYXQgaHR0cHM6Ly9kaXNjb3JkLmNvbXB1dGVyY3JhZnQuY2MhCllvdSBjYW4gdGFrZSBzY3JlZW5zaG90cyB3aXRoIEYyLCBhbmQgcmVjb3JkIHRoZSBzY3JlZW4gdG8gYSBHSUYgd2l0aCBGMy4KUHJlc3NpbmcgRjEyIHdpbGwgY29weSBhIHNjcmVlbnNob3QgdG8gdGhlIGNsaXBib2FyZC4KT3BlbiBuZXcgY29tcHV0ZXJzIGJ5IHR5cGluZyAiYXR0YWNoIDxpZD4gY29tcHV0ZXIiIGluIHRoZSBzaGVsbC4KWW91IGNhbiB2aWV3IG5ldyBmZWF0dXJlcyBpbiBDcmFmdE9TLVBDIGF0IGFueSB0aW1lIHdpdGggImhlbHAgd2hhdHNuZXciLgpEaWQgeW91IGtub3cgeW91IGNhbiBsb2FkIHJlZ3VsYXIgTHVhIGxpYnJhcmllcyBhcyBwbHVnaW5zPwpDcmFmdE9TLVBDIGhhcyBpdHMgb3duIERpc2NvcmQgc2VydmVyIGF2YWlsYWJsZSBhdCBodHRwczovL3d3dy5jcmFmdG9zLXBjLmNjL2Rpc2NvcmQuCllvdSBjYW4gZHJhZyBhbmQgZHJvcCBmaWxlcyBvbnRvIGFuIG9wZW4gY29tcHV0ZXIgdG8gdXBsb2FkIHRoZW0u";
   Module["FS_createDataFile"]("/craftos/rom", "motd.txt", decodeBase64(fileData4), true, true, false);
   var fileData5 = "";
   Module["FS_createDataFile"]("/craftos/rom/apis", "gps.lua", decodeBase64(fileData5), true, true, false);
   var fileData6 = "";
   Module["FS_createDataFile"]("/craftos/rom/apis", "colors.lua", decodeBase64(fileData6), true, true, false);
   var fileData7 = "";
   Module["FS_createDataFile"]("/craftos/rom/apis", "textutils.lua", decodeBase64(fileData7), true, true, false);
   var fileData8 = "
   Module["FS_createDataFile"]("/craftos/rom/apis", ".DS_Store", decodeBase64(fileData8), true, true, false);
   var fileData9 = "Ci0tIE1pbmVjcmFmdCBrZXkgY29kZSBiaW5kaW5ncwotLSBTZWUgaHR0cDovL3d3dy5taW5lY3JhZnR3aWtpLm5ldC93aWtpL0tleV9jb2RlcyBmb3IgbW9yZSBpbmZvCgpsb2NhbCB0S2V5cyA9IHsKCW5pbCwJIAkib25lIiwgCQkidHdvIiwgCQkidGhyZWUiLCAJImZvdXIiLAkJCS0tIDEKCSJmaXZlIiwgCSJzaXgiLCAJCSJzZXZlbiIsIAkiZWlnaHQiLCAJIm5pbmUiLAkJCS0tIDYKCSJ6ZXJvIiwgCSJtaW51cyIsIAkiZXF1YWxzIiwgCSJiYWNrc3BhY2UiLCJ0YWIiLAkJCS0tIDExCgkicSIsIAkJInciLCAJCSJlIiwgCQkiciIsCQkidCIsCQkJLS0gMTYKCSJ5IiwJCSJ1IiwJCSJpIiwJCSJvIiwJCSJwIiwJCQktLSAyMQoJImxlZnRCcmFja2V0IiwicmlnaHRCcmFja2V0IiwiZW50ZXIiLCJsZWZ0Q3RybCIsImEiLAkJCS0tIDI2CgkicyIsCQkiZCIsCQkiZiIsCQkiZyIsCQkiaCIsCQkJLS0gMzEKCSJqIiwJCSJrIiwJCSJsIiwJCSJzZW1pQ29sb24iLCJhcG9zdHJvcGhlIiwJLS0gMzYKCSJncmF2ZSIsCSJsZWZ0U2hpZnQiLCJiYWNrc2xhc2giLCJ6IiwJCSJ4IiwJCQktLSA0MQoJImMiLAkJInYiLAkJImIiLAkJIm4iLAkJIm0iLAkJCS0tIDQ2CgkiY29tbWEiLAkicGVyaW9kIiwJInNsYXNoIiwJInJpZ2h0U2hpZnQiLCJtdWx0aXBseSIsCS0tIDUxCgkibGVmdEFsdCIsCSJzcGFjZSIsCSJjYXBzTG9jayIsCSJmMSIsCQkiZjIiLAkJCS0tIDU2CgkiZjMiLAkJImY0IiwJCSJmNSIsCQkiZjYiLAkJImY3IiwJCQktLSA2MQoJImY4IiwJCSJmOSIsCQkiZjEwIiwJCSJudW1Mb2NrIiwJInNjcm9sbExvY2siLAktLSA2NgoJIm51bVBhZDciLAkibnVtUGFkOCIsCSJudW1QYWQ5IiwJIm51bVBhZFN1YnRyYWN0IiwibnVtUGFkNCIsCS0tIDcxCgkibnVtUGFkNSIsCSJudW1QYWQ2IiwJIm51bVBhZEFkZCIsIm51bVBhZDEiLAkibnVtUGFkMiIsCQktLSA3NgoJIm51bVBhZDMiLAkibnVtUGFkMCIsCSJudW1QYWREZWNpbWFsIixuaWwsCW5pbCwJCQktLSA4MQoJbmlsLAkgCSJmMTEiLAkJImYxMiIsCQluaWwsCQluaWwsCQkJLS0gODYKCW5pbCwJCW5pbCwJCW5pbCwJCW5pbCwJCW5pbCwJCQktLSA5MQoJbmlsLAkJbmlsLAkJbmlsLAkJbmlsLAkJImYxMyIsCQkJLS0gOTYKCSJmMTQiLAkJImYxNSIsCQluaWwsCQluaWwsCQluaWwsCQkJLS0gMTAxCgluaWwsCQluaWwsCQluaWwsCQluaWwsCQluaWwsCQkJLS0gMTA2CgluaWwsCQkia2FuYSIsCQluaWwsCQluaWwsCQluaWwsCQkJLS0gMTExCgluaWwsCQluaWwsCQluaWwsCQluaWwsCQluaWwsCQkJLS0gMTE2CgkiY29udmVydCIsCW5pbCwJCSJub2NvbnZlcnQiLG5pbCwJCSJ5ZW4iLAkJCS0tIDEyMQoJbmlsLAkJbmlsLAkJbmlsLAkJbmlsLAkJbmlsLAkJCS0tIDEyNgoJbmlsLAkJbmlsLAkJbmlsLAkJbmlsLAkJbmlsLAkJCS0tIDEzMQoJbmlsLAkJbmlsLAkJbmlsLAkJbmlsLAkJbmlsLAkJCS0tIDEzNgoJIm51bVBhZEVxdWFscyIsbmlsLAkJbmlsLAkJImNpcmN1bWZsZXgiLCJhdCIsCQkJLS0gMTQxCgkiY29sb24iLAkidW5kZXJzY29yZSIsImthbmppIiwJInN0b3AiLAkJImF4IiwJCQktLSAxNDYKCW5pbCwJCW5pbCwJCW5pbCwJCW5pbCwJCW5pbCwJCQktLSAxNTEKCSJudW1QYWRFbnRlciIsInJpZ2h0Q3RybCIsbmlsLCAgICAgIG5pbCwJCW5pbCwJCQktLSAxNTYKCW5pbCwJCW5pbCwJCW5pbCwJCW5pbCwJCW5pbCwJCQktLSAxNjEKCW5pbCwJCW5pbCwJCW5pbCwJCW5pbCwJCW5pbCwJCQktLSAxNjYKCW5pbCwJCW5pbCwJCW5pbCwJCW5pbCwJCW5pbCwJCQktLSAxNzEKCW5pbCwJCW5pbCwJCW5pbCwJCSJudW1QYWRDb21tYSIsbmlsLAkJCS0tIDE3NgoJIm51bVBhZERpdmlkZSIsbmlsLAkJbmlsLAkJInJpZ2h0QWx0IiwJbmlsLAkJCS0tIDE4MQoJbmlsLAkJbmlsLAkJbmlsLAkJbmlsLAkJbmlsLAkJCS0tIDE4NgoJbmlsLAkJbmlsLAkJbmlsLAkJbmlsLAkJbmlsLAkJCS0tIDE5MQoJbmlsLAkJInBhdXNlIiwJbmlsLAkJImhvbWUiLAkJInVwIiwJCQktLSAxOTYKCSJwYWdlVXAiLAluaWwsCQkibGVmdCIsCQluaWwsCQkicmlnaHQiLAkJLS0gMjAxCgluaWwsCQkiZW5kIiwJCSJkb3duIiwJCSJwYWdlRG93biIsCSJpbnNlcnQiLAkJLS0gMjA2CgkiZGVsZXRlIgkJCQkJCQkJCQkJCQkJLS0gMjExCn0KCmxvY2FsIGtleXMgPSBfRU5WCmZvciBuS2V5LCBzS2V5IGluIHBhaXJzKCB0S2V5cyApIGRvCglrZXlzW3NLZXldID0gbktleQplbmQKa2V5c1sicmV0dXJuIl0gPSBrZXlzLmVudGVyCi0tIChVbi0pZml4IHNvbWUgbWlzc3BlbGxpbmdzCmtleXMuc2NvbGxMb2NrID0ga2V5cy5zY3JvbGxMb2NrCmtleXMuY2ltY3VtZmxleCA9IGtleXMuY2lyY3VtZmxleAoKZnVuY3Rpb24gZ2V0TmFtZSggX25LZXkgKQogICAgaWYgdHlwZSggX25LZXkgKSB+PSAibnVtYmVyIiB0aGVuCiAgICAgICAgZXJyb3IoICJiYWQgYXJndW1lbnQgIzEgKGV4cGVjdGVkIG51bWJlciwgZ290ICIgLi4gdHlwZSggX25LZXkgKSAuLiAiKSIsIDIgKSAKICAgIGVuZAoJcmV0dXJuIHRLZXlzWyBfbktleSBdCmVuZAo=";
   Module["FS_createDataFile"]("/craftos/rom/apis", "keys.lua", decodeBase64(fileData9), true, true, false);
   var fileData10 = "";
   Module["FS_createDataFile"]("/craftos/rom/apis", "settings.lua", decodeBase64(fileData10), true, true, false);
   var fileData11 = "";
   Module["FS_createDataFile"]("/craftos/rom/apis", "io.lua", decodeBase64(fileData11), true, true, false);
   var fileData12 = "LS0tIFRoZSB2ZWN0b3IgQVBJIHByb3ZpZGVzIG1ldGhvZHMgdG8gY3JlYXRlIGFuZCBtYW5pcHVsYXRlIHZlY3RvcnMuCi0tCi0tIEFuIGludHJvZHVjdGlvbiB0byB2ZWN0b3JzIGNhbiBiZSBmb3VuZCBvbiBbV2lraXBlZGlhXVt3aWtpXS4KLS0KLS0gW3dpa2ldOiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0V1Y2xpZGVhbl92ZWN0b3IKLS0KLS0gQG1vZHVsZSB2ZWN0b3IKLS0gQHNpbmNlIDEuMzEKCi0tLSBBIDMtZGltZW5zaW9uYWwgdmVjdG9yLCB3aXRoIGB4YCwgYHlgLCBhbmQgYHpgIHZhbHVlcy4KLS0KLS0gVGhpcyBpcyBzdWl0YWJsZSBmb3IgcmVwcmVzZW50aW5nIGJvdGggcG9zaXRpb24gYW5kIGRpcmVjdGlvbmFsIHZlY3RvcnMuCi0tCi0tIEB0eXBlIFZlY3Rvcgpsb2NhbCB2ZWN0b3IgPSB7CiAgICAtLS0gQWRkcyB0d28gdmVjdG9ycyB0b2dldGhlci4KICAgIC0tCiAgICAtLSBAdHBhcmFtIFZlY3RvciBzZWxmIFRoZSBmaXJzdCB2ZWN0b3IgdG8gYWRkLgogICAgLS0gQHRwYXJhbSBWZWN0b3IgbyBUaGUgc2Vjb25kIHZlY3RvciB0byBhZGQuCiAgICAtLSBAdHJldHVybiBWZWN0b3IgVGhlIHJlc3VsdGluZyB2ZWN0b3IKICAgIC0tIEB1c2FnZSB2MTphZGQodjIpCiAgICAtLSBAdXNhZ2UgdjEgKyB2MgogICAgYWRkID0gZnVuY3Rpb24oc2VsZiwgbykKICAgICAgICByZXR1cm4gdmVjdG9yLm5ldygKICAgICAgICAgICAgc2VsZi54ICsgby54LAogICAgICAgICAgICBzZWxmLnkgKyBvLnksCiAgICAgICAgICAgIHNlbGYueiArIG8uegogICAgICAgICkKICAgIGVuZCwKCiAgICAtLS0gU3VidHJhY3RzIG9uZSB2ZWN0b3IgZnJvbSBhbm90aGVyLgogICAgLS0KICAgIC0tIEB0cGFyYW0gVmVjdG9yIHNlbGYgVGhlIHZlY3RvciB0byBzdWJ0cmFjdCBmcm9tLgogICAgLS0gQHRwYXJhbSBWZWN0b3IgbyBUaGUgdmVjdG9yIHRvIHN1YnRyYWN0LgogICAgLS0gQHRyZXR1cm4gVmVjdG9yIFRoZSByZXN1bHRpbmcgdmVjdG9yCiAgICAtLSBAdXNhZ2UgdjE6c3ViKHYyKQogICAgLS0gQHVzYWdlIHYxIC0gdjIKICAgIHN1YiA9IGZ1bmN0aW9uKHNlbGYsIG8pCiAgICAgICAgcmV0dXJuIHZlY3Rvci5uZXcoCiAgICAgICAgICAgIHNlbGYueCAtIG8ueCwKICAgICAgICAgICAgc2VsZi55IC0gby55LAogICAgICAgICAgICBzZWxmLnogLSBvLnoKICAgICAgICApCiAgICBlbmQsCgogICAgLS0tIE11bHRpcGxpZXMgYSB2ZWN0b3IgYnkgYSBzY2FsYXIgdmFsdWUuCiAgICAtLQogICAgLS0gQHRwYXJhbSBWZWN0b3Igc2VsZiBUaGUgdmVjdG9yIHRvIG11bHRpcGx5LgogICAgLS0gQHRwYXJhbSBudW1iZXIgbSBUaGUgc2NhbGFyIHZhbHVlIHRvIG11bHRpcGx5IHdpdGguCiAgICAtLSBAdHJldHVybiBWZWN0b3IgQSB2ZWN0b3Igd2l0aCB2YWx1ZSBgKHggKiBtLCB5ICogbSwgeiAqIG0pYC4KICAgIC0tIEB1c2FnZSB2Om11bCgzKQogICAgLS0gQHVzYWdlIHYgKiAzCiAgICBtdWwgPSBmdW5jdGlvbihzZWxmLCBtKQogICAgICAgIHJldHVybiB2ZWN0b3IubmV3KAogICAgICAgICAgICBzZWxmLnggKiBtLAogICAgICAgICAgICBzZWxmLnkgKiBtLAogICAgICAgICAgICBzZWxmLnogKiBtCiAgICAgICAgKQogICAgZW5kLAoKICAgIC0tLSBEaXZpZGVzIGEgdmVjdG9yIGJ5IGEgc2NhbGFyIHZhbHVlLgogICAgLS0KICAgIC0tIEB0cGFyYW0gVmVjdG9yIHNlbGYgVGhlIHZlY3RvciB0byBkaXZpZGUuCiAgICAtLSBAdHBhcmFtIG51bWJlciBtIFRoZSBzY2FsYXIgdmFsdWUgdG8gZGl2aWRlIGJ5LgogICAgLS0gQHRyZXR1cm4gVmVjdG9yIEEgdmVjdG9yIHdpdGggdmFsdWUgYCh4IC8gbSwgeSAvIG0sIHogLyBtKWAuCiAgICAtLSBAdXNhZ2UgdjpkaXYoMykKICAgIC0tIEB1c2FnZSB2IC8gMwogICAgZGl2ID0gZnVuY3Rpb24oc2VsZiwgbSkKICAgICAgICByZXR1cm4gdmVjdG9yLm5ldygKICAgICAgICAgICAgc2VsZi54IC8gbSwKICAgICAgICAgICAgc2VsZi55IC8gbSwKICAgICAgICAgICAgc2VsZi56IC8gbQogICAgICAgICkKICAgIGVuZCwKCiAgICAtLS0gTmVnYXRlIGEgdmVjdG9yCiAgICAtLQogICAgLS0gQHRwYXJhbSBWZWN0b3Igc2VsZiBUaGUgdmVjdG9yIHRvIG5lZ2F0ZS4KICAgIC0tIEB0cmV0dXJuIFZlY3RvciBUaGUgbmVnYXRlZCB2ZWN0b3IuCiAgICAtLSBAdXNhZ2UgLXYKICAgIHVubSA9IGZ1bmN0aW9uKHNlbGYpCiAgICAgICAgcmV0dXJuIHZlY3Rvci5uZXcoCiAgICAgICAgICAgIC1zZWxmLngsCiAgICAgICAgICAgIC1zZWxmLnksCiAgICAgICAgICAgIC1zZWxmLnoKICAgICAgICApCiAgICBlbmQsCgogICAgLS0tIENvbXB1dGUgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byB2ZWN0b3JzCiAgICAtLQogICAgLS0gQHRwYXJhbSBWZWN0b3Igc2VsZiBUaGUgZmlyc3QgdmVjdG9yIHRvIGNvbXB1dGUgdGhlIGRvdCBwcm9kdWN0IG9mLgogICAgLS0gQHRwYXJhbSBWZWN0b3IgbyBUaGUgc2Vjb25kIHZlY3RvciB0byBjb21wdXRlIHRoZSBkb3QgcHJvZHVjdCBvZi4KICAgIC0tIEB0cmV0dXJuIFZlY3RvciBUaGUgZG90IHByb2R1Y3Qgb2YgYHNlbGZgIGFuZCBgb2AuCiAgICAtLSBAdXNhZ2UgdjE6ZG90KHYyKQogICAgZG90ID0gZnVuY3Rpb24oc2VsZiwgbykKICAgICAgICByZXR1cm4gc2VsZi54ICogby54ICsgc2VsZi55ICogby55ICsgc2VsZi56ICogby56CiAgICBlbmQsCgogICAgLS0tIENvbXB1dGUgdGhlIGNyb3NzIHByb2R1Y3Qgb2YgdHdvIHZlY3RvcnMKICAgIC0tCiAgICAtLSBAdHBhcmFtIFZlY3RvciBzZWxmIFRoZSBmaXJzdCB2ZWN0b3IgdG8gY29tcHV0ZSB0aGUgY3Jvc3MgcHJvZHVjdCBvZi4KICAgIC0tIEB0cGFyYW0gVmVjdG9yIG8gVGhlIHNlY29uZCB2ZWN0b3IgdG8gY29tcHV0ZSB0aGUgY3Jvc3MgcHJvZHVjdCBvZi4KICAgIC0tIEB0cmV0dXJuIFZlY3RvciBUaGUgY3Jvc3MgcHJvZHVjdCBvZiBgc2VsZmAgYW5kIGBvYC4KICAgIC0tIEB1c2FnZSB2MTpjcm9zcyh2MikKICAgIGNyb3NzID0gZnVuY3Rpb24oc2VsZiwgbykKICAgICAgICByZXR1cm4gdmVjdG9yLm5ldygKICAgICAgICAgICAgc2VsZi55ICogby56IC0gc2VsZi56ICogby55LAogICAgICAgICAgICBzZWxmLnogKiBvLnggLSBzZWxmLnggKiBvLnosCiAgICAgICAgICAgIHNlbGYueCAqIG8ueSAtIHNlbGYueSAqIG8ueAogICAgICAgICkKICAgIGVuZCwKCiAgICAtLS0gR2V0IHRoZSBsZW5ndGggKGFsc28gcmVmZXJyZWQgdG8gYXMgbWFnbml0dWRlKSBvZiB0aGlzIHZlY3Rvci4KICAgIC0tIEB0cGFyYW0gVmVjdG9yIHNlbGYgVGhpcyB2ZWN0b3IuCiAgICAtLSBAdHJldHVybiBudW1iZXIgVGhlIGxlbmd0aCBvZiB0aGlzIHZlY3Rvci4KICAgIGxlbmd0aCA9IGZ1bmN0aW9uKHNlbGYpCiAgICAgICAgcmV0dXJuIG1hdGguc3FydChzZWxmLnggKiBzZWxmLnggKyBzZWxmLnkgKiBzZWxmLnkgKyBzZWxmLnogKiBzZWxmLnopCiAgICBlbmQsCgogICAgLS0tIERpdmlkZSB0aGlzIHZlY3RvciBieSBpdHMgbGVuZ3RoLCBwcm9kdWNpbmcgd2l0aCB0aGUgc2FtZSBkaXJlY3Rpb24sIGJ1dAogICAgLS0gb2YgbGVuZ3RoIDEuCiAgICAtLQogICAgLS0gQHRwYXJhbSBWZWN0b3Igc2VsZiBUaGUgdmVjdG9yIHRvIG5vcm1hbGlzZQogICAgLS0gQHRyZXR1cm4gVmVjdG9yIFRoZSBub3JtYWxpc2VkIHZlY3RvcgogICAgLS0gQHVzYWdlIHY6bm9ybWFsaXplKCkKICAgIG5vcm1hbGl6ZSA9IGZ1bmN0aW9uKHNlbGYpCiAgICAgICAgcmV0dXJuIHNlbGY6bXVsKDEgLyBzZWxmOmxlbmd0aCgpKQogICAgZW5kLAoKICAgIC0tLSBDb25zdHJ1Y3QgYSB2ZWN0b3Igd2l0aCBlYWNoIGRpbWVuc2lvbiByb3VuZGVkIHRvIHRoZSBuZWFyZXN0IHZhbHVlLgogICAgLS0KICAgIC0tIEB0cGFyYW0gVmVjdG9yIHNlbGYgVGhlIHZlY3RvciB0byByb3VuZAogICAgLS0gQHRwYXJhbVtvcHRdIG51bWJlciB0b2xlcmFuY2UgVGhlIHRvbGVyYW5jZSB0aGF0IHdlIHNob3VsZCByb3VuZCB0bywKICAgIC0tIGRlZmF1bHRpbmcgdG8gMS4gRm9yIGluc3RhbmNlLCBhIHRvbGVyYW5jZSBvZiAwLjUgd2lsbCByb3VuZCB0byB0aGUKICAgIC0tIG5lYXJlc3QgMC41LgogICAgLS0gQHRyZXR1cm4gVmVjdG9yIFRoZSByb3VuZGVkIHZlY3Rvci4KICAgIHJvdW5kID0gZnVuY3Rpb24oc2VsZiwgdG9sZXJhbmNlKQogICAgICAgIHRvbGVyYW5jZSA9IHRvbGVyYW5jZSBvciAxLjAKICAgICAgICByZXR1cm4gdmVjdG9yLm5ldygKICAgICAgICAgICAgbWF0aC5mbG9vcigoc2VsZi54ICsgdG9sZXJhbmNlICogMC41KSAvIHRvbGVyYW5jZSkgKiB0b2xlcmFuY2UsCiAgICAgICAgICAgIG1hdGguZmxvb3IoKHNlbGYueSArIHRvbGVyYW5jZSAqIDAuNSkgLyB0b2xlcmFuY2UpICogdG9sZXJhbmNlLAogICAgICAgICAgICBtYXRoLmZsb29yKChzZWxmLnogKyB0b2xlcmFuY2UgKiAwLjUpIC8gdG9sZXJhbmNlKSAqIHRvbGVyYW5jZQogICAgICAgICkKICAgIGVuZCwKCiAgICAtLS0gQ29udmVydCB0aGlzIHZlY3RvciBpbnRvIGEgc3RyaW5nLCBmb3IgcHJldHR5IHByaW50aW5nLgogICAgLS0KICAgIC0tIEB0cGFyYW0gVmVjdG9yIHNlbGYgVGhpcyB2ZWN0b3IuCiAgICAtLSBAdHJldHVybiBzdHJpbmcgVGhpcyB2ZWN0b3IncyBzdHJpbmcgcmVwcmVzZW50YXRpb24uCiAgICAtLSBAdXNhZ2Ugdjp0b3N0cmluZygpCiAgICAtLSBAdXNhZ2UgdG9zdHJpbmcodikKICAgIHRvc3RyaW5nID0gZnVuY3Rpb24oc2VsZikKICAgICAgICByZXR1cm4gc2VsZi54IC4uICIsIiAuLiBzZWxmLnkgLi4gIiwiIC4uIHNlbGYuegogICAgZW5kLAoKICAgIC0tLSBDaGVjayBmb3IgZXF1YWxpdHkgYmV0d2VlbiB0d28gdmVjdG9ycy4KICAgIC0tCiAgICAtLSBAdHBhcmFtIFZlY3RvciBzZWxmIFRoZSBmaXJzdCB2ZWN0b3IgdG8gY29tcGFyZS4KICAgIC0tIEB0cGFyYW0gVmVjdG9yIG90aGVyIFRoZSBzZWNvbmQgdmVjdG9yIHRvIGNvbXBhcmUgdG8uCiAgICAtLSBAdHJldHVybiBib29sZWFuIFdoZXRoZXIgb3Igbm90IHRoZSB2ZWN0b3JzIGFyZSBlcXVhbC4KICAgIGVxdWFscyA9IGZ1bmN0aW9uKHNlbGYsIG90aGVyKQogICAgICAgIHJldHVybiBzZWxmLnggPT0gb3RoZXIueCBhbmQgc2VsZi55ID09IG90aGVyLnkgYW5kIHNlbGYueiA9PSBvdGhlci56CiAgICBlbmQsCn0KCmxvY2FsIHZtZXRhdGFibGUgPSB7CiAgICBfX2luZGV4ID0gdmVjdG9yLAogICAgX19hZGQgPSB2ZWN0b3IuYWRkLAogICAgX19zdWIgPSB2ZWN0b3Iuc3ViLAogICAgX19tdWwgPSB2ZWN0b3IubXVsLAogICAgX19kaXYgPSB2ZWN0b3IuZGl2LAogICAgX191bm0gPSB2ZWN0b3IudW5tLAogICAgX190b3N0cmluZyA9IHZlY3Rvci50b3N0cmluZywKICAgIF9fZXEgPSB2ZWN0b3IuZXF1YWxzLAp9CgotLS0gQ29uc3RydWN0IGEgbmV3IEB7VmVjdG9yfSB3aXRoIHRoZSBnaXZlbiBjb29yZGluYXRlcy4KLS0KLS0gQHRwYXJhbSBudW1iZXIgeCBUaGUgWCBjb29yZGluYXRlIG9yIGRpcmVjdGlvbiBvZiB0aGUgdmVjdG9yLgotLSBAdHBhcmFtIG51bWJlciB5IFRoZSBZIGNvb3JkaW5hdGUgb3IgZGlyZWN0aW9uIG9mIHRoZSB2ZWN0b3IuCi0tIEB0cGFyYW0gbnVtYmVyIHogVGhlIFogY29vcmRpbmF0ZSBvciBkaXJlY3Rpb24gb2YgdGhlIHZlY3Rvci4KLS0gQHRyZXR1cm4gVmVjdG9yIFRoZSBjb25zdHJ1Y3RlZCB2ZWN0b3IuCmZ1bmN0aW9uIG5ldyh4LCB5LCB6KQogICAgcmV0dXJuIHNldG1ldGF0YWJsZSh7CiAgICAgICAgeCA9IHRvbnVtYmVyKHgpIG9yIDAsCiAgICAgICAgeSA9IHRvbnVtYmVyKHkpIG9yIDAsCiAgICAgICAgeiA9IHRvbnVtYmVyKHopIG9yIDAsCiAgICB9LCB2bWV0YXRhYmxlKQplbmQK";
   Module["FS_createDataFile"]("/craftos/rom/apis", "vector.lua", decodeBase64(fileData12), true, true, false);
   var fileData13 = "";
   Module["FS_createDataFile"]("/craftos/rom/apis", "paintutils.lua", decodeBase64(fileData13), true, true, false);
   var fileData14 = "LS0tIFRoZSBUZXJtaW5hbCBBUEkgcHJvdmlkZXMgZnVuY3Rpb25zIGZvciB3cml0aW5nIHRleHQgdG8gdGhlIHRlcm1pbmFsIGFuZAotLSBtb25pdG9ycywgYW5kIGRyYXdpbmcgQVNDSUkgZ3JhcGhpY3MuCi0tCi0tIEBtb2R1bGUgdGVybQoKbG9jYWwgZXhwZWN0ID0gZG9maWxlKCJyb20vbW9kdWxlcy9tYWluL2NjL2V4cGVjdC5sdWEiKS5leHBlY3QKCmxvY2FsIG5hdGl2ZSA9IHRlcm0ubmF0aXZlIGFuZCB0ZXJtLm5hdGl2ZSgpIG9yIHRlcm0KbG9jYWwgcmVkaXJlY3RUYXJnZXQgPSBuYXRpdmUKCmxvY2FsIGZ1bmN0aW9uIHdyYXAoX3NGdW5jdGlvbikKICAgIHJldHVybiBmdW5jdGlvbiguLi4pCiAgICAgICAgcmV0dXJuIHJlZGlyZWN0VGFyZ2V0W19zRnVuY3Rpb25dKC4uLikKICAgIGVuZAplbmQKCmxvY2FsIHRlcm0gPSBfRU5WCgotLS0gUmVkaXJlY3RzIHRlcm1pbmFsIG91dHB1dCB0byBhIG1vbml0b3IsIGEgQHt3aW5kb3d9LCBvciBhbnkgb3RoZXIgY3VzdG9tCi0tIHRlcm1pbmFsIG9iamVjdC4gT25jZSB0aGUgcmVkaXJlY3QgaXMgcGVyZm9ybWVkLCBhbnkgY2FsbHMgdG8gYSAidGVybSIKLS0gZnVuY3Rpb24gLSBvciB0byBhIGZ1bmN0aW9uIHRoYXQgbWFrZXMgdXNlIG9mIGEgdGVybSBmdW5jdGlvbiwgYXMgQHtwcmludH0gLQotLSB3aWxsIGluc3RlYWQgb3BlcmF0ZSB3aXRoIHRoZSBuZXcgdGVybWluYWwgb2JqZWN0LgotLQotLSBBICJ0ZXJtaW5hbCBvYmplY3QiIGlzIHNpbXBseSBhIHRhYmxlIHRoYXQgY29udGFpbnMgZnVuY3Rpb25zIHdpdGggdGhlIHNhbWUKLS0gbmFtZXMgLSBhbmQgZ2VuZXJhbCBmZWF0dXJlcyAtIGFzIHRob3NlIGZvdW5kIGluIHRoZSB0ZXJtIHRhYmxlLiBGb3IgZXhhbXBsZSwKLS0gYSB3cmFwcGVkIG1vbml0b3IgaXMgc3VpdGFibGUuCi0tCi0tIFRoZSByZWRpcmVjdCBjYW4gYmUgdW5kb25lIGJ5IHBvaW50aW5nIGJhY2sgdG8gdGhlIHByZXZpb3VzIHRlcm1pbmFsIG9iamVjdAotLSAod2hpY2ggdGhpcyBmdW5jdGlvbiByZXR1cm5zIHdoZW5ldmVyIHlvdSBzd2l0Y2gpLgotLQotLSBAdHBhcmFtIFJlZGlyZWN0IHRhcmdldCBUaGUgdGVybWluYWwgcmVkaXJlY3QgdGhlIEB7dGVybX0gQVBJIHdpbGwgZHJhdyB0by4KLS0gQHRyZXR1cm4gUmVkaXJlY3QgVGhlIHByZXZpb3VzIHJlZGlyZWN0IG9iamVjdCwgYXMgcmV0dXJuZWQgYnkKLS0gQHt0ZXJtLmN1cnJlbnR9LgotLSBAc2luY2UgMS4zMQotLSBAdXNhZ2UKLS0gUmVkaXJlY3QgdG8gYSBtb25pdG9yIG9uIHRoZSByaWdodCBvZiB0aGUgY29tcHV0ZXIuCi0tICAgICB0ZXJtLnJlZGlyZWN0KHBlcmlwaGVyYWwud3JhcCgicmlnaHQiKSkKdGVybS5yZWRpcmVjdCA9IGZ1bmN0aW9uKHRhcmdldCkKICAgIGV4cGVjdCgxLCB0YXJnZXQsICJ0YWJsZSIpCiAgICBpZiB0YXJnZXQgPT0gdGVybSBvciB0YXJnZXQgPT0gX0cudGVybSB0aGVuCiAgICAgICAgZXJyb3IoInRlcm0gaXMgbm90IGEgcmVjb21tZW5kZWQgcmVkaXJlY3QgdGFyZ2V0LCB0cnkgdGVybS5jdXJyZW50KCkgaW5zdGVhZCIsIDIpCiAgICBlbmQKCiAgICBmb3IgXywgbWV0aG9kIGluIGlwYWlycyB7CiAgICAgICAgInNldEdyYXBoaWNzTW9kZSIsCiAgICAgICAgImdldEdyYXBoaWNzTW9kZSIsCiAgICAgICAgInNldFBpeGVsIiwKICAgICAgICAiZ2V0UGl4ZWwiLAogICAgICAgICJkcmF3UGl4ZWxzIiwKICAgICAgICAiZ2V0UGl4ZWxzIiwKICAgICAgICAic2hvd01vdXNlIiwKICAgICAgICAic2V0RnJvemVuIiwKICAgICAgICAiZ2V0RnJvemVuIgogICAgfSBkbwogICAgICAgIGlmIHRhcmdldFttZXRob2RdID09IG5pbCB0aGVuCiAgICAgICAgICAgIHRhcmdldFttZXRob2RdID0gbmF0aXZlW21ldGhvZF0KICAgICAgICBlbmQKICAgIGVuZAoKICAgIGZvciBrLCB2IGluIHBhaXJzKG5hdGl2ZSkgZG8KICAgICAgICBpZiB0eXBlKGspID09ICJzdHJpbmciIGFuZCB0eXBlKHYpID09ICJmdW5jdGlvbiIgdGhlbgogICAgICAgICAgICBpZiB0eXBlKHRhcmdldFtrXSkgfj0gImZ1bmN0aW9uIiB0aGVuCiAgICAgICAgICAgICAgICB0YXJnZXRba10gPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgZXJyb3IoIlJlZGlyZWN0IG9iamVjdCBpcyBtaXNzaW5nIG1ldGhvZCAiIC4uIGsgLi4gIi4iLCAyKQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kCiAgICBsb2NhbCBvbGRSZWRpcmVjdFRhcmdldCA9IHJlZGlyZWN0VGFyZ2V0CiAgICByZWRpcmVjdFRhcmdldCA9IHRhcmdldAogICAgcmV0dXJuIG9sZFJlZGlyZWN0VGFyZ2V0CmVuZAoKLS0tIFJldHVybnMgdGhlIGN1cnJlbnQgdGVybWluYWwgb2JqZWN0IG9mIHRoZSBjb21wdXRlci4KLS0KLS0gQHRyZXR1cm4gUmVkaXJlY3QgVGhlIGN1cnJlbnQgdGVybWluYWwgcmVkaXJlY3QKLS0gQHNpbmNlIDEuNgotLSBAdXNhZ2UKLS0gQ3JlYXRlIGEgbmV3IEB7d2luZG93fSB3aGljaCBkcmF3cyB0byB0aGUgY3VycmVudCByZWRpcmVjdCB0YXJnZXQKLS0gICAgIHdpbmRvdy5jcmVhdGUodGVybS5jdXJyZW50KCksIDEsIDEsIDEwLCAxMCkKdGVybS5jdXJyZW50ID0gZnVuY3Rpb24oKQogICAgcmV0dXJuIHJlZGlyZWN0VGFyZ2V0CmVuZAoKLS0tIEdldCB0aGUgbmF0aXZlIHRlcm1pbmFsIG9iamVjdCBvZiB0aGUgY3VycmVudCBjb21wdXRlci4KLS0KLS0gSXQgaXMgcmVjb21tZW5kZWQgeW91IGRvIG5vdCB1c2UgdGhpcyBmdW5jdGlvbiB1bmxlc3MgeW91IGFic29sdXRlbHkgaGF2ZQotLSB0by4gSW4gYSBtdWx0aXRhc2tlZCBlbnZpcm9ubWVudCwgQHt0ZXJtLm5hdGl2ZX0gd2lsbCBfbm90XyBiZSB0aGUgY3VycmVudAotLSB0ZXJtaW5hbCBvYmplY3QsIGFuZCBzbyBkcmF3aW5nIG1heSBpbnRlcmZlcmUgd2l0aCBvdGhlciBwcm9ncmFtcy4KLS0KLS0gQHRyZXR1cm4gUmVkaXJlY3QgVGhlIG5hdGl2ZSB0ZXJtaW5hbCByZWRpcmVjdC4KLS0gQHNpbmNlIDEuNgp0ZXJtLm5hdGl2ZSA9IGZ1bmN0aW9uKCkKICAgIHJldHVybiBuYXRpdmUKZW5kCgotLSBTb21lIG1ldGhvZHMgc2hvdWxkbid0IGdvIHRocm91Z2ggcmVkaXJlY3RzLCBzbyB3ZSBtb3ZlIHRoZW0gdG8gdGhlIG1haW4KLS0gdGVybSBBUEkuCmZvciBfLCBtZXRob2QgaW4gaXBhaXJzIHsgIm5hdGl2ZVBhbGV0dGVDb2xvciIsICJuYXRpdmVQYWxldHRlQ29sb3VyIiwgInNjcmVlbnNob3QiIH0gZG8KICAgIHRlcm1bbWV0aG9kXSA9IG5hdGl2ZVttZXRob2RdCiAgICBuYXRpdmVbbWV0aG9kXSA9IG5pbAplbmQKCmZvciBrLCB2IGluIHBhaXJzKG5hdGl2ZSkgZG8KICAgIGlmIHR5cGUoaykgPT0gInN0cmluZyIgYW5kIHR5cGUodikgPT0gImZ1bmN0aW9uIiBhbmQgcmF3Z2V0KHRlcm0sIGspID09IG5pbCB0aGVuCiAgICAgICAgdGVybVtrXSA9IHdyYXAoaykKICAgIGVuZAplbmQK";
   Module["FS_createDataFile"]("/craftos/rom/apis", "term.lua", decodeBase64(fileData14), true, true, false);
   var fileData15 = "";
   Module["FS_createDataFile"]("/craftos/rom/apis", "peripheral.lua", decodeBase64(fileData15), true, true, false);
   var fileData16 = "";
   Module["FS_createDataFile"]("/craftos/rom/apis", "rednet.lua", decodeBase64(fileData16), true, true, false);
   var fileData17 = "LS0tIFByb3ZpZGVzIGFuIEFQSSB0byByZWFkIGhlbHAgZmlsZXMuCi0tCi0tIEBtb2R1bGUgaGVscAotLSBAc2luY2UgMS4yCgpsb2NhbCBleHBlY3QgPSBkb2ZpbGUoInJvbS9tb2R1bGVzL21haW4vY2MvZXhwZWN0Lmx1YSIpLmV4cGVjdAoKbG9jYWwgc1BhdGggPSAiL3JvbS9oZWxwIgoKLS0tIFJldHVybnMgYSBjb2xvbi1zZXBhcmF0ZWQgbGlzdCBvZiBkaXJlY3RvcmllcyB3aGVyZSBoZWxwIGZpbGVzIGFyZSBzZWFyY2hlZAotLSBmb3IuIEFsbCBkaXJlY3RvcmllcyBhcmUgYWJzb2x1dGUuCi0tCi0tIEB0cmV0dXJuIHN0cmluZyBUaGUgY3VycmVudCBoZWxwIHNlYXJjaCBwYXRoLCBzZXBhcmF0ZWQgYnkgY29sb25zLgotLSBAc2VlIGhlbHAuc2V0UGF0aApmdW5jdGlvbiBwYXRoKCkKICAgIHJldHVybiBzUGF0aAplbmQKCi0tLSBTZXRzIHRoZSBjb2xvbi1zZXBlcmF0ZWQgbGlzdCBvZiBkaXJlY3RvcmllcyB3aGVyZSBoZWxwIGZpbGVzIGFyZSBzZWFyY2hlZAotLSBmb3IgdG8gYG5ld1BhdGhgCi0tCi0tIEB0cGFyYW0gc3RyaW5nIG5ld1BhdGggVGhlIG5ldyBwYXRoIHRvIHVzZS4KLS0gQHVzYWdlIGhlbHAuc2V0UGF0aCggIi9kaXNrL2hlbHAvIiApCi0tIEB1c2FnZSBoZWxwLnNldFBhdGgoIGhlbHAucGF0aCgpIC4uICI6L215Zm9sZGVyL2hlbHAvIiApCi0tIEBzZWUgaGVscC5wYXRoCmZ1bmN0aW9uIHNldFBhdGgoX3NQYXRoKQogICAgZXhwZWN0KDEsIF9zUGF0aCwgInN0cmluZyIpCiAgICBzUGF0aCA9IF9zUGF0aAplbmQKCmxvY2FsIGV4dGVuc2lvbnMgPSB7ICIiLCAiLm1kIiwgIi50eHQiIH0KCi0tLSBSZXR1cm5zIHRoZSBsb2NhdGlvbiBvZiB0aGUgaGVscCBmaWxlIGZvciB0aGUgZ2l2ZW4gdG9waWMuCi0tCi0tIEB0cGFyYW0gc3RyaW5nIHRvcGljIFRoZSB0b3BpYyB0byBmaW5kCi0tIEB0cmV0dXJuIHN0cmluZ3xuaWwgVGhlIHBhdGggdG8gdGhlIGdpdmVuIHRvcGljJ3MgaGVscCBmaWxlLCBvciBgbmlsYCBpZiBpdAotLSBjYW5ub3QgYmUgZm91bmQuCi0tIEB1c2FnZSBoZWxwLmxvb2t1cCgiZGlzayIpCi0tIEBjaGFuZ2VkIDEuODBwcjEgTm93IHN1cHBvcnRzIGZpbmRpbmcgLnR4dCBmaWxlcy4KLS0gQGNoYW5nZWQgMS45Ny4wIE5vdyBzdXBwb3J0cyBmaW5kaW5nIE1hcmtkb3duIGZpbGVzLgpmdW5jdGlvbiBsb29rdXAodG9waWMpCiAgICBleHBlY3QoMSwgdG9waWMsICJzdHJpbmciKQogICAgLS0gTG9vayBvbiB0aGUgcGF0aCB2YXJpYWJsZQogICAgZm9yIHBhdGggaW4gc3RyaW5nLmdtYXRjaChzUGF0aCwgIlteOl0rIikgZG8KICAgICAgICBwYXRoID0gZnMuY29tYmluZShwYXRoLCB0b3BpYykKICAgICAgICBmb3IgXywgZXh0ZW5zaW9uIGluIGlwYWlycyhleHRlbnNpb25zKSBkbwogICAgICAgICAgICBsb2NhbCBmaWxlID0gcGF0aCAuLiBleHRlbnNpb24KICAgICAgICAgICAgaWYgZnMuZXhpc3RzKGZpbGUpIGFuZCBub3QgZnMuaXNEaXIoZmlsZSkgdGhlbgogICAgICAgICAgICAgICAgcmV0dXJuIGZpbGUKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICAtLSBOb3QgZm91bmQKICAgIHJldHVybiBuaWwKZW5kCgotLS0gUmV0dXJucyBhIGxpc3Qgb2YgdG9waWNzIHRoYXQgY2FuIGJlIGxvb2tlZCB1cCBhbmQvb3IgZGlzcGxheWVkLgotLQotLSBAdHJldHVybiB0YWJsZSBBIGxpc3Qgb2YgdG9waWNzIGluIGFscGhhYmV0aWNhbCBvcmRlci4KLS0gQHVzYWdlIGhlbHAudG9waWNzKCkKZnVuY3Rpb24gdG9waWNzKCkKICAgIC0tIEFkZCBpbmRleAogICAgbG9jYWwgdEl0ZW1zID0gewogICAgICAgIFsiaW5kZXgiXSA9IHRydWUsCiAgICB9CgogICAgLS0gQWRkIHRvcGljcyBmcm9tIHRoZSBwYXRoCiAgICBmb3Igc1BhdGggaW4gc3RyaW5nLmdtYXRjaChzUGF0aCwgIlteOl0rIikgZG8KICAgICAgICBpZiBmcy5pc0RpcihzUGF0aCkgdGhlbgogICAgICAgICAgICBsb2NhbCB0TGlzdCA9IGZzLmxpc3Qoc1BhdGgpCiAgICAgICAgICAgIGZvciBfLCBzRmlsZSBpbiBwYWlycyh0TGlzdCkgZG8KICAgICAgICAgICAgICAgIGlmIHN0cmluZy5zdWIoc0ZpbGUsIDEsIDEpIH49ICIuIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgaWYgbm90IGZzLmlzRGlyKGZzLmNvbWJpbmUoc1BhdGgsIHNGaWxlKSkgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBmb3IgaSA9IDIsICNleHRlbnNpb25zIGRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBleHRlbnNpb24gPSBleHRlbnNpb25zW2ldCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAjc0ZpbGUgPiAjZXh0ZW5zaW9uIGFuZCBzRmlsZTpzdWIoLSNleHRlbnNpb24pID09IGV4dGVuc2lvbiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc0ZpbGUgPSBzRmlsZTpzdWIoMSwgLSNleHRlbnNpb24gLSAxKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICB0SXRlbXNbc0ZpbGVdID0gdHJ1ZQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kCgogICAgLS0gU29ydCBhbmQgcmV0dXJuCiAgICBsb2NhbCB0SXRlbUxpc3QgPSB7fQogICAgZm9yIHNJdGVtIGluIHBhaXJzKHRJdGVtcykgZG8KICAgICAgICB0YWJsZS5pbnNlcnQodEl0ZW1MaXN0LCBzSXRlbSkKICAgIGVuZAogICAgdGFibGUuc29ydCh0SXRlbUxpc3QpCiAgICByZXR1cm4gdEl0ZW1MaXN0CmVuZAoKLS0tIFJldHVybnMgYSBsaXN0IG9mIHRvcGljIGVuZGluZ3MgdGhhdCBtYXRjaCB0aGUgcHJlZml4LiBDYW4gYmUgdXNlZCB3aXRoCi0tIGByZWFkYCB0byBhbGxvdyBpbnB1dCBvZiBhIGhlbHAgdG9waWMuCi0tCi0tIEB0cGFyYW0gc3RyaW5nIHByZWZpeCBUaGUgcHJlZml4IHRvIG1hdGNoCi0tIEB0cmV0dXJuIHRhYmxlIEEgbGlzdCBvZiBtYXRjaGluZyB0b3BpY3MuCi0tIEBzaW5jZSAxLjc0CmZ1bmN0aW9uIGNvbXBsZXRlVG9waWMoc1RleHQpCiAgICBleHBlY3QoMSwgc1RleHQsICJzdHJpbmciKQogICAgbG9jYWwgdFRvcGljcyA9IHRvcGljcygpCiAgICBsb2NhbCB0UmVzdWx0cyA9IHt9CiAgICBmb3IgbiA9IDEsICN0VG9waWNzIGRvCiAgICAgICAgbG9jYWwgc1RvcGljID0gdFRvcGljc1tuXQogICAgICAgIGlmICNzVG9waWMgPiAjc1RleHQgYW5kIHN0cmluZy5zdWIoc1RvcGljLCAxLCAjc1RleHQpID09IHNUZXh0IHRoZW4KICAgICAgICAgICAgdGFibGUuaW5zZXJ0KHRSZXN1bHRzLCBzdHJpbmcuc3ViKHNUb3BpYywgI3NUZXh0ICsgMSkpCiAgICAgICAgZW5kCiAgICBlbmQKICAgIHJldHVybiB0UmVzdWx0cwplbmQK";
   Module["FS_createDataFile"]("/craftos/rom/apis", "help.lua", decodeBase64(fileData17), true, true, false);
   var fileData18 = "";
   Module["FS_createDataFile"]("/craftos/rom/apis", "window.lua", decodeBase64(fileData18), true, true, false);
   var fileData19 = "LS0tIENvbG91cnMgZm9yIGxvdmVycyBvZiBCcml0aXNoIHNwZWxsaW5nLgotLQotLSBAc2VlIGNvbG9ycwotLSBAbW9kdWxlIGNvbG91cnMKLS0gQHNpbmNlIDEuMgoKbG9jYWwgY29sb3VycyA9IF9FTlYKZm9yIGssIHYgaW4gcGFpcnMoY29sb3JzKSBkbwogICAgY29sb3Vyc1trXSA9IHYKZW5kCgotLS0gR3JleS4gV3JpdHRlbiBhcyBgN2AgaW4gcGFpbnQgZmlsZXMgYW5kIEB7dGVybS5ibGl0fSwgaGFzIGEgZGVmYXVsdAotLSB0ZXJtaW5hbCBjb2xvdXIgb2YgIzRDNEM0Qy4KLS0KLS0gQHNlZSBjb2xvcnMuZ3JheQpjb2xvdXJzLmdyZXkgPSBjb2xvcnMuZ3JheQpjb2xvdXJzLmdyYXkgPSBuaWwgLS0tIEBsb2NhbAoKLS0tIExpZ2h0IGdyZXkuIFdyaXR0ZW4gYXMgYDhgIGluIHBhaW50IGZpbGVzIGFuZCBAe3Rlcm0uYmxpdH0sIGhhcyBhCi0tIGRlZmF1bHQgdGVybWluYWwgY29sb3VyIG9mICM5OTk5OTkuCi0tCi0tIEBzZWUgY29sb3JzLmxpZ2h0R3JheQpjb2xvdXJzLmxpZ2h0R3JleSA9IGNvbG9ycy5saWdodEdyYXkKY29sb3Vycy5saWdodEdyYXkgPSBuaWwgLS0tIEBsb2NhbAo=";
   Module["FS_createDataFile"]("/craftos/rom/apis", "colours.lua", decodeBase64(fileData19), true, true, false);
   var fileData20 = "LS0tIFRoZSBEaXNrIEFQSSBhbGxvd3MgeW91IHRvIGludGVyYWN0IHdpdGggZGlzayBkcml2ZXMuCi0tCi0tIFRoZXNlIGZ1bmN0aW9ucyBjYW4gb3BlcmF0ZSBvbiBsb2NhbGx5IGF0dGFjaGVkIG9yIHJlbW90ZSBkaXNrIGRyaXZlcy4gVG8gdXNlCi0tIGEgbG9jYWxseSBhdHRhY2hlZCBkcml2ZSwgc3BlY2lmeSDigJxzaWRl4oCdIGFzIG9uZSBvZiB0aGUgc2l4IHNpZGVzCi0tIChlLmcuIGBsZWZ0YCk7IHRvIHVzZSBhIHJlbW90ZSBkaXNrIGRyaXZlLCBzcGVjaWZ5IGl0cyBuYW1lIGFzIHByaW50ZWQgd2hlbgotLSBlbmFibGluZyBpdHMgbW9kZW0gKGUuZy4gYGRyaXZlXzBgKS4KLS0KLS0gKipOb3RlOioqIEFsbCBjb21wdXRlcnMgKGV4Y2VwdCBjb21tYW5kIGNvbXB1dGVycyksIHR1cnRsZXMgYW5kIHBvY2tldAotLSBjb21wdXRlcnMgY2FuIGJlIHBsYWNlZCB3aXRoaW4gYSBkaXNrIGRyaXZlIHRvIGFjY2VzcyBpdCdzIGludGVybmFsIHN0b3JhZ2UKLS0gbGlrZSBhIGRpc2suCi0tCi0tIEBtb2R1bGUgZGlzawotLSBAc2luY2UgMS4yCgpsb2NhbCBmdW5jdGlvbiBpc0RyaXZlKG5hbWUpCiAgICBpZiB0eXBlKG5hbWUpIH49ICJzdHJpbmciIHRoZW4KICAgICAgICBlcnJvcigiYmFkIGFyZ3VtZW50ICMxIChleHBlY3RlZCBzdHJpbmcsIGdvdCAiIC4uIHR5cGUobmFtZSkgLi4gIikiLCAzKQogICAgZW5kCiAgICByZXR1cm4gcGVyaXBoZXJhbC5nZXRUeXBlKG5hbWUpID09ICJkcml2ZSIKZW5kCgotLS0gQ2hlY2tzIHdoZXRoZXIgYW55IGl0ZW0gYXQgYWxsIGlzIGluIHRoZSBkaXNrIGRyaXZlCi0tCi0tIEB0cGFyYW0gc3RyaW5nIG5hbWUgVGhlIG5hbWUgb2YgdGhlIGRpc2sgZHJpdmUuCi0tIEB0cmV0dXJuIGJvb2xlYW4gSWYgc29tZXRoaW5nIGlzIGluIHRoZSBkaXNrIGRyaXZlLgotLSBAdXNhZ2UgZGlzay5pc1ByZXNlbnQoInRvcCIpCmZ1bmN0aW9uIGlzUHJlc2VudChuYW1lKQogICAgaWYgaXNEcml2ZShuYW1lKSB0aGVuCiAgICAgICAgcmV0dXJuIHBlcmlwaGVyYWwuY2FsbChuYW1lLCAiaXNEaXNrUHJlc2VudCIpCiAgICBlbmQKICAgIHJldHVybiBmYWxzZQplbmQKCi0tLSBHZXQgdGhlIGxhYmVsIG9mIHRoZSBmbG9wcHkgZGlzaywgcmVjb3JkLCBvciBvdGhlciBtZWRpYSB3aXRoaW4gdGhlIGdpdmVuCi0tIGRpc2sgZHJpdmUuCi0tCi0tIElmIHRoZXJlIGlzIGEgY29tcHV0ZXIgb3IgdHVydGxlIHdpdGhpbiB0aGUgZHJpdmUsIHRoaXMgd2lsbCBzZXQgdGhlIGxhYmVsIGFzCi0tIHJlYWQgYnkgYG9zLmdldENvbXB1dGVyTGFiZWxgLgotLQotLSBAdHBhcmFtIHN0cmluZyBuYW1lIFRoZSBuYW1lIG9mIHRoZSBkaXNrIGRyaXZlLgotLSBAdHJldHVybiBzdHJpbmd8bmlsIFRoZSBuYW1lIG9mIHRoZSBjdXJyZW50IG1lZGlhLCBvciBgbmlsYCBpZiB0aGUgZHJpdmUgaXMKLS0gbm90IHByZXNlbnQgb3IgZW1wdHkuCi0tIEBzZWUgZGlzay5zZXRMYWJlbApmdW5jdGlvbiBnZXRMYWJlbChuYW1lKQogICAgaWYgaXNEcml2ZShuYW1lKSB0aGVuCiAgICAgICAgcmV0dXJuIHBlcmlwaGVyYWwuY2FsbChuYW1lLCAiZ2V0RGlza0xhYmVsIikKICAgIGVuZAogICAgcmV0dXJuIG5pbAplbmQKCi0tLSBTZXQgdGhlIGxhYmVsIG9mIHRoZSBmbG9wcHkgZGlzayBvciBvdGhlciBtZWRpYQotLQotLSBAdHBhcmFtIHN0cmluZyBuYW1lIFRoZSBuYW1lIG9mIHRoZSBkaXNrIGRyaXZlLgotLSBAdHBhcmFtIHN0cmluZ3xuaWwgbGFiZWwgVGhlIG5ldyBsYWJlbCBvZiB0aGUgZGlzawpmdW5jdGlvbiBzZXRMYWJlbChuYW1lLCBsYWJlbCkKICAgIGlmIGlzRHJpdmUobmFtZSkgdGhlbgogICAgICAgIHBlcmlwaGVyYWwuY2FsbChuYW1lLCAic2V0RGlza0xhYmVsIiwgbGFiZWwpCiAgICBlbmQKZW5kCgotLS0gQ2hlY2sgd2hldGhlciB0aGUgY3VycmVudCBkaXNrIHByb3ZpZGVzIGEgbW91bnQuCi0tCi0tIFRoaXMgd2lsbCByZXR1cm4gdHJ1ZSBmb3IgZGlza3MgYW5kIGNvbXB1dGVycywgYnV0IG5vdCByZWNvcmRzLgotLQotLSBAdHBhcmFtIHN0cmluZyBuYW1lIFRoZSBuYW1lIG9mIHRoZSBkaXNrIGRyaXZlLgotLSBAdHJldHVybiBib29sZWFuIElmIHRoZSBkaXNrIGlzIHByZXNlbnQgYW5kIHByb3ZpZGVzIGEgbW91bnQuCi0tIEBzZWUgZGlzay5nZXRNb3VudFBhdGgKZnVuY3Rpb24gaGFzRGF0YShuYW1lKQogICAgaWYgaXNEcml2ZShuYW1lKSB0aGVuCiAgICAgICAgcmV0dXJuIHBlcmlwaGVyYWwuY2FsbChuYW1lLCAiaGFzRGF0YSIpCiAgICBlbmQKICAgIHJldHVybiBmYWxzZQplbmQKCi0tLSBGaW5kIHRoZSBkaXJlY3RvcnkgbmFtZSBvbiB0aGUgbG9jYWwgY29tcHV0ZXIgd2hlcmUgdGhlIGNvbnRlbnRzIG9mIHRoZQotLSBjdXJyZW50IGZsb3BweSBkaXNrIChvciBvdGhlciBtb3VudCkgY2FuIGJlIGZvdW5kLgotLQotLSBAdHBhcmFtIHN0cmluZyBuYW1lIFRoZSBuYW1lIG9mIHRoZSBkaXNrIGRyaXZlLgotLSBAdHJldHVybiBzdHJpbmd8bmlsIFRoZSBtb3VudCdzIGRpcmVjdG9yeSwgb3IgYG5pbGAgaWYgdGhlIGRyaXZlIGRvZXMgbm90Ci0tIGNvbnRhaW4gYSBmbG9wcHkgb3IgY29tcHV0ZXIuCi0tIEBzZWUgZGlzay5oYXNEYXRhCmZ1bmN0aW9uIGdldE1vdW50UGF0aChuYW1lKQogICAgaWYgaXNEcml2ZShuYW1lKSB0aGVuCiAgICAgICAgcmV0dXJuIHBlcmlwaGVyYWwuY2FsbChuYW1lLCAiZ2V0TW91bnRQYXRoIikKICAgIGVuZAogICAgcmV0dXJuIG5pbAplbmQKCi0tLSBXaGV0aGVyIHRoZSBjdXJyZW50IGRpc2sgaXMgYSBbbXVzaWMgZGlza11bZGlza10gYXMgb3Bwb3NlZCB0byBhIGZsb3BweSBkaXNrCi0tIG9yIG90aGVyIGl0ZW0uCi0tCi0tIElmIHRoaXMgcmV0dXJucyB0cnVlLCB5b3Ugd2lsbCBjYW4gQHtkaXNrLnBsYXlBdWRpb3xwbGF5fSB0aGUgcmVjb3JkLgotLQotLSBbZGlza106IGh0dHBzOi8vbWluZWNyYWZ0LmdhbWVwZWRpYS5jb20vTXVzaWNfRGlzYwotLQotLSBAdHBhcmFtIHN0cmluZyBuYW1lIFRoZSBuYW1lIG9mIHRoZSBkaXNrIGRyaXZlLgotLSBAdHJldHVybiBib29sZWFuIElmIHRoZSBkaXNrIGlzIHByZXNlbnQgYW5kIGhhcyBhdWRpbyBzYXZlZCBvbiBpdC4KZnVuY3Rpb24gaGFzQXVkaW8obmFtZSkKICAgIGlmIGlzRHJpdmUobmFtZSkgdGhlbgogICAgICAgIHJldHVybiBwZXJpcGhlcmFsLmNhbGwobmFtZSwgImhhc0F1ZGlvIikKICAgIGVuZAogICAgcmV0dXJuIGZhbHNlCmVuZAoKLS0tIEdldCB0aGUgdGl0bGUgb2YgdGhlIGF1ZGlvIHRyYWNrIGZyb20gdGhlIG11c2ljIHJlY29yZCBpbiB0aGUgZHJpdmUuCi0tCi0tIFRoaXMgZ2VuZXJhbGx5IHJldHVybnMgdGhlIHNhbWUgYXMgQHtkaXNrLmdldExhYmVsfSBmb3IgcmVjb3Jkcy4KLS0KLS0gQHRwYXJhbSBzdHJpbmcgbmFtZSBUaGUgbmFtZSBvZiB0aGUgZGlzayBkcml2ZS4KLS0gQHRyZXR1cm4gc3RyaW5nfGZhbHNlfG5pbCBUaGUgdHJhY2sgdGl0bGUsIEB7ZmFsc2V9IGlmIHRoZXJlIGlzIG5vdCBhIG11c2ljCi0tIHJlY29yZCBpbiB0aGUgZHJpdmUgb3IgYG5pbGAgaWYgbm8gZHJpdmUgaXMgcHJlc2VudC4KZnVuY3Rpb24gZ2V0QXVkaW9UaXRsZShuYW1lKQogICAgaWYgaXNEcml2ZShuYW1lKSB0aGVuCiAgICAgICAgcmV0dXJuIHBlcmlwaGVyYWwuY2FsbChuYW1lLCAiZ2V0QXVkaW9UaXRsZSIpCiAgICBlbmQKICAgIHJldHVybiBuaWwKZW5kCgotLS0gU3RhcnRzIHBsYXlpbmcgdGhlIG11c2ljIHJlY29yZCBpbiB0aGUgZHJpdmUuCi0tCi0tIElmIGFueSByZWNvcmQgaXMgYWxyZWFkeSBwbGF5aW5nIG9uIGFueSBkaXNrIGRyaXZlLCBpdCBzdG9wcyBiZWZvcmUgdGhlCi0tIHRhcmdldCBkcml2ZSBzdGFydHMgcGxheWluZy4gVGhlIHJlY29yZCBzdG9wcyB3aGVuIGl0IHJlYWNoZXMgdGhlIGVuZCBvZiB0aGUKLS0gdHJhY2ssIHdoZW4gaXQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBkcml2ZSwgd2hlbiBAe2Rpc2suc3RvcEF1ZGlvfSBpcyBjYWxsZWQsIG9yCi0tIHdoZW4gYW5vdGhlciByZWNvcmQgaXMgc3RhcnRlZC4KLS0KLS0gQHRwYXJhbSBzdHJpbmcgbmFtZSBUaGUgbmFtZSBvZiB0aGUgZGlzayBkcml2ZS4KLS0gQHVzYWdlIGRpc2sucGxheUF1ZGlvKCJib3R0b20iKQpmdW5jdGlvbiBwbGF5QXVkaW8obmFtZSkKICAgIGlmIGlzRHJpdmUobmFtZSkgdGhlbgogICAgICAgIHBlcmlwaGVyYWwuY2FsbChuYW1lLCAicGxheUF1ZGlvIikKICAgIGVuZAplbmQKCi0tLSBTdG9wcyB0aGUgbXVzaWMgcmVjb3JkIGluIHRoZSBkcml2ZSBmcm9tIHBsYXlpbmcsIGlmIGl0IHdhcyBzdGFydGVkIHdpdGgKLS0gQHtkaXNrLnBsYXlBdWRpb30uCi0tCi0tIEB0cGFyYW0gc3RyaW5nIG5hbWUgVGhlIG5hbWUgbyB0aGUgZGlzayBkcml2ZS4KZnVuY3Rpb24gc3RvcEF1ZGlvKG5hbWUpCiAgICBpZiBub3QgbmFtZSB0aGVuCiAgICAgICAgZm9yIF8sIHNOYW1lIGluIGlwYWlycyhwZXJpcGhlcmFsLmdldE5hbWVzKCkpIGRvCiAgICAgICAgICAgIHN0b3BBdWRpbyhzTmFtZSkKICAgICAgICBlbmQKICAgIGVsc2UKICAgICAgICBpZiBpc0RyaXZlKG5hbWUpIHRoZW4KICAgICAgICAgICAgcGVyaXBoZXJhbC5jYWxsKG5hbWUsICJzdG9wQXVkaW8iKQogICAgICAgIGVuZAogICAgZW5kCmVuZAoKLS0tIEVqZWN0cyBhbnkgaXRlbSBjdXJyZW50bHkgaW4gdGhlIGRyaXZlLCBzcGlsbGluZyBpdCBpbnRvIHRoZSB3b3JsZCBhcyBhIGxvb3NlIGl0ZW0uCi0tCi0tIEB0cGFyYW0gc3RyaW5nIG5hbWUgVGhlIG5hbWUgb2YgdGhlIGRpc2sgZHJpdmUuCi0tIEB1c2FnZSBkaXNrLmVqZWN0KCJib3R0b20iKQpmdW5jdGlvbiBlamVjdChuYW1lKQogICAgaWYgaXNEcml2ZShuYW1lKSB0aGVuCiAgICAgICAgcGVyaXBoZXJhbC5jYWxsKG5hbWUsICJlamVjdERpc2siKQogICAgZW5kCmVuZAoKLS0tIFJldHVybnMgYSBudW1iZXIgd2hpY2ggdW5pcXVlbHkgaWRlbnRpZmllcyB0aGUgZGlzayBpbiB0aGUgZHJpdmUuCi0tCi0tIE5vdGUsIHVubGlrZSBAe2Rpc2suZ2V0TGFiZWx9LCB0aGlzIGRvZXMgbm90IHJldHVybiBhbnl0aGluZyBmb3Igb3RoZXIgbWVkaWEsCi0tIHN1Y2ggYXMgY29tcHV0ZXJzIG9yIHR1cnRsZXMuCi0tCi0tIEB0cGFyYW0gc3RyaW5nIG5hbWUgVGhlIG5hbWUgb2YgdGhlIGRpc2sgZHJpdmUuCi0tIEB0cmV0dXJuIHN0cmluZ3xuaWwgVGhlIGRpc2sgSUQsIG9yIGBuaWxgIGlmIHRoZSBkcml2ZSBkb2VzIG5vdCBjb250YWluIGEgZmxvcHB5IGRpc2suCi0tIEBzaW5jZSAxLjQKZnVuY3Rpb24gZ2V0SUQobmFtZSkKICAgIGlmIGlzRHJpdmUobmFtZSkgdGhlbgogICAgICAgIHJldHVybiBwZXJpcGhlcmFsLmNhbGwobmFtZSwgImdldERpc2tJRCIpCiAgICBlbmQKICAgIHJldHVybiBuaWwKZW5kCgotLS0gSW5zZXJ0cyBhIGRpc2sgaW50byB0aGUgZHJpdmUuCi0tCi0tIFRoaXMgZnVuY3Rpb24gdGFrZXMgb25lIG9mIHRoZSBmb2xsb3dpbmcgcGF0aCBmb3JtYXRzOgotLSAqIEEgcGF0aCB0byBhIGRpcmVjdG9yeSB0byBtb3VudCBhcyBhIGRpc2suCi0tICogQSBwYXRoIHRvIGFuIGF1ZGlvIGZpbGUgdG8gaW5zZXJ0IGEgbXVzaWMgZGlzYy4KLS0gKiBBIG51bWJlciB0byBtb3VudCBhIGRpc2sgd2l0aCBhbiBJRC4KLS0gKiBBIHBhdGggaW4gdGhlIGZvcm0gInRyZWFzdXJlOjxuYW1lPi88cHJvZ3JhbT4iIHRvIG1vdW50IGEgdHJlYXN1cmUgZGlzayBpZiBhdmFpbGFibGUuCi0tCi0tIEB0cGFyYW0gc3RyaW5nIG5hbWUgVGhlIG5hbWUgb2YgdGhlIGRpc2sgZHJpdmUuCi0tIEB0cGFyYW0gc3RyaW5nIHBhdGggVGhlIHBhdGggdG8gbW91bnQgYXMgZGVzY3JpYmVkIGFib3ZlLgpmdW5jdGlvbiBpbnNlcnREaXNrKG5hbWUsIHBhdGgpCiAgICBpZiBpc0RyaXZlKG5hbWUpIHRoZW4KICAgICAgICBwZXJpcGhlcmFsLmNhbGwobmFtZSwgImluc2VydERpc2siLCBwYXRoKQogICAgZW5kCmVuZAo=";
   Module["FS_createDataFile"]("/craftos/rom/apis", "disk.lua", decodeBase64(fileData20), true, true, false);
   var fileData21 = "LS1bWy0gUHJvdmlkZXMgYSBzaW1wbGUgaW1wbGVtZW50YXRpb24gb2YgbXVsdGl0YXNraW5nLgoKRnVuY3Rpb25zIGFyZSBub3QgYWN0dWFsbHkgZXhlY3V0ZWQgc2ltdWx0YW5pb3VzbHksIGJ1dCByYXRoZXIgdGhpcyBBUEkgd2lsbAphdXRvbWF0aWNhbGx5IHN3aXRjaCBiZXR3ZWVuIHRoZW0gd2hlbmV2ZXIgdGhleSB5aWVsZCAoZWcgd2hlbmV2ZXIgdGhleSBjYWxsCkB7Y29yb3V0aW5lLnlpZWxkfSwgb3IgZnVuY3Rpb25zIHRoYXQgY2FsbCB0aGF0IC0gZWcgYG9zLnB1bGxFdmVudGAgLSBvcgpmdW5jdGlvbnMgdGhhdCBjYWxsIHRoYXQsIGV0YyAtIGJhc2ljYWxseSwgYW55dGhpbmcgdGhhdCBjYXVzZXMgdGhlIGZ1bmN0aW9uCnRvICJwYXVzZSIpLgoKRWFjaCBmdW5jdGlvbiBleGVjdXRlZCBpbiAicGFyYWxsZWwiIGdldHMgaXRzIG93biBjb3B5IG9mIHRoZSBldmVudCBxdWV1ZSwKYW5kIHNvICJldmVudCBjb25zdW1pbmciIGZ1bmN0aW9ucyAoYWdhaW4sIG1vc3RseSBhbnl0aGluZyB0aGF0IGNhdXNlcyB0aGUKc2NyaXB0IHRvIHBhdXNlIC0gZWcgYHNsZWVwYCwgYHJlZG5ldC5yZWNlaXZlYCwgbW9zdCBvZiB0aGUgYHR1cnRsZWAgQVBJLApldGMpIGNhbiBzYWZlbHkgYmUgdXNlZCBpbiBvbmUgd2l0aG91dCBhZmZlY3RpbmcgdGhlIGV2ZW50IHF1ZXVlIGFjY2Vzc2VkIGJ5CnRoZSBvdGhlci4KCkBtb2R1bGUgcGFyYWxsZWwKQHNpbmNlIDEuMgpdXQoKbG9jYWwgZnVuY3Rpb24gY3JlYXRlKC4uLikKICAgIGxvY2FsIHRGbnMgPSB0YWJsZS5wYWNrKC4uLikKICAgIGxvY2FsIHRDb3MgPSB7fQogICAgZm9yIGkgPSAxLCB0Rm5zLm4sIDEgZG8KICAgICAgICBsb2NhbCBmbiA9IHRGbnNbaV0KICAgICAgICBpZiB0eXBlKGZuKSB+PSAiZnVuY3Rpb24iIHRoZW4KICAgICAgICAgICAgZXJyb3IoImJhZCBhcmd1bWVudCAjIiAuLiBpIC4uICIgKGV4cGVjdGVkIGZ1bmN0aW9uLCBnb3QgIiAuLiB0eXBlKGZuKSAuLiAiKSIsIDMpCiAgICAgICAgZW5kCgogICAgICAgIHRDb3NbaV0gPSBjb3JvdXRpbmUuY3JlYXRlKGZuKQogICAgZW5kCgogICAgcmV0dXJuIHRDb3MKZW5kCgpsb2NhbCBmdW5jdGlvbiBydW5VbnRpbExpbWl0KF9yb3V0aW5lcywgX2xpbWl0KQogICAgbG9jYWwgY291bnQgPSAjX3JvdXRpbmVzCiAgICBpZiBjb3VudCA8IDEgdGhlbiByZXR1cm4gMCBlbmQKICAgIGxvY2FsIGxpdmluZyA9IGNvdW50CgogICAgbG9jYWwgdEZpbHRlcnMgPSB7fQogICAgbG9jYWwgZXZlbnREYXRhID0geyBuID0gMCB9CiAgICB3aGlsZSB0cnVlIGRvCiAgICAgICAgZm9yIG4gPSAxLCBjb3VudCBkbwogICAgICAgICAgICBsb2NhbCByID0gX3JvdXRpbmVzW25dCiAgICAgICAgICAgIGlmIHIgdGhlbgogICAgICAgICAgICAgICAgaWYgdEZpbHRlcnNbcl0gPT0gbmlsIG9yIHRGaWx0ZXJzW3JdID09IGV2ZW50RGF0YVsxXSBvciBldmVudERhdGFbMV0gPT0gInRlcm1pbmF0ZSIgdGhlbgogICAgICAgICAgICAgICAgICAgIGxvY2FsIG9rLCBwYXJhbSA9IGNvcm91dGluZS5yZXN1bWUociwgdGFibGUudW5wYWNrKGV2ZW50RGF0YSwgMSwgZXZlbnREYXRhLm4pKQogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBvayB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yKHBhcmFtLCAwKQogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgdEZpbHRlcnNbcl0gPSBwYXJhbQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGlmIGNvcm91dGluZS5zdGF0dXMocikgPT0gImRlYWQiIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgX3JvdXRpbmVzW25dID0gbmlsCiAgICAgICAgICAgICAgICAgICAgICAgIGxpdmluZyA9IGxpdmluZyAtIDEKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbGl2aW5nIDw9IF9saW1pdCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbgogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgICAgICBmb3IgbiA9IDEsIGNvdW50IGRvCiAgICAgICAgICAgIGxvY2FsIHIgPSBfcm91dGluZXNbbl0KICAgICAgICAgICAgaWYgciBhbmQgY29yb3V0aW5lLnN0YXR1cyhyKSA9PSAiZGVhZCIgdGhlbgogICAgICAgICAgICAgICAgX3JvdXRpbmVzW25dID0gbmlsCiAgICAgICAgICAgICAgICBsaXZpbmcgPSBsaXZpbmcgLSAxCiAgICAgICAgICAgICAgICBpZiBsaXZpbmcgPD0gX2xpbWl0IHRoZW4KICAgICAgICAgICAgICAgICAgICByZXR1cm4gbgogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgICAgIGV2ZW50RGF0YSA9IHRhYmxlLnBhY2sob3MucHVsbEV2ZW50UmF3KCkpCiAgICBlbmQKZW5kCgotLVtbLSBTd2l0Y2hlcyBiZXR3ZWVuIGV4ZWN1dGlvbiBvZiB0aGUgZnVuY3Rpb25zLCB1bnRpbCBhbnkgb2YgdGhlbQpmaW5pc2hlcy4gSWYgYW55IG9mIHRoZSBmdW5jdGlvbnMgZXJyb3JzLCB0aGUgbWVzc2FnZSBpcyBwcm9wYWdhdGVkIHVwd2FyZHMKZnJvbSB0aGUgQHtwYXJhbGxlbC53YWl0Rm9yQW55fSBjYWxsLgoKQHRwYXJhbSBmdW5jdGlvbiAuLi4gVGhlIGZ1bmN0aW9ucyB0aGlzIHRhc2sgd2lsbCBydW4KQHVzYWdlIFByaW50IGEgbWVzc2FnZSBldmVyeSBzZWNvbmQgdW50aWwgdGhlIGBxYCBrZXkgaXMgcHJlc3NlZC4KCiAgICBsb2NhbCBmdW5jdGlvbiB0aWNrKCkKICAgICAgICB3aGlsZSB0cnVlIGRvCiAgICAgICAgICAgIG9zLnNsZWVwKDEpCiAgICAgICAgICAgIHByaW50KCJUaWNrIikKICAgICAgICBlbmQKICAgIGVuZAogICAgbG9jYWwgZnVuY3Rpb24gd2FpdF9mb3JfcSgpCiAgICAgICAgcmVwZWF0CiAgICAgICAgICAgIGxvY2FsIF8sIGtleSA9IG9zLnB1bGxFdmVudCgia2V5IikKICAgICAgICB1bnRpbCBrZXkgPT0ga2V5cy5xCiAgICAgICAgcHJpbnQoIlEgd2FzIHByZXNzZWQhIikKICAgIGVuZAoKICAgIHBhcmFsbGVsLndhaXRGb3JBbnkodGljaywgd2FpdF9mb3JfcSkKICAgIHByaW50KCJFdmVyeXRoaW5nIGRvbmUhIikKXV0KZnVuY3Rpb24gd2FpdEZvckFueSguLi4pCiAgICBsb2NhbCByb3V0aW5lcyA9IGNyZWF0ZSguLi4pCiAgICByZXR1cm4gcnVuVW50aWxMaW1pdChyb3V0aW5lcywgI3JvdXRpbmVzIC0gMSkKZW5kCgotLVtbLSBTd2l0Y2hlcyBiZXR3ZWVuIGV4ZWN1dGlvbiBvZiB0aGUgZnVuY3Rpb25zLCB1bnRpbCBhbGwgb2YgdGhlbSBhcmUKZmluaXNoZWQuIElmIGFueSBvZiB0aGUgZnVuY3Rpb25zIGVycm9ycywgdGhlIG1lc3NhZ2UgaXMgcHJvcGFnYXRlZCB1cHdhcmRzCmZyb20gdGhlIEB7cGFyYWxsZWwud2FpdEZvckFsbH0gY2FsbC4KCkB0cGFyYW0gZnVuY3Rpb24gLi4uIFRoZSBmdW5jdGlvbnMgdGhpcyB0YXNrIHdpbGwgcnVuCkB1c2FnZSBTdGFydCBvZmYgdHdvIHRpbWVycyBhbmQgd2FpdCBmb3IgdGhlbSBib3RoIHRvIHJ1bi4KCiAgICBsb2NhbCBmdW5jdGlvbiBhKCkKICAgICAgICBvcy5zbGVlcCgxKQogICAgICAgIHByaW50KCJBIGlzIGRvbmUiKQogICAgZW5kCiAgICBsb2NhbCBmdW5jdGlvbiBiKCkKICAgICAgICBvcy5zbGVlcCgzKQogICAgICAgIHByaW50KCJCIGlzIGRvbmUiKQogICAgZW5kCgogICAgcGFyYWxsZWwud2FpdEZvckFsbChhLCBiKQogICAgcHJpbnQoIkV2ZXJ5dGhpbmcgZG9uZSEiKQpdXQpmdW5jdGlvbiB3YWl0Rm9yQWxsKC4uLikKICAgIGxvY2FsIHJvdXRpbmVzID0gY3JlYXRlKC4uLikKICAgIHJldHVybiBydW5VbnRpbExpbWl0KHJvdXRpbmVzLCAwKQplbmQK";
   Module["FS_createDataFile"]("/craftos/rom/apis", "parallel.lua", decodeBase64(fileData21), true, true, false);
   var fileData22 = "LS0tIFRoZSB0dXJ0bGUgQVBJIGFsbG93cyB5b3UgdG8gY29udHJvbCB5b3VyIHR1cnRsZS4KLS0KLS0gQG1vZHVsZSB0dXJ0bGUKCmlmIG5vdCB0dXJ0bGUgdGhlbgogICAgZXJyb3IoIkNhbm5vdCBsb2FkIHR1cnRsZSBBUEkgb24gY29tcHV0ZXIiLCAyKQplbmQKCi0tLSBUaGUgYnVpbHRpbiB0dXJ0bGUgQVBJLCB3aXRob3V0IGFueSBnZW5lcmF0ZWQgaGVscGVyIGZ1bmN0aW9ucy4KLS0KLS0gR2VuZXJhbGx5IHlvdSBzaG91bGQgbm90IG5lZWQgdG8gdXNlIHRoaXMgdGFibGUgLSBpdCBvbmx5IGV4aXN0cyBmb3IKLS0gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgcmVhc29ucy4KLS0gQGRlcHJlY2F0ZWQKbmF0aXZlID0gdHVydGxlLm5hdGl2ZSBvciB0dXJ0bGUKCmxvY2FsIGZ1bmN0aW9uIGFkZENyYWZ0TWV0aG9kKG9iamVjdCkKICAgIGlmIHBlcmlwaGVyYWwuZ2V0VHlwZSgibGVmdCIpID09ICJ3b3JrYmVuY2giIHRoZW4KICAgICAgICBvYmplY3QuY3JhZnQgPSBmdW5jdGlvbiguLi4pCiAgICAgICAgICAgIHJldHVybiBwZXJpcGhlcmFsLmNhbGwoImxlZnQiLCAiY3JhZnQiLCAuLi4pCiAgICAgICAgZW5kCiAgICBlbHNlaWYgcGVyaXBoZXJhbC5nZXRUeXBlKCJyaWdodCIpID09ICJ3b3JrYmVuY2giIHRoZW4KICAgICAgICBvYmplY3QuY3JhZnQgPSBmdW5jdGlvbiguLi4pCiAgICAgICAgICAgIHJldHVybiBwZXJpcGhlcmFsLmNhbGwoInJpZ2h0IiwgImNyYWZ0IiwgLi4uKQogICAgICAgIGVuZAogICAgZWxzZQogICAgICAgIG9iamVjdC5jcmFmdCA9IG5pbAogICAgZW5kCmVuZAoKLS0gUHV0IGNvbW1hbmRzIGludG8gZW52aXJvbm1lbnQgdGFibGUKbG9jYWwgZW52ID0gX0VOVgpmb3IgaywgdiBpbiBwYWlycyhuYXRpdmUpIGRvCiAgICBpZiBrID09ICJlcXVpcExlZnQiIG9yIGsgPT0gImVxdWlwUmlnaHQiIHRoZW4KICAgICAgICBlbnZba10gPSBmdW5jdGlvbiguLi4pCiAgICAgICAgICAgIGxvY2FsIHJlc3VsdCwgZXJyID0gdiguLi4pCiAgICAgICAgICAgIGFkZENyYWZ0TWV0aG9kKHR1cnRsZSkKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCwgZXJyCiAgICAgICAgZW5kCiAgICBlbHNlCiAgICAgICAgZW52W2tdID0gdgogICAgZW5kCmVuZAphZGRDcmFmdE1ldGhvZChlbnYpCg==";
   Module["FS_createDataFile"]("/craftos/rom/apis/turtle", "turtle.lua", decodeBase64(fileData22), true, true, false);
   var fileData23 = "LS0tIFRoZSBjb21tYW5kcyBBUEkgYWxsb3dzIHlvdXIgc3lzdGVtIHRvIGRpcmVjdGx5IGV4ZWN1dGUgW01pbmVjcmFmdAotLSBjb21tYW5kc11bbWNdIGFuZCBnYXRoZXIgZGF0YSBmcm9tIHRoZSByZXN1bHRzLgotLQotLSBXaGlsZSBvbmUgbWF5IHVzZSBAe2NvbW1hbmRzLmV4ZWN9IGRpcmVjdGx5IHRvIGV4ZWN1dGUgYSBjb21tYW5kLCB0aGUKLS0gY29tbWFuZHMgQVBJIGFsc28gcHJvdmlkZXMgaGVscGVyIG1ldGhvZHMgdG8gZXhlY3V0ZSBldmVyeSBjb21tYW5kLiBGb3IKLS0gaW5zdGFuY2UsIGBjb21tYW5kcy5zYXkoIkhpISIpYCBpcyBlcXVpdmFsZW50IHRvIGBjb21tYW5kcy5leGVjKCJzYXkgSGkhIilgLgotLQotLSBAe2NvbW1hbmRzLmFzeW5jfSBwcm92aWRlcyBhIHNpbWlsYXIgaW50ZXJmYWNlIHRvIGV4ZWN1dGUgYXN5bmNocm9ub3VzCi0tIGNvbW1hbmRzLiBgY29tbWFuZHMuYXN5bmMuc2F5KCJIaSEiKWAgaXMgZXF1aXZhbGVudCB0bwotLSBgY29tbWFuZHMuZXhlY0FzeW5jKCJIaSEiKWAuCi0tCi0tIFttY106IGh0dHBzOi8vbWluZWNyYWZ0LmdhbWVwZWRpYS5jb20vQ29tbWFuZHMKLS0KLS0gQG1vZHVsZSBjb21tYW5kcwotLSBAdXNhZ2UgU2V0IHRoZSBibG9jayBhYm92ZSB0aGlzIGNvbXB1dGVyIHRvIHN0b25lOgotLQotLSAgICAgY29tbWFuZHMuc2V0YmxvY2soIn4iLCAifjEiLCAifiIsICJtaW5lY3JhZnQ6c3RvbmUiKQoKaWYgbm90IGNvbW1hbmRzIHRoZW4KICAgIGVycm9yKCJDYW5ub3QgbG9hZCBjb21tYW5kIEFQSSBvbiBub3JtYWwgY29tcHV0ZXIiLCAyKQplbmQKCi0tLSBUaGUgYnVpbHRpbiBjb21tYW5kcyBBUEksIHdpdGhvdXQgYW55IGdlbmVyYXRlZCBjb21tYW5kIGhlbHBlciBmdW5jdGlvbnMKLS0KLS0gVGhpcyBtYXkgYmUgdXNlZnVsIGlmIGEgYnVpbHQtaW4gZnVuY3Rpb24gKHN1Y2ggYXMgQHtjb21tYW5kcy5saXN0fSkgaGFzIGJlZW4KLS0gb3ZlcndyaXR0ZW4gYnkgYSBjb21tYW5kLgpsb2NhbCBuYXRpdmUgPSBjb21tYW5kcy5uYXRpdmUgb3IgY29tbWFuZHMKCmxvY2FsIGZ1bmN0aW9uIGNvbGxhcHNlQXJncyhiSlNPTklzTkJULCAuLi4pCiAgICBsb2NhbCBhcmdzID0gdGFibGUucGFjayguLi4pCiAgICBmb3IgaSA9IDEsICNhcmdzIGRvCiAgICAgICAgbG9jYWwgYXJnID0gYXJnc1tpXQogICAgICAgIGlmIHR5cGUoYXJnKSA9PSAiYm9vbGVhbiIgb3IgdHlwZShhcmcpID09ICJudW1iZXIiIG9yIHR5cGUoYXJnKSA9PSAic3RyaW5nIiB0aGVuCiAgICAgICAgICAgIGFyZ3NbaV0gPSB0b3N0cmluZyhhcmcpCiAgICAgICAgZWxzZWlmIHR5cGUoYXJnKSA9PSAidGFibGUiIHRoZW4KICAgICAgICAgICAgYXJnc1tpXSA9IHRleHR1dGlscy5zZXJpYWxpc2VKU09OKGFyZywgYkpTT05Jc05CVCkKICAgICAgICBlbHNlCiAgICAgICAgICAgIGVycm9yKCJFeHBlY3RlZCBzdHJpbmcsIG51bWJlciwgYm9vbGVhbiBvciB0YWJsZSIsIDMpCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICByZXR1cm4gdGFibGUuY29uY2F0KGFyZ3MsICIgIikKZW5kCgotLSBQdXQgbmF0aXZlIGZ1bmN0aW9ucyBpbnRvIHRoZSBlbnZpcm9ubWVudApsb2NhbCBlbnYgPSBfRU5WCmVudi5uYXRpdmUgPSBuYXRpdmUKZm9yIGssIHYgaW4gcGFpcnMobmF0aXZlKSBkbwogICAgZW52W2tdID0gdgplbmQKCi0tIENyZWF0ZSB3cmFwcGVyIGZ1bmN0aW9ucyBmb3IgYWxsIHRoZSBjb21tYW5kcwpsb2NhbCB0QXN5bmMgPSB7fQpsb2NhbCB0Tm9uTkJUSlNPTkNvbW1hbmRzID0gewogICAgWyJ0ZWxscmF3Il0gPSB0cnVlLAogICAgWyJ0aXRsZSJdID0gdHJ1ZSwKfQoKbG9jYWwgY29tbWFuZF9tdCA9IHt9CmZ1bmN0aW9uIGNvbW1hbmRfbXQuX19jYWxsKHNlbGYsIC4uLikKICAgIGxvY2FsIG1ldGEgPSBzZWxmW2NvbW1hbmRfbXRdCiAgICBsb2NhbCBzQ29tbWFuZCA9IGNvbGxhcHNlQXJncyhtZXRhLmpzb24sIHRhYmxlLmNvbmNhdChtZXRhLm5hbWUsICIgIiksIC4uLikKICAgIHJldHVybiBtZXRhLmZ1bmMoc0NvbW1hbmQpCmVuZAoKZnVuY3Rpb24gY29tbWFuZF9tdC5fX3Rvc3RyaW5nKHNlbGYpCiAgICBsb2NhbCBtZXRhID0gc2VsZltjb21tYW5kX210XQogICAgcmV0dXJuICgiY29tbWFuZCAlcSIpOmZvcm1hdCgiLyIgLi4gdGFibGUuY29uY2F0KG1ldGEubmFtZSwgIiAiKSkKZW5kCgpsb2NhbCBmdW5jdGlvbiBta19jb21tYW5kKG5hbWUsIGpzb24sIGZ1bmMpCiAgICByZXR1cm4gc2V0bWV0YXRhYmxlKHsKICAgICAgICBbY29tbWFuZF9tdF0gPSB7CiAgICAgICAgICAgIG5hbWUgPSBuYW1lLAogICAgICAgICAgICBmdW5jID0gZnVuYywKICAgICAgICAgICAganNvbiA9IGpzb24sCiAgICAgICAgfSwKICAgIH0sIGNvbW1hbmRfbXQpCmVuZAoKZnVuY3Rpb24gY29tbWFuZF9tdC5fX2luZGV4KHNlbGYsIGtleSkKICAgIGxvY2FsIG1ldGEgPSBzZWxmW2NvbW1hbmRfbXRdCiAgICBpZiBtZXRhLmNoaWxkcmVuIHRoZW4gcmV0dXJuIG5pbCBlbmQKICAgIG1ldGEuY2hpbGRyZW4gPSB0cnVlCgogICAgbG9jYWwgbmFtZSA9IG1ldGEubmFtZQogICAgZm9yIF8sIGNoaWxkIGluIGlwYWlycyhuYXRpdmUubGlzdCh0YWJsZS51bnBhY2sobmFtZSkpKSBkbwogICAgICAgIGxvY2FsIGNoaWxkX25hbWUgPSB7IHRhYmxlLnVucGFjayhuYW1lKSB9CiAgICAgICAgY2hpbGRfbmFtZVsjY2hpbGRfbmFtZSArIDFdID0gY2hpbGQKICAgICAgICBzZWxmW2NoaWxkXSA9IG1rX2NvbW1hbmQoY2hpbGRfbmFtZSwgbWV0YS5qc29uLCBtZXRhLmZ1bmMpCiAgICBlbmQKCiAgICByZXR1cm4gc2VsZltrZXldCmVuZAoKZm9yIF8sIHNDb21tYW5kTmFtZSBpbiBpcGFpcnMobmF0aXZlLmxpc3QoKSkgZG8KICAgIGlmIGVudltzQ29tbWFuZE5hbWVdID09IG5pbCB0aGVuCiAgICAgICAgbG9jYWwgYkpTT05Jc05CVCA9IHROb25OQlRKU09OQ29tbWFuZHNbc0NvbW1hbmROYW1lXSA9PSBuaWwKICAgICAgICBlbnZbc0NvbW1hbmROYW1lXSA9IG1rX2NvbW1hbmQoeyBzQ29tbWFuZE5hbWUgfSwgYkpTT05Jc05CVCwgbmF0aXZlLmV4ZWMpCiAgICAgICAgdEFzeW5jW3NDb21tYW5kTmFtZV0gPSBta19jb21tYW5kKHsgc0NvbW1hbmROYW1lIH0sIGJKU09OSXNOQlQsIG5hdGl2ZS5leGVjQXN5bmMpCiAgICBlbmQKZW5kCgotLS0gQSB0YWJsZSBjb250YWluaW5nIGFzeW5jaHJvbm91cyB3cmFwcGVycyBmb3IgYWxsIGNvbW1hbmRzLgotLQotLSBBcyB3aXRoIEB7Y29tbWFuZHMuZXhlY0FzeW5jfSwgdGhpcyByZXR1cm5zIHRoZSAidGFzayBpZCIgb2YgdGhlIGVucXVldWVkCi0tIGNvbW1hbmQuCi0tIEBzZWUgZXhlY0FzeW5jCi0tIEB1c2FnZSBBc3luY2hyb25vdXNseSBzZXRzIHRoZSBibG9jayBhYm92ZSB0aGUgY29tcHV0ZXIgdG8gc3RvbmUuCi0tCi0tICAgICBjb21tYW5kcy5hc3luYy5zZXRibG9jaygifiIsICJ+MSIsICJ+IiwgIm1pbmVjcmFmdDpzdG9uZSIpCmVudi5hc3luYyA9IHRBc3luYwo=";
   Module["FS_createDataFile"]("/craftos/rom/apis/command", "commands.lua", decodeBase64(fileData23), true, true, false);
   var fileData24 = "LS1bWwpBbHJpZ2h0IHRoZW4sIGRvbid0IGlnbm9yZSBtZS4gVGhpcyBmaWxlIGlzIHRvIGVuc3VyZSB0aGUgZXhpc3RlbmNlIG9mIHRoZSAiYXV0b3J1biIgZm9sZGVyLCBmaWxlcyBwbGFjZWQgaW4gdGhpcyBmb2xkZXIKdXNpbmcgcmVzb3VyY2UgcGFja3Mgd2lsbCBhbHdheXMgcnVuIHdoZW4gY29tcHV0ZXJzIHN0YXJ0dXAuCl1dCg==";
   Module["FS_createDataFile"]("/craftos/rom/autorun", ".ignoreme", decodeBase64(fileData24), true, true, false);
   var fileData25 = "bG9jYWwgdEFyZ3MgPSB7IC4uLiB9CmlmICN0QXJncyA+IDAgdGhlbgogICAgcHJpbnQoIlRoaXMgaXMgYW4gaW50ZXJhY3RpdmUgTHVhIHByb21wdC4iKQogICAgcHJpbnQoIlRvIHJ1biBhIGx1YSBwcm9ncmFtLCBqdXN0IHR5cGUgaXRzIG5hbWUuIikKICAgIHJldHVybgplbmQKCmxvY2FsIHByZXR0eSA9IHJlcXVpcmUgYW5kIHJlcXVpcmUgImNjLnByZXR0eSIgb3IgZG9maWxlICIvcm9tL21vZHVsZXMvbWFpbi9jYy9leHBlY3QubHVhIgoKbG9jYWwgYlJ1bm5pbmcgPSB0cnVlCmxvY2FsIHRDb21tYW5kSGlzdG9yeSA9IHt9CmxvY2FsIHRFbnYgPSB7CiAgICBbImV4aXQiXSA9IHNldG1ldGF0YWJsZSh7fSwgewogICAgICAgIF9fdG9zdHJpbmcgPSBmdW5jdGlvbigpIHJldHVybiAiQ2FsbCBleGl0KCkgdG8gZXhpdC4iIGVuZCwKICAgICAgICBfX2NhbGwgPSBmdW5jdGlvbigpIGJSdW5uaW5nID0gZmFsc2UgZW5kLAogICAgfSksCiAgICBbIl9lY2hvIl0gPSBmdW5jdGlvbiguLi4pCiAgICAgICAgcmV0dXJuIC4uLgogICAgZW5kLAp9CnNldG1ldGF0YWJsZSh0RW52LCB7IF9faW5kZXggPSBfRU5WIH0pCgotLSBSZXBsYWNlIG91ciBwYWNrYWdlLnBhdGgsIHNvIHRoYXQgaXQgbG9hZHMgZnJvbSB0aGUgY3VycmVudCBkaXJlY3RvcnksIHJhdGhlcgotLSB0aGFuIGZyb20gL3JvbS9wcm9ncmFtcy4gVGhpcyBtYWtlcyBpdCBhIGxpdHRsZSBtb3JlIGZyaWVuZGx5IHRvIHVzZSBhbmQKLS0gY2xvc2VyIHRvIHdoYXQgeW91J2QgZXhwZWN0LgppZiBzaGVsbCB0aGVuCiAgICBsb2NhbCBkaXIgPSBzaGVsbC5kaXIoKQogICAgaWYgZGlyOnN1YigxLCAxKSB+PSAiLyIgdGhlbiBkaXIgPSAiLyIgLi4gZGlyIGVuZAogICAgaWYgZGlyOnN1YigtMSkgfj0gIi8iIHRoZW4gZGlyID0gZGlyIC4uICIvIiBlbmQKCiAgICBsb2NhbCBzdHJpcF9wYXRoID0gIj87Py5sdWE7Py9pbml0Lmx1YTsiCiAgICBsb2NhbCBwYXRoID0gcGFja2FnZS5wYXRoCiAgICBpZiBwYXRoOnN1YigxLCAjc3RyaXBfcGF0aCkgPT0gc3RyaXBfcGF0aCB0aGVuCiAgICAgICAgcGF0aCA9IHBhdGg6c3ViKCNzdHJpcF9wYXRoICsgMSkKICAgIGVuZAoKICAgIHBhY2thZ2UucGF0aCA9IGRpciAuLiAiPzsiIC4uIGRpciAuLiAiPy5sdWE7IiAuLiBkaXIgLi4gIj8vaW5pdC5sdWE7IiAuLiBwYXRoCmVuZAoKaWYgdGVybS5pc0NvbG91cigpIHRoZW4KICAgIHRlcm0uc2V0VGV4dENvbG91cihjb2xvdXJzLnllbGxvdykKZW5kCnByaW50KF9HLl9DQ1BDX0RFQlVHR0VSX0FDVElWRSBhbmQgIkVudGVyaW5nIGRlYnVnZ2VyLiIgb3IgIkludGVyYWN0aXZlIEx1YSBwcm9tcHQuIikKcHJpbnQoIkNhbGwgZXhpdCgpIHRvIGV4aXQuIikKdGVybS5zZXRUZXh0Q29sb3VyKGNvbG91cnMud2hpdGUpCgp3aGlsZSBiUnVubmluZyBkbwogICAgLS1pZiB0ZXJtLmlzQ29sb3VyKCkgdGhlbgogICAgLS0gICAgdGVybS5zZXRUZXh0Q29sb3VyKCBjb2xvdXJzLnllbGxvdyApCiAgICAtLWVuZAogICAgd3JpdGUoX0cuX0NDUENfREVCVUdHRVJfQUNUSVZFIGFuZCAibHVhX2RlYnVnPiAiIG9yICJsdWE+ICIpCiAgICAtLXRlcm0uc2V0VGV4dENvbG91ciggY29sb3Vycy53aGl0ZSApCgogICAgbG9jYWwgcyA9IHJlYWQobmlsLCB0Q29tbWFuZEhpc3RvcnksIGZ1bmN0aW9uKHNMaW5lKQogICAgICAgIGlmIHNldHRpbmdzLmdldCgibHVhLmF1dG9jb21wbGV0ZSIpIHRoZW4KICAgICAgICAgICAgbG9jYWwgblN0YXJ0UG9zID0gc3RyaW5nLmZpbmQoc0xpbmUsICJbYS16QS1aMC05XyUuOl0rJCIpCiAgICAgICAgICAgIGlmIG5TdGFydFBvcyB0aGVuCiAgICAgICAgICAgICAgICBzTGluZSA9IHN0cmluZy5zdWIoc0xpbmUsIG5TdGFydFBvcykKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGlmICNzTGluZSA+IDAgdGhlbgogICAgICAgICAgICAgICAgcmV0dXJuIHRleHR1dGlscy5jb21wbGV0ZShzTGluZSwgdEVudikKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAgICAgcmV0dXJuIG5pbAogICAgZW5kKQogICAgaWYgczptYXRjaCgiJVMiKSBhbmQgdENvbW1hbmRIaXN0b3J5WyN0Q29tbWFuZEhpc3RvcnldIH49IHMgdGhlbgogICAgICAgIHRhYmxlLmluc2VydCh0Q29tbWFuZEhpc3RvcnksIHMpCiAgICBlbmQKICAgIGlmIHNldHRpbmdzLmdldCgibHVhLndhcm5fYWdhaW5zdF91c2Vfb2ZfbG9jYWwiKSBhbmQgczptYXRjaCgiXiVzKmxvY2FsJXMrIikgdGhlbgogICAgICAgIGlmIHRlcm0uaXNDb2xvdXIoKSB0aGVuCiAgICAgICAgICAgIHRlcm0uc2V0VGV4dENvbG91cihjb2xvdXJzLnllbGxvdykKICAgICAgICBlbmQKICAgICAgIHByaW50KCJUbyBhY2Nlc3MgbG9jYWwgdmFyaWFibGVzIGluIGxhdGVyIGlucHV0cywgcmVtb3ZlIHRoZSBsb2NhbCBrZXl3b3JkLiIpCiAgICAgICB0ZXJtLnNldFRleHRDb2xvdXIoY29sb3Vycy53aGl0ZSkKICAgIGVuZAoKICAgIGxvY2FsIG5Gb3JjZVByaW50ID0gMAogICAgbG9jYWwgZnVuYywgZSA9IGxvYWQocywgIj1sdWEiLCAidCIsIHRFbnYpCiAgICBsb2NhbCBmdW5jMiA9IGxvYWQoInJldHVybiBfZWNobygiIC4uIHMgLi4gIik7IiwgIj1sdWEiLCAidCIsIHRFbnYpCiAgICBpZiBub3QgZnVuYyB0aGVuCiAgICAgICAgaWYgZnVuYzIgdGhlbgogICAgICAgICAgICBmdW5jID0gZnVuYzIKICAgICAgICAgICAgZSA9IG5pbAogICAgICAgICAgICBuRm9yY2VQcmludCA9IDEKICAgICAgICBlbmQKICAgIGVsc2UKICAgICAgICBpZiBmdW5jMiB0aGVuCiAgICAgICAgICAgIGZ1bmMgPSBmdW5jMgogICAgICAgIGVuZAogICAgZW5kCgogICAgaWYgZnVuYyB0aGVuCiAgICAgICAgbG9jYWwgdFJlc3VsdHMgPSB0YWJsZS5wYWNrKHBjYWxsKGZ1bmMpKQogICAgICAgIGlmIHRSZXN1bHRzWzFdIHRoZW4KICAgICAgICAgICAgbG9jYWwgbiA9IDEKICAgICAgICAgICAgd2hpbGUgbiA8IHRSZXN1bHRzLm4gb3IgbiA8PSBuRm9yY2VQcmludCBkbwogICAgICAgICAgICAgICAgbG9jYWwgdmFsdWUgPSB0UmVzdWx0c1tuICsgMV0KICAgICAgICAgICAgICAgIGxvY2FsIG9rLCBzZXJpYWxpc2VkID0gcGNhbGwocHJldHR5LnByZXR0eSwgdmFsdWUsIHsKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbl9hcmdzID0gc2V0dGluZ3MuZ2V0KCJsdWEuZnVuY3Rpb25fYXJncyIpLAogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uX3NvdXJjZSA9IHNldHRpbmdzLmdldCgibHVhLmZ1bmN0aW9uX3NvdXJjZSIpLAogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIGlmIG9rIHRoZW4KICAgICAgICAgICAgICAgICAgICBwcmV0dHkucHJpbnQoc2VyaWFsaXNlZCkKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICBwcmludCh0b3N0cmluZyh2YWx1ZSkpCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIG4gPSBuICsgMQogICAgICAgICAgICBlbmQKICAgICAgICBlbHNlCiAgICAgICAgICAgIHByaW50RXJyb3IodFJlc3VsdHNbMl0pCiAgICAgICAgZW5kCiAgICBlbHNlCiAgICAgICAgcHJpbnRFcnJvcihlKQogICAgZW5kCgplbmQK";
   Module["FS_createDataFile"]("/craftos/rom/programs", "lua.lua", decodeBase64(fileData25), true, true, false);
   var fileData26 = "bG9jYWwgZnVuY3Rpb24gcHJpbnRVc2FnZSgpCiAgICBsb2NhbCBwcm9ncmFtTmFtZSA9IGFyZ1swXSBvciBmcy5nZXROYW1lKHNoZWxsLmdldFJ1bm5pbmdQcm9ncmFtKCkpCiAgICBwcmludCgiVXNhZ2VzOiIpCiAgICBwcmludChwcm9ncmFtTmFtZSAuLiAiIGhvc3QiKQogICAgcHJpbnQocHJvZ3JhbU5hbWUgLi4gIiBob3N0IDx4PiA8eT4gPHo+IikKICAgIHByaW50KHByb2dyYW1OYW1lIC4uICIgbG9jYXRlIikKZW5kCgpsb2NhbCB0QXJncyA9IHsgLi4uIH0KaWYgI3RBcmdzIDwgMSB0aGVuCiAgICBwcmludFVzYWdlKCkKICAgIHJldHVybgplbmQKCiBsb2NhbCBzQ29tbWFuZCA9IHRBcmdzWzFdCmlmIHNDb21tYW5kID09ICJsb2NhdGUiIHRoZW4KICAgIC0tICJncHMgbG9jYXRlIgogICAgLS0gSnVzdCBsb2NhdGUgdGhpcyBjb21wdXRlciAodGhpcyB3aWxsIHByaW50IHRoZSByZXN1bHRzKQogICAgZ3BzLmxvY2F0ZSgyLCB0cnVlKQoKZWxzZWlmIHNDb21tYW5kID09ICJob3N0IiB0aGVuCiAgICAtLSAiZ3BzIGhvc3QiCiAgICAtLSBBY3QgYXMgYSBHUFMgaG9zdAogICAgaWYgcG9ja2V0IHRoZW4KICAgICAgICBwcmludCgiR1BTIEhvc3RzIG11c3QgYmUgc3RhdGlvbmFyeSIpCiAgICAgICAgcmV0dXJuCiAgICBlbmQKCiAgICAtLSBGaW5kIGEgbW9kZW0KICAgIGxvY2FsIHNNb2RlbVNpZGUgPSBuaWwKICAgIGZvciBfLCBzU2lkZSBpbiBpcGFpcnMocnMuZ2V0U2lkZXMoKSkgZG8KICAgICAgICBpZiBwZXJpcGhlcmFsLmdldFR5cGUoc1NpZGUpID09ICJtb2RlbSIgYW5kIHBlcmlwaGVyYWwuY2FsbChzU2lkZSwgImlzV2lyZWxlc3MiKSB0aGVuCiAgICAgICAgICAgIHNNb2RlbVNpZGUgPSBzU2lkZQogICAgICAgICAgICBicmVhawogICAgICAgIGVuZAogICAgZW5kCgogICAgaWYgc01vZGVtU2lkZSA9PSBuaWwgdGhlbgogICAgICAgIHByaW50KCJObyB3aXJlbGVzcyBtb2RlbXMgZm91bmQuIDEgcmVxdWlyZWQuIikKICAgICAgICByZXR1cm4KICAgIGVuZAoKICAgIC0tIERldGVybWluZSBwb3NpdGlvbgogICAgbG9jYWwgeCwgeSwgegogICAgaWYgI3RBcmdzID49IDQgdGhlbgogICAgICAgIC0tIFBvc2l0aW9uIGlzIG1hbnVhbGx5IHNwZWNpZmllZAogICAgICAgIHggPSB0b251bWJlcih0QXJnc1syXSkKICAgICAgICB5ID0gdG9udW1iZXIodEFyZ3NbM10pCiAgICAgICAgeiA9IHRvbnVtYmVyKHRBcmdzWzRdKQogICAgICAgIGlmIHggPT0gbmlsIG9yIHkgPT0gbmlsIG9yIHogPT0gbmlsIHRoZW4KICAgICAgICAgICAgcHJpbnRVc2FnZSgpCiAgICAgICAgICAgIHJldHVybgogICAgICAgIGVuZAogICAgICAgIHByaW50KCJQb3NpdGlvbiBpcyAiIC4uIHggLi4gIiwiIC4uIHkgLi4gIiwiIC4uIHopCiAgICBlbHNlCiAgICAgICAgLS0gUG9zaXRpb24gaXMgdG8gYmUgZGV0ZXJtaW5lZCB1c2luZyBsb2NhdGUKICAgICAgICB4LCB5LCB6ID0gZ3BzLmxvY2F0ZSgyLCB0cnVlKQogICAgICAgIGlmIHggPT0gbmlsIHRoZW4KICAgICAgICAgICAgcHJpbnQoIlJ1biBcImdwcyBob3N0IDx4PiA8eT4gPHo+XCIgdG8gc2V0IHBvc2l0aW9uIG1hbnVhbGx5IikKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICAtLSBPcGVuIGEgY2hhbm5lbAogICAgbG9jYWwgbW9kZW0gPSBwZXJpcGhlcmFsLndyYXAoc01vZGVtU2lkZSkKICAgIHByaW50KCJPcGVuaW5nIGNoYW5uZWwgb24gbW9kZW0gIiAuLiBzTW9kZW1TaWRlKQogICAgbW9kZW0ub3BlbihncHMuQ0hBTk5FTF9HUFMpCgogICAgLS0gU2VydmUgcmVxdWVzdHMgaW5kZWZpbmF0ZWx5CiAgICBsb2NhbCBuU2VydmVkID0gMAogICAgd2hpbGUgdHJ1ZSBkbwogICAgICAgIGxvY2FsIGUsIHAxLCBwMiwgcDMsIHA0LCBwNSA9IG9zLnB1bGxFdmVudCgibW9kZW1fbWVzc2FnZSIpCiAgICAgICAgaWYgZSA9PSAibW9kZW1fbWVzc2FnZSIgdGhlbgogICAgICAgICAgICAtLSBXZSByZWNlaXZlZCBhIG1lc3NhZ2UgZnJvbSBhIG1vZGVtCiAgICAgICAgICAgIGxvY2FsIHNTaWRlLCBzQ2hhbm5lbCwgc1JlcGx5Q2hhbm5lbCwgc01lc3NhZ2UsIG5EaXN0YW5jZSA9IHAxLCBwMiwgcDMsIHA0LCBwNQogICAgICAgICAgICBpZiBzU2lkZSA9PSBzTW9kZW1TaWRlIGFuZCBzQ2hhbm5lbCA9PSBncHMuQ0hBTk5FTF9HUFMgYW5kIHNNZXNzYWdlID09ICJQSU5HIiBhbmQgbkRpc3RhbmNlIHRoZW4KICAgICAgICAgICAgICAgIC0tIFdlIHJlY2VpdmVkIGEgcGluZyBtZXNzYWdlIG9uIHRoZSBHUFMgY2hhbm5lbCwgc2VuZCBhIHJlc3BvbnNlCiAgICAgICAgICAgICAgICBtb2RlbS50cmFuc21pdChzUmVwbHlDaGFubmVsLCBncHMuQ0hBTk5FTF9HUFMsIHsgeCwgeSwgeiB9KQoKICAgICAgICAgICAgICAgIC0tIFByaW50IHRoZSBudW1iZXIgb2YgcmVxdWVzdHMgaGFuZGxlZAogICAgICAgICAgICAgICAgblNlcnZlZCA9IG5TZXJ2ZWQgKyAxCiAgICAgICAgICAgICAgICBpZiBuU2VydmVkID4gMSB0aGVuCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgXywgeSA9IHRlcm0uZ2V0Q3Vyc29yUG9zKCkKICAgICAgICAgICAgICAgICAgICB0ZXJtLnNldEN1cnNvclBvcygxLCB5IC0gMSkKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgcHJpbnQoblNlcnZlZCAuLiAiIEdQUyByZXF1ZXN0cyBzZXJ2ZWQiKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAplbHNlCiAgICAtLSAiZ3BzIHNvbWV0aGluZ2Vsc2UiCiAgICAtLSBFcnJvcgogICAgcHJpbnRVc2FnZSgpCmVuZAo=";
   Module["FS_createDataFile"]("/craftos/rom/programs", "gps.lua", decodeBase64(fileData26), true, true, false);
   var fileData27 = "";
   Module["FS_createDataFile"]("/craftos/rom/programs", ".DS_Store", decodeBase64(fileData27), true, true, false);
   var fileData28 = "bG9jYWwgblRpbWUgPSBvcy50aW1lKCkKbG9jYWwgbkRheSA9IG9zLmRheSgpCnByaW50KCJUaGUgdGltZSBpcyAiIC4uIHRleHR1dGlscy5mb3JtYXRUaW1lKG5UaW1lLCBmYWxzZSkgLi4gIiBvbiBEYXkgIiAuLiBuRGF5KQo=";
   Module["FS_createDataFile"]("/craftos/rom/programs", "time.lua", decodeBase64(fileData28), true, true, false);
   var fileData29 = "bG9jYWwgdEFyZ3MgPSB7IC4uLiB9CmlmICN0QXJncyA8IDEgdGhlbgogICAgbG9jYWwgcHJvZ3JhbU5hbWUgPSBhcmdbMF0gb3IgZnMuZ2V0TmFtZShzaGVsbC5nZXRSdW5uaW5nUHJvZ3JhbSgpKQogICAgcHJpbnQoIlVzYWdlOiAiIC4uIHByb2dyYW1OYW1lIC4uICIgPHBhdGg+IikKICAgIHJldHVybgplbmQKCmxvY2FsIHNQYXRoID0gc2hlbGwucmVzb2x2ZSh0QXJnc1sxXSkKaWYgZnMuZXhpc3RzKHNQYXRoKSB0aGVuCiAgICBpZiBmcy5pc0RpcihzUGF0aCkgdGhlbgogICAgICAgIHByaW50KCJkaXJlY3RvcnkiKQogICAgZWxzZQogICAgICAgIHByaW50KCJmaWxlIikKICAgIGVuZAplbHNlCiAgICBwcmludCgiTm8gc3VjaCBwYXRoIikKZW5kCg==";
   Module["FS_createDataFile"]("/craftos/rom/programs", "type.lua", decodeBase64(fileData29), true, true, false);
   var fileData30 = "aWYgbW91bnRlciA9PSBuaWwgdGhlbiBlcnJvcigiTW91bnRpbmcgZGlyZWN0b3JpZXMgaXMgbm90IHN1cHBvcnRlZCBpbiB2YW5pbGxhIG1vZGUuIikgZW5kCmxvY2FsIGFyZ3MgPSB7IC4uLiB9CgppZiBhcmdzWzJdIH49IG5pbCB0aGVuCiAgICBsb2NhbCBybyA9IG5pbAogICAgaWYgYXJnc1szXSA9PSAicmVhZE9ubHkiIG9yIGFyZ3NbM10gPT0gInRydWUiIHRoZW4gcm8gPSB0cnVlCiAgICBlbHNlaWYgYXJnc1szXSA9PSAiZmFsc2UiIHRoZW4gcm8gPSBmYWxzZSBlbmQKICAgIGlmIGNvbmZpZy5nZXQoInNob3dNb3VudFByb21wdCIpIHRoZW4gcHJpbnQoIkEgcHJvbXB0IHdpbGwgYXBwZWFyIGFza2luZyB0byBjb25maXJtIG1vdW50aW5nLiBQcmVzcyBBbGxvdyB0byBjb250aW51ZSBtb3VudGluZy4iKSBlbmQKICAgIGlmIG5vdCBtb3VudGVyLm1vdW50KGFyZ3NbMV0sIGFyZ3NbMl0sIHJvKSB0aGVuIHByaW50RXJyb3IoIkNvdWxkIG5vdCBtb3VudCIpIGVuZAplbHNlaWYgYXJnc1sxXSA9PSAiLS1oZWxwIiB0aGVuCiAgICB0ZXJtLnNldFRleHRDb2xvcihjb2xvcnMucmVkKQogICAgcHJpbnQoIlVzYWdlOiBtb3VudCA8bmFtZT4gPHBhdGg+IFtyZWFkT25seV0iKQogICAgcHJpbnQoIiAgICAgICBtb3VudCAtLWhlbHAiKQogICAgcHJpbnQoIiAgICAgICBtb3VudCIpCiAgICB0ZXJtLnNldFRleHRDb2xvcihjb2xvcnMud2hpdGUpCmVsc2UKICAgIGxvY2FsIG1vdW50cyA9IG1vdW50ZXIubGlzdCgpCiAgICBwcmludCgiLyBvbiBjb21wdXRlci8iIC4uIG9zLmdldENvbXB1dGVySUQoKSkKICAgIGZvciBrLHYgaW4gcGFpcnMobW91bnRzKSBkbwogICAgICAgIHdyaXRlKCIvIiAuLiBrIC4uICIgb24gIiAuLiAoI3YgPT0gMSBhbmQgdlsxXSBvciAiKFxuICAiIC4uIHRhYmxlLmNvbmNhdCh2LCAiLFxuICAiKSAuLiAiXG4pIikpCiAgICAgICAgaWYgbW91bnRlci5pc1JlYWRPbmx5KGspIHRoZW4gcHJpbnQoIiAocmVhZC1vbmx5KSIpIGVsc2UgcHJpbnQoKSBlbmQKICAgIGVuZAplbmQ=";
   Module["FS_createDataFile"]("/craftos/rom/programs", "mount.lua", decodeBase64(fileData30), true, true, false);
   var fileData31 = "bG9jYWwgdEFyZ3MgPSB7IC4uLiB9CmlmICN0QXJncyA8IDIgdGhlbgogICAgbG9jYWwgcHJvZ3JhbU5hbWUgPSBhcmdbMF0gb3IgZnMuZ2V0TmFtZShzaGVsbC5nZXRSdW5uaW5nUHJvZ3JhbSgpKQogICAgcHJpbnQoIlVzYWdlOiAiIC4uIHByb2dyYW1OYW1lIC4uICIgPHNvdXJjZT4gPGRlc3RpbmF0aW9uPiIpCiAgICByZXR1cm4KZW5kCgpsb2NhbCBzU291cmNlID0gc2hlbGwucmVzb2x2ZSh0QXJnc1sxXSkKbG9jYWwgc0Rlc3QgPSBzaGVsbC5yZXNvbHZlKHRBcmdzWzJdKQoKaWYgbm90IGZzLmV4aXN0cyhzU291cmNlKSB0aGVuCiAgICBwcmludEVycm9yKCJObyBtYXRjaGluZyBmaWxlcyIpCiAgICByZXR1cm4KZWxzZWlmIGZzLmlzRHJpdmVSb290KHNTb3VyY2UpIHRoZW4KICAgIHByaW50RXJyb3IoIkNhbid0IHJlbmFtZSBtb3VudHMiKQogICAgcmV0dXJuCmVsc2VpZiBmcy5pc1JlYWRPbmx5KHNTb3VyY2UpIHRoZW4KICAgIHByaW50RXJyb3IoIlNvdXJjZSBpcyByZWFkLW9ubHkiKQogICAgcmV0dXJuCmVsc2VpZiBmcy5leGlzdHMoc0Rlc3QpIHRoZW4KICAgIHByaW50RXJyb3IoIkRlc3RpbmF0aW9uIGV4aXN0cyIpCiAgICByZXR1cm4KZWxzZWlmIGZzLmlzUmVhZE9ubHkoc0Rlc3QpIHRoZW4KICAgIHByaW50RXJyb3IoIkRlc3RpbmF0aW9uIGlzIHJlYWQtb25seSIpCiAgICByZXR1cm4KZW5kCgpmcy5tb3ZlKHNTb3VyY2UsIHNEZXN0KQo=";
   Module["FS_createDataFile"]("/craftos/rom/programs", "rename.lua", decodeBase64(fileData31), true, true, false);
   var fileData32 = "";
   Module["FS_createDataFile"]("/craftos/rom/programs", "shell.lua", decodeBase64(fileData32), true, true, false);
   var fileData33 = "bG9jYWwgdEFwaXMgPSB7fQpmb3IgaywgdiBpbiBwYWlycyhfRykgZG8KICAgIGlmIHR5cGUoaykgPT0gInN0cmluZyIgYW5kIHR5cGUodikgPT0gInRhYmxlIiBhbmQgayB+PSAiX0ciIHRoZW4KICAgICAgICB0YWJsZS5pbnNlcnQodEFwaXMsIGspCiAgICBlbmQKZW5kCnRhYmxlLmluc2VydCh0QXBpcywgInNoZWxsIikKdGFibGUuaW5zZXJ0KHRBcGlzLCAicGFja2FnZSIpCmlmIG11bHRpc2hlbGwgdGhlbgogICAgdGFibGUuaW5zZXJ0KHRBcGlzLCAibXVsdGlzaGVsbCIpCmVuZAp0YWJsZS5zb3J0KHRBcGlzKQoKdGV4dHV0aWxzLnBhZ2VkVGFidWxhdGUodEFwaXMpCg==";
   Module["FS_createDataFile"]("/craftos/rom/programs", "apis.lua", decodeBase64(fileData33), true, true, false);
   var fileData34 = "aWYgdGVybS5pc0NvbG91cigpIHRoZW4KICAgIHRlcm0uc2V0VGV4dENvbG91cihjb2xvdXJzLnllbGxvdykKZW5kCnByaW50KCJHb29kYnllIikKdGVybS5zZXRUZXh0Q29sb3VyKGNvbG91cnMud2hpdGUpCgpzbGVlcCgxKQpvcy5yZWJvb3QoKQo=";
   Module["FS_createDataFile"]("/craftos/rom/programs", "reboot.lua", decodeBase64(fileData34), true, true, false);
   var fileData35 = "bG9jYWwgdEFyZ3MgPSB7IC4uLiB9CmlmICN0QXJncyA8IDIgdGhlbgogICAgbG9jYWwgcHJvZ3JhbU5hbWUgPSBhcmdbMF0gb3IgZnMuZ2V0TmFtZShzaGVsbC5nZXRSdW5uaW5nUHJvZ3JhbSgpKQogICAgcHJpbnQoIlVzYWdlOiAiIC4uIHByb2dyYW1OYW1lIC4uICIgPHNvdXJjZT4gPGRlc3RpbmF0aW9uPiIpCiAgICByZXR1cm4KZW5kCgpsb2NhbCBzU291cmNlID0gc2hlbGwucmVzb2x2ZSh0QXJnc1sxXSkKbG9jYWwgc0Rlc3QgPSBzaGVsbC5yZXNvbHZlKHRBcmdzWzJdKQpsb2NhbCB0RmlsZXMgPSBmcy5maW5kKHNTb3VyY2UpCgpsb2NhbCBmdW5jdGlvbiBzYW5pdHlfY2hlY2tzKHNvdXJjZSwgZGVzdCkKICAgIGlmIGZzLmV4aXN0cyhkZXN0KSB0aGVuCiAgICAgICAgcHJpbnRFcnJvcigiRGVzdGluYXRpb24gZXhpc3RzIikKICAgICAgICByZXR1cm4gZmFsc2UKICAgIGVsc2VpZiBmcy5pc1JlYWRPbmx5KGRlc3QpIHRoZW4KICAgICAgICBwcmludEVycm9yKCJEZXN0aW5hdGlvbiBpcyByZWFkLW9ubHkiKQogICAgICAgIHJldHVybiBmYWxzZQogICAgZWxzZWlmIGZzLmlzRHJpdmVSb290KHNvdXJjZSkgdGhlbgogICAgICAgIHByaW50RXJyb3IoIkNhbm5vdCBtb3ZlIG1vdW50IC8iIC4uIHNvdXJjZSkKICAgICAgICByZXR1cm4gZmFsc2UKICAgIGVsc2VpZiBmcy5pc1JlYWRPbmx5KHNvdXJjZSkgdGhlbgogICAgICAgIHByaW50RXJyb3IoIkNhbm5vdCBtb3ZlIHJlYWQtb25seSBmaWxlIC8iIC4uIHNvdXJjZSkKICAgICAgICByZXR1cm4gZmFsc2UKICAgIGVuZAogICAgcmV0dXJuIHRydWUKZW5kCgppZiAjdEZpbGVzID4gMCB0aGVuCiAgICBmb3IgXywgc0ZpbGUgaW4gaXBhaXJzKHRGaWxlcykgZG8KICAgICAgICBpZiBmcy5pc0RpcihzRGVzdCkgdGhlbgogICAgICAgICAgICBsb2NhbCBkZXN0ID0gZnMuY29tYmluZShzRGVzdCwgZnMuZ2V0TmFtZShzRmlsZSkpCiAgICAgICAgICAgIGlmIHNhbml0eV9jaGVja3Moc0ZpbGUsIGRlc3QpIHRoZW4KICAgICAgICAgICAgICAgIGZzLm1vdmUoc0ZpbGUsIGRlc3QpCiAgICAgICAgICAgIGVuZAogICAgICAgIGVsc2VpZiAjdEZpbGVzID09IDEgdGhlbgogICAgICAgICAgICBpZiBzYW5pdHlfY2hlY2tzKHNGaWxlLCBzRGVzdCkgdGhlbgogICAgICAgICAgICAgICAgZnMubW92ZShzRmlsZSwgc0Rlc3QpCiAgICAgICAgICAgIGVuZAogICAgICAgIGVsc2UKICAgICAgICAgICAgcHJpbnRFcnJvcigiQ2Fubm90IG92ZXJ3cml0ZSBmaWxlIG11bHRpcGxlIHRpbWVzIikKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgZW5kCiAgICBlbmQKZWxzZQogICAgcHJpbnRFcnJvcigiTm8gbWF0Y2hpbmcgZmlsZXMiKQplbmQK";
   Module["FS_createDataFile"]("/craftos/rom/programs", "move.lua", decodeBase64(fileData35), true, true, false);
   var fileData36 = "bG9jYWwgdEFyZ3MgPSB7IC4uLiB9Cgpsb2NhbCBmdW5jdGlvbiBwcmludFVzYWdlKCkKICAgIGxvY2FsIHByb2dyYW1OYW1lID0gYXJnWzBdIG9yIGZzLmdldE5hbWUoc2hlbGwuZ2V0UnVubmluZ1Byb2dyYW0oKSkKICAgIHByaW50KCJVc2FnZXM6IikKICAgIHByaW50KHByb2dyYW1OYW1lKQogICAgcHJpbnQocHJvZ3JhbU5hbWUgLi4gIiBzY3JlZW4iKQogICAgcHJpbnQocHJvZ3JhbU5hbWUgLi4gIiBwYWxldHRlIikKICAgIHByaW50KHByb2dyYW1OYW1lIC4uICIgYWxsIikKZW5kCgpsb2NhbCBmdW5jdGlvbiBjbGVhcigpCiAgICB0ZXJtLmNsZWFyKCkKICAgIHRlcm0uc2V0Q3Vyc29yUG9zKDEsIDEpCmVuZAoKbG9jYWwgZnVuY3Rpb24gY2xlYXJQaXhlbHMoKQogICAgaWYgdGVybS5nZXRHcmFwaGljc01vZGUgdGhlbgogICAgICAgIHRlcm0uc2V0R3JhcGhpY3NNb2RlKDEpCiAgICAgICAgdGVybS5jbGVhcigpCiAgICAgICAgdGVybS5zZXRHcmFwaGljc01vZGUoMCkKICAgIGVuZAplbmQKCmxvY2FsIGZ1bmN0aW9uIHJlc2V0UGFsZXR0ZSgpCiAgICBmb3IgaSA9IDAsIDE1IGRvCiAgICAgICAgdGVybS5zZXRQYWxldHRlQ29sb3VyKDJeaSwgdGVybS5uYXRpdmVQYWxldHRlQ29sb3VyKDJeaSkpCiAgICBlbmQKZW5kCgpsb2NhbCBzQ29tbWFuZCA9IHRBcmdzWzFdIG9yICJzY3JlZW4iCmlmIHNDb21tYW5kID09ICJzY3JlZW4iIHRoZW4KICAgIGNsZWFyKCkKZWxzZWlmIHNDb21tYW5kID09ICJwYWxldHRlIiB0aGVuCiAgICByZXNldFBhbGV0dGUoKQplbHNlaWYgc0NvbW1hbmQgPT0gImdyYXBoaWNzIiB0aGVuCiAgICBjbGVhclBpeGVscygpCmVsc2VpZiBzQ29tbWFuZCA9PSAiYWxsIiB0aGVuCiAgICBjbGVhcigpCiAgICBjbGVhclBpeGVscygpCiAgICByZXNldFBhbGV0dGUoKQplbHNlCiAgICBwcmludFVzYWdlKCkKZW5kCg==";
   Module["FS_createDataFile"]("/craftos/rom/programs", "clear.lua", decodeBase64(fileData36), true, true, false);
   var fileData37 = "aWYgc2hlbGwuZW52aXJvbm1lbnQgPT0gbmlsIHRoZW4gZXJyb3IoIlJlcXVpcmVzIHRoZSBjYXNoIHNoZWxsLiIpIGVuZApsb2NhbCBhcmdzID0gey4uLn0KCmxvY2FsIGVudiA9IHNldG1ldGF0YWJsZSh7fSwge19faW5kZXggPSBfRU5WfSkKbG9jYWwgcGF0aCA9IHNoZWxsLnBhdGgoKQpsb2NhbCB1bnNldCA9IHt9CmxvY2FsIGNtZCA9IHt9CmxvY2FsIGNtZGFyZ3MgPSBmYWxzZQpsb2NhbCBuZXh0YXJnCgpmb3Igayx2IGluIGlwYWlycyhhcmdzKSBkbwogICAgaWYgbmV4dGFyZyB0aGVuCiAgICAgICAgaWYgbmV4dGFyZyA9PSAxIHRoZW4gcGF0aCA9IHYKICAgICAgICBlbHNlaWYgbmV4dGFyZyA9PSAyIHRoZW4gdGFibGUuaW5zZXJ0KHVuc2V0LCB2KSBlbmQKICAgICAgICBuZXh0YXJnID0gbmlsCiAgICBlbHNlaWYgY21kYXJncyB0aGVuIAogICAgICAgIHRhYmxlLmluc2VydChjbWQsIHYpIAogICAgZWxzZQogICAgICAgIGlmIHYgPT0gIi1pIiB0aGVuIHNldG1ldGF0YWJsZShlbnYsIHtfX2luZGV4ID0gX0d9KQogICAgICAgIGVsc2VpZiB2ID09ICItUCIgdGhlbiBuZXh0YXJnID0gMQogICAgICAgIGVsc2VpZiB2ID09ICItdSIgdGhlbiBuZXh0YXJnID0gMgogICAgICAgIGVsc2VpZiBzdHJpbmcuZmluZCh2LCAiPSIpIHRoZW4gZW52W3N0cmluZy5zdWIodiwgMSwgc3RyaW5nLmZpbmQodiwgIj0iKSAtIDEpXSA9IHN0cmluZy5zdWIodiwgc3RyaW5nLmZpbmQodiwgIj0iKSArIDEpCiAgICAgICAgZWxzZSB0YWJsZS5pbnNlcnQoY21kLCB2KTsgY21kYXJncyA9IHRydWUgZW5kCiAgICBlbmQKZW5kCgppZiAjdW5zZXQgPiAwIHRoZW4KICAgIGxvY2FsIG9sZGlkeCA9IGdldG1ldGF0YWJsZShlbnYpLl9faW5kZXgKICAgIGxvY2FsIHUgPSB7fQogICAgZm9yIGssdiBpbiBpcGFpcnModW5zZXQpIGRvIHVbdl0gPSB0cnVlIGVuZAogICAgc2V0bWV0YXRhYmxlKGVudiwge19faW5kZXggPSBmdW5jdGlvbihzZWxmLCBuYW1lKSBpZiB1W25hbWVdIHRoZW4gcmV0dXJuIG5pbCBlbHNlIHJldHVybiBvbGRpZHhbbmFtZV0gZW5kIGVuZH0pCmVuZAoKbG9jYWwgb2xkUGF0aCA9IHNoZWxsLnBhdGgoKQpsb2NhbCBvbGRFbnYgPSBzaGVsbC5lbnZpcm9ubWVudCgpCnNoZWxsLnNldFBhdGgocGF0aCkKc2hlbGwuc2V0RW52aXJvbm1lbnQoZW52KQpzaGVsbC5ydW4odGFibGUudW5wYWNrKGNtZCkpCnNoZWxsLnNldFBhdGgob2xkUGF0aCkKc2hlbGwuc2V0RW52aXJvbm1lbnQob2xkRW52KQ==";
   Module["FS_createDataFile"]("/craftos/rom/programs", "env.lua", decodeBase64(fileData37), true, true, false);
   var fileData38 = "bG9jYWwgZnVuY3Rpb24gcHJpbnRVc2FnZSgpCiAgICBsb2NhbCBwcm9ncmFtTmFtZSA9IGFyZ1swXSBvciBmcy5nZXROYW1lKHNoZWxsLmdldFJ1bm5pbmdQcm9ncmFtKCkpCiAgICBwcmludCgiVXNhZ2VzOiIpCiAgICBwcmludChwcm9ncmFtTmFtZSAuLiAiIGdldCIpCiAgICBwcmludChwcm9ncmFtTmFtZSAuLiAiIGdldCA8ZHJpdmU+IikKICAgIHByaW50KHByb2dyYW1OYW1lIC4uICIgc2V0IDx0ZXh0PiIpCiAgICBwcmludChwcm9ncmFtTmFtZSAuLiAiIHNldCA8ZHJpdmU+IDx0ZXh0PiIpCiAgICBwcmludChwcm9ncmFtTmFtZSAuLiAiIGNsZWFyIikKICAgIHByaW50KHByb2dyYW1OYW1lIC4uICIgY2xlYXIgPGRyaXZlPiIpCmVuZAoKbG9jYWwgZnVuY3Rpb24gY2hlY2tEcml2ZShzRHJpdmUpCiAgICBpZiBwZXJpcGhlcmFsLmdldFR5cGUoc0RyaXZlKSA9PSAiZHJpdmUiIHRoZW4KICAgICAgICAtLSBDaGVjayB0aGUgZGlzayBleGlzdHMKICAgICAgICBsb2NhbCBiRGF0YSA9IGRpc2suaGFzRGF0YShzRHJpdmUpCiAgICAgICAgaWYgbm90IGJEYXRhIHRoZW4KICAgICAgICAgICAgcHJpbnQoIk5vIGRpc2sgaW4gIiAuLiBzRHJpdmUgLi4gIiBkcml2ZSIpCiAgICAgICAgICAgIHJldHVybiBmYWxzZQogICAgICAgIGVuZAogICAgZWxzZQogICAgICAgIHByaW50KCJObyBkaXNrIGRyaXZlIG5hbWVkICIgLi4gc0RyaXZlKQogICAgICAgIHJldHVybiBmYWxzZQogICAgZW5kCiAgICByZXR1cm4gdHJ1ZQplbmQKCmxvY2FsIGZ1bmN0aW9uIGdldChzRHJpdmUpCiAgICBpZiBzRHJpdmUgfj0gbmlsIHRoZW4KICAgICAgICBpZiBjaGVja0RyaXZlKHNEcml2ZSkgdGhlbgogICAgICAgICAgICBsb2NhbCBzTGFiZWwgPSBkaXNrLmdldExhYmVsKHNEcml2ZSkKICAgICAgICAgICAgaWYgc0xhYmVsIHRoZW4KICAgICAgICAgICAgICAgIHByaW50KCJEaXNrIGxhYmVsIGlzIFwiIiAuLiBzTGFiZWwgLi4gIlwiIikKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgcHJpbnQoIk5vIERpc2sgbGFiZWwiKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVsc2UKICAgICAgICBsb2NhbCBzTGFiZWwgPSBvcy5nZXRDb21wdXRlckxhYmVsKCkKICAgICAgICBpZiBzTGFiZWwgdGhlbgogICAgICAgICAgICBwcmludCgiQ29tcHV0ZXIgbGFiZWwgaXMgXCIiIC4uIHNMYWJlbCAuLiAiXCIiKQogICAgICAgIGVsc2UKICAgICAgICAgICAgcHJpbnQoIk5vIENvbXB1dGVyIGxhYmVsIikKICAgICAgICBlbmQKICAgIGVuZAplbmQKCmxvY2FsIGZ1bmN0aW9uIHNldChzRHJpdmUsIHNUZXh0KQogICAgaWYgc0RyaXZlIH49IG5pbCB0aGVuCiAgICAgICAgaWYgY2hlY2tEcml2ZShzRHJpdmUpIHRoZW4KICAgICAgICAgICAgZGlzay5zZXRMYWJlbChzRHJpdmUsIHNUZXh0KQogICAgICAgICAgICBsb2NhbCBzTGFiZWwgPSBkaXNrLmdldExhYmVsKHNEcml2ZSkKICAgICAgICAgICAgaWYgc0xhYmVsIHRoZW4KICAgICAgICAgICAgICAgIHByaW50KCJEaXNrIGxhYmVsIHNldCB0byBcIiIgLi4gc0xhYmVsIC4uICJcIiIpCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHByaW50KCJEaXNrIGxhYmVsIGNsZWFyZWQiKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVsc2UKICAgICAgICBvcy5zZXRDb21wdXRlckxhYmVsKHNUZXh0KQogICAgICAgIGxvY2FsIHNMYWJlbCA9IG9zLmdldENvbXB1dGVyTGFiZWwoKQogICAgICAgIGlmIHNMYWJlbCB0aGVuCiAgICAgICAgICAgIHByaW50KCJDb21wdXRlciBsYWJlbCBzZXQgdG8gXCIiIC4uIHNMYWJlbCAuLiAiXCIiKQogICAgICAgIGVsc2UKICAgICAgICAgICAgcHJpbnQoIkNvbXB1dGVyIGxhYmVsIGNsZWFyZWQiKQogICAgICAgIGVuZAogICAgZW5kCmVuZAoKbG9jYWwgdEFyZ3MgPSB7IC4uLiB9CmxvY2FsIHNDb21tYW5kID0gdEFyZ3NbMV0KaWYgc0NvbW1hbmQgPT0gImdldCIgdGhlbgogICAgLS0gR2V0IGEgbGFiZWwKICAgIGlmICN0QXJncyA9PSAxIHRoZW4KICAgICAgICBnZXQobmlsKQogICAgZWxzZWlmICN0QXJncyA9PSAyIHRoZW4KICAgICAgICBnZXQodEFyZ3NbMl0pCiAgICBlbHNlCiAgICAgICAgcHJpbnRVc2FnZSgpCiAgICBlbmQKZWxzZWlmIHNDb21tYW5kID09ICJzZXQiIHRoZW4KICAgIC0tIFNldCBhIGxhYmVsCiAgICBpZiAjdEFyZ3MgPT0gMiB0aGVuCiAgICAgICAgc2V0KG5pbCwgdEFyZ3NbMl0pCiAgICBlbHNlaWYgI3RBcmdzID09IDMgdGhlbgogICAgICAgIHNldCh0QXJnc1syXSwgdEFyZ3NbM10pCiAgICBlbHNlCiAgICAgICAgcHJpbnRVc2FnZSgpCiAgICBlbmQKZWxzZWlmIHNDb21tYW5kID09ICJjbGVhciIgdGhlbgogICAgLS0gQ2xlYXIgYSBsYWJlbAogICAgaWYgI3RBcmdzID09IDEgdGhlbgogICAgICAgIHNldChuaWwsIG5pbCkKICAgIGVsc2VpZiAjdEFyZ3MgPT0gMiB0aGVuCiAgICAgICAgc2V0KHRBcmdzWzJdLCBuaWwpCiAgICBlbHNlCiAgICAgICAgcHJpbnRVc2FnZSgpCiAgICBlbmQKZWxzZQogICAgcHJpbnRVc2FnZSgpCmVuZAo=";
   Module["FS_createDataFile"]("/craftos/rom/programs", "label.lua", decodeBase64(fileData38), true, true, false);
   var fileData39 = "bG9jYWwgYkFsbCA9IGZhbHNlCmxvY2FsIHRBcmdzID0geyAuLi4gfQppZiAjdEFyZ3MgPiAwIGFuZCB0QXJnc1sxXSA9PSAiYWxsIiB0aGVuCiAgICBiQWxsID0gdHJ1ZQplbmQKCmxvY2FsIHRQcm9ncmFtcyA9IHNoZWxsLnByb2dyYW1zKGJBbGwpCnRleHR1dGlscy5wYWdlZFRhYnVsYXRlKHRQcm9ncmFtcykK";
   Module["FS_createDataFile"]("/craftos/rom/programs", "programs.lua", decodeBase64(fileData39), true, true, false);
   var fileData40 = "LS0gR2V0IGFyZ3VtZW50cwpsb2NhbCB0QXJncyA9IHsgLi4uIH0KaWYgI3RBcmdzID09IDAgdGhlbgogICAgbG9jYWwgcHJvZ3JhbU5hbWUgPSBhcmdbMF0gb3IgZnMuZ2V0TmFtZShzaGVsbC5nZXRSdW5uaW5nUHJvZ3JhbSgpKQogICAgcHJpbnQoIlVzYWdlOiAiIC4uIHByb2dyYW1OYW1lIC4uICIgPGRyaXZlPiIpCiAgICByZXR1cm4KZW5kCgpsb2NhbCBzRHJpdmUgPSB0QXJnc1sxXQoKLS0gQ2hlY2sgdGhlIGRpc2sgZXhpc3RzCmxvY2FsIGJQcmVzZW50ID0gZGlzay5pc1ByZXNlbnQoc0RyaXZlKQppZiBub3QgYlByZXNlbnQgdGhlbgogICAgcHJpbnQoIk5vdGhpbmcgaW4gIiAuLiBzRHJpdmUgLi4gIiBkcml2ZSIpCiAgICByZXR1cm4KZW5kCgpkaXNrLmVqZWN0KHNEcml2ZSkK";
   Module["FS_createDataFile"]("/craftos/rom/programs", "eject.lua", decodeBase64(fileData40), true, true, false);
   var fileData41 = "bG9jYWwgdEFyZ3MgPSB7IC4uLiB9CgotLSBHZXQgYWxsIHRoZSBmaWxlcyBpbiB0aGUgZGlyZWN0b3J5CmxvY2FsIHNEaXIgPSBzaGVsbC5kaXIoKQppZiB0QXJnc1sxXSB+PSBuaWwgdGhlbgogICAgc0RpciA9IHNoZWxsLnJlc29sdmUodEFyZ3NbMV0pCmVuZAoKaWYgbm90IGZzLmlzRGlyKHNEaXIpIHRoZW4KICAgIHByaW50RXJyb3IoIk5vdCBhIGRpcmVjdG9yeSIpCiAgICByZXR1cm4KZW5kCgotLSBTb3J0IGludG8gZGlycy9maWxlcywgYW5kIGNhbGN1bGF0ZSBjb2x1bW4gY291bnQKbG9jYWwgdEFsbCA9IGZzLmxpc3Qoc0RpcikKbG9jYWwgdEZpbGVzID0ge30KbG9jYWwgdERpcnMgPSB7fQoKbG9jYWwgYlNob3dIaWRkZW4gPSBzZXR0aW5ncy5nZXQoImxpc3Quc2hvd19oaWRkZW4iKQpmb3IgXywgc0l0ZW0gaW4gcGFpcnModEFsbCkgZG8KICAgIGlmIGJTaG93SGlkZGVuIG9yIHN0cmluZy5zdWIoc0l0ZW0sIDEsIDEpIH49ICIuIiB0aGVuCiAgICAgICAgbG9jYWwgc1BhdGggPSBmcy5jb21iaW5lKHNEaXIsIHNJdGVtKQogICAgICAgIGlmIGZzLmlzRGlyKHNQYXRoKSB0aGVuCiAgICAgICAgICAgIHRhYmxlLmluc2VydCh0RGlycywgc0l0ZW0pCiAgICAgICAgZWxzZQogICAgICAgICAgICB0YWJsZS5pbnNlcnQodEZpbGVzLCBzSXRlbSkKICAgICAgICBlbmQKICAgIGVuZAplbmQKdGFibGUuc29ydCh0RGlycykKdGFibGUuc29ydCh0RmlsZXMpCgppZiB0ZXJtLmlzQ29sb3VyKCkgdGhlbgogICAgdGV4dHV0aWxzLnBhZ2VkVGFidWxhdGUoY29sb3JzLmdyZWVuLCB0RGlycywgY29sb3JzLndoaXRlLCB0RmlsZXMpCmVsc2UKICAgIHRleHR1dGlscy5wYWdlZFRhYnVsYXRlKGNvbG9ycy5saWdodEdyYXksIHREaXJzLCBjb2xvcnMud2hpdGUsIHRGaWxlcykKZW5kCg==";
   Module["FS_createDataFile"]("/craftos/rom/programs", "list.lua", decodeBase64(fileData41), true, true, false);
   var fileData42 = "aWYgY29uZmlnID09IG5pbCB0aGVuIGVycm9yKCJBY2Nlc3NpbmcgdGhlIGNvbmZpZ3VyYXRpb24gaXMgbm90IHN1cHBvcnRlZCBpbiB2YW5pbGxhIG1vZGUuIikgZW5kCmxvY2FsIGFyZ3MgPSB7IC4uLiB9CgppZiBhcmdzWzFdID09ICJsaXN0IiB0aGVuCiAgICBsb2NhbCBzZXR0aW5ncyA9IGNvbmZpZy5saXN0KCkKICAgIGZvciBrLHYgaW4gcGFpcnMoc2V0dGluZ3MpIGRvCiAgICAgICAgcHJpbnQodiAuLiAiID0gIiAuLiB0b3N0cmluZyhjb25maWcuZ2V0KHYpKSkKICAgIGVuZAplbHNlaWYgYXJnc1sxXSA9PSAiZ2V0IiBhbmQgYXJnc1syXSB+PSBuaWwgdGhlbgogICAgbG9jYWwgc2V0dGluZyA9IGNvbmZpZy5nZXQoYXJnc1syXSkKICAgIGlmIHNldHRpbmcgPT0gbmlsIHRoZW4gZXJyb3IoIlVua25vd24gc2V0dGluZyAiIC4uIGFyZ3NbMl0pCiAgICBlbHNlaWYgdHlwZShzZXR0aW5nKSA9PSAidGFibGUiIHRoZW4gcHJpbnQodGV4dHV0aWxzLnNlcmlhbGl6ZShzZXR0aW5nKSkKICAgIGVsc2UgcHJpbnQodG9zdHJpbmcoc2V0dGluZykpIGVuZAplbHNlaWYgYXJnc1sxXSA9PSAic2V0IiBhbmQgYXJnc1szXSB+PSBuaWwgdGhlbgogICAgbG9jYWwgdHlwZSA9IGNvbmZpZy5nZXRUeXBlKGFyZ3NbMl0pCiAgICBpZiBhcmdzWzJdID09ICJtb3VudF9tb2RlIiBhbmQgX0cudHlwZShhcmdzWzNdKSA9PSAic3RyaW5nIiB0aGVuIHR5cGUgPSAic3RyaW5nIiBlbmQKICAgIGxvY2FsIHJlcwogICAgaWYgdHlwZSA9PSAiYm9vbGVhbiIgdGhlbiByZXMgPSBjb25maWcuc2V0KGFyZ3NbMl0sIGFyZ3NbM10gPT0gInRydWUiIG9yIGFyZ3NbM10gPT0gIjEiKQogICAgZWxzZWlmIHR5cGUgPT0gInN0cmluZyIgdGhlbiByZXMgPSBjb25maWcuc2V0KGFyZ3NbMl0sIGFyZ3NbM10pCiAgICBlbHNlaWYgdHlwZSA9PSAibnVtYmVyIiB0aGVuIHJlcyA9IGNvbmZpZy5zZXQoYXJnc1syXSwgdG9udW1iZXIoYXJnc1szXSkpCiAgICBlbHNlIGVycm9yKCJVbmtub3duIHNldHRpbmcgIiAuLiBhcmdzWzJdKSBlbmQKICAgIGlmIHJlcyB0aGVuIHByaW50KHJlcykgZW5kCmVsc2UKICAgIHRlcm0uc2V0VGV4dENvbG9yKGNvbG9ycy5yZWQpCiAgICBwcmludCgiVXNhZ2U6IGNvbmZpZyA8Z2V0fHNldHxsaXN0PiBbc2V0dGluZ10gW3ZhbHVlXSIpCiAgICB0ZXJtLnNldFRleHRDb2xvcihjb2xvcnMud2hpdGUpCmVuZA==";
   Module["FS_createDataFile"]("/craftos/rom/programs", "config.lua", decodeBase64(fileData42), true, true, false);
   var fileData43 = "";
   Module["FS_createDataFile"]("/craftos/rom/programs", "screenfetch.lua", decodeBase64(fileData43), true, true, false);
   var fileData44 = "bG9jYWwgcHAgPSByZXF1aXJlICJjYy5wcmV0dHkiCgpsb2NhbCB0QXJncyA9IHsgLi4uIH0KaWYgI3RBcmdzID09IDAgdGhlbgogICAgLS0gInNldCIKICAgIGxvY2FsIF8sIHkgPSB0ZXJtLmdldEN1cnNvclBvcygpCiAgICBsb2NhbCB0U2V0dGluZ3MgPSB7fQogICAgZm9yIG4sIHNOYW1lIGluIGlwYWlycyhzZXR0aW5ncy5nZXROYW1lcygpKSBkbwogICAgICAgIHRTZXR0aW5nc1tuXSA9IHRleHR1dGlscy5zZXJpYWxpemUoc05hbWUpIC4uICIgaXMgIiAuLiB0ZXh0dXRpbHMuc2VyaWFsaXplKHNldHRpbmdzLmdldChzTmFtZSkpCiAgICBlbmQKICAgIHRleHR1dGlscy5wYWdlZFByaW50KHRhYmxlLmNvbmNhdCh0U2V0dGluZ3MsICJcbiIpLCB5IC0gMykKCmVsc2VpZiAjdEFyZ3MgPT0gMSB0aGVuCiAgICAtLSAic2V0IGZvbyIKICAgIGxvY2FsIHNOYW1lID0gdEFyZ3NbMV0KICAgIGxvY2FsIGRlZXRzID0gc2V0dGluZ3MuZ2V0RGV0YWlscyhzTmFtZSkKICAgIGxvY2FsIG1zZyA9IHBwLnRleHQoc05hbWUsIGNvbG9ycy5jeWFuKSAuLiAiIGlzICIgLi4gcHAucHJldHR5KGRlZXRzLnZhbHVlKQogICAgaWYgZGVldHMuZGVmYXVsdCB+PSBuaWwgYW5kIGRlZXRzLnZhbHVlIH49IGRlZXRzLmRlZmF1bHQgdGhlbgogICAgICAgIG1zZyA9IG1zZyAuLiAiIChkZWZhdWx0IGlzICIgLi4gcHAucHJldHR5KGRlZXRzLmRlZmF1bHQpIC4uICIpIgogICAgZW5kCiAgICBwcC5wcmludChtc2cpCiAgICBpZiBkZWV0cy5kZXNjcmlwdGlvbiB0aGVuIHByaW50KGRlZXRzLmRlc2NyaXB0aW9uKSBlbmQKCmVsc2UKICAgIC0tICJzZXQgZm9vIGJhciIKICAgIGxvY2FsIHNOYW1lID0gdEFyZ3NbMV0KICAgIGxvY2FsIHNWYWx1ZSA9IHRBcmdzWzJdCiAgICBsb2NhbCB2YWx1ZQogICAgaWYgc1ZhbHVlID09ICJ0cnVlIiB0aGVuCiAgICAgICAgdmFsdWUgPSB0cnVlCiAgICBlbHNlaWYgc1ZhbHVlID09ICJmYWxzZSIgdGhlbgogICAgICAgIHZhbHVlID0gZmFsc2UKICAgIGVsc2VpZiBzVmFsdWUgPT0gIm5pbCIgdGhlbgogICAgICAgIHZhbHVlID0gbmlsCiAgICBlbHNlaWYgdG9udW1iZXIoc1ZhbHVlKSB0aGVuCiAgICAgICAgdmFsdWUgPSB0b251bWJlcihzVmFsdWUpCiAgICBlbHNlCiAgICAgICAgdmFsdWUgPSBzVmFsdWUKICAgIGVuZAoKICAgIGxvY2FsIG9wdGlvbiA9IHNldHRpbmdzLmdldERldGFpbHMoc05hbWUpCiAgICBpZiB2YWx1ZSA9PSBuaWwgdGhlbgogICAgICAgIHNldHRpbmdzLnVuc2V0KHNOYW1lKQogICAgICAgIHByaW50KHRleHR1dGlscy5zZXJpYWxpemUoc05hbWUpIC4uICIgdW5zZXQiKQogICAgZWxzZWlmIG9wdGlvbi50eXBlIGFuZCBvcHRpb24udHlwZSB+PSB0eXBlKHZhbHVlKSB0aGVuCiAgICAgICAgcHJpbnRFcnJvcigoIiVzIGlzIG5vdCBhIHZhbGlkICVzLiIpOmZvcm1hdCh0ZXh0dXRpbHMuc2VyaWFsaXplKHNWYWx1ZSksIG9wdGlvbi50eXBlKSkKICAgIGVsc2UKICAgICAgICBzZXR0aW5ncy5zZXQoc05hbWUsIHZhbHVlKQogICAgICAgIHByaW50KHRleHR1dGlscy5zZXJpYWxpemUoc05hbWUpIC4uICIgc2V0IHRvICIgLi4gdGV4dHV0aWxzLnNlcmlhbGl6ZSh2YWx1ZSkpCiAgICBlbmQKCiAgICBpZiB2YWx1ZSB+PSBvcHRpb24udmFsdWUgdGhlbgogICAgICAgIHNldHRpbmdzLnNhdmUoKQogICAgZW5kCmVuZAo=";
   Module["FS_createDataFile"]("/craftos/rom/programs", "set.lua", decodeBase64(fileData44), true, true, false);
   var fileData45 = "aWYgX0NDUENfRklSU1RfUlVOIHRoZW4KICAgIHByaW50KFtbV2VsY29tZSB0byBDcmFmdE9TLVBDISBUaGlzIGlzIHRoZSBDb21wdXRlckNyYWZ0IHNoZWxsIHByb21wdCwgd2hlcmUgeW91IGNhbiBydW4gcHJvZ3JhbXMuCiogVHlwZSAicHJvZ3JhbXMiIHRvIHNlZSB0aGUgcHJvZ3JhbXMgeW91IGNhbiBydW4uCiogVHlwZSAiaGVscCA8cHJvZ3JhbT4iIHRvIHNlZSBoZWxwIGZvciBhIHNwZWNpZmljIHByb2dyYW0uCiogUmVhZCB0aGUgZG9jdW1lbnRhdGlvbiBhdCBodHRwczovL3d3dy5jcmFmdG9zLXBjLmNjL2RvY3MvLgoqIFJlcG9ydCBidWdzIHRvIGh0dHBzOi8vd3d3LmNyYWZ0b3MtcGMuY2MvYnVncmVwb3J0LgpdXSkKZWxzZWlmIF9DQ1BDX1VQREFURURfVkVSU0lPTiB0aGVuCiAgICBwcmludCgiQ3JhZnRPUy1QQyBoYXMgYmVlbiB1cGRhdGVkIHRvICIgLi4gX0hPU1Q6bWF0Y2goIkNyYWZ0T1MlLVBDIFslYV0qID8odlslZCUuXSspIikgLi4gIi4gVG8gc2VlIHRoZSBuZXcgY2hhbmdlcywgdHlwZSBcImhlbHAgd2hhdHNuZXdcIi4iKQplbHNlCiAgICBsb2NhbCBkYXRlID0gb3MuZGF0ZSgiKnQiKQogICAgaWYgZGF0ZS5tb250aCA9PSAxIGFuZCBkYXRlLmRheSA9PSAxIHRoZW4KICAgICAgICBwcmludCgiSGFwcHkgbmV3IHllYXIhIikKICAgIGVsc2VpZiBkYXRlLm1vbnRoID09IDEyIGFuZCBkYXRlLmRheSA9PSAyNCB0aGVuCiAgICAgICAgcHJpbnQoIk1lcnJ5IFgtbWFzISIpCiAgICBlbHNlaWYgZGF0ZS5tb250aCA9PSAxMCBhbmQgZGF0ZS5kYXkgPT0gMzEgdGhlbgogICAgICAgIHByaW50KCJPT29vb09PT29vb28hIFNwb29reSEiKQogICAgZWxzZWlmIGRhdGUubW9udGggPT0gNCBhbmQgZGF0ZS5kYXkgPT0gMjggdGhlbgogICAgICAgIHByaW50KCJFZCBCYWxscyIpCiAgICBlbHNlaWYgZGF0ZS5tb250aCA9PSA5IGFuZCBkYXRlLmRheSA9PSA4IHRoZW4KICAgICAgICBwcmludCgiSGFwcHkgYmlydGhkYXksIENyYWZ0T1MtUEMhIikKICAgIGVsc2UKICAgICAgICBsb2NhbCB0TW90ZCA9IHt9CgogICAgICAgIGZvciBzUGF0aCBpbiBzdHJpbmcuZ21hdGNoKHNldHRpbmdzLmdldCgibW90ZC5wYXRoIiksICJbXjpdKyIpIGRvCiAgICAgICAgICAgIGlmIGZzLmV4aXN0cyhzUGF0aCkgdGhlbgogICAgICAgICAgICAgICAgZm9yIHNMaW5lIGluIGlvLmxpbmVzKHNQYXRoKSBkbwogICAgICAgICAgICAgICAgICAgIHRhYmxlLmluc2VydCh0TW90ZCwgc0xpbmUpCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCgogICAgICAgIGlmICN0TW90ZCA9PSAwIHRoZW4KICAgICAgICAgICAgcHJpbnQoIm1pc3NpbmdubyIpCiAgICAgICAgZWxzZQogICAgICAgICAgICBwcmludCh0TW90ZFttYXRoLnJhbmRvbSgxLCAjdE1vdGQpXSkKICAgICAgICBlbmQKICAgIGVuZAplbmQK";
   Module["FS_createDataFile"]("/craftos/rom/programs", "motd.lua", decodeBase64(fileData45), true, true, false);
   var fileData46 = "bG9jYWwgZnVuY3Rpb24gcHJpbnRVc2FnZSgpCiAgICBsb2NhbCBwcm9ncmFtTmFtZSA9IGFyZ1swXSBvciBmcy5nZXROYW1lKHNoZWxsLmdldFJ1bm5pbmdQcm9ncmFtKCkpCiAgICBwcmludCgiVXNhZ2U6IikKICAgIHByaW50KCIgICIgLi4gcHJvZ3JhbU5hbWUgLi4gIiA8bmFtZT4gPHByb2dyYW0+IDxhcmd1bWVudHM+IikKICAgIHByaW50KCIgICIgLi4gcHJvZ3JhbU5hbWUgLi4gIiBzY2FsZSA8bmFtZT4gPHNjYWxlPiIpCiAgICByZXR1cm4KZW5kCgpsb2NhbCB0QXJncyA9IHsgLi4uIH0KaWYgI3RBcmdzIDwgMiBvciB0QXJnc1sxXSA9PSAic2NhbGUiIGFuZCAjdEFyZ3MgPCAzIHRoZW4KICAgIHByaW50VXNhZ2UoKQogICAgcmV0dXJuCmVuZAoKaWYgdEFyZ3NbMV0gPT0gInNjYWxlIiB0aGVuCiAgICBsb2NhbCBzTmFtZSA9IHRBcmdzWzJdCiAgICBpZiBwZXJpcGhlcmFsLmdldFR5cGUoc05hbWUpIH49ICJtb25pdG9yIiB0aGVuCiAgICAgICAgcHJpbnQoIk5vIG1vbml0b3IgbmFtZWQgIiAuLiBzTmFtZSkKICAgICAgICByZXR1cm4KICAgIGVuZAoKICAgIGxvY2FsIG5SZXMgPSB0b251bWJlcih0QXJnc1szXSkKICAgIGlmIG5SZXMgPT0gbmlsIG9yIG5SZXMgPCAwLjUgb3IgblJlcyA+IDUgdGhlbgogICAgICAgIHByaW50KCJJbnZhbGlkIHNjYWxlOiAiIC4uIHRBcmdzWzNdKQogICAgICAgIHJldHVybgogICAgZW5kCgogICAgcGVyaXBoZXJhbC5jYWxsKHNOYW1lLCAic2V0VGV4dFNjYWxlIiwgblJlcykKICAgIHJldHVybgplbmQKCmxvY2FsIHNOYW1lID0gdEFyZ3NbMV0KaWYgcGVyaXBoZXJhbC5nZXRUeXBlKHNOYW1lKSB+PSAibW9uaXRvciIgdGhlbgogICAgcHJpbnQoIk5vIG1vbml0b3IgbmFtZWQgIiAuLiBzTmFtZSkKICAgIHJldHVybgplbmQKCmxvY2FsIHNQcm9ncmFtID0gdEFyZ3NbMl0KCmxvY2FsIHNQYXRoID0gc2hlbGwucmVzb2x2ZVByb2dyYW0oc1Byb2dyYW0pCmlmIHNQYXRoID09IG5pbCB0aGVuCiAgICBwcmludCgiTm8gc3VjaCBwcm9ncmFtOiAiIC4uIHNQcm9ncmFtKQogICAgcmV0dXJuCmVuZAoKcHJpbnQoIlJ1bm5pbmcgIiAuLiBzUHJvZ3JhbSAuLiAiIG9uIG1vbml0b3IgIiAuLiBzTmFtZSkKCmxvY2FsIG1vbml0b3IgPSBwZXJpcGhlcmFsLndyYXAoc05hbWUpCmxvY2FsIHByZXZpb3VzVGVybSA9IHRlcm0ucmVkaXJlY3QobW9uaXRvcikKCmxvY2FsIGNvID0gY29yb3V0aW5lLmNyZWF0ZShmdW5jdGlvbigpCiAgICAoc2hlbGwuZXhlY3V0ZSBvciBzaGVsbC5ydW4pKHNQcm9ncmFtLCB0YWJsZS51bnBhY2sodEFyZ3MsIDMpKQplbmQpCgpsb2NhbCBmdW5jdGlvbiByZXN1bWUoLi4uKQogICAgbG9jYWwgb2ssIHBhcmFtID0gY29yb3V0aW5lLnJlc3VtZShjbywgLi4uKQogICAgaWYgbm90IG9rIHRoZW4KICAgICAgICBwcmludEVycm9yKHBhcmFtKQogICAgZW5kCiAgICByZXR1cm4gcGFyYW0KZW5kCgpsb2NhbCB0aW1lcnMgPSB7fQoKbG9jYWwgb2ssIHBhcmFtID0gcGNhbGwoZnVuY3Rpb24oKQogICAgbG9jYWwgc0ZpbHRlciA9IHJlc3VtZSgpCiAgICB3aGlsZSBjb3JvdXRpbmUuc3RhdHVzKGNvKSB+PSAiZGVhZCIgZG8KICAgICAgICBsb2NhbCB0RXZlbnQgPSB0YWJsZS5wYWNrKG9zLnB1bGxFdmVudFJhdygpKQogICAgICAgIGlmIHNGaWx0ZXIgPT0gbmlsIG9yIHRFdmVudFsxXSA9PSBzRmlsdGVyIG9yIHRFdmVudFsxXSA9PSAidGVybWluYXRlIiB0aGVuCiAgICAgICAgICAgIHNGaWx0ZXIgPSByZXN1bWUodGFibGUudW5wYWNrKHRFdmVudCwgMSwgdEV2ZW50Lm4pKQogICAgICAgIGVuZAogICAgICAgIGlmIGNvcm91dGluZS5zdGF0dXMoY28pIH49ICJkZWFkIiBhbmQgKHNGaWx0ZXIgPT0gbmlsIG9yIHNGaWx0ZXIgPT0gIm1vdXNlX2NsaWNrIikgdGhlbgogICAgICAgICAgICBpZiB0RXZlbnRbMV0gPT0gIm1vbml0b3JfdG91Y2giIGFuZCB0RXZlbnRbMl0gPT0gc05hbWUgdGhlbgogICAgICAgICAgICAgICAgdGltZXJzW29zLnN0YXJ0VGltZXIoMC4xKV0gPSB7IHRFdmVudFszXSwgdEV2ZW50WzRdIH0KICAgICAgICAgICAgICAgIHNGaWx0ZXIgPSByZXN1bWUoIm1vdXNlX2NsaWNrIiwgMSwgdGFibGUudW5wYWNrKHRFdmVudCwgMywgdEV2ZW50Lm4pKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgICAgICBpZiBjb3JvdXRpbmUuc3RhdHVzKGNvKSB+PSAiZGVhZCIgYW5kIChzRmlsdGVyID09IG5pbCBvciBzRmlsdGVyID09ICJ0ZXJtX3Jlc2l6ZSIpIHRoZW4KICAgICAgICAgICAgaWYgdEV2ZW50WzFdID09ICJtb25pdG9yX3Jlc2l6ZSIgYW5kIHRFdmVudFsyXSA9PSBzTmFtZSB0aGVuCiAgICAgICAgICAgICAgICBzRmlsdGVyID0gcmVzdW1lKCJ0ZXJtX3Jlc2l6ZSIpCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgICAgIGlmIGNvcm91dGluZS5zdGF0dXMoY28pIH49ICJkZWFkIiBhbmQgKHNGaWx0ZXIgPT0gbmlsIG9yIHNGaWx0ZXIgPT0gIm1vdXNlX3VwIikgdGhlbgogICAgICAgICAgICBpZiB0RXZlbnRbMV0gPT0gInRpbWVyIiBhbmQgdGltZXJzW3RFdmVudFsyXV0gdGhlbgogICAgICAgICAgICAgICAgc0ZpbHRlciA9IHJlc3VtZSgibW91c2VfdXAiLCAxLCB0YWJsZS51bnBhY2sodGltZXJzW3RFdmVudFsyXV0sIDEsIDIpKQogICAgICAgICAgICAgICAgdGltZXJzW3RFdmVudFsyXV0gPSBuaWwKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKZW5kKQoKdGVybS5yZWRpcmVjdChwcmV2aW91c1Rlcm0pCmlmIG5vdCBvayB0aGVuCiAgICBwcmludEVycm9yKHBhcmFtKQplbmQK";
   Module["FS_createDataFile"]("/craftos/rom/programs", "monitor.lua", decodeBase64(fileData46), true, true, false);
   var fileData47 = "aWYgdGVybS5pc0NvbG91cigpIHRoZW4KICAgIHRlcm0uc2V0VGV4dENvbG91cihjb2xvdXJzLnllbGxvdykKZW5kCnByaW50KCJHb29kYnllIikKdGVybS5zZXRUZXh0Q29sb3VyKGNvbG91cnMud2hpdGUpCgpzbGVlcCgxKQpvcy5zaHV0ZG93bigpCg==";
   Module["FS_createDataFile"]("/craftos/rom/programs", "shutdown.lua", decodeBase64(fileData47), true, true, false);
   var fileData48 = "bG9jYWwgc0RyaXZlID0gbmlsCmxvY2FsIHRBcmdzID0geyAuLi4gfQppZiAjdEFyZ3MgPiAwIHRoZW4KICAgIHNEcml2ZSA9IHRvc3RyaW5nKHRBcmdzWzFdKQplbmQKCmlmIHNEcml2ZSA9PSBuaWwgdGhlbgogICAgcHJpbnQoIlRoaXMgaXMgY29tcHV0ZXIgIyIgLi4gb3MuZ2V0Q29tcHV0ZXJJRCgpKQoKICAgIGxvY2FsIGxhYmVsID0gb3MuZ2V0Q29tcHV0ZXJMYWJlbCgpCiAgICBpZiBsYWJlbCB0aGVuCiAgICAgICAgcHJpbnQoIlRoaXMgY29tcHV0ZXIgaXMgbGFiZWxsZWQgXCIiIC4uIGxhYmVsIC4uICJcIiIpCiAgICBlbmQKCmVsc2UKICAgIGlmIGRpc2suaGFzQXVkaW8oc0RyaXZlKSB0aGVuCiAgICAgICAgbG9jYWwgdGl0bGUgPSBkaXNrLmdldEF1ZGlvVGl0bGUoc0RyaXZlKQogICAgICAgIGlmIHRpdGxlIHRoZW4KICAgICAgICAgICAgcHJpbnQoIkhhcyBhdWRpbyB0cmFjayBcIiIgLi4gdGl0bGUgLi4gIlwiIikKICAgICAgICBlbHNlCiAgICAgICAgICAgIHByaW50KCJIYXMgdW50aXRsZWQgYXVkaW8iKQogICAgICAgIGVuZAogICAgICAgIHJldHVybgogICAgZW5kCgogICAgaWYgbm90IGRpc2suaGFzRGF0YShzRHJpdmUpIHRoZW4KICAgICAgICBwcmludCgiTm8gZGlzayBpbiBkcml2ZSAiIC4uIHNEcml2ZSkKICAgICAgICByZXR1cm4KICAgIGVuZAoKICAgIGxvY2FsIGlkID0gZGlzay5nZXRJRChzRHJpdmUpCiAgICBpZiBpZCB0aGVuCiAgICAgICAgcHJpbnQoIlRoZSBkaXNrIGlzICMiIC4uIGlkKQogICAgZWxzZQogICAgICAgIHByaW50KCJOb24tZGlzayBkYXRhIHNvdXJjZSIpCiAgICBlbmQKCiAgICBsb2NhbCBsYWJlbCA9IGRpc2suZ2V0TGFiZWwoc0RyaXZlKQogICAgaWYgbGFiZWwgdGhlbgogICAgICAgIHByaW50KCJMYWJlbGxlZCBcIiIgLi4gbGFiZWwgLi4gIlwiIikKICAgIGVuZAplbmQK";
   Module["FS_createDataFile"]("/craftos/rom/programs", "id.lua", decodeBase64(fileData48), true, true, false);
   var fileData49 = "";
   Module["FS_createDataFile"]("/craftos/rom/programs", "help.lua", decodeBase64(fileData49), true, true, false);
   var fileData50 = "aWYgcGVyaXBoZW11ID09IG5pbCB0aGVuIGVycm9yKCJBdHRhY2hpbmcgcGVyaXBoZXJhbHMgaXMgbm90IHN1cHBvcnRlZCBpbiB2YW5pbGxhIG1vZGUuIikgZW5kCmxvY2FsIGFyZ3MgPSB7IC4uLiB9CmlmIGFyZ3NbMV0gPT0gImxpc3QiIHRoZW4KICAgIHByaW50KCJBdmFpbGFibGUgcGVyaXBoZXJhbCB0eXBlczoiKQogICAgZm9yIF8scCBpbiBpcGFpcnMocGVyaXBoZW11Lm5hbWVzKCkpIGRvIHByaW50KHApIGVuZAplbHNlaWYgdHlwZShhcmdzWzFdKSB+PSAic3RyaW5nIiBvciB0eXBlKGFyZ3NbMl0pIH49ICJzdHJpbmciIHRoZW4KICAgIHByaW50KCJVc2FnZTogYXR0YWNoIDxzaWRlPiA8dHlwZT4gW29wdGlvbnMuLi5dXG4gICAgICAgYXR0YWNoIGxpc3QiKQplbHNlIAogICAgaWYgcGVyaXBoZXJhbC5pc1ByZXNlbnQoYXJnc1sxXSkgYW5kIHBlcmlwaGVyYWwuZ2V0VHlwZShhcmdzWzFdKSA9PSBhcmdzWzJdIHRoZW4gCiAgICAgICAgcHJpbnQoIlBlcmlwaGVyYWwgYWxyZWFkeSBhdHRhY2hlZCIpCiAgICAgICAgcmV0dXJuCiAgICBlbmQKICAgIGlmIHRvbnVtYmVyKGFyZ3NbM10pIH49IG5pbCB0aGVuIGFyZ3NbM10gPSB0b251bWJlcihhcmdzWzNdKSBlbmQKICAgIGxvY2FsIG9rLCBlcnIgPSBwZXJpcGhlbXUuY3JlYXRlKGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pCiAgICBpZiBub3Qgb2sgdGhlbiBwcmludEVycm9yKCJDb3VsZCBub3QgYXR0YWNoIHBlcmlwaGVyYWwiIC4uIChlcnIgYW5kICI6ICIgLi4gZXJyIG9yICIiKSkgZW5kCmVuZA==";
   Module["FS_createDataFile"]("/craftos/rom/programs", "attach.lua", decodeBase64(fileData50), true, true, false);
   var fileData51 = "bG9jYWwgdEFyZ3MgPSB7IC4uLiB9CgotLSBHZXQgd2hlcmUgYSBkaXJlY3RvcnkgaXMgbW91bnRlZApsb2NhbCBzUGF0aCA9IHNoZWxsLmRpcigpCmlmIHRBcmdzWzFdIH49IG5pbCB0aGVuCiAgICBzUGF0aCA9IHNoZWxsLnJlc29sdmUodEFyZ3NbMV0pCmVuZAoKaWYgZnMuZXhpc3RzKHNQYXRoKSB0aGVuCiAgICB3cml0ZShmcy5nZXREcml2ZShzUGF0aCkgLi4gIiAoIikKICAgIGxvY2FsIG5TcGFjZSA9IGZzLmdldEZyZWVTcGFjZShzUGF0aCkKICAgIGlmIG5TcGFjZSA+PSAxMDAwICogMTAwMCB0aGVuCiAgICAgICAgcHJpbnQobWF0aC5mbG9vcihuU3BhY2UgLyAoMTAwICogMTAwMCkpIC8gMTAgLi4gIk1CIHJlbWFpbmluZykiKQogICAgZWxzZWlmIG5TcGFjZSA+PSAxMDAwIHRoZW4KICAgICAgICBwcmludChtYXRoLmZsb29yKG5TcGFjZSAvIDEwMCkgLyAxMCAuLiAiS0IgcmVtYWluaW5nKSIpCiAgICBlbHNlCiAgICAgICAgcHJpbnQoblNwYWNlIC4uICJCIHJlbWFpbmluZykiKQogICAgZW5kCmVsc2UKICAgIHByaW50KCJObyBzdWNoIHBhdGgiKQplbmQK";
   Module["FS_createDataFile"]("/craftos/rom/programs", "drive.lua", decodeBase64(fileData51), true, true, false);
   var fileData52 = "aWYgcGVyaXBoZW11ID09IG5pbCB0aGVuIGVycm9yKCJBdHRhY2hpbmcgcGVyaXBoZXJhbHMgaXMgbm90IHN1cHBvcnRlZCBpbiB2YW5pbGxhIG1vZGUuIikgZW5kCmlmIHR5cGUoKHsuLi59KVsxXSkgfj0gInN0cmluZyIgdGhlbiBwcmludCgiVXNhZ2U6IGRldGFjaCA8c2lkZT4iKSBlbHNlIGlmIG5vdCBwZXJpcGhlbXUucmVtb3ZlKCh7Li4ufSlbMV0pIHRoZW4gcHJpbnRFcnJvcigiQ291bGQgbm90IGRldGFjaCBwZXJpcGhlcmFsIikgZW5kIGVuZA==";
   Module["FS_createDataFile"]("/craftos/rom/programs", "detach.lua", decodeBase64(fileData52), true, true, false);
   var fileData53 = "c2hlbGwuZXhpdCgpCg==";
   Module["FS_createDataFile"]("/craftos/rom/programs", "exit.lua", decodeBase64(fileData53), true, true, false);
   var fileData54 = "bG9jYWwgdFBlcmlwaGVyYWxzID0gcGVyaXBoZXJhbC5nZXROYW1lcygpCnByaW50KCJBdHRhY2hlZCBQZXJpcGhlcmFsczoiKQppZiAjdFBlcmlwaGVyYWxzID4gMCB0aGVuCiAgICBmb3IgbiA9IDEsICN0UGVyaXBoZXJhbHMgZG8KICAgICAgICBsb2NhbCBzUGVyaXBoZXJhbCA9IHRQZXJpcGhlcmFsc1tuXQogICAgICAgIHByaW50KHNQZXJpcGhlcmFsIC4uICIgKCIgLi4gdGFibGUuY29uY2F0KHsgcGVyaXBoZXJhbC5nZXRUeXBlKHNQZXJpcGhlcmFsKSB9LCAiLCAiKSAuLiAiKSIpCiAgICBlbmQKZWxzZQogICAgcHJpbnQoIk5vbmUiKQplbmQK";
   Module["FS_createDataFile"]("/craftos/rom/programs", "peripherals.lua", decodeBase64(fileData54), true, true, false);
   var fileData55 = "bG9jYWwgYXJncyA9IHRhYmxlLnBhY2soLi4uKQoKaWYgYXJncy5uIDwgMSB0aGVuCiAgICBsb2NhbCBwcm9ncmFtTmFtZSA9IGFyZ1swXSBvciBmcy5nZXROYW1lKHNoZWxsLmdldFJ1bm5pbmdQcm9ncmFtKCkpCiAgICBwcmludCgiVXNhZ2U6ICIgLi4gcHJvZ3JhbU5hbWUgLi4gIiA8cGF0aHM+IikKICAgIHJldHVybgplbmQKCmZvciBpID0gMSwgYXJncy5uIGRvCiAgICBsb2NhbCBmaWxlcyA9IGZzLmZpbmQoc2hlbGwucmVzb2x2ZShhcmdzW2ldKSkKICAgIGlmICNmaWxlcyA+IDAgdGhlbgogICAgICAgIGZvciBfLCBmaWxlIGluIGlwYWlycyhmaWxlcykgZG8KICAgICAgICAgICAgaWYgZnMuaXNSZWFkT25seShmaWxlKSB0aGVuCiAgICAgICAgICAgICAgICBwcmludEVycm9yKCJDYW5ub3QgZGVsZXRlIHJlYWQtb25seSBmaWxlIC8iIC4uIGZpbGUpCiAgICAgICAgICAgIGVsc2VpZiBmcy5pc0RyaXZlUm9vdChmaWxlKSB0aGVuCiAgICAgICAgICAgICAgICBwcmludEVycm9yKCJDYW5ub3QgZGVsZXRlIG1vdW50IC8iIC4uIGZpbGUpCiAgICAgICAgICAgICAgICBpZiBmcy5pc0RpcihmaWxlKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlRvIGRlbGV0ZSBpdHMgY29udGVudHMgcnVuIHJtIC8iIC4uIGZzLmNvbWJpbmUoZmlsZSwgIioiKSkKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBsb2NhbCBvaywgZXJyID0gcGNhbGwoZnMuZGVsZXRlLCBmaWxlKQogICAgICAgICAgICAgICAgaWYgbm90IG9rIHRoZW4KICAgICAgICAgICAgICAgICAgICBwcmludEVycm9yKChlcnI6Z3N1YigiXnBjYWxsOiAiLCAiIikpKQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZWxzZQogICAgICAgIHByaW50RXJyb3IoYXJnc1tpXSAuLiAiOiBObyBtYXRjaGluZyBmaWxlcyIpCiAgICBlbmQKZW5kCg==";
   Module["FS_createDataFile"]("/craftos/rom/programs", "delete.lua", decodeBase64(fileData55), true, true, false);
   var fileData56 = "";
   Module["FS_createDataFile"]("/craftos/rom/programs", "cash.lua", decodeBase64(fileData56), true, true, false);
   var fileData57 = "";
   Module["FS_createDataFile"]("/craftos/rom/programs", "edit.lua", decodeBase64(fileData57), true, true, false);
   var fileData58 = "bG9jYWwgdEFyZ3MgPSB7IC4uLiB9CmlmICN0QXJncyA8IDEgdGhlbgogICAgbG9jYWwgcHJvZ3JhbU5hbWUgPSBhcmdbMF0gb3IgZnMuZ2V0TmFtZShzaGVsbC5nZXRSdW5uaW5nUHJvZ3JhbSgpKQogICAgcHJpbnQoIlVzYWdlOiAiIC4uIHByb2dyYW1OYW1lIC4uICIgPHBhdGg+IikKICAgIHJldHVybgplbmQKCmxvY2FsIHNOZXdEaXIgPSBzaGVsbC5yZXNvbHZlKHRBcmdzWzFdKQppZiBmcy5pc0RpcihzTmV3RGlyKSB0aGVuCiAgICBzaGVsbC5zZXREaXIoc05ld0RpcikKZWxzZQogICAgcHJpbnQoIk5vdCBhIGRpcmVjdG9yeSIpCiAgICByZXR1cm4KZW5kCg==";
   Module["FS_createDataFile"]("/craftos/rom/programs", "cd.lua", decodeBase64(fileData58), true, true, false);
   var fileData59 = "bG9jYWwgdEFyZ3MgPSB7IC4uLiB9CmlmICN0QXJncyA+IDIgdGhlbgogICAgbG9jYWwgcHJvZ3JhbU5hbWUgPSBhcmdbMF0gb3IgZnMuZ2V0TmFtZShzaGVsbC5nZXRSdW5uaW5nUHJvZ3JhbSgpKQogICAgcHJpbnQoIlVzYWdlOiAiIC4uIHByb2dyYW1OYW1lIC4uICIgPGFsaWFzPiA8cHJvZ3JhbT4iKQogICAgcmV0dXJuCmVuZAoKbG9jYWwgc0FsaWFzID0gdEFyZ3NbMV0KbG9jYWwgc1Byb2dyYW0gPSB0QXJnc1syXQoKaWYgc0FsaWFzIGFuZCBzUHJvZ3JhbSB0aGVuCiAgICAtLSBTZXQgYWxpYXMKICAgIHNoZWxsLnNldEFsaWFzKHNBbGlhcywgc1Byb2dyYW0pCmVsc2VpZiBzQWxpYXMgdGhlbgogICAgLS0gQ2xlYXIgYWxpYXMKICAgIHNoZWxsLmNsZWFyQWxpYXMoc0FsaWFzKQplbHNlCiAgICAtLSBMaXN0IGFsaWFzZXMKICAgIGxvY2FsIHRBbGlhc2VzID0gc2hlbGwuYWxpYXNlcygpCiAgICBsb2NhbCB0TGlzdCA9IHt9CiAgICBmb3Igc0FsaWFzLCBzQ29tbWFuZCBpbiBwYWlycyh0QWxpYXNlcykgZG8KICAgICAgICB0YWJsZS5pbnNlcnQodExpc3QsIHNBbGlhcyAuLiAiOiIgLi4gc0NvbW1hbmQpCiAgICBlbmQKICAgIHRhYmxlLnNvcnQodExpc3QpCiAgICB0ZXh0dXRpbHMucGFnZWRUYWJ1bGF0ZSh0TGlzdCkKZW5kCg==";
   Module["FS_createDataFile"]("/craftos/rom/programs", "alias.lua", decodeBase64(fileData59), true, true, false);
   var fileData60 = "aWYgbW91bnRlciA9PSBuaWwgdGhlbiBlcnJvcigiTW91bnRpbmcgZGlyZWN0b3JpZXMgaXMgbm90IHN1cHBvcnRlZCBpbiB2YW5pbGxhIG1vZGUuIikgZW5kCmxvY2FsIGFyZ3MgPSB7IC4uLiB9CmlmIGFyZ3NbMV0gfj0gbmlsIHRoZW4gaWYgbm90IG1vdW50ZXIudW5tb3VudChhcmdzWzFdKSB0aGVuIHByaW50RXJyb3IoIkNvdWxkIG5vdCB1bm1vdW50IikgZW5kCmVsc2UgcHJpbnQoIlVzYWdlOiB1bm1vdW50IDxuYW1lPiIpIGVuZAo=";
   Module["FS_createDataFile"]("/craftos/rom/programs", "unmount.lua", decodeBase64(fileData60), true, true, false);
   var fileData61 = "bG9jYWwgdEFyZ3MgPSB7IC4uLiB9CgppZiAjdEFyZ3MgPCAxIHRoZW4KICAgIGxvY2FsIHByb2dyYW1OYW1lID0gYXJnWzBdIG9yIGZzLmdldE5hbWUoc2hlbGwuZ2V0UnVubmluZ1Byb2dyYW0oKSkKICAgIHByaW50KCJVc2FnZTogIiAuLiBwcm9ncmFtTmFtZSAuLiAiIDxwYXRocz4iKQogICAgcmV0dXJuCmVuZAoKZm9yIF8sIHYgaW4gaXBhaXJzKHRBcmdzKSBkbwogICAgbG9jYWwgc05ld0RpciA9IHNoZWxsLnJlc29sdmUodikKICAgIGlmIGZzLmV4aXN0cyhzTmV3RGlyKSBhbmQgbm90IGZzLmlzRGlyKHNOZXdEaXIpIHRoZW4KICAgICAgICBwcmludEVycm9yKHYgLi4gIjogRGVzdGluYXRpb24gZXhpc3RzIikKICAgIGVsc2VpZiBmcy5pc1JlYWRPbmx5KHNOZXdEaXIpIHRoZW4KICAgICAgICBwcmludEVycm9yKHYgLi4gIjogQWNjZXNzIGRlbmllZCIpCiAgICBlbHNlCiAgICAgICAgZnMubWFrZURpcihzTmV3RGlyKQogICAgZW5kCmVuZAo=";
   Module["FS_createDataFile"]("/craftos/rom/programs", "mkdir.lua", decodeBase64(fileData61), true, true, false);
   var fileData62 = "LS0gUHJpbnRzIGluZm9ybWF0aW9uIGFib3V0IENyYWZ0T1MKdGVybS5zZXRUZXh0Q29sb3IoY29sb3JzLnllbGxvdykKcHJpbnQob3MudmVyc2lvbigpIC4uICIgb24gIiAuLiBfSE9TVCkKdGVybS5zZXRUZXh0Q29sb3IoY29sb3JzLndoaXRlKQ==";
   Module["FS_createDataFile"]("/craftos/rom/programs", "about.lua", decodeBase64(fileData62), true, true, false);
   var fileData63 = "bG9jYWwgdEFyZ3MgPSB7IC4uLiB9Cgpsb2NhbCBmdW5jdGlvbiBwcmludFVzYWdlKCkKICAgIGxvY2FsIHByb2dyYW1OYW1lID0gYXJnWzBdIG9yIGZzLmdldE5hbWUoc2hlbGwuZ2V0UnVubmluZ1Byb2dyYW0oKSkKICAgIHByaW50KCJVc2FnZXM6IikKICAgIHByaW50KHByb2dyYW1OYW1lIC4uICIgcHJvYmUiKQogICAgcHJpbnQocHJvZ3JhbU5hbWUgLi4gIiBzZXQgPHNpZGU+IDx2YWx1ZT4iKQogICAgcHJpbnQocHJvZ3JhbU5hbWUgLi4gIiBzZXQgPHNpZGU+IDxjb2xvcj4gPHZhbHVlPiIpCiAgICBwcmludChwcm9ncmFtTmFtZSAuLiAiIHB1bHNlIDxzaWRlPiA8Y291bnQ+IDxwZXJpb2Q+IikKZW5kCgpsb2NhbCBzQ29tbWFuZCA9IHRBcmdzWzFdCmlmIHNDb21tYW5kID09ICJwcm9iZSIgdGhlbgogICAgLS0gInJlZHN0b25lIHByb2JlIgogICAgLS0gUmVndWxhciBpbnB1dAogICAgcHJpbnQoIlJlZHN0b25lIGlucHV0czogIikKCiAgICBsb2NhbCBjb3VudCA9IDAKICAgIGxvY2FsIGJ1bmRsZWRDb3VudCA9IDAKICAgIGZvciBfLCBzU2lkZSBpbiBpcGFpcnMocmVkc3RvbmUuZ2V0U2lkZXMoKSkgZG8KICAgICAgICBpZiByZWRzdG9uZS5nZXRCdW5kbGVkSW5wdXQoc1NpZGUpID4gMCB0aGVuCiAgICAgICAgICAgIGJ1bmRsZWRDb3VudCA9IGJ1bmRsZWRDb3VudCArIDEKICAgICAgICBlbmQKICAgICAgICBpZiByZWRzdG9uZS5nZXRJbnB1dChzU2lkZSkgdGhlbgogICAgICAgICAgICBpZiBjb3VudCA+IDAgdGhlbgogICAgICAgICAgICAgICAgaW8ud3JpdGUoIiwgIikKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGlvLndyaXRlKHNTaWRlKQogICAgICAgICAgICBjb3VudCA9IGNvdW50ICsgMQogICAgICAgIGVuZAogICAgZW5kCiAgICBpZiBjb3VudCA+IDAgdGhlbgogICAgICAgIHByaW50KCIuIikKICAgIGVsc2UKICAgICAgICBwcmludCgiTm9uZS4iKQogICAgZW5kCgogICAgLS0gQnVuZGxlZCBpbnB1dAogICAgaWYgYnVuZGxlZENvdW50ID4gMCB0aGVuCiAgICAgICAgcHJpbnQoKQogICAgICAgIHByaW50KCJCdW5kbGVkIGlucHV0czoiKQogICAgICAgIGZvciBfLCBzU2lkZSBpbiBpcGFpcnMocmVkc3RvbmUuZ2V0U2lkZXMoKSkgZG8KICAgICAgICAgICAgbG9jYWwgbklucHV0ID0gcmVkc3RvbmUuZ2V0QnVuZGxlZElucHV0KHNTaWRlKQogICAgICAgICAgICBpZiBuSW5wdXQgfj0gMCB0aGVuCiAgICAgICAgICAgICAgICB3cml0ZShzU2lkZSAuLiAiOiAiKQogICAgICAgICAgICAgICAgbG9jYWwgY291bnQgPSAwCiAgICAgICAgICAgICAgICBmb3Igc0NvbG91ciwgbkNvbG91ciBpbiBwYWlycyhjb2xvcnMpIGRvCiAgICAgICAgICAgICAgICAgICAgaWYgdHlwZShuQ29sb3VyKSA9PSAibnVtYmVyIiBhbmQgY29sb3JzLnRlc3QobklucHV0LCBuQ29sb3VyKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGNvdW50ID4gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0ZSgiLCAiKQogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgaWYgdGVybS5pc0NvbG91cigpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlcm0uc2V0VGV4dENvbG91cihuQ29sb3VyKQogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGUoc0NvbG91cikKICAgICAgICAgICAgICAgICAgICAgICAgaWYgdGVybS5pc0NvbG91cigpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlcm0uc2V0VGV4dENvbG91cihjb2xvdXJzLndoaXRlKQogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgY291bnQgPSBjb3VudCArIDEKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgcHJpbnQoIi4iKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAoKZWxzZWlmIHNDb21tYW5kID09ICJwdWxzZSIgdGhlbgogICAgLS0gInJlZHN0b25lIHB1bHNlIgogICAgbG9jYWwgc1NpZGUgPSB0QXJnc1syXQogICAgbG9jYWwgbkNvdW50ID0gdG9udW1iZXIodEFyZ3NbM10pIG9yIDEKICAgIGxvY2FsIG5QZXJpb2QgPSB0b251bWJlcih0QXJnc1s0XSkgb3IgMC41CiAgICBmb3IgXyA9IDEsIG5Db3VudCBkbwogICAgICAgIHJlZHN0b25lLnNldE91dHB1dChzU2lkZSwgdHJ1ZSkKICAgICAgICBzbGVlcChuUGVyaW9kIC8gMikKICAgICAgICByZWRzdG9uZS5zZXRPdXRwdXQoc1NpZGUsIGZhbHNlKQogICAgICAgIHNsZWVwKG5QZXJpb2QgLyAyKQogICAgZW5kCgplbHNlaWYgc0NvbW1hbmQgPT0gInNldCIgdGhlbgogICAgLS0gInJlZHN0b25lIHNldCIKICAgIGxvY2FsIHNTaWRlID0gdEFyZ3NbMl0KICAgIGlmICN0QXJncyA+IDMgdGhlbgogICAgICAgIC0tIEJ1bmRsZWQgY2FibGUgb3V0cHV0CiAgICAgICAgbG9jYWwgc0NvbG91ciA9IHRBcmdzWzNdCiAgICAgICAgbG9jYWwgbkNvbG91ciA9IGNvbG9yc1tzQ29sb3VyXSBvciBjb2xvdXJzW3NDb2xvdXJdCiAgICAgICAgaWYgdHlwZShuQ29sb3VyKSB+PSAibnVtYmVyIiB0aGVuCiAgICAgICAgICAgIHByaW50RXJyb3IoIk5vIHN1Y2ggY29sb3IiKQogICAgICAgICAgICByZXR1cm4KICAgICAgICBlbmQKCiAgICAgICAgbG9jYWwgc1ZhbHVlID0gdEFyZ3NbNF0KICAgICAgICBpZiBzVmFsdWUgPT0gInRydWUiIHRoZW4KICAgICAgICAgICAgcnMuc2V0QnVuZGxlZE91dHB1dChzU2lkZSwgY29sb3JzLmNvbWJpbmUocnMuZ2V0QnVuZGxlZE91dHB1dChzU2lkZSksIG5Db2xvdXIpKQogICAgICAgIGVsc2VpZiBzVmFsdWUgPT0gImZhbHNlIiB0aGVuCiAgICAgICAgICAgIHJzLnNldEJ1bmRsZWRPdXRwdXQoc1NpZGUsIGNvbG9ycy5zdWJ0cmFjdChycy5nZXRCdW5kbGVkT3V0cHV0KHNTaWRlKSwgbkNvbG91cikpCiAgICAgICAgZWxzZQogICAgICAgICAgICBwcmludCgiVmFsdWUgbXVzdCBiZSBib29sZWFuIikKICAgICAgICBlbmQKICAgIGVsc2UKICAgICAgICAtLSBSZWd1bGFyIG91dHB1dAogICAgICAgIGxvY2FsIHNWYWx1ZSA9IHRBcmdzWzNdCiAgICAgICAgbG9jYWwgblZhbHVlID0gdG9udW1iZXIoc1ZhbHVlKQogICAgICAgIGlmIHNWYWx1ZSA9PSAidHJ1ZSIgdGhlbgogICAgICAgICAgICBycy5zZXRPdXRwdXQoc1NpZGUsIHRydWUpCiAgICAgICAgZWxzZWlmIHNWYWx1ZSA9PSAiZmFsc2UiIHRoZW4KICAgICAgICAgICAgcnMuc2V0T3V0cHV0KHNTaWRlLCBmYWxzZSkKICAgICAgICBlbHNlaWYgblZhbHVlIGFuZCBuVmFsdWUgPj0gMCBhbmQgblZhbHVlIDw9IDE1IHRoZW4KICAgICAgICAgICAgcnMuc2V0QW5hbG9nT3V0cHV0KHNTaWRlLCBuVmFsdWUpCiAgICAgICAgZWxzZQogICAgICAgICAgICBwcmludCgiVmFsdWUgbXVzdCBiZSBib29sZWFuIG9yIDAtMTUiKQogICAgICAgIGVuZAogICAgZW5kCgplbHNlCiAgICAtLSBTb21ldGhpbmcgZWxzZQogICAgcHJpbnRVc2FnZSgpCgplbmQK";
   Module["FS_createDataFile"]("/craftos/rom/programs", "redstone.lua", decodeBase64(fileData63), true, true, false);
   var fileData64 = "bG9jYWwgdEFyZ3MgPSB7IC4uLiB9CmlmICN0QXJncyA8IDIgdGhlbgogICAgbG9jYWwgcHJvZ3JhbU5hbWUgPSBhcmdbMF0gb3IgZnMuZ2V0TmFtZShzaGVsbC5nZXRSdW5uaW5nUHJvZ3JhbSgpKQogICAgcHJpbnQoIlVzYWdlOiAiIC4uIHByb2dyYW1OYW1lIC4uICIgPHNvdXJjZT4gPGRlc3RpbmF0aW9uPiIpCiAgICByZXR1cm4KZW5kCgpsb2NhbCBzU291cmNlID0gc2hlbGwucmVzb2x2ZSh0QXJnc1sxXSkKbG9jYWwgc0Rlc3QgPSBzaGVsbC5yZXNvbHZlKHRBcmdzWzJdKQpsb2NhbCB0RmlsZXMgPSBmcy5maW5kKHNTb3VyY2UpCmlmICN0RmlsZXMgPiAwIHRoZW4KICAgIGZvciBfLCBzRmlsZSBpbiBpcGFpcnModEZpbGVzKSBkbwogICAgICAgIGlmIGZzLmlzRGlyKHNEZXN0KSB0aGVuCiAgICAgICAgICAgIGZzLmNvcHkoc0ZpbGUsIGZzLmNvbWJpbmUoc0Rlc3QsIGZzLmdldE5hbWUoc0ZpbGUpKSkKICAgICAgICBlbHNlaWYgI3RGaWxlcyA9PSAxIHRoZW4KICAgICAgICAgICAgaWYgZnMuZXhpc3RzKHNEZXN0KSB0aGVuCiAgICAgICAgICAgICAgICAgcHJpbnRFcnJvcigiRGVzdGluYXRpb24gZXhpc3RzIikKICAgICAgICAgICAgZWxzZWlmIGZzLmlzUmVhZE9ubHkoc0Rlc3QpIHRoZW4KICAgICAgICAgICAgICAgIHByaW50RXJyb3IoIkRlc3RpbmF0aW9uIGlzIHJlYWQtb25seSIpCiAgICAgICAgICAgIGVsc2VpZiBmcy5nZXRGcmVlU3BhY2Uoc0Rlc3QpIDwgZnMuZ2V0U2l6ZShzRmlsZSkgdGhlbgogICAgICAgICAgICAgICAgcHJpbnRFcnJvcigiTm90IGVub3VnaCBzcGFjZSIpCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICBmcy5jb3B5KHNGaWxlLCBzRGVzdCkKICAgICAgICAgICAgZW5kCiAgICAgICAgZWxzZQogICAgICAgICAgICBwcmludEVycm9yKCJDYW5ub3Qgb3ZlcndyaXRlIGZpbGUgbXVsdGlwbGUgdGltZXMiKQogICAgICAgICAgICByZXR1cm4KICAgICAgICBlbmQKICAgIGVuZAplbHNlCiAgICBwcmludEVycm9yKCJObyBtYXRjaGluZyBmaWxlcyIpCmVuZAo=";
   Module["FS_createDataFile"]("/craftos/rom/programs", "copy.lua", decodeBase64(fileData64), true, true, false);
   var fileData65 = "aWYgbm90IHBvY2tldCB0aGVuCiAgICBwcmludEVycm9yKCJSZXF1aXJlcyBhIFBvY2tldCBDb21wdXRlciIpCiAgICByZXR1cm4KZW5kCgpsb2NhbCBvaywgZXJyID0gcG9ja2V0LmVxdWlwQmFjaygpCmlmIG5vdCBvayB0aGVuCiAgICBwcmludEVycm9yKGVycikKZWxzZQogICAgcHJpbnQoIkl0ZW0gZXF1aXBwZWQiKQplbmQK";
   Module["FS_createDataFile"]("/craftos/rom/programs/pocket", "equip.lua", decodeBase64(fileData65), true, true, false);
   var fileData66 = "LS1bWwpGYWxsaW5nIC0gQmFzZWQgb24gVGV0cmlzIGJ5IEFsZXhleSBQYWppdG5vdgpUaGlzIHZlcnNpb24gd3JpdHRlbiBieSBHb3BoZXIsIGF0IHRoZSByZXF1ZXN0IG9mIERhbjIwMCwgZm9yCkNvbXB1dGVyQ3JhZnQgdjEuNi4gTm8gcGFydGljdWxhciByaWdodHMgYXJlIHJlc2VydmVkLgotLV1dCgpsb2NhbCBmdW5jdGlvbiBjb2xvcmFzcyhjLCBidykKICByZXR1cm4gdGVybS5pc0NvbG9yKCkgYW5kIGMgb3IgYncKZW5kCgpsb2NhbCBibG9ja19zMSA9IHsKICAgIHsKICAgICAgeyAxLCAwLCAwLCAwIH0sCiAgICAgIHsgMSwgMSwgMCwgMCB9LAogICAgICB7IDAsIDEsIDAsIDAgfSwKICAgICAgeyAwLCAwLCAwLCAwIH0sCiAgICB9LAogICAgewogICAgICB7IDAsIDAsIDAsIDAgfSwKICAgICAgeyAwLCAxLCAxLCAwIH0sCiAgICAgIHsgMSwgMSwgMCwgMCB9LAogICAgICB7IDAsIDAsIDAsIDAgfSwKICAgIH0sCiAgICBjaCA9IGNvbG9yYXNzKCIgICIsICJ7fSIpLAogICAgZmcgPSBjb2xvcmFzcyhjb2xvcnMuYmx1ZSwgY29sb3JzLmJsYWNrKSwKICAgIGJnID0gY29sb3Jhc3MoY29sb3JzLmN5YW4sIGNvbG9ycy53aGl0ZSksCiAgfQpsb2NhbCBibG9ja19zMiA9IHsKICAgIHsKICAgICAgeyAwLCAxLCAwLCAwIH0sCiAgICAgIHsgMSwgMSwgMCwgMCB9LAogICAgICB7IDEsIDAsIDAsIDAgfSwKICAgICAgeyAwLCAwLCAwLCAwIH0sCiAgICB9LAogICAgewogICAgICB7IDAsIDAsIDAsIDAgfSwKICAgICAgeyAxLCAxLCAwLCAwIH0sCiAgICAgIHsgMCwgMSwgMSwgMCB9LAogICAgICB7IDAsIDAsIDAsIDAgfSwKICAgIH0sCiAgICBjaCA9IGNvbG9yYXNzKCIgICIsICJ7fSIpLAogICAgZmcgPSBjb2xvcmFzcyhjb2xvcnMuZ3JlZW4sIGNvbG9ycy5ibGFjayksCiAgICBiZyA9IGNvbG9yYXNzKGNvbG9ycy5saW1lLCBjb2xvcnMud2hpdGUpLAogIH0KbG9jYWwgYmxvY2tfbGluZSA9IHsKICAgIHsKICAgICAgeyAwLCAxLCAwLCAwIH0sCiAgICAgIHsgMCwgMSwgMCwgMCB9LAogICAgICB7IDAsIDEsIDAsIDAgfSwKICAgICAgeyAwLCAxLCAwLCAwIH0sCiAgICB9LAogICAgewogICAgICB7IDAsIDAsIDAsIDAgfSwKICAgICAgeyAxLCAxLCAxLCAxIH0sCiAgICAgIHsgMCwgMCwgMCwgMCB9LAogICAgICB7IDAsIDAsIDAsIDAgfSwKICAgIH0sCiAgICBjaCA9IGNvbG9yYXNzKCIgICIsICJbXSIpLAogICAgZmcgPSBjb2xvcmFzcyhjb2xvcnMucGluaywgY29sb3JzLmJsYWNrKSwKICAgIGJnID0gY29sb3Jhc3MoY29sb3JzLnJlZCwgY29sb3JzLndoaXRlKSwKICB9CmxvY2FsIGJsb2NrX3NxdWFyZSA9IHsKICAgIHsKICAgICAgeyAxLCAxLCAwLCAwIH0sCiAgICAgIHsgMSwgMSwgMCwgMCB9LAogICAgICB7IDAsIDAsIDAsIDAgfSwKICAgICAgeyAwLCAwLCAwLCAwIH0sCiAgICB9LAogICAgY2ggPSBjb2xvcmFzcygiICAiLCAiW10iKSwKICAgIGZnID0gY29sb3Jhc3MoY29sb3JzLmxpZ2h0Qmx1ZSwgY29sb3JzLmJsYWNrKSwKICAgIGJnID0gY29sb3Jhc3MoY29sb3JzLmJsdWUsIGNvbG9ycy53aGl0ZSksCiAgfQpsb2NhbCBibG9ja19MMSA9IHsKICAgIHsKICAgICAgeyAxLCAxLCAwLCAwIH0sCiAgICAgIHsgMCwgMSwgMCwgMCB9LAogICAgICB7IDAsIDEsIDAsIDAgfSwKICAgICAgeyAwLCAwLCAwLCAwIH0sCiAgICB9LAogICAgewogICAgICB7IDAsIDAsIDAsIDAgfSwKICAgICAgeyAxLCAxLCAxLCAwIH0sCiAgICAgIHsgMSwgMCwgMCwgMCB9LAogICAgICB7IDAsIDAsIDAsIDAgfSwKICAgIH0sCiAgICB7CiAgICAgIHsgMCwgMSwgMCwgMCB9LAogICAgICB7IDAsIDEsIDAsIDAgfSwKICAgICAgeyAwLCAxLCAxLCAwIH0sCiAgICAgIHsgMCwgMCwgMCwgMCB9LAogICAgfSwKICAgIHsKICAgICAgeyAwLCAwLCAxLCAwIH0sCiAgICAgIHsgMSwgMSwgMSwgMCB9LAogICAgICB7IDAsIDAsIDAsIDAgfSwKICAgICAgeyAwLCAwLCAwLCAwIH0sCiAgICB9LAogICAgY2ggPSBjb2xvcmFzcygiICAiLCAiKCkiKSwKICAgIGZnID0gY29sb3Jhc3MoY29sb3JzLm9yYW5nZSwgY29sb3JzLmJsYWNrKSwKICAgIGJnID0gY29sb3Jhc3MoY29sb3JzLnllbGxvdywgY29sb3JzLndoaXRlKSwKICB9CmxvY2FsIGJsb2NrX0wyID0gewogICAgewogICAgICB7IDAsIDEsIDAsIDAgfSwKICAgICAgeyAwLCAxLCAwLCAwIH0sCiAgICAgIHsgMSwgMSwgMCwgMCB9LAogICAgICB7IDAsIDAsIDAsIDAgfSwKICAgIH0sCiAgICB7CiAgICAgIHsgMCwgMCwgMCwgMCB9LAogICAgICB7IDEsIDEsIDEsIDAgfSwKICAgICAgeyAwLCAwLCAxLCAwIH0sCiAgICAgIHsgMCwgMCwgMCwgMCB9LAogICAgfSwKICAgIHsKICAgICAgeyAwLCAxLCAxLCAwIH0sCiAgICAgIHsgMCwgMSwgMCwgMCB9LAogICAgICB7IDAsIDEsIDAsIDAgfSwKICAgICAgeyAwLCAwLCAwLCAwIH0sCiAgICB9LAogICAgewogICAgICB7IDEsIDAsIDAsIDAgfSwKICAgICAgeyAxLCAxLCAxLCAwIH0sCiAgICAgIHsgMCwgMCwgMCwgMCB9LAogICAgICB7IDAsIDAsIDAsIDAgfSwKICAgIH0sCiAgICBjaCA9IGNvbG9yYXNzKCIgICIsICIoKSIpLAogICAgZmcgPSBjb2xvcmFzcyhjb2xvcnMuYnJvd24sIGNvbG9ycy5ibGFjayksCiAgICBiZyA9IGNvbG9yYXNzKGNvbG9ycy5vcmFuZ2UsIGNvbG9ycy53aGl0ZSksCiAgfQpsb2NhbCBibG9ja19UID0gewogICAgewogICAgICB7IDAsIDEsIDAsIDAgfSwKICAgICAgeyAxLCAxLCAwLCAwIH0sCiAgICAgIHsgMCwgMSwgMCwgMCB9LAogICAgICB7IDAsIDAsIDAsIDAgfSwKICAgIH0sCiAgICB7CiAgICAgIHsgMCwgMCwgMCwgMCB9LAogICAgICB7IDEsIDEsIDEsIDAgfSwKICAgICAgeyAwLCAxLCAwLCAwIH0sCiAgICAgIHsgMCwgMCwgMCwgMCB9LAogICAgfSwKICAgIHsKICAgICAgeyAwLCAxLCAwLCAwIH0sCiAgICAgIHsgMCwgMSwgMSwgMCB9LAogICAgICB7IDAsIDEsIDAsIDAgfSwKICAgICAgeyAwLCAwLCAwLCAwIH0sCiAgICB9LAogICAgewogICAgICB7IDAsIDEsIDAsIDAgfSwKICAgICAgeyAxLCAxLCAxLCAwIH0sCiAgICAgIHsgMCwgMCwgMCwgMCB9LAogICAgICB7IDAsIDAsIDAsIDAgfSwKICAgIH0sCiAgICBjaCA9IGNvbG9yYXNzKCIgICIsICI8PiIpLAogICAgZmcgPSBjb2xvcmFzcyhjb2xvcnMuY3lhbiwgY29sb3JzLmJsYWNrKSwKICAgIGJnID0gY29sb3Jhc3MoY29sb3JzLnB1cnBsZSwgY29sb3JzLndoaXRlKSwKICB9Cgpsb2NhbCBibG9ja3MgPSB7IGJsb2NrX2xpbmUsIGJsb2NrX3NxdWFyZSwgYmxvY2tfczEsIGJsb2NrX3MyLCBibG9ja19MMSwgYmxvY2tfTDIsIGJsb2NrX1QgfQoKbG9jYWwgcG9pbnRzID0geyA0LCAxMCwgMzAsIDEyMCB9Cgpsb2NhbCBmdW5jdGlvbiBscGFkKHRleHQsIGFtdCkKICB0ZXh0ID0gdG9zdHJpbmcodGV4dCkKICByZXR1cm4gc3RyaW5nLnJlcCgiICIsIGFtdCAtICN0ZXh0KSAuLiB0ZXh0CmVuZAoKbG9jYWwgd2lkdGgsIGhlaWdodCA9IHRlcm0uZ2V0U2l6ZSgpCgppZiBoZWlnaHQgPCAxOSBvciB3aWR0aCA8IDI2IHRoZW4KICBwcmludCgiWW91ciBzY3JlZW4gaXMgdG9vIHNtYWxsIHRvIHBsYXkgOigiKQogIHJldHVybgplbmQKCgpsb2NhbCBzcGVlZHNCeUxldmVsID0gewogIDEuMiwKICAxLjAsCiAgIC44LAogICAuNjUsCiAgIC41LAogICAuNCwKICAgLjMsCiAgIC4yNSwKICAgLjIsCiAgIC4xNSwKICAgLjEsCiAgIC4wNSwgfQoKbG9jYWwgbGV2ZWwgPSAxCgpsb2NhbCBmdW5jdGlvbiBwbGF5R2FtZSgpCiAgbG9jYWwgc2NvcmUgPSAwCiAgbG9jYWwgbGluZXMgPSAwCiAgbG9jYWwgaW5pdGlhbExldmVsID0gbGV2ZWwKICBsb2NhbCBuZXh0ID0gYmxvY2tzW21hdGgucmFuZG9tKDEsICNibG9ja3MpXQoKICBsb2NhbCBwaXQgPSB7fQoKCiAgbG9jYWwgaGVpZ2h0QWRqdXN0ID0gMAoKICBpZiBoZWlnaHQgPD0gMTkgdGhlbgogICAgaGVpZ2h0QWRqdXN0ID0gMQogIGVuZAoKCgogIGxvY2FsIGZ1bmN0aW9uIGRyYXdTY3JlZW4oKQogICAgdGVybS5zZXRUZXh0Q29sb3IoY29sb3JzLndoaXRlKQogICAgdGVybS5zZXRCYWNrZ3JvdW5kQ29sb3IoY29sb3JzLmJsYWNrKQogICAgdGVybS5jbGVhcigpCgogICAgdGVybS5zZXRUZXh0Q29sb3IoY29sb3JzLmJsYWNrKQogICAgdGVybS5zZXRCYWNrZ3JvdW5kQ29sb3IoY29sb3Jhc3MoY29sb3JzLmxpZ2h0R3JheSwgY29sb3JzLndoaXRlKSkKICAgIHRlcm0uc2V0Q3Vyc29yUG9zKDIyLCAyKQogICAgdGVybS53cml0ZSgiU2NvcmUiKSAtLXNjb3JlCiAgICB0ZXJtLnNldEN1cnNvclBvcygyMiwgNSkKICAgIHRlcm0ud3JpdGUoIkxldmVsIikgIC0tbGV2ZWwKICAgIHRlcm0uc2V0Q3Vyc29yUG9zKDIyLCA4KQogICAgdGVybS53cml0ZSgiTGluZXMiKSAgLS1saW5lcwogICAgdGVybS5zZXRDdXJzb3JQb3MoMjIsIDEyKQogICAgdGVybS53cml0ZSgiTmV4dCIpIC0tbmV4dAoKICAgIHRlcm0uc2V0Q3Vyc29yUG9zKDIxLCAxKQogICAgdGVybS53cml0ZSgiICAgICAgIikKICAgIHRlcm0uc2V0Q3Vyc29yUG9zKDIxLCAyKQogICAgdGVybS53cml0ZSgiICIpIC0tc2NvcmUKICAgIHRlcm0uc2V0Q3Vyc29yUG9zKDIxLCAzKQogICAgdGVybS53cml0ZSgiICIpCiAgICB0ZXJtLnNldEN1cnNvclBvcygyMSwgNCkKICAgIHRlcm0ud3JpdGUoIiAgICAgICIpCiAgICB0ZXJtLnNldEN1cnNvclBvcygyMSwgNSkKICAgIHRlcm0ud3JpdGUoIiAiKSAgLS1sZXZlbAogICAgdGVybS5zZXRDdXJzb3JQb3MoMjEsIDYpCiAgICB0ZXJtLndyaXRlKCIgIikKICAgIHRlcm0uc2V0Q3Vyc29yUG9zKDIxLCA3KQogICAgdGVybS53cml0ZSgiICAgICAgIikKICAgIHRlcm0uc2V0Q3Vyc29yUG9zKDIxLCA4KQogICAgdGVybS53cml0ZSgiICIpICAtLWxpbmVzCiAgICB0ZXJtLnNldEN1cnNvclBvcygyMSwgOSkKICAgIHRlcm0ud3JpdGUoIiAiKQogICAgdGVybS5zZXRDdXJzb3JQb3MoMjEsIDEwKQogICAgdGVybS53cml0ZSgiICAgICAgIikKICAgIHRlcm0uc2V0Q3Vyc29yUG9zKDIxLCAxMSkKICAgIHRlcm0ud3JpdGUoIiAgICAgICIpCiAgICB0ZXJtLnNldEN1cnNvclBvcygyMSwgMTIpCiAgICB0ZXJtLndyaXRlKCIgIikgLS1uZXh0CiAgICB0ZXJtLnNldEN1cnNvclBvcygyNiwgMTIpCiAgICB0ZXJtLndyaXRlKCIgIikgLS1uZXh0CiAgICB0ZXJtLnNldEN1cnNvclBvcygyMSwgMTMpCiAgICB0ZXJtLndyaXRlKCIgICAgICAiKQogICAgdGVybS5zZXRDdXJzb3JQb3MoMjEsIDE0KQogICAgdGVybS53cml0ZSgiICIpCiAgICB0ZXJtLnNldEN1cnNvclBvcygyMSwgMTUpCiAgICB0ZXJtLndyaXRlKCIgIikKICAgIHRlcm0uc2V0Q3Vyc29yUG9zKDIxLCAxNikKICAgIHRlcm0ud3JpdGUoIiAiKQogICAgdGVybS5zZXRDdXJzb3JQb3MoMjEsIDE3KQogICAgdGVybS53cml0ZSgiICIpCiAgICB0ZXJtLnNldEN1cnNvclBvcygyMSwgMTgpCiAgICB0ZXJtLndyaXRlKCIgIikKICAgIHRlcm0uc2V0Q3Vyc29yUG9zKDIxLCAxOSkKICAgIHRlcm0ud3JpdGUoIiAgICAgICIpCiAgICB0ZXJtLnNldEN1cnNvclBvcygyMSwgMjApCiAgICB0ZXJtLndyaXRlKCIgICAgICAiKQogIGVuZAoKICBsb2NhbCBmdW5jdGlvbiB1cGRhdGVOdW1iZXJzKCkKICAgIHRlcm0uc2V0VGV4dENvbG9yKGNvbG9ycy53aGl0ZSkKICAgIHRlcm0uc2V0QmFja2dyb3VuZENvbG9yKGNvbG9ycy5ibGFjaykKCiAgICB0ZXJtLnNldEN1cnNvclBvcygyMiwgMykKICAgIHRlcm0ud3JpdGUobHBhZChzY29yZSwgNSkpIC0tc2NvcmUKICAgIHRlcm0uc2V0Q3Vyc29yUG9zKDIyLCA2KQogICAgdGVybS53cml0ZShscGFkKGxldmVsLCA1KSkgIC0tbGV2ZWwKICAgIHRlcm0uc2V0Q3Vyc29yUG9zKDIyLCA5KQogICAgdGVybS53cml0ZShscGFkKGxpbmVzLCA1KSkgIC0tbGluZXMKICBlbmQKCiAgbG9jYWwgZnVuY3Rpb24gZHJhd0Jsb2NrQXQoYmxvY2ssIHhwLCB5cCwgcm90KQogICAgdGVybS5zZXRUZXh0Q29sb3IoYmxvY2suZmcpCiAgICB0ZXJtLnNldEJhY2tncm91bmRDb2xvcihibG9jay5iZykKICAgIGZvciB5ID0gMSwgNCBkbwogICAgICBmb3IgeCA9IDEsIDQgZG8KICAgICAgICBpZiBibG9ja1tyb3RdW3ldW3hdID09IDEgdGhlbgogICAgICAgICAgdGVybS5zZXRDdXJzb3JQb3MoKHhwICsgeCkgKiAyIC0gMywgeXAgKyB5IC0gMSAtIGhlaWdodEFkanVzdCkKICAgICAgICAgIHRlcm0ud3JpdGUoYmxvY2suY2gpCiAgICAgICAgZW5kCiAgICAgIGVuZAogICAgZW5kCiAgZW5kCgogIGxvY2FsIGZ1bmN0aW9uIGVyYXNlQmxvY2tBdChibG9jaywgeHAsIHlwLCByb3QpCiAgICB0ZXJtLnNldFRleHRDb2xvcihjb2xvcnMud2hpdGUpCiAgICB0ZXJtLnNldEJhY2tncm91bmRDb2xvcihjb2xvcnMuYmxhY2spCiAgICBmb3IgeSA9IDEsIDQgZG8KICAgICAgZm9yIHggPSAxLCA0IGRvCiAgICAgICAgaWYgYmxvY2tbcm90XVt5XVt4XSA9PSAxIHRoZW4KICAgICAgICAgIHRlcm0uc2V0Q3Vyc29yUG9zKCh4cCArIHgpICogMiAtIDMsIHlwICsgeSAtIDEgLSBoZWlnaHRBZGp1c3QpCiAgICAgICAgICB0ZXJtLndyaXRlKCIgICIpCiAgICAgICAgZW5kCiAgICAgIGVuZAogICAgZW5kCiAgZW5kCgogIGxvY2FsIGZ1bmN0aW9uIHRlc3RCbG9ja0F0KGJsb2NrLCB4cCwgeXAsIHJvdCkKICAgIGZvciB5ID0gMSwgNCBkbwogICAgICBsb2NhbCB0eSA9IHlwICsgeSAtIDEKICAgICAgZm9yIHggPSAxLCA0IGRvCiAgICAgICAgbG9jYWwgdHggPSB4cCArIHggLSAxCiAgICAgICAgaWYgYmxvY2tbcm90XVt5XVt4XSA9PSAxIHRoZW4KICAgICAgICAgIGlmIHR4ID4gMTAgb3IgdHggPCAxIG9yIHR5ID4gMjAgb3IgcGl0W3R5XVt0eF0gfj0gMCB0aGVuCiAgICAgICAgICAgIHJldHVybiB0cnVlCiAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgICAgZW5kCiAgICBlbmQKICBlbmQKCiAgbG9jYWwgZnVuY3Rpb24gcGl0QmxvY2soYmxvY2ssIHhwLCB5cCwgcm90KQogICAgZm9yIHkgPSAxLCA0IGRvCiAgICAgIGZvciB4ID0gMSwgNCBkbwogICAgICAgIGlmIGJsb2NrW3JvdF1beV1beF0gPT0gMSB0aGVuCiAgICAgICAgICBwaXRbeXAgKyB5IC0gMV1beHAgKyB4IC0gMV0gPSBibG9jawogICAgICAgIGVuZAogICAgICBlbmQKICAgIGVuZAogIGVuZAoKCiAgbG9jYWwgZnVuY3Rpb24gY2xlYXJQaXQoKQogICAgZm9yIHJvdyA9IDEsIDIwIGRvCiAgICAgIHBpdFtyb3ddID0ge30KICAgICAgZm9yIGNvbCA9IDEsIDEwIGRvCiAgICAgICAgcGl0W3Jvd11bY29sXSA9IDAKICAgICAgZW5kCiAgICBlbmQKICBlbmQKCgoKICBkcmF3U2NyZWVuKCkKICB1cGRhdGVOdW1iZXJzKCkKCiAgLS1kZWNsYXJlICYgaW5pdCB0aGUgcGl0CiAgY2xlYXJQaXQoKQoKCgogIGxvY2FsIGhhbHQgPSBmYWxzZQogIGxvY2FsIGRyb3BTcGVlZCA9IHNwZWVkc0J5TGV2ZWxbbWF0aC5taW4obGV2ZWwsIDEyKV0KCgogIGxvY2FsIGN1ckJsb2NrID0gbmV4dAogIG5leHQgPSBibG9ja3NbbWF0aC5yYW5kb20oMSwgNyldCgogIGxvY2FsIGN1clgsIGN1clksIGN1clJvdCA9IDQsIDEsIDEKICBsb2NhbCBkcm9wVGltZXIgPSBvcy5zdGFydFRpbWVyKGRyb3BTcGVlZCkKCiAgZHJhd0Jsb2NrQXQobmV4dCwgMTEuNSwgMTUgKyBoZWlnaHRBZGp1c3QsIDEpCiAgZHJhd0Jsb2NrQXQoY3VyQmxvY2ssIGN1clgsIGN1clksIGN1clJvdCkKCiAgbG9jYWwgZnVuY3Rpb24gcmVkcmF3UGl0KCkKICAgIGZvciByID0gMSArIGhlaWdodEFkanVzdCwgMjAgZG8KICAgICAgdGVybS5zZXRDdXJzb3JQb3MoMSwgciAtIGhlaWdodEFkanVzdCkKICAgICAgZm9yIGMgPSAxLCAxMCBkbwogICAgICAgIGlmIHBpdFtyXVtjXSA9PSAwIHRoZW4KICAgICAgICAgIHRlcm0uc2V0VGV4dENvbG9yKGNvbG9ycy5ibGFjaykKICAgICAgICAgIHRlcm0uc2V0QmFja2dyb3VuZENvbG9yKGNvbG9ycy5ibGFjaykKICAgICAgICAgIHRlcm0ud3JpdGUoIiAgIikKICAgICAgICBlbHNlCiAgICAgICAgICB0ZXJtLnNldFRleHRDb2xvcihwaXRbcl1bY10uZmcpCiAgICAgICAgICB0ZXJtLnNldEJhY2tncm91bmRDb2xvcihwaXRbcl1bY10uYmcpCiAgICAgICAgICB0ZXJtLndyaXRlKHBpdFtyXVtjXS5jaCkKICAgICAgICBlbmQKICAgICAgZW5kCiAgICBlbmQKICBlbmQKCiAgbG9jYWwgZnVuY3Rpb24gaGlkZVBpdCgpCiAgICBmb3IgciA9IDEgKyBoZWlnaHRBZGp1c3QsIDIwIGRvCiAgICAgIHRlcm0uc2V0Q3Vyc29yUG9zKDEsIHIgLSBoZWlnaHRBZGp1c3QpCiAgICAgIHRlcm0uc2V0VGV4dENvbG9yKGNvbG9ycy5ibGFjaykKICAgICAgdGVybS5zZXRCYWNrZ3JvdW5kQ29sb3IoY29sb3JzLmJsYWNrKQogICAgICB0ZXJtLndyaXRlKCIgICAgICAgICAgICAgICAgICAgICIpCiAgICBlbmQKICBlbmQKCiAgbG9jYWwgZnVuY3Rpb24gbXNnQm94KG1lc3NhZ2UpCiAgICBsb2NhbCB4ID0gbWF0aC5mbG9vcigoMTcgLSAjbWVzc2FnZSkgLyAyKQogICAgdGVybS5zZXRCYWNrZ3JvdW5kQ29sb3IoY29sb3Jhc3MoY29sb3JzLmxpZ2h0R3JheSwgY29sb3JzLndoaXRlKSkKICAgIHRlcm0uc2V0VGV4dENvbG9yKGNvbG9ycy5ibGFjaykKICAgIHRlcm0uc2V0Q3Vyc29yUG9zKHgsIDkpCiAgICB0ZXJtLndyaXRlKCIrIiAuLiBzdHJpbmcucmVwKCItIiwgI21lc3NhZ2UgKyAyKSAuLiAiKyIpCiAgICB0ZXJtLnNldEN1cnNvclBvcyh4LCAxMCkKICAgIHRlcm0ud3JpdGUoInwiKQogICAgdGVybS5zZXRDdXJzb3JQb3MoeCArICNtZXNzYWdlICsgMywgMTApCiAgICB0ZXJtLndyaXRlKCJ8IikKICAgIHRlcm0uc2V0Q3Vyc29yUG9zKHgsIDExKQogICAgdGVybS53cml0ZSgiKyIgLi4gc3RyaW5nLnJlcCgiLSIsICNtZXNzYWdlICsgMikgLi4gIisiKQogICAgdGVybS5zZXRUZXh0Q29sb3IoY29sb3JzLndoaXRlKQogICAgdGVybS5zZXRCYWNrZ3JvdW5kQ29sb3IoY29sb3JzLmJsYWNrKQogICAgdGVybS5zZXRDdXJzb3JQb3MoeCArIDEsIDEwKQogICAgdGVybS53cml0ZSgiICIgLi4gbWVzc2FnZSAuLiAiICIpCiAgZW5kCgogIGxvY2FsIGZ1bmN0aW9uIGNsZWFyUm93cygpCiAgICBsb2NhbCByb3dzID0ge30KICAgIGZvciByID0gMSwgMjAgZG8KICAgICAgbG9jYWwgY291bnQgPSAwCiAgICAgIGZvciBjID0gMSwgMTAgZG8KICAgICAgICBpZiBwaXRbcl1bY10gfj0gMCB0aGVuCiAgICAgICAgICBjb3VudCA9IGNvdW50ICsgMQogICAgICAgIGVsc2UKICAgICAgICAgIGJyZWFrCiAgICAgICAgZW5kCiAgICAgIGVuZAogICAgICBpZiBjb3VudCA9PSAxMCB0aGVuCiAgICAgICAgcm93c1sjcm93cyArIDFdID0gcgogICAgICBlbmQKICAgIGVuZAoKICAgIGlmICNyb3dzID4gMCB0aGVuCiAgICAgIGZvciBfID0gMSwgNCBkbwogICAgICAgIHNsZWVwKC4xKQogICAgICAgIGZvciByID0gMSwgI3Jvd3MgZG8KICAgICAgICAgIHIgPSByb3dzW3JdCiAgICAgICAgICB0ZXJtLnNldEN1cnNvclBvcygxLCByIC0gaGVpZ2h0QWRqdXN0KQogICAgICAgICAgZm9yIGMgPSAxLCAxMCBkbwogICAgICAgICAgICB0ZXJtLnNldFRleHRDb2xvcihwaXRbcl1bY10uYmcpCiAgICAgICAgICAgIHRlcm0uc2V0QmFja2dyb3VuZENvbG9yKHBpdFtyXVtjXS5mZykKICAgICAgICAgICAgdGVybS53cml0ZShwaXRbcl1bY10uY2gpCiAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgICAgICBzbGVlcCguMSkKICAgICAgICBmb3IgciA9IDEsICNyb3dzIGRvCiAgICAgICAgICByID0gcm93c1tyXQogICAgICAgICAgdGVybS5zZXRDdXJzb3JQb3MoMSwgciAtIGhlaWdodEFkanVzdCkKICAgICAgICAgIGZvciBjID0gMSwgMTAgZG8KICAgICAgICAgICAgdGVybS5zZXRUZXh0Q29sb3IocGl0W3JdW2NdLmZnKQogICAgICAgICAgICB0ZXJtLnNldEJhY2tncm91bmRDb2xvcihwaXRbcl1bY10uYmcpCiAgICAgICAgICAgIHRlcm0ud3JpdGUocGl0W3JdW2NdLmNoKQogICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAgIGVuZAogICAgICAtLW5vdyByZW1vdmUgdGhlIHJvd3MgYW5kIGRyb3AgZXZlcnl0aGlnbiBlbHNlCiAgICAgIHRlcm0uc2V0QmFja2dyb3VuZENvbG9yKGNvbG9ycy5ibGFjaykKICAgICAgZm9yIHIgPSAxLCAjcm93cyBkbwogICAgICAgIHIgPSByb3dzW3JdCiAgICAgICAgdGVybS5zZXRDdXJzb3JQb3MoMSwgciAtIGhlaWdodEFkanVzdCkKICAgICAgICB0ZXJtLndyaXRlKCIgICAgICAgICAgICAgICAgICAgICIpCiAgICAgIGVuZAogICAgICBzbGVlcCguMjUpCiAgICAgIGZvciByID0gMSwgI3Jvd3MgZG8KICAgICAgICB0YWJsZS5yZW1vdmUocGl0LCByb3dzW3JdKQogICAgICAgIHRhYmxlLmluc2VydChwaXQsIDEsIHsgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCB9KQogICAgICBlbmQKICAgICAgcmVkcmF3UGl0KCkKICAgICAgbGluZXMgPSBsaW5lcyArICNyb3dzCiAgICAgIHNjb3JlID0gc2NvcmUgKyBwb2ludHNbI3Jvd3NdICogbWF0aC5taW4obGV2ZWwsIDIwKQogICAgICBsZXZlbCA9IG1hdGguZmxvb3IobGluZXMgLyAxMCkgKyBpbml0aWFsTGV2ZWwKICAgICAgZHJvcFNwZWVkID0gc3BlZWRzQnlMZXZlbFttYXRoLm1pbihsZXZlbCwgMTIpXQogICAgICB1cGRhdGVOdW1iZXJzKCkKICAgIGVuZAogICAgc2xlZXAoLjI1KQogIGVuZAoKICBsb2NhbCBmdW5jdGlvbiBibG9ja0ZhbGwoKQogICAgaWYgdGVzdEJsb2NrQXQoY3VyQmxvY2ssIGN1clgsIGN1clkgKyAxLCBjdXJSb3QpIHRoZW4KICAgICAgcGl0QmxvY2soY3VyQmxvY2ssIGN1clgsIGN1clksIGN1clJvdCkKICAgICAgLS1kZXRlY3Qgcm93cyB0aGF0IGNsZWFyCiAgICAgIGNsZWFyUm93cygpCgogICAgICBjdXJCbG9jayA9IG5leHQKICAgICAgY3VyWCA9IDQKICAgICAgY3VyWSA9IDEKICAgICAgY3VyUm90ID0gMQogICAgICBpZiB0ZXN0QmxvY2tBdChjdXJCbG9jaywgY3VyWCwgY3VyWSwgY3VyUm90KSB0aGVuCiAgICAgICAgaGFsdCA9IHRydWUKICAgICAgZW5kCiAgICAgIGRyYXdCbG9ja0F0KGN1ckJsb2NrLCBjdXJYLCBjdXJZLCBjdXJSb3QpCiAgICAgIGVyYXNlQmxvY2tBdChuZXh0LCAxMS41LCAxNSArIGhlaWdodEFkanVzdCwgMSkKICAgICAgbmV4dCA9IGJsb2Nrc1ttYXRoLnJhbmRvbSgxLCA3KV0KICAgICAgZHJhd0Jsb2NrQXQobmV4dCwgMTEuNSwgMTUgKyBoZWlnaHRBZGp1c3QsIDEpCiAgICAgIHJldHVybiB0cnVlCiAgICBlbHNlCiAgICAgIGVyYXNlQmxvY2tBdChjdXJCbG9jaywgY3VyWCwgY3VyWSwgY3VyUm90KQogICAgICBjdXJZID0gY3VyWSArIDEKICAgICAgZHJhd0Jsb2NrQXQoY3VyQmxvY2ssIGN1clgsIGN1clksIGN1clJvdCkKICAgICAgcmV0dXJuIGZhbHNlCiAgICBlbmQKICBlbmQKCgogIHdoaWxlIG5vdCBoYWx0IGRvCiAgICBsb2NhbCBlID0geyBvcy5wdWxsRXZlbnQoKSB9CiAgICBpZiBlWzFdID09ICJ0aW1lciIgdGhlbgogICAgICBpZiBlWzJdID09IGRyb3BUaW1lciB0aGVuCiAgICAgICAgYmxvY2tGYWxsKCkKICAgICAgICBkcm9wVGltZXIgPSBvcy5zdGFydFRpbWVyKGRyb3BTcGVlZCkKICAgICAgZW5kCiAgICBlbHNlaWYgZVsxXSA9PSAia2V5IiB0aGVuCiAgICAgIGxvY2FsIGtleSA9IGVbMl0KICAgICAgbG9jYWwgZHgsIGR5LCBkciA9IDAsIDAsIDAKICAgICAgaWYga2V5ID09IGtleXMubGVmdCBvciBrZXkgPT0ga2V5cy5hIHRoZW4KICAgICAgICBkeCA9IC0xCiAgICAgIGVsc2VpZiBrZXkgPT0ga2V5cy5yaWdodCBvciBrZXkgPT0ga2V5cy5kIHRoZW4KICAgICAgICBkeCA9IDEKICAgICAgZWxzZWlmIGtleSA9PSBrZXlzLnVwIG9yIGtleSA9PSBrZXlzLncgdGhlbgogICAgICAgIGRyID0gMQogICAgICBlbHNlaWYga2V5ID09IGtleXMuZG93biBvciBrZXkgPT0ga2V5cy5zIHRoZW4KICAgICAgICB3aGlsZSBub3QgYmxvY2tGYWxsKCkgZG8gZW5kCiAgICAgICAgZHJvcFRpbWVyID0gb3Muc3RhcnRUaW1lcihkcm9wU3BlZWQpCiAgICAgIGVsc2VpZiBrZXkgPT0ga2V5cy5zcGFjZSB0aGVuCiAgICAgICAgaGlkZVBpdCgpCiAgICAgICAgbXNnQm94KCJQYXVzZWQiKQogICAgICAgIHdoaWxlICh7IG9zLnB1bGxFdmVudCgia2V5IikgfSlbMl0gfj0ga2V5cy5zcGFjZSBkbyBlbmQKICAgICAgICByZWRyYXdQaXQoKQogICAgICAgIGRyYXdCbG9ja0F0KGN1ckJsb2NrLCBjdXJYLCBjdXJZLCBjdXJSb3QpCiAgICAgICAgZHJvcFRpbWVyID0gb3Muc3RhcnRUaW1lcihkcm9wU3BlZWQpCiAgICAgIGVuZAogICAgICBpZiBkeCArIGRyIH49IDAgdGhlbgogICAgICAgIGlmIG5vdCB0ZXN0QmxvY2tBdChjdXJCbG9jaywgY3VyWCArIGR4LCBjdXJZICsgZHksIGRyID4gMCBhbmQgY3VyUm90ICUgI2N1ckJsb2NrICsgZHIgb3IgY3VyUm90KSB0aGVuCiAgICAgICAgICBlcmFzZUJsb2NrQXQoY3VyQmxvY2ssIGN1clgsIGN1clksIGN1clJvdCkKICAgICAgICAgIGN1clggPSBjdXJYICsgZHgKICAgICAgICAgIGN1clkgPSBjdXJZICsgZHkKICAgICAgICAgIGN1clJvdCA9IGRyID09IDAgYW5kIGN1clJvdCBvciBjdXJSb3QgJSAjY3VyQmxvY2sgKyBkcgogICAgICAgICAgZHJhd0Jsb2NrQXQoY3VyQmxvY2ssIGN1clgsIGN1clksIGN1clJvdCkKICAgICAgICBlbmQKICAgICAgZW5kCiAgICBlbHNlaWYgZVsxXSA9PSAidGVybV9yZXNpemUiIHRoZW4KICAgICAgbG9jYWwgXywgaCA9IHRlcm0uZ2V0U2l6ZSgpCiAgICAgIGlmIGggPT0gMjAgdGhlbgogICAgICAgIGhlaWdodEFkanVzdCA9IDAKICAgICAgZWxzZQogICAgICAgIGhlaWdodEFkanVzdCA9IDEKICAgICAgZW5kCiAgICAgIHJlZHJhd1BpdCgpCiAgICAgIGRyYXdCbG9ja0F0KGN1ckJsb2NrLCBjdXJYLCBjdXJZLCBjdXJSb3QpCiAgICBlbmQKICBlbmQKCiAgbXNnQm94KCJHYW1lIE92ZXIhIikKICB3aGlsZSB0cnVlIGRvCiAgICBsb2NhbCBfLCBrID0gb3MucHVsbEV2ZW50KCJrZXkiKQogICAgaWYgayA9PSBrZXlzLnNwYWNlIG9yIGsgPT0ga2V5cy5lbnRlciBvciBrID09IGtleXMubnVtUGFkRW50ZXIgdGhlbgogICAgICBicmVhawogICAgZW5kCiAgZW5kCgogIGxldmVsID0gbWF0aC5taW4obGV2ZWwsIDkpCmVuZAoKCmxvY2FsIHNlbGVjdGVkID0gMQpsb2NhbCBwbGF5ZXJzRGV0ZWN0ZWQgPSBmYWxzZQoKbG9jYWwgZnVuY3Rpb24gZHJhd01lbnUoKQogIHRlcm0uc2V0QmFja2dyb3VuZENvbG9yKGNvbG9ycy5ibGFjaykKICB0ZXJtLnNldFRleHRDb2xvcihjb2xvcmFzcyhjb2xvcnMucmVkLCBjb2xvcnMud2hpdGUpKQogIHRlcm0uY2xlYXIoKQoKICBsb2NhbCBjeCwgY3kgPSBtYXRoLmZsb29yKHdpZHRoIC8gMiksIG1hdGguZmxvb3IoaGVpZ2h0IC8gMikKCiAgdGVybS5zZXRDdXJzb3JQb3MoY3ggLSA2LCBjeSAtIDIpCiAgdGVybS53cml0ZSgiRiBBIEwgTCBJIE4gRyIpCgogIGlmIHBsYXllcnNEZXRlY3RlZCB0aGVuCiAgICBpZiBzZWxlY3RlZCA9PSAwIHRoZW4KICAgICAgdGVybS5zZXRUZXh0Q29sb3IoY29sb3Jhc3MoY29sb3JzLmJsdWUsIGNvbG9ycy5ibGFjaykpCiAgICAgIHRlcm0uc2V0QmFja2dyb3VuZENvbG9yKGNvbG9yYXNzKGNvbG9ycy5ncmF5LCBjb2xvcnMud2hpdGUpKQogICAgZWxzZQogICAgICB0ZXJtLnNldFRleHRDb2xvcihjb2xvcmFzcyhjb2xvcnMubGlnaHRCbHVlLCBjb2xvcnMud2hpdGUpKQogICAgICB0ZXJtLnNldEJhY2tncm91bmRDb2xvcihjb2xvcnMuYmxhY2spCiAgICBlbmQKICAgIHRlcm0uc2V0Q3Vyc29yUG9zKGN4IC0gMTIsIGN5KQogICAgdGVybS53cml0ZSgiIFBsYXkgaGVhZC10by1oZWFkIGdhbWUhICIpCiAgZW5kCgogIHRlcm0uc2V0Q3Vyc29yUG9zKGN4IC0gMTAsIGN5ICsgMSkKICBpZiBzZWxlY3RlZCA9PSAxIHRoZW4KICAgIHRlcm0uc2V0VGV4dENvbG9yKGNvbG9yYXNzKGNvbG9ycy5ibHVlLCBjb2xvcnMuYmxhY2spKQogICAgdGVybS5zZXRCYWNrZ3JvdW5kQ29sb3IoY29sb3Jhc3MoY29sb3JzLmxpZ2h0R3JheSwgY29sb3JzLndoaXRlKSkKICBlbHNlCiAgICB0ZXJtLnNldFRleHRDb2xvcihjb2xvcmFzcyhjb2xvcnMubGlnaHRCbHVlLCBjb2xvcnMud2hpdGUpKQogICAgdGVybS5zZXRCYWNrZ3JvdW5kQ29sb3IoY29sb3JzLmJsYWNrKQogIGVuZAogIHRlcm0ud3JpdGUoIiBQbGF5IGZyb20gbGV2ZWw6IDwiIC4uIGxldmVsIC4uICI+ICIpCgogIHRlcm0uc2V0Q3Vyc29yUG9zKGN4IC0gMywgY3kgKyAzKQogIGlmIHNlbGVjdGVkID09IDIgdGhlbgogICAgdGVybS5zZXRUZXh0Q29sb3IoY29sb3Jhc3MoY29sb3JzLmJsdWUsIGNvbG9ycy5ibGFjaykpCiAgICB0ZXJtLnNldEJhY2tncm91bmRDb2xvcihjb2xvcmFzcyhjb2xvcnMubGlnaHRHcmF5LCBjb2xvcnMud2hpdGUpKQogIGVsc2UKICAgIHRlcm0uc2V0VGV4dENvbG9yKGNvbG9yYXNzKGNvbG9ycy5saWdodEJsdWUsIGNvbG9ycy53aGl0ZSkpCiAgICB0ZXJtLnNldEJhY2tncm91bmRDb2xvcihjb2xvcnMuYmxhY2spCiAgZW5kCiAgdGVybS53cml0ZSgiIFF1aXQgIikKZW5kCgoKbG9jYWwgZnVuY3Rpb24gcnVuTWVudSgpCiAgZHJhd01lbnUoKQoKICB3aGlsZSB0cnVlIGRvCiAgICBsb2NhbCBldmVudCA9IHsgb3MucHVsbEV2ZW50KCkgfQogICAgaWYgZXZlbnRbMV0gPT0gImtleSIgdGhlbgogICAgICBsb2NhbCBrZXkgPSBldmVudFsyXQogICAgICBpZiBrZXkgPT0ga2V5cy5yaWdodCBvciBrZXkgPT0ga2V5cy5kIGFuZCBzZWxlY3RlZCA9PSAxIHRoZW4KICAgICAgICBsZXZlbCA9IG1hdGgubWluKGxldmVsICsgMSwgOSkKICAgICAgICBkcmF3TWVudSgpCiAgICAgIGVsc2VpZiBrZXkgPT0ga2V5cy5sZWZ0IG9yIGtleSA9PSBrZXlzLmEgYW5kIHNlbGVjdGVkID09IDEgdGhlbgogICAgICAgIGxldmVsID0gbWF0aC5tYXgobGV2ZWwgLSAxLCAxKQogICAgICAgIGRyYXdNZW51KCkKICAgICAgZWxzZWlmIGtleSA+PSBrZXlzLm9uZSBhbmQga2V5IDw9IGtleXMubmluZSBhbmQgc2VsZWN0ZWQgPT0gMSB0aGVuCiAgICAgICAgbGV2ZWwgPSBrZXkgLSBrZXlzLm9uZSArIDEKICAgICAgICBkcmF3TWVudSgpCiAgICAgIGVsc2VpZiBrZXkgPT0ga2V5cy51cCBvciBrZXkgPT0ga2V5cy53IHRoZW4KICAgICAgICBzZWxlY3RlZCA9IHNlbGVjdGVkIC0gMQogICAgICAgIGlmIHNlbGVjdGVkID09IDAgdGhlbgogICAgICAgICAgc2VsZWN0ZWQgPSAyCiAgICAgICAgZW5kCiAgICAgICAgZHJhd01lbnUoKQogICAgICBlbHNlaWYga2V5ID09IGtleXMuZG93biBvciBrZXkgPT0ga2V5cy5zIHRoZW4KICAgICAgICBzZWxlY3RlZCA9IHNlbGVjdGVkICUgMiArIDEKICAgICAgICBkcmF3TWVudSgpCiAgICAgIGVsc2VpZiBrZXkgPT0ga2V5cy5lbnRlciBvciBrZXkgPT0ga2V5cy5udW1QYWRFbnRlciBvciBrZXkgPT0ga2V5cy5zcGFjZSB0aGVuCiAgICAgICAgYnJlYWsgLS1iZWdpbiBwbGF5IQogICAgICBlbmQKICAgIGVuZAogIGVuZAplbmQKCndoaWxlIHRydWUgZG8KICBydW5NZW51KCkKICBpZiBzZWxlY3RlZCA9PSAyIHRoZW4KICAgIGJyZWFrCiAgZW5kCgogIHBsYXlHYW1lKCkKZW5kCgoKdGVybS5zZXRUZXh0Q29sb3IoY29sb3JzLndoaXRlKQp0ZXJtLnNldEJhY2tncm91bmRDb2xvcihjb2xvcnMuYmxhY2spCnRlcm0uY2xlYXIoKQp0ZXJtLnNldEN1cnNvclBvcygxLCAxKQo=";
   Module["FS_createDataFile"]("/craftos/rom/programs/pocket", "falling.lua", decodeBase64(fileData66), true, true, false);
   var fileData67 = "aWYgbm90IHBvY2tldCB0aGVuCiAgICBwcmludEVycm9yKCJSZXF1aXJlcyBhIFBvY2tldCBDb21wdXRlciIpCiAgICByZXR1cm4KZW5kCgpsb2NhbCBvaywgZXJyID0gcG9ja2V0LnVuZXF1aXBCYWNrKCkKaWYgbm90IG9rIHRoZW4KICAgIHByaW50RXJyb3IoZXJyKQplbHNlCiAgICBwcmludCgiSXRlbSB1bmVxdWlwcGVkIikKZW5kCg==";
   Module["FS_createDataFile"]("/craftos/rom/programs/pocket", "unequip.lua", decodeBase64(fileData67), true, true, false);
   var fileData68 = "aWYgbm90IHNoZWxsLm9wZW5UYWIgdGhlbgogICAgcHJpbnRFcnJvcigiUmVxdWlyZXMgbXVsdGlzaGVsbCIpCiAgICByZXR1cm4KZW5kCgpsb2NhbCB0QXJncyA9IHsgLi4uIH0KaWYgI3RBcmdzID4gMCB0aGVuCiAgICBsb2NhbCBuVGFzayA9IHNoZWxsLm9wZW5UYWIodGFibGUudW5wYWNrKHRBcmdzKSkKICAgIGlmIG5UYXNrIHRoZW4KICAgICAgICBzaGVsbC5zd2l0Y2hUYWIoblRhc2spCiAgICBlbmQKZWxzZQogICAgbG9jYWwgblRhc2sgPSBzaGVsbC5vcGVuVGFiKCJzaGVsbCIpCiAgICBpZiBuVGFzayB0aGVuCiAgICAgICAgc2hlbGwuc3dpdGNoVGFiKG5UYXNrKQogICAgZW5kCmVuZAo=";
   Module["FS_createDataFile"]("/craftos/rom/programs/advanced", "fg.lua", decodeBase64(fileData68), true, true, false);
   var fileData69 = "";
   Module["FS_createDataFile"]("/craftos/rom/programs/advanced", "multishell.lua", decodeBase64(fileData69), true, true, false);
   var fileData70 = "aWYgbm90IHNoZWxsLm9wZW5UYWIgdGhlbgogICAgcHJpbnRFcnJvcigiUmVxdWlyZXMgbXVsdGlzaGVsbCIpCiAgICByZXR1cm4KZW5kCgpsb2NhbCB0QXJncyA9IHsgLi4uIH0KaWYgI3RBcmdzID4gMCB0aGVuCiAgICBzaGVsbC5vcGVuVGFiKHRhYmxlLnVucGFjayh0QXJncykpCmVsc2UKICAgIHNoZWxsLm9wZW5UYWIoInNoZWxsIikKZW5kCg==";
   Module["FS_createDataFile"]("/craftos/rom/programs/advanced", "bg.lua", decodeBase64(fileData70), true, true, false);
   var fileData71 = "aWYgbm90IHR1cnRsZSB0aGVuCiAgICBwcmludEVycm9yKCJSZXF1aXJlcyBhIFR1cnRsZSIpCmVuZAoKbG9jYWwgdE1vdmVzID0gewogICAgZnVuY3Rpb24oKQogICAgICAgIHR1cnRsZS51cCgpCiAgICAgICAgdHVydGxlLmRvd24oKQogICAgZW5kLAogICAgZnVuY3Rpb24oKQogICAgICAgIHR1cnRsZS51cCgpCiAgICAgICAgdHVydGxlLnR1cm5MZWZ0KCkKICAgICAgICB0dXJ0bGUudHVybkxlZnQoKQogICAgICAgIHR1cnRsZS50dXJuTGVmdCgpCiAgICAgICAgdHVydGxlLnR1cm5MZWZ0KCkKICAgICAgICB0dXJ0bGUuZG93bigpCiAgICBlbmQsCiAgICBmdW5jdGlvbigpCiAgICAgICAgdHVydGxlLnVwKCkKICAgICAgICB0dXJ0bGUudHVyblJpZ2h0KCkKICAgICAgICB0dXJ0bGUudHVyblJpZ2h0KCkKICAgICAgICB0dXJ0bGUudHVyblJpZ2h0KCkKICAgICAgICB0dXJ0bGUudHVyblJpZ2h0KCkKICAgICAgICB0dXJ0bGUuZG93bigpCiAgICBlbmQsCiAgICBmdW5jdGlvbigpCiAgICAgICAgdHVydGxlLnR1cm5MZWZ0KCkKICAgICAgICB0dXJ0bGUudHVybkxlZnQoKQogICAgICAgIHR1cnRsZS50dXJuTGVmdCgpCiAgICAgICAgdHVydGxlLnR1cm5MZWZ0KCkKICAgIGVuZCwKICAgIGZ1bmN0aW9uKCkKICAgICAgICB0dXJ0bGUudHVyblJpZ2h0KCkKICAgICAgICB0dXJ0bGUudHVyblJpZ2h0KCkKICAgICAgICB0dXJ0bGUudHVyblJpZ2h0KCkKICAgICAgICB0dXJ0bGUudHVyblJpZ2h0KCkKICAgIGVuZCwKICAgIGZ1bmN0aW9uKCkKICAgICAgICB0dXJ0bGUudHVybkxlZnQoKQogICAgICAgIHR1cnRsZS5iYWNrKCkKICAgICAgICB0dXJ0bGUuYmFjaygpCiAgICAgICAgdHVydGxlLnR1cm5SaWdodCgpCiAgICAgICAgdHVydGxlLnR1cm5SaWdodCgpCiAgICAgICAgdHVydGxlLmJhY2soKQogICAgICAgIHR1cnRsZS5iYWNrKCkKICAgICAgICB0dXJ0bGUudHVybkxlZnQoKQogICAgZW5kLAogICAgZnVuY3Rpb24oKQogICAgICAgIHR1cnRsZS50dXJuUmlnaHQoKQogICAgICAgIHR1cnRsZS5iYWNrKCkKICAgICAgICB0dXJ0bGUuYmFjaygpCiAgICAgICAgdHVydGxlLnR1cm5MZWZ0KCkKICAgICAgICB0dXJ0bGUudHVybkxlZnQoKQogICAgICAgIHR1cnRsZS5iYWNrKCkKICAgICAgICB0dXJ0bGUuYmFjaygpCiAgICAgICAgdHVydGxlLnR1cm5SaWdodCgpCiAgICBlbmQsCiAgICBmdW5jdGlvbigpCiAgICAgICAgdHVydGxlLmJhY2soKQogICAgICAgIHR1cnRsZS50dXJuTGVmdCgpCiAgICAgICAgdHVydGxlLmJhY2soKQogICAgICAgIHR1cnRsZS50dXJuTGVmdCgpCiAgICAgICAgdHVydGxlLmJhY2soKQogICAgICAgIHR1cnRsZS50dXJuTGVmdCgpCiAgICAgICAgdHVydGxlLmJhY2soKQogICAgICAgIHR1cnRsZS50dXJuTGVmdCgpCiAgICBlbmQsCiAgICBmdW5jdGlvbigpCiAgICAgICAgdHVydGxlLmJhY2soKQogICAgICAgIHR1cnRsZS50dXJuUmlnaHQoKQogICAgICAgIHR1cnRsZS5iYWNrKCkKICAgICAgICB0dXJ0bGUudHVyblJpZ2h0KCkKICAgICAgICB0dXJ0bGUuYmFjaygpCiAgICAgICAgdHVydGxlLnR1cm5SaWdodCgpCiAgICAgICAgdHVydGxlLmJhY2soKQogICAgICAgIHR1cnRsZS50dXJuUmlnaHQoKQogICAgZW5kLAp9Cgp0ZXh0dXRpbHMuc2xvd1dyaXRlKCJQcmVwYXJpbmcgdG8gZ2V0IGRvd24uIikKdGV4dHV0aWxzLnNsb3dQcmludCgiLi4iLCAwLjc1KQoKbG9jYWwgc0F1ZGlvID0gbmlsCmZvciBfLCBzTmFtZSBpbiBwYWlycyhwZXJpcGhlcmFsLmdldE5hbWVzKCkpIGRvCiAgICBpZiBkaXNrLmhhc0F1ZGlvKHNOYW1lKSB0aGVuCiAgICAgICAgZGlzay5wbGF5QXVkaW8oc05hbWUpCiAgICAgICAgcHJpbnQoIkphbW1pbmcgdG8gIiAuLiBkaXNrLmdldEF1ZGlvVGl0bGUoc05hbWUpKQogICAgICAgIHNBdWRpbyA9IHNOYW1lCiAgICAgICAgYnJlYWsKICAgIGVuZAplbmQKCnByaW50KCJQcmVzcyBhbnkga2V5IHRvIHN0b3AgdGhlIGdyb292ZSIpCgpwYXJhbGxlbC53YWl0Rm9yQW55KAogICAgZnVuY3Rpb24oKSBvcy5wdWxsRXZlbnQoImtleSIpIGVuZCwKICAgIGZ1bmN0aW9uKCkKICAgICAgICB3aGlsZSB0cnVlIGRvCiAgICAgICAgICAgIHRNb3Zlc1ttYXRoLnJhbmRvbSgxLCAjdE1vdmVzKV0oKQogICAgICAgIGVuZAogICAgZW5kCikKCmlmIHNBdWRpbyB0aGVuCiAgICBkaXNrLnN0b3BBdWRpbyhzQXVkaW8pCmVuZAo=";
   Module["FS_createDataFile"]("/craftos/rom/programs/turtle", "dance.lua", decodeBase64(fileData71), true, true, false);
   var fileData72 = "aWYgbm90IHR1cnRsZSB0aGVuCiAgICBwcmludEVycm9yKCJSZXF1aXJlcyBhIFR1cnRsZSIpCiAgICByZXR1cm4KZW5kCgpsb2NhbCB0QXJncyA9IHsgLi4uIH0KbG9jYWwgZnVuY3Rpb24gcHJpbnRVc2FnZSgpCiAgICBsb2NhbCBwcm9ncmFtTmFtZSA9IGFyZ1swXSBvciBmcy5nZXROYW1lKHNoZWxsLmdldFJ1bm5pbmdQcm9ncmFtKCkpCiAgICBwcmludCgiVXNhZ2U6ICIgLi4gcHJvZ3JhbU5hbWUgLi4gIiA8c2xvdD4gPHNpZGU+IikKZW5kCgppZiAjdEFyZ3Mgfj0gMiB0aGVuCiAgICBwcmludFVzYWdlKCkKICAgIHJldHVybgplbmQKCmxvY2FsIGZ1bmN0aW9uIGVxdWlwKG5TbG90LCBmbkVxdWlwRnVuY3Rpb24pCiAgICB0dXJ0bGUuc2VsZWN0KG5TbG90KQogICAgbG9jYWwgbk9sZENvdW50ID0gdHVydGxlLmdldEl0ZW1Db3VudChuU2xvdCkKICAgIGlmIG5PbGRDb3VudCA9PSAwIHRoZW4KICAgICAgICBwcmludCgiTm90aGluZyB0byBlcXVpcCIpCiAgICBlbHNlaWYgZm5FcXVpcEZ1bmN0aW9uKCkgdGhlbgogICAgICAgIGxvY2FsIG5OZXdDb3VudCA9IHR1cnRsZS5nZXRJdGVtQ291bnQoblNsb3QpCiAgICAgICAgaWYgbk5ld0NvdW50ID4gMCB0aGVuCiAgICAgICAgICAgIHByaW50KCJJdGVtcyBzd2FwcGVkIikKICAgICAgICBlbHNlCiAgICAgICAgICAgIHByaW50KCJJdGVtIGVxdWlwcGVkIikKICAgICAgICBlbmQKICAgIGVsc2UKICAgICAgICBwcmludCgiSXRlbSBub3QgZXF1aXBwYWJsZSIpCiAgICBlbmQKZW5kCgpsb2NhbCBuU2xvdCA9IHRvbnVtYmVyKHRBcmdzWzFdKQpsb2NhbCBzU2lkZSA9IHRBcmdzWzJdCmlmIHNTaWRlID09ICJsZWZ0IiB0aGVuCiAgICBlcXVpcChuU2xvdCwgdHVydGxlLmVxdWlwTGVmdCkKZWxzZWlmIHNTaWRlID09ICJyaWdodCIgdGhlbgogICAgZXF1aXAoblNsb3QsIHR1cnRsZS5lcXVpcFJpZ2h0KQplbHNlCiAgICBwcmludFVzYWdlKCkKICAgIHJldHVybgplbmQK";
   Module["FS_createDataFile"]("/craftos/rom/programs/turtle", "equip.lua", decodeBase64(fileData72), true, true, false);
   var fileData73 = "";
   Module["FS_createDataFile"]("/craftos/rom/programs/turtle", "excavate.lua", decodeBase64(fileData73), true, true, false);
   var fileData74 = "aWYgbm90IHR1cnRsZSB0aGVuCiAgICBwcmludEVycm9yKCJSZXF1aXJlcyBhIFR1cnRsZSIpCiAgICByZXR1cm4KZW5kCgpsb2NhbCB0QXJncyA9IHsgLi4uIH0KaWYgI3RBcmdzIH49IDEgdGhlbgogICAgbG9jYWwgcHJvZ3JhbU5hbWUgPSBhcmdbMF0gb3IgZnMuZ2V0TmFtZShzaGVsbC5nZXRSdW5uaW5nUHJvZ3JhbSgpKQogICAgcHJpbnQoIlVzYWdlOiAiIC4uIHByb2dyYW1OYW1lIC4uICIgPGxlbmd0aD4iKQogICAgcmV0dXJuCmVuZAoKLS0gTWluZSBpbiBhIHF1YXJyeSBwYXR0ZXJuIHVudGlsIHdlIGhpdCBzb21ldGhpbmcgd2UgY2FuJ3QgZGlnCmxvY2FsIGxlbmd0aCA9IHRvbnVtYmVyKHRBcmdzWzFdKQppZiBsZW5ndGggPCAxIHRoZW4KICAgIHByaW50KCJUdW5uZWwgbGVuZ3RoIG11c3QgYmUgcG9zaXRpdmUiKQogICAgcmV0dXJuCmVuZApsb2NhbCBjb2xsZWN0ZWQgPSAwCgpsb2NhbCBmdW5jdGlvbiBjb2xsZWN0KCkKICAgIGNvbGxlY3RlZCA9IGNvbGxlY3RlZCArIDEKICAgIGlmIG1hdGguZm1vZChjb2xsZWN0ZWQsIDI1KSA9PSAwIHRoZW4KICAgICAgICBwcmludCgiTWluZWQgIiAuLiBjb2xsZWN0ZWQgLi4gIiBpdGVtcy4iKQogICAgZW5kCmVuZAoKbG9jYWwgZnVuY3Rpb24gdHJ5RGlnKCkKICAgIHdoaWxlIHR1cnRsZS5kZXRlY3QoKSBkbwogICAgICAgIGlmIHR1cnRsZS5kaWcoKSB0aGVuCiAgICAgICAgICAgIGNvbGxlY3QoKQogICAgICAgICAgICBzbGVlcCgwLjUpCiAgICAgICAgZWxzZQogICAgICAgICAgICByZXR1cm4gZmFsc2UKICAgICAgICBlbmQKICAgIGVuZAogICAgcmV0dXJuIHRydWUKZW5kCgpsb2NhbCBmdW5jdGlvbiB0cnlEaWdVcCgpCiAgICB3aGlsZSB0dXJ0bGUuZGV0ZWN0VXAoKSBkbwogICAgICAgIGlmIHR1cnRsZS5kaWdVcCgpIHRoZW4KICAgICAgICAgICAgY29sbGVjdCgpCiAgICAgICAgICAgIHNsZWVwKDAuNSkKICAgICAgICBlbHNlCiAgICAgICAgICAgIHJldHVybiBmYWxzZQogICAgICAgIGVuZAogICAgZW5kCiAgICByZXR1cm4gdHJ1ZQplbmQKCmxvY2FsIGZ1bmN0aW9uIHRyeURpZ0Rvd24oKQogICAgd2hpbGUgdHVydGxlLmRldGVjdERvd24oKSBkbwogICAgICAgIGlmIHR1cnRsZS5kaWdEb3duKCkgdGhlbgogICAgICAgICAgICBjb2xsZWN0KCkKICAgICAgICAgICAgc2xlZXAoMC41KQogICAgICAgIGVsc2UKICAgICAgICAgICAgcmV0dXJuIGZhbHNlCiAgICAgICAgZW5kCiAgICBlbmQKICAgIHJldHVybiB0cnVlCmVuZAoKbG9jYWwgZnVuY3Rpb24gcmVmdWVsKCkKICAgIGxvY2FsIGZ1ZWxMZXZlbCA9IHR1cnRsZS5nZXRGdWVsTGV2ZWwoKQogICAgaWYgZnVlbExldmVsID09ICJ1bmxpbWl0ZWQiIG9yIGZ1ZWxMZXZlbCA+IDAgdGhlbgogICAgICAgIHJldHVybgogICAgZW5kCgogICAgbG9jYWwgZnVuY3Rpb24gdHJ5UmVmdWVsKCkKICAgICAgICBmb3IgbiA9IDEsIDE2IGRvCiAgICAgICAgICAgIGlmIHR1cnRsZS5nZXRJdGVtQ291bnQobikgPiAwIHRoZW4KICAgICAgICAgICAgICAgIHR1cnRsZS5zZWxlY3QobikKICAgICAgICAgICAgICAgIGlmIHR1cnRsZS5yZWZ1ZWwoMSkgdGhlbgogICAgICAgICAgICAgICAgICAgIHR1cnRsZS5zZWxlY3QoMSkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgICAgIHR1cnRsZS5zZWxlY3QoMSkKICAgICAgICByZXR1cm4gZmFsc2UKICAgIGVuZAoKICAgIGlmIG5vdCB0cnlSZWZ1ZWwoKSB0aGVuCiAgICAgICAgcHJpbnQoIkFkZCBtb3JlIGZ1ZWwgdG8gY29udGludWUuIikKICAgICAgICB3aGlsZSBub3QgdHJ5UmVmdWVsKCkgZG8KICAgICAgICAgICAgb3MucHVsbEV2ZW50KCJ0dXJ0bGVfaW52ZW50b3J5IikKICAgICAgICBlbmQKICAgICAgICBwcmludCgiUmVzdW1pbmcgVHVubmVsLiIpCiAgICBlbmQKZW5kCgpsb2NhbCBmdW5jdGlvbiB0cnlVcCgpCiAgICByZWZ1ZWwoKQogICAgd2hpbGUgbm90IHR1cnRsZS51cCgpIGRvCiAgICAgICAgaWYgdHVydGxlLmRldGVjdFVwKCkgdGhlbgogICAgICAgICAgICBpZiBub3QgdHJ5RGlnVXAoKSB0aGVuCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2UKICAgICAgICAgICAgZW5kCiAgICAgICAgZWxzZWlmIHR1cnRsZS5hdHRhY2tVcCgpIHRoZW4KICAgICAgICAgICAgY29sbGVjdCgpCiAgICAgICAgZWxzZQogICAgICAgICAgICBzbGVlcCgwLjUpCiAgICAgICAgZW5kCiAgICBlbmQKICAgIHJldHVybiB0cnVlCmVuZAoKbG9jYWwgZnVuY3Rpb24gdHJ5RG93bigpCiAgICByZWZ1ZWwoKQogICAgd2hpbGUgbm90IHR1cnRsZS5kb3duKCkgZG8KICAgICAgICBpZiB0dXJ0bGUuZGV0ZWN0RG93bigpIHRoZW4KICAgICAgICAgICAgaWYgbm90IHRyeURpZ0Rvd24oKSB0aGVuCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2UKICAgICAgICAgICAgZW5kCiAgICAgICAgZWxzZWlmIHR1cnRsZS5hdHRhY2tEb3duKCkgdGhlbgogICAgICAgICAgICBjb2xsZWN0KCkKICAgICAgICBlbHNlCiAgICAgICAgICAgIHNsZWVwKDAuNSkKICAgICAgICBlbmQKICAgIGVuZAogICAgcmV0dXJuIHRydWUKZW5kCgpsb2NhbCBmdW5jdGlvbiB0cnlGb3J3YXJkKCkKICAgIHJlZnVlbCgpCiAgICB3aGlsZSBub3QgdHVydGxlLmZvcndhcmQoKSBkbwogICAgICAgIGlmIHR1cnRsZS5kZXRlY3QoKSB0aGVuCiAgICAgICAgICAgIGlmIG5vdCB0cnlEaWcoKSB0aGVuCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2UKICAgICAgICAgICAgZW5kCiAgICAgICAgZWxzZWlmIHR1cnRsZS5hdHRhY2soKSB0aGVuCiAgICAgICAgICAgIGNvbGxlY3QoKQogICAgICAgIGVsc2UKICAgICAgICAgICAgc2xlZXAoMC41KQogICAgICAgIGVuZAogICAgZW5kCiAgICByZXR1cm4gdHJ1ZQplbmQKCnByaW50KCJUdW5uZWxsaW5nLi4uIikKCmZvciBuID0gMSwgbGVuZ3RoIGRvCiAgICB0dXJ0bGUucGxhY2VEb3duKCkKICAgIHRyeURpZ1VwKCkKICAgIHR1cnRsZS50dXJuTGVmdCgpCiAgICB0cnlEaWcoKQogICAgdHJ5VXAoKQogICAgdHJ5RGlnKCkKICAgIHR1cnRsZS50dXJuUmlnaHQoKQogICAgdHVydGxlLnR1cm5SaWdodCgpCiAgICB0cnlEaWcoKQogICAgdHJ5RG93bigpCiAgICB0cnlEaWcoKQogICAgdHVydGxlLnR1cm5MZWZ0KCkKCiAgICBpZiBuIDwgbGVuZ3RoIHRoZW4KICAgICAgICB0cnlEaWcoKQogICAgICAgIGlmIG5vdCB0cnlGb3J3YXJkKCkgdGhlbgogICAgICAgICAgICBwcmludCgiQWJvcnRpbmcgVHVubmVsLiIpCiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgZW5kCiAgICBlbHNlCiAgICAgICAgcHJpbnQoIlR1bm5lbCBjb21wbGV0ZS4iKQogICAgZW5kCgplbmQKCi0tW1sKcHJpbnQoICJSZXR1cm5pbmcgdG8gc3RhcnQuLi4iICkKCi0tIFJldHVybiB0byB3aGVyZSB3ZSBzdGFydGVkCnR1cnRsZS50dXJuTGVmdCgpCnR1cnRsZS50dXJuTGVmdCgpCndoaWxlIGRlcHRoID4gMCBkbwogICAgaWYgdHVydGxlLmZvcndhcmQoKSB0aGVuCiAgICAgICAgZGVwdGggPSBkZXB0aCAtIDEKICAgIGVsc2UKICAgICAgICB0dXJ0bGUuZGlnKCkKICAgIGVuZAplbmQKdHVydGxlLnR1cm5SaWdodCgpCnR1cnRsZS50dXJuUmlnaHQoKQpdXQoKcHJpbnQoIlR1bm5lbCBjb21wbGV0ZS4iKQpwcmludCgiTWluZWQgIiAuLiBjb2xsZWN0ZWQgLi4gIiBpdGVtcyB0b3RhbC4iKQo=";
   Module["FS_createDataFile"]("/craftos/rom/programs/turtle", "tunnel.lua", decodeBase64(fileData74), true, true, false);
   var fileData75 = "aWYgbm90IHR1cnRsZSB0aGVuCiAgICBwcmludEVycm9yKCJSZXF1aXJlcyBhIFR1cnRsZSIpCiAgICByZXR1cm4KZW5kCgppZiBub3QgdHVydGxlLmNyYWZ0IHRoZW4KICAgIHByaW50KCJSZXF1aXJlcyBhIENyYWZ0eSBUdXJ0bGUiKQogICAgcmV0dXJuCmVuZAoKbG9jYWwgdEFyZ3MgPSB7IC4uLiB9CmxvY2FsIG5MaW1pdCA9IHRvbnVtYmVyKHRBcmdzWzFdKQoKaWYgbm90IG5MaW1pdCBhbmQgdEFyZ3NbMV0gfj0gImFsbCIgdGhlbgogICAgbG9jYWwgcHJvZ3JhbU5hbWUgPSBhcmdbMF0gb3IgZnMuZ2V0TmFtZShzaGVsbC5nZXRSdW5uaW5nUHJvZ3JhbSgpKQogICAgcHJpbnQoIlVzYWdlOiAiIC4uIHByb2dyYW1OYW1lIC4uICIgYWxsfDxudW1iZXI+IikKICAgIHJldHVybgplbmQKCmxvY2FsIG5DcmFmdGVkID0gMApsb2NhbCBuT2xkQ291bnQgPSB0dXJ0bGUuZ2V0SXRlbUNvdW50KHR1cnRsZS5nZXRTZWxlY3RlZFNsb3QoKSkKaWYgdHVydGxlLmNyYWZ0KG5MaW1pdCkgdGhlbgogICAgbG9jYWwgbk5ld0NvdW50ID0gdHVydGxlLmdldEl0ZW1Db3VudCh0dXJ0bGUuZ2V0U2VsZWN0ZWRTbG90KCkpCiAgICBpZiBub3QgbkxpbWl0IG9yIG5PbGRDb3VudCA8PSBuTGltaXQgdGhlbgogICAgICAgIG5DcmFmdGVkID0gbk5ld0NvdW50CiAgICBlbHNlCiAgICAgICAgbkNyYWZ0ZWQgPSBuT2xkQ291bnQgLSBuTmV3Q291bnQKICAgIGVuZAplbmQKCmlmIG5DcmFmdGVkID4gMSB0aGVuCiAgICBwcmludChuQ3JhZnRlZCAuLiAiIGl0ZW1zIGNyYWZ0ZWQiKQplbHNlaWYgbkNyYWZ0ZWQgPT0gMSB0aGVuCiAgICBwcmludCgiMSBpdGVtIGNyYWZ0ZWQiKQplbHNlCiAgICBwcmludCgiTm8gaXRlbXMgY3JhZnRlZCIpCmVuZAo=";
   Module["FS_createDataFile"]("/craftos/rom/programs/turtle", "craft.lua", decodeBase64(fileData75), true, true, false);
   var fileData76 = "aWYgbm90IHR1cnRsZSB0aGVuCiAgICBwcmludEVycm9yKCJSZXF1aXJlcyBhIFR1cnRsZSIpCiAgICByZXR1cm4KZW5kCgpsb2NhbCB0QXJncyA9IHsgLi4uIH0KaWYgI3RBcmdzIDwgMSB0aGVuCiAgICBsb2NhbCBwcm9ncmFtTmFtZSA9IGFyZ1swXSBvciBmcy5nZXROYW1lKHNoZWxsLmdldFJ1bm5pbmdQcm9ncmFtKCkpCiAgICBwcmludCgiVXNhZ2U6ICIgLi4gcHJvZ3JhbU5hbWUgLi4gIiA8ZGlyZWN0aW9uPiA8ZGlzdGFuY2U+IikKICAgIHJldHVybgplbmQKCmxvY2FsIHRIYW5kbGVycyA9IHsKICAgIFsiZmQiXSA9IHR1cnRsZS5mb3J3YXJkLAogICAgWyJmb3J3YXJkIl0gPSB0dXJ0bGUuZm9yd2FyZCwKICAgIFsiZm9yd2FyZHMiXSA9IHR1cnRsZS5mb3J3YXJkLAogICAgWyJiayJdID0gdHVydGxlLmJhY2ssCiAgICBbImJhY2siXSA9IHR1cnRsZS5iYWNrLAogICAgWyJ1cCJdID0gdHVydGxlLnVwLAogICAgWyJkbiJdID0gdHVydGxlLmRvd24sCiAgICBbImRvd24iXSA9IHR1cnRsZS5kb3duLAogICAgWyJsdCJdID0gdHVydGxlLnR1cm5MZWZ0LAogICAgWyJsZWZ0Il0gPSB0dXJ0bGUudHVybkxlZnQsCiAgICBbInJ0Il0gPSB0dXJ0bGUudHVyblJpZ2h0LAogICAgWyJyaWdodCJdID0gdHVydGxlLnR1cm5SaWdodCwKfQoKbG9jYWwgbkFyZyA9IDEKd2hpbGUgbkFyZyA8PSAjdEFyZ3MgZG8KICAgIGxvY2FsIHNEaXJlY3Rpb24gPSB0QXJnc1tuQXJnXQogICAgbG9jYWwgbkRpc3RhbmNlID0gMQogICAgaWYgbkFyZyA8ICN0QXJncyB0aGVuCiAgICAgICAgbG9jYWwgbnVtID0gdG9udW1iZXIodEFyZ3NbbkFyZyArIDFdKQogICAgICAgIGlmIG51bSB0aGVuCiAgICAgICAgICAgIG5EaXN0YW5jZSA9IG51bQogICAgICAgICAgICBuQXJnID0gbkFyZyArIDEKICAgICAgICBlbmQKICAgIGVuZAogICAgbkFyZyA9IG5BcmcgKyAxCgogICAgbG9jYWwgZm5IYW5kbGVyID0gdEhhbmRsZXJzW3N0cmluZy5sb3dlcihzRGlyZWN0aW9uKV0KICAgIGlmIGZuSGFuZGxlciB0aGVuCiAgICAgICAgd2hpbGUgbkRpc3RhbmNlID4gMCBkbwogICAgICAgICAgICBpZiBmbkhhbmRsZXIoKSB0aGVuCiAgICAgICAgICAgICAgICBuRGlzdGFuY2UgPSBuRGlzdGFuY2UgLSAxCiAgICAgICAgICAgIGVsc2VpZiB0dXJ0bGUuZ2V0RnVlbExldmVsKCkgPT0gMCB0aGVuCiAgICAgICAgICAgICAgICBwcmludCgiT3V0IG9mIGZ1ZWwiKQogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHNsZWVwKDAuNSkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbHNlCiAgICAgICAgcHJpbnQoIk5vIHN1Y2ggZGlyZWN0aW9uOiAiIC4uIHNEaXJlY3Rpb24pCiAgICAgICAgcHJpbnQoIlRyeTogZm9yd2FyZCwgYmFjaywgdXAsIGRvd24iKQogICAgICAgIHJldHVybgogICAgZW5kCgplbmQK";
   Module["FS_createDataFile"]("/craftos/rom/programs/turtle", "go.lua", decodeBase64(fileData76), true, true, false);
   var fileData77 = "aWYgbm90IHR1cnRsZSB0aGVuCiAgICBwcmludEVycm9yKCJSZXF1aXJlcyBhIFR1cnRsZSIpCiAgICByZXR1cm4KZW5kCgpsb2NhbCB0QXJncyA9IHsgLi4uIH0KbG9jYWwgbkxpbWl0ID0gMQppZiAjdEFyZ3MgPiAxIHRoZW4KICAgIGxvY2FsIHByb2dyYW1OYW1lID0gYXJnWzBdIG9yIGZzLmdldE5hbWUoc2hlbGwuZ2V0UnVubmluZ1Byb2dyYW0oKSkKICAgIHByaW50KCJVc2FnZTogIiAuLiBwcm9ncmFtTmFtZSAuLiAiIFtudW1iZXJdIikKICAgIHJldHVybgplbHNlaWYgI3RBcmdzID4gMCB0aGVuCiAgICBpZiB0QXJnc1sxXSA9PSAiYWxsIiB0aGVuCiAgICAgICAgbkxpbWl0ID0gbmlsCiAgICBlbHNlCiAgICAgICAgbkxpbWl0ID0gdG9udW1iZXIodEFyZ3NbMV0pCiAgICAgICAgaWYgbm90IG5MaW1pdCB0aGVuCiAgICAgICAgICAgIHByaW50KCJJbnZhbGlkIGxpbWl0LCBleHBlY3RlZCBhIG51bWJlciBvciBcImFsbFwiIikKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCgppZiB0dXJ0bGUuZ2V0RnVlbExldmVsKCkgfj0gInVubGltaXRlZCIgdGhlbgogICAgZm9yIG4gPSAxLCAxNiBkbwogICAgICAgIC0tIFN0b3AgaWYgd2UndmUgcmVhY2hlZCB0aGUgbGltaXQsIG9yIGFyZSBmdWxseSByZWZ1ZWxsZWQuCiAgICAgICAgaWYgbkxpbWl0IGFuZCBuTGltaXQgPD0gMCBvciB0dXJ0bGUuZ2V0RnVlbExldmVsKCkgPj0gdHVydGxlLmdldEZ1ZWxMaW1pdCgpIHRoZW4KICAgICAgICAgICAgYnJlYWsKICAgICAgICBlbmQKCiAgICAgICAgbG9jYWwgbkNvdW50ID0gdHVydGxlLmdldEl0ZW1Db3VudChuKQogICAgICAgIGlmIG5Db3VudCA+IDAgdGhlbgogICAgICAgICAgICB0dXJ0bGUuc2VsZWN0KG4pCiAgICAgICAgICAgIGlmIHR1cnRsZS5yZWZ1ZWwobkxpbWl0KSBhbmQgbkxpbWl0IHRoZW4KICAgICAgICAgICAgICAgIGxvY2FsIG5OZXdDb3VudCA9IHR1cnRsZS5nZXRJdGVtQ291bnQobikKICAgICAgICAgICAgICAgIG5MaW1pdCA9IG5MaW1pdCAtIChuQ291bnQgLSBuTmV3Q291bnQpCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kCiAgICBwcmludCgiRnVlbCBsZXZlbCBpcyAiIC4uIHR1cnRsZS5nZXRGdWVsTGV2ZWwoKSkKICAgIGlmIHR1cnRsZS5nZXRGdWVsTGV2ZWwoKSA9PSB0dXJ0bGUuZ2V0RnVlbExpbWl0KCkgdGhlbgogICAgICAgIHByaW50KCJGdWVsIGxpbWl0IHJlYWNoZWQiKQogICAgZW5kCmVsc2UKICAgIHByaW50KCJGdWVsIGxldmVsIGlzIHVubGltaXRlZCIpCmVuZAo=";
   Module["FS_createDataFile"]("/craftos/rom/programs/turtle", "refuel.lua", decodeBase64(fileData77), true, true, false);
   var fileData78 = "aWYgbm90IHR1cnRsZSB0aGVuCiAgICBwcmludEVycm9yKCJSZXF1aXJlcyBhIFR1cnRsZSIpCiAgICByZXR1cm4KZW5kCgpsb2NhbCB0QXJncyA9IHsgLi4uIH0KaWYgI3RBcmdzIDwgMSB0aGVuCiAgICBsb2NhbCBwcm9ncmFtTmFtZSA9IGFyZ1swXSBvciBmcy5nZXROYW1lKHNoZWxsLmdldFJ1bm5pbmdQcm9ncmFtKCkpCiAgICBwcmludCgiVXNhZ2U6ICIgLi4gcHJvZ3JhbU5hbWUgLi4gIiA8ZGlyZWN0aW9uPiA8dHVybnM+IikKICAgIHJldHVybgplbmQKCmxvY2FsIHRIYW5kbGVycyA9IHsKICAgIFsibHQiXSA9IHR1cnRsZS50dXJuTGVmdCwKICAgIFsibGVmdCJdID0gdHVydGxlLnR1cm5MZWZ0LAogICAgWyJydCJdID0gdHVydGxlLnR1cm5SaWdodCwKICAgIFsicmlnaHQiXSA9IHR1cnRsZS50dXJuUmlnaHQsCn0KCmxvY2FsIG5BcmcgPSAxCndoaWxlIG5BcmcgPD0gI3RBcmdzIGRvCiAgICBsb2NhbCBzRGlyZWN0aW9uID0gdEFyZ3NbbkFyZ10KICAgIGxvY2FsIG5EaXN0YW5jZSA9IDEKICAgIGlmIG5BcmcgPCAjdEFyZ3MgdGhlbgogICAgICAgIGxvY2FsIG51bSA9IHRvbnVtYmVyKHRBcmdzW25BcmcgKyAxXSkKICAgICAgICBpZiBudW0gdGhlbgogICAgICAgICAgICBuRGlzdGFuY2UgPSBudW0KICAgICAgICAgICAgbkFyZyA9IG5BcmcgKyAxCiAgICAgICAgZW5kCiAgICBlbmQKICAgIG5BcmcgPSBuQXJnICsgMQoKICAgIGxvY2FsIGZuSGFuZGxlciA9IHRIYW5kbGVyc1tzdHJpbmcubG93ZXIoc0RpcmVjdGlvbildCiAgICBpZiBmbkhhbmRsZXIgdGhlbgogICAgICAgIGZvciBfID0gMSwgbkRpc3RhbmNlIGRvCiAgICAgICAgICAgIGZuSGFuZGxlcihuQXJnKQogICAgICAgIGVuZAogICAgZWxzZQogICAgICAgIHByaW50KCJObyBzdWNoIGRpcmVjdGlvbjogIiAuLiBzRGlyZWN0aW9uKQogICAgICAgIHByaW50KCJUcnk6IGxlZnQsIHJpZ2h0IikKICAgICAgICByZXR1cm4KICAgIGVuZAplbmQK";
   Module["FS_createDataFile"]("/craftos/rom/programs/turtle", "turn.lua", decodeBase64(fileData78), true, true, false);
   var fileData79 = "aWYgbm90IHR1cnRsZSB0aGVuCiAgICBwcmludEVycm9yKCJSZXF1aXJlcyBhIFR1cnRsZSIpCiAgICByZXR1cm4KZW5kCgpsb2NhbCB0QXJncyA9IHsgLi4uIH0KbG9jYWwgZnVuY3Rpb24gcHJpbnRVc2FnZSgpCiAgICBsb2NhbCBwcm9ncmFtTmFtZSA9IGFyZ1swXSBvciBmcy5nZXROYW1lKHNoZWxsLmdldFJ1bm5pbmdQcm9ncmFtKCkpCiAgICBwcmludCgiVXNhZ2U6ICIgLi4gcHJvZ3JhbU5hbWUgLi4gIiA8c2lkZT4iKQplbmQKCmlmICN0QXJncyB+PSAxIHRoZW4KICAgIHByaW50VXNhZ2UoKQogICAgcmV0dXJuCmVuZAoKbG9jYWwgZnVuY3Rpb24gdW5lcXVpcChmbkVxdWlwRnVuY3Rpb24pCiAgICBmb3IgblNsb3QgPSAxLCAxNiBkbwogICAgICAgIGxvY2FsIG5PbGRDb3VudCA9IHR1cnRsZS5nZXRJdGVtQ291bnQoblNsb3QpCiAgICAgICAgaWYgbk9sZENvdW50ID09IDAgdGhlbgogICAgICAgICAgICB0dXJ0bGUuc2VsZWN0KG5TbG90KQogICAgICAgICAgICBpZiBmbkVxdWlwRnVuY3Rpb24oKSB0aGVuCiAgICAgICAgICAgICAgICBsb2NhbCBuTmV3Q291bnQgPSB0dXJ0bGUuZ2V0SXRlbUNvdW50KG5TbG90KQogICAgICAgICAgICAgICAgaWYgbk5ld0NvdW50ID4gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIkl0ZW0gdW5lcXVpcHBlZCIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIk5vdGhpbmcgdG8gdW5lcXVpcCIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKICAgIHByaW50KCJObyBzcGFjZSB0byB1bmVxdWlwIGl0ZW0iKQplbmQKCmxvY2FsIHNTaWRlID0gdEFyZ3NbMV0KaWYgc1NpZGUgPT0gImxlZnQiIHRoZW4KICAgIHVuZXF1aXAodHVydGxlLmVxdWlwTGVmdCkKZWxzZWlmIHNTaWRlID09ICJyaWdodCIgdGhlbgogICAgdW5lcXVpcCh0dXJ0bGUuZXF1aXBSaWdodCkKZWxzZQogICAgcHJpbnRVc2FnZSgpCiAgICByZXR1cm4KZW5kCg==";
   Module["FS_createDataFile"]("/craftos/rom/programs/turtle", "unequip.lua", decodeBase64(fileData79), true, true, false);
   var fileData80 = "LS0gRmluZCBtb2RlbXMKbG9jYWwgdE1vZGVtcyA9IHt9CmZvciBfLCBzTW9kZW0gaW4gaXBhaXJzKHBlcmlwaGVyYWwuZ2V0TmFtZXMoKSkgZG8KICAgIGlmIHBlcmlwaGVyYWwuZ2V0VHlwZShzTW9kZW0pID09ICJtb2RlbSIgdGhlbgogICAgICAgIHRhYmxlLmluc2VydCh0TW9kZW1zLCBzTW9kZW0pCiAgICBlbmQKZW5kCmlmICN0TW9kZW1zID09IDAgdGhlbgogICAgcHJpbnQoIk5vIG1vZGVtcyBmb3VuZC4iKQogICAgcmV0dXJuCmVsc2VpZiAjdE1vZGVtcyA9PSAxIHRoZW4KICAgIHByaW50KCIxIG1vZGVtIGZvdW5kLiIpCmVsc2UKICAgIHByaW50KCN0TW9kZW1zIC4uICIgbW9kZW1zIGZvdW5kLiIpCmVuZAoKbG9jYWwgZnVuY3Rpb24gaWRBc0NoYW5uZWwoaWQpCiAgICByZXR1cm4gKGlkIG9yIG9zLmdldENvbXB1dGVySUQoKSkgJSByZWRuZXQuTUFYX0lEX0NIQU5ORUxTCmVuZAoKbG9jYWwgZnVuY3Rpb24gb3BlbihuQ2hhbm5lbCkKICAgIGZvciBuID0gMSwgI3RNb2RlbXMgZG8KICAgICAgICBsb2NhbCBzTW9kZW0gPSB0TW9kZW1zW25dCiAgICAgICAgcGVyaXBoZXJhbC5jYWxsKHNNb2RlbSwgIm9wZW4iLCBuQ2hhbm5lbCkKICAgIGVuZAplbmQKCmxvY2FsIGZ1bmN0aW9uIGNsb3NlKG5DaGFubmVsKQogICAgZm9yIG4gPSAxLCAjdE1vZGVtcyBkbwogICAgICAgIGxvY2FsIHNNb2RlbSA9IHRNb2RlbXNbbl0KICAgICAgICBwZXJpcGhlcmFsLmNhbGwoc01vZGVtLCAiY2xvc2UiLCBuQ2hhbm5lbCkKICAgIGVuZAplbmQKCi0tIE9wZW4gY2hhbm5lbHMKcHJpbnQoIjAgbWVzc2FnZXMgcmVwZWF0ZWQuIikKb3BlbihyZWRuZXQuQ0hBTk5FTF9SRVBFQVQpCgotLSBNYWluIGxvb3AgKHRlcm1pbmF0ZSB0byBicmVhaykKbG9jYWwgb2ssIGVycm9yID0gcGNhbGwoZnVuY3Rpb24oKQogICAgbG9jYWwgdFJlY2VpdmVkTWVzc2FnZXMgPSB7fQogICAgbG9jYWwgdFJlY2VpdmVkTWVzc2FnZVRpbWVvdXRzID0ge30KICAgIGxvY2FsIG5UcmFuc21pdHRlZE1lc3NhZ2VzID0gMAoKICAgIHdoaWxlIHRydWUgZG8KICAgICAgICBsb2NhbCBzRXZlbnQsIHNNb2RlbSwgbkNoYW5uZWwsIG5SZXBseUNoYW5uZWwsIHRNZXNzYWdlID0gb3MucHVsbEV2ZW50KCkKICAgICAgICBpZiBzRXZlbnQgPT0gIm1vZGVtX21lc3NhZ2UiIHRoZW4KICAgICAgICAgICAgLS0gR290IGEgbW9kZW0gbWVzc2FnZSwgcmVicm9hZGNhc3QgaXQgaWYgaXQncyBhIHJlZG5ldCB0aGluZwogICAgICAgICAgICBpZiBuQ2hhbm5lbCA9PSByZWRuZXQuQ0hBTk5FTF9SRVBFQVQgdGhlbgogICAgICAgICAgICAgICAgaWYgdHlwZSh0TWVzc2FnZSkgPT0gInRhYmxlIiBhbmQgdE1lc3NhZ2Uubk1lc3NhZ2VJRCBhbmQgdE1lc3NhZ2UublJlY2lwaWVudCBhbmQgdHlwZSh0TWVzc2FnZS5uUmVjaXBpZW50KSA9PSAibnVtYmVyIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgaWYgbm90IHRSZWNlaXZlZE1lc3NhZ2VzW3RNZXNzYWdlLm5NZXNzYWdlSURdIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgLS0gRW5zdXJlIHdlIG9ubHkgcmVwZWF0IGEgbWVzc2FnZSBvbmNlCiAgICAgICAgICAgICAgICAgICAgICAgIHRSZWNlaXZlZE1lc3NhZ2VzW3RNZXNzYWdlLm5NZXNzYWdlSURdID0gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICB0UmVjZWl2ZWRNZXNzYWdlVGltZW91dHNbb3Muc3RhcnRUaW1lcigzMCldID0gdE1lc3NhZ2Uubk1lc3NhZ2VJRAoKICAgICAgICAgICAgICAgICAgICAgICAgLS0gU2VuZCBvbiBhbGwgb3RoZXIgb3BlbiBtb2RlbXMsIHRvIHRoZSB0YXJnZXQgYW5kIHRvIG90aGVyIHJlcGVhdGVycwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgbiA9IDEsICN0TW9kZW1zIGRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBzT3RoZXJNb2RlbSA9IHRNb2RlbXNbbl0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlcmlwaGVyYWwuY2FsbChzT3RoZXJNb2RlbSwgInRyYW5zbWl0IiwgcmVkbmV0LkNIQU5ORUxfUkVQRUFULCBuUmVwbHlDaGFubmVsLCB0TWVzc2FnZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlcmlwaGVyYWwuY2FsbChzT3RoZXJNb2RlbSwgInRyYW5zbWl0IiwgaWRBc0NoYW5uZWwodE1lc3NhZ2UublJlY2lwaWVudCksIG5SZXBseUNoYW5uZWwsIHRNZXNzYWdlKQogICAgICAgICAgICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgICAgICAgICAgICAgIC0tIExvZyB0aGUgZXZlbnQKICAgICAgICAgICAgICAgICAgICAgICAgblRyYW5zbWl0dGVkTWVzc2FnZXMgPSBuVHJhbnNtaXR0ZWRNZXNzYWdlcyArIDEKICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgXywgeSA9IHRlcm0uZ2V0Q3Vyc29yUG9zKCkKICAgICAgICAgICAgICAgICAgICAgICAgdGVybS5zZXRDdXJzb3JQb3MoMSwgeSAtIDEpCiAgICAgICAgICAgICAgICAgICAgICAgIHRlcm0uY2xlYXJMaW5lKCkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgblRyYW5zbWl0dGVkTWVzc2FnZXMgPT0gMSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChuVHJhbnNtaXR0ZWRNZXNzYWdlcyAuLiAiIG1lc3NhZ2UgcmVwZWF0ZWQuIikKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoblRyYW5zbWl0dGVkTWVzc2FnZXMgLi4gIiBtZXNzYWdlcyByZXBlYXRlZC4iKQogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKCiAgICAgICAgZWxzZWlmIHNFdmVudCA9PSAidGltZXIiIHRoZW4KICAgICAgICAgICAgLS0gR290IGEgdGltZXIgZXZlbnQsIHVzZSBpdCB0byBjbGVhciB0aGUgbWVzc2FnZSBoaXN0b3J5CiAgICAgICAgICAgIGxvY2FsIG5UaW1lciA9IHNNb2RlbQogICAgICAgICAgICBsb2NhbCBuTWVzc2FnZUlEID0gdFJlY2VpdmVkTWVzc2FnZVRpbWVvdXRzW25UaW1lcl0KICAgICAgICAgICAgaWYgbk1lc3NhZ2VJRCB0aGVuCiAgICAgICAgICAgICAgICB0UmVjZWl2ZWRNZXNzYWdlVGltZW91dHNbblRpbWVyXSA9IG5pbAogICAgICAgICAgICAgICAgdFJlY2VpdmVkTWVzc2FnZXNbbk1lc3NhZ2VJRF0gPSBuaWwKICAgICAgICAgICAgZW5kCgogICAgICAgIGVuZAogICAgZW5kCmVuZCkKaWYgbm90IG9rIHRoZW4KICAgIHByaW50RXJyb3IoZXJyb3IpCmVuZAoKLS0gQ2xvc2UgY2hhbm5lbHMKY2xvc2UocmVkbmV0LkNIQU5ORUxfUkVQRUFUKQo=";
   Module["FS_createDataFile"]("/craftos/rom/programs/rednet", "repeat.lua", decodeBase64(fileData80), true, true, false);
   var fileData81 = "bG9jYWwgdEFyZ3MgPSB7IC4uLiB9Cgpsb2NhbCBmdW5jdGlvbiBwcmludFVzYWdlKCkKICAgIGxvY2FsIHByb2dyYW1OYW1lID0gYXJnWzBdIG9yIGZzLmdldE5hbWUoc2hlbGwuZ2V0UnVubmluZ1Byb2dyYW0oKSkKICAgIHByaW50KCJVc2FnZXM6IikKICAgIHByaW50KHByb2dyYW1OYW1lIC4uICIgaG9zdCA8aG9zdG5hbWU+IikKICAgIHByaW50KHByb2dyYW1OYW1lIC4uICIgam9pbiA8aG9zdG5hbWU+IDxuaWNrbmFtZT4iKQplbmQKCmxvY2FsIHNPcGVuZWRNb2RlbSA9IG5pbApsb2NhbCBmdW5jdGlvbiBvcGVuTW9kZW0oKQogICAgZm9yIF8sIHNNb2RlbSBpbiBpcGFpcnMocGVyaXBoZXJhbC5nZXROYW1lcygpKSBkbwogICAgICAgIGlmIHBlcmlwaGVyYWwuZ2V0VHlwZShzTW9kZW0pID09ICJtb2RlbSIgdGhlbgogICAgICAgICAgICBpZiBub3QgcmVkbmV0LmlzT3BlbihzTW9kZW0pIHRoZW4KICAgICAgICAgICAgICAgIHJlZG5ldC5vcGVuKHNNb2RlbSkKICAgICAgICAgICAgICAgIHNPcGVuZWRNb2RlbSA9IHNNb2RlbQogICAgICAgICAgICBlbmQKICAgICAgICAgICAgcmV0dXJuIHRydWUKICAgICAgICBlbmQKICAgIGVuZAogICAgcHJpbnQoIk5vIG1vZGVtcyBmb3VuZC4iKQogICAgcmV0dXJuIGZhbHNlCmVuZAoKbG9jYWwgZnVuY3Rpb24gY2xvc2VNb2RlbSgpCiAgICBpZiBzT3BlbmVkTW9kZW0gfj0gbmlsIHRoZW4KICAgICAgICByZWRuZXQuY2xvc2Uoc09wZW5lZE1vZGVtKQogICAgICAgIHNPcGVuZWRNb2RlbSA9IG5pbAogICAgZW5kCmVuZAoKLS0gQ29sb3Vycwpsb2NhbCBoaWdobGlnaHRDb2xvdXIsIHRleHRDb2xvdXIKaWYgdGVybS5pc0NvbG91cigpIHRoZW4KICAgIHRleHRDb2xvdXIgPSBjb2xvdXJzLndoaXRlCiAgICBoaWdobGlnaHRDb2xvdXIgPSBjb2xvdXJzLnllbGxvdwplbHNlCiAgICB0ZXh0Q29sb3VyID0gY29sb3Vycy53aGl0ZQogICAgaGlnaGxpZ2h0Q29sb3VyID0gY29sb3Vycy53aGl0ZQplbmQKCmxvY2FsIHNDb21tYW5kID0gdEFyZ3NbMV0KaWYgc0NvbW1hbmQgPT0gImhvc3QiIHRoZW4KICAgIC0tICJjaGF0IGhvc3QiCiAgICAtLSBHZXQgaG9zdG5hbWUKICAgIGxvY2FsIHNIb3N0bmFtZSA9IHRBcmdzWzJdCiAgICBpZiBzSG9zdG5hbWUgPT0gbmlsIHRoZW4KICAgICAgICBwcmludFVzYWdlKCkKICAgICAgICByZXR1cm4KICAgIGVuZAoKICAgIC0tIEhvc3Qgc2VydmVyCiAgICBpZiBub3Qgb3Blbk1vZGVtKCkgdGhlbgogICAgICAgIHJldHVybgogICAgZW5kCiAgICByZWRuZXQuaG9zdCgiY2hhdCIsIHNIb3N0bmFtZSkKICAgIHByaW50KCIwIHVzZXJzIGNvbm5lY3RlZC4iKQoKICAgIGxvY2FsIHRVc2VycyA9IHt9CiAgICBsb2NhbCBuVXNlcnMgPSAwCiAgICBsb2NhbCBmdW5jdGlvbiBzZW5kKHNUZXh0LCBuVXNlcklEKQogICAgICAgIGlmIG5Vc2VySUQgdGhlbgogICAgICAgICAgICBsb2NhbCB0VXNlciA9IHRVc2Vyc1tuVXNlcklEXQogICAgICAgICAgICBpZiB0VXNlciB0aGVuCiAgICAgICAgICAgICAgICByZWRuZXQuc2VuZCh0VXNlci5uSUQsIHsKICAgICAgICAgICAgICAgICAgICBzVHlwZSA9ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICBuVXNlcklEID0gblVzZXJJRCwKICAgICAgICAgICAgICAgICAgICBzVGV4dCA9IHNUZXh0LAogICAgICAgICAgICAgICAgfSwgImNoYXQiKQogICAgICAgICAgICBlbmQKICAgICAgICBlbHNlCiAgICAgICAgICAgIGZvciBuVXNlcklELCB0VXNlciBpbiBwYWlycyh0VXNlcnMpIGRvCiAgICAgICAgICAgICAgICByZWRuZXQuc2VuZCh0VXNlci5uSUQsIHsKICAgICAgICAgICAgICAgICAgICBzVHlwZSA9ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICBuVXNlcklEID0gblVzZXJJRCwKICAgICAgICAgICAgICAgICAgICBzVGV4dCA9IHNUZXh0LAogICAgICAgICAgICAgICAgfSwgImNoYXQiKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAoKICAgIC0tIFNldHVwIHBpbmcgcG9uZwogICAgbG9jYWwgdFBpbmdQb25nVGltZXIgPSB7fQogICAgbG9jYWwgZnVuY3Rpb24gcGluZyhuVXNlcklEKQogICAgICAgIGxvY2FsIHRVc2VyID0gdFVzZXJzW25Vc2VySURdCiAgICAgICAgcmVkbmV0LnNlbmQodFVzZXIubklELCB7CiAgICAgICAgICAgIHNUeXBlID0gInBpbmcgdG8gY2xpZW50IiwKICAgICAgICAgICAgblVzZXJJRCA9IG5Vc2VySUQsCiAgICAgICAgfSwgImNoYXQiKQoKICAgICAgICBsb2NhbCB0aW1lciA9IG9zLnN0YXJ0VGltZXIoMTUpCiAgICAgICAgdFVzZXIuYlBpbmdQb25nZWQgPSBmYWxzZQogICAgICAgIHRQaW5nUG9uZ1RpbWVyW3RpbWVyXSA9IG5Vc2VySUQKICAgIGVuZAoKICAgIGxvY2FsIGZ1bmN0aW9uIHByaW50VXNlcnMoKQogICAgICAgIGxvY2FsIF8sIHkgPSB0ZXJtLmdldEN1cnNvclBvcygpCiAgICAgICAgdGVybS5zZXRDdXJzb3JQb3MoMSwgeSAtIDEpCiAgICAgICAgdGVybS5jbGVhckxpbmUoKQogICAgICAgIGlmIG5Vc2VycyA9PSAxIHRoZW4KICAgICAgICAgICAgcHJpbnQoblVzZXJzIC4uICIgdXNlciBjb25uZWN0ZWQuIikKICAgICAgICBlbHNlCiAgICAgICAgICAgIHByaW50KG5Vc2VycyAuLiAiIHVzZXJzIGNvbm5lY3RlZC4iKQogICAgICAgIGVuZAogICAgZW5kCgogICAgLS0gSGFuZGxlIG1lc3NhZ2VzCiAgICBsb2NhbCBvaywgZXJyb3IgPSBwY2FsbChwYXJhbGxlbC53YWl0Rm9yQW55LAogICAgICAgIGZ1bmN0aW9uKCkKICAgICAgICAgICAgd2hpbGUgdHJ1ZSBkbwogICAgICAgICAgICAgICAgbG9jYWwgXywgdGltZXIgPSBvcy5wdWxsRXZlbnQoInRpbWVyIikKICAgICAgICAgICAgICAgIGxvY2FsIG5Vc2VySUQgPSB0UGluZ1BvbmdUaW1lclt0aW1lcl0KICAgICAgICAgICAgICAgIGlmIG5Vc2VySUQgYW5kIHRVc2Vyc1tuVXNlcklEXSB0aGVuCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgdFVzZXIgPSB0VXNlcnNbblVzZXJJRF0KICAgICAgICAgICAgICAgICAgICBpZiB0VXNlciB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCB0VXNlci5iUGluZ1BvbmdlZCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kKCIqICIgLi4gdFVzZXIuc1VzZXJuYW1lIC4uICIgaGFzIHRpbWVkIG91dCIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0VXNlcnNbblVzZXJJRF0gPSBuaWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5Vc2VycyA9IG5Vc2VycyAtIDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50VXNlcnMoKQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaW5nKG5Vc2VySUQpCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZCwKICAgICAgICBmdW5jdGlvbigpCiAgICAgICAgICAgIHdoaWxlIHRydWUgZG8KICAgICAgICAgICAgICAgIGxvY2FsIHRDb21tYW5kcwogICAgICAgICAgICAgICAgdENvbW1hbmRzID0gewogICAgICAgICAgICAgICAgICAgIFsibWUiXSA9IGZ1bmN0aW9uKHRVc2VyLCBzQ29udGVudCkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgI3NDb250ZW50ID4gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kKCIqICIgLi4gdFVzZXIuc1VzZXJuYW1lIC4uICIgIiAuLiBzQ29udGVudCkKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZCgiKiBVc2FnZTogL21lIFt3b3Jkc10iLCB0VXNlci5uVXNlcklEKQogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQsCiAgICAgICAgICAgICAgICAgICAgWyJuaWNrIl0gPSBmdW5jdGlvbih0VXNlciwgc0NvbnRlbnQpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICNzQ29udGVudCA+IDAgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgc09sZE5hbWUgPSB0VXNlci5zVXNlcm5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRVc2VyLnNVc2VybmFtZSA9IHNDb250ZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kKCIqICIgLi4gc09sZE5hbWUgLi4gIiBpcyBub3cga25vd24gYXMgIiAuLiB0VXNlci5zVXNlcm5hbWUpCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmQoIiogVXNhZ2U6IC9uaWNrIFtuaWNrbmFtZV0iLCB0VXNlci5uVXNlcklEKQogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQsCiAgICAgICAgICAgICAgICAgICAgWyJ1c2VycyJdID0gZnVuY3Rpb24odFVzZXIsIHNDb250ZW50KQogICAgICAgICAgICAgICAgICAgICAgICBzZW5kKCIqIENvbm5lY3RlZCBVc2VyczoiLCB0VXNlci5uVXNlcklEKQogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBzVXNlcnMgPSAiKiIKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIF8sIHRVc2VyIGluIHBhaXJzKHRVc2VycykgZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNVc2VycyA9IHNVc2VycyAuLiAiICIgLi4gdFVzZXIuc1VzZXJuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBzZW5kKHNVc2VycywgdFVzZXIublVzZXJJRCkKICAgICAgICAgICAgICAgICAgICBlbmQsCiAgICAgICAgICAgICAgICAgICAgWyJoZWxwIl0gPSBmdW5jdGlvbih0VXNlciwgc0NvbnRlbnQpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmQoIiogQXZhaWxhYmxlIGNvbW1hbmRzOiIsIHRVc2VyLm5Vc2VySUQpCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIHNDb21tYW5kcyA9ICIqIgogICAgICAgICAgICAgICAgICAgICAgICBmb3Igc0NvbW1hbmQgaW4gcGFpcnModENvbW1hbmRzKSBkbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc0NvbW1hbmRzID0gc0NvbW1hbmRzIC4uICIgLyIgLi4gc0NvbW1hbmQKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmQoc0NvbW1hbmRzIC4uICIgL2xvZ291dCIsIHRVc2VyLm5Vc2VySUQpCiAgICAgICAgICAgICAgICAgICAgZW5kLAogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGxvY2FsIG5TZW5kZXJJRCwgdE1lc3NhZ2UgPSByZWRuZXQucmVjZWl2ZSgiY2hhdCIpCiAgICAgICAgICAgICAgICBpZiB0eXBlKHRNZXNzYWdlKSA9PSAidGFibGUiIHRoZW4KICAgICAgICAgICAgICAgICAgICBpZiB0TWVzc2FnZS5zVHlwZSA9PSAibG9naW4iIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgLS0gTG9naW4gZnJvbSBuZXcgY2xpZW50CiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIG5Vc2VySUQgPSB0TWVzc2FnZS5uVXNlcklECiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIHNVc2VybmFtZSA9IHRNZXNzYWdlLnNVc2VybmFtZQogICAgICAgICAgICAgICAgICAgICAgICBpZiBuVXNlcklEIGFuZCBzVXNlcm5hbWUgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdFVzZXJzW25Vc2VySURdID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5JRCA9IG5TZW5kZXJJRCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuVXNlcklEID0gblVzZXJJRCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzVXNlcm5hbWUgPSBzVXNlcm5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuVXNlcnMgPSBuVXNlcnMgKyAxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludFVzZXJzKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmQoIiogIiAuLiBzVXNlcm5hbWUgLi4gIiBoYXMgam9pbmVkIHRoZSBjaGF0IikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpbmcoblVzZXJJRCkKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgLS0gU29tZXRoaW5nIGVsc2UgZnJvbSBleGlzdGluZyBjbGllbnQKICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgblVzZXJJRCA9IHRNZXNzYWdlLm5Vc2VySUQKICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgdFVzZXIgPSB0VXNlcnNbblVzZXJJRF0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgdFVzZXIgYW5kIHRVc2VyLm5JRCA9PSBuU2VuZGVySUQgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgdE1lc3NhZ2Uuc1R5cGUgPT0gImxvZ291dCIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmQoIiogIiAuLiB0VXNlci5zVXNlcm5hbWUgLi4gIiBoYXMgbGVmdCB0aGUgY2hhdCIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdFVzZXJzW25Vc2VySURdID0gbmlsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgblVzZXJzID0gblVzZXJzIC0gMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50VXNlcnMoKQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VpZiB0TWVzc2FnZS5zVHlwZSA9PSAiY2hhdCIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIHNNZXNzYWdlID0gdE1lc3NhZ2Uuc1RleHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBzTWVzc2FnZSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIHNDb21tYW5kID0gc3RyaW5nLm1hdGNoKHNNZXNzYWdlLCAiXi8oW2Etel0rKSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHNDb21tYW5kIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGZuQ29tbWFuZCA9IHRDb21tYW5kc1tzQ29tbWFuZF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGZuQ29tbWFuZCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgc0NvbnRlbnQgPSBzdHJpbmcuc3ViKHNNZXNzYWdlLCAjc0NvbW1hbmQgKyAzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZuQ29tbWFuZCh0VXNlciwgc0NvbnRlbnQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZCgiKiBVbnJlY29nbmlzZWQgY29tbWFuZDogLyIgLi4gc0NvbW1hbmQsIHRVc2VyLm5Vc2VySUQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZCgiPCIgLi4gdFVzZXIuc1VzZXJuYW1lIC4uICI+ICIgLi4gdE1lc3NhZ2Uuc1RleHQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VpZiB0TWVzc2FnZS5zVHlwZSA9PSAicGluZyB0byBzZXJ2ZXIiIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWRuZXQuc2VuZCh0VXNlci5uSUQsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc1R5cGUgPSAicG9uZyB0byBjbGllbnQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuVXNlcklEID0gblVzZXJJRCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAiY2hhdCIpCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZWlmIHRNZXNzYWdlLnNUeXBlID09ICJwb25nIHRvIHNlcnZlciIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRVc2VyLmJQaW5nUG9uZ2VkID0gdHJ1ZQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICkKICAgIGlmIG5vdCBvayB0aGVuCiAgICAgICAgcHJpbnRFcnJvcihlcnJvcikKICAgIGVuZAoKICAgIC0tIFVuaG9zdCBzZXJ2ZXIKICAgIGZvciBuVXNlcklELCB0VXNlciBpbiBwYWlycyh0VXNlcnMpIGRvCiAgICAgICAgcmVkbmV0LnNlbmQodFVzZXIubklELCB7CiAgICAgICAgICAgIHNUeXBlID0gImtpY2siLAogICAgICAgICAgICBuVXNlcklEID0gblVzZXJJRCwKICAgICAgICB9LCAiY2hhdCIpCiAgICBlbmQKICAgIHJlZG5ldC51bmhvc3QoImNoYXQiKQogICAgY2xvc2VNb2RlbSgpCgplbHNlaWYgc0NvbW1hbmQgPT0gImpvaW4iIHRoZW4KICAgIC0tICJjaGF0IGpvaW4iCiAgICAtLSBHZXQgaG9zdG5hbWUgYW5kIHVzZXJuYW1lCiAgICBsb2NhbCBzSG9zdG5hbWUgPSB0QXJnc1syXQogICAgbG9jYWwgc1VzZXJuYW1lID0gdEFyZ3NbM10KICAgIGlmIHNIb3N0bmFtZSA9PSBuaWwgb3Igc1VzZXJuYW1lID09IG5pbCB0aGVuCiAgICAgICAgcHJpbnRVc2FnZSgpCiAgICAgICAgcmV0dXJuCiAgICBlbmQKCiAgICAtLSBDb25uZWN0CiAgICBpZiBub3Qgb3Blbk1vZGVtKCkgdGhlbgogICAgICAgIHJldHVybgogICAgZW5kCiAgICB3cml0ZSgiTG9va2luZyB1cCAiIC4uIHNIb3N0bmFtZSAuLiAiLi4uICIpCiAgICBsb2NhbCBuSG9zdElEID0gcmVkbmV0Lmxvb2t1cCgiY2hhdCIsIHNIb3N0bmFtZSkKICAgIGlmIG5Ib3N0SUQgPT0gbmlsIHRoZW4KICAgICAgICBwcmludCgiRmFpbGVkLiIpCiAgICAgICAgcmV0dXJuCiAgICBlbHNlCiAgICAgICAgcHJpbnQoIlN1Y2Nlc3MuIikKICAgIGVuZAoKICAgIC0tIExvZ2luCiAgICBsb2NhbCBuVXNlcklEID0gbWF0aC5yYW5kb20oMSwgMjE0NzQ4MzY0NykKICAgIHJlZG5ldC5zZW5kKG5Ib3N0SUQsIHsKICAgICAgICBzVHlwZSA9ICJsb2dpbiIsCiAgICAgICAgblVzZXJJRCA9IG5Vc2VySUQsCiAgICAgICAgc1VzZXJuYW1lID0gc1VzZXJuYW1lLAogICAgfSwgImNoYXQiKQoKICAgIC0tIFNldHVwIHBpbmcgcG9uZwogICAgbG9jYWwgYlBpbmdQb25nZWQgPSB0cnVlCiAgICBsb2NhbCBwaW5nUG9uZ1RpbWVyID0gb3Muc3RhcnRUaW1lcigwKQoKICAgIGxvY2FsIGZ1bmN0aW9uIHBpbmcoKQogICAgICAgIHJlZG5ldC5zZW5kKG5Ib3N0SUQsIHsKICAgICAgICAgICAgc1R5cGUgPSAicGluZyB0byBzZXJ2ZXIiLAogICAgICAgICAgICBuVXNlcklEID0gblVzZXJJRCwKICAgICAgICB9LCAiY2hhdCIpCiAgICAgICAgYlBpbmdQb25nZWQgPSBmYWxzZQogICAgICAgIHBpbmdQb25nVGltZXIgPSBvcy5zdGFydFRpbWVyKDE1KQogICAgZW5kCgogICAgLS0gSGFuZGxlIG1lc3NhZ2VzCiAgICBsb2NhbCB3LCBoID0gdGVybS5nZXRTaXplKCkKICAgIGxvY2FsIHBhcmVudFRlcm0gPSB0ZXJtLmN1cnJlbnQoKQogICAgbG9jYWwgdGl0bGVXaW5kb3cgPSB3aW5kb3cuY3JlYXRlKHBhcmVudFRlcm0sIDEsIDEsIHcsIDEsIHRydWUpCiAgICBsb2NhbCBoaXN0b3J5V2luZG93ID0gd2luZG93LmNyZWF0ZShwYXJlbnRUZXJtLCAxLCAyLCB3LCBoIC0gMiwgdHJ1ZSkKICAgIGxvY2FsIHByb21wdFdpbmRvdyA9IHdpbmRvdy5jcmVhdGUocGFyZW50VGVybSwgMSwgaCwgdywgMSwgdHJ1ZSkKICAgIGhpc3RvcnlXaW5kb3cuc2V0Q3Vyc29yUG9zKDEsIGggLSAyKQoKICAgIHRlcm0uY2xlYXIoKQogICAgdGVybS5zZXRUZXh0Q29sb3VyKHRleHRDb2xvdXIpCiAgICB0ZXJtLnJlZGlyZWN0KHByb21wdFdpbmRvdykKICAgIHByb21wdFdpbmRvdy5yZXN0b3JlQ3Vyc29yKCkKCiAgICBsb2NhbCBmdW5jdGlvbiBkcmF3VGl0bGUoKQogICAgICAgIGxvY2FsIHcgPSB0aXRsZVdpbmRvdy5nZXRTaXplKCkKICAgICAgICBsb2NhbCBzVGl0bGUgPSBzVXNlcm5hbWUgLi4gIiBvbiAiIC4uIHNIb3N0bmFtZQogICAgICAgIHRpdGxlV2luZG93LnNldFRleHRDb2xvdXIoaGlnaGxpZ2h0Q29sb3VyKQogICAgICAgIHRpdGxlV2luZG93LnNldEN1cnNvclBvcyhtYXRoLmZsb29yKHcgLyAyIC0gI3NUaXRsZSAvIDIpLCAxKQogICAgICAgIHRpdGxlV2luZG93LmNsZWFyTGluZSgpCiAgICAgICAgdGl0bGVXaW5kb3cud3JpdGUoc1RpdGxlKQogICAgICAgIHByb21wdFdpbmRvdy5yZXN0b3JlQ3Vyc29yKCkKICAgIGVuZAoKICAgIGxvY2FsIGZ1bmN0aW9uIHByaW50TWVzc2FnZShzTWVzc2FnZSkKICAgICAgICB0ZXJtLnJlZGlyZWN0KGhpc3RvcnlXaW5kb3cpCiAgICAgICAgcHJpbnQoKQogICAgICAgIGlmIHN0cmluZy5tYXRjaChzTWVzc2FnZSwgIl4lKiIpIHRoZW4KICAgICAgICAgICAgLS0gSW5mb3JtYXRpb24KICAgICAgICAgICAgdGVybS5zZXRUZXh0Q29sb3VyKGhpZ2hsaWdodENvbG91cikKICAgICAgICAgICAgd3JpdGUoc01lc3NhZ2UpCiAgICAgICAgICAgIHRlcm0uc2V0VGV4dENvbG91cih0ZXh0Q29sb3VyKQogICAgICAgIGVsc2UKICAgICAgICAgICAgLS0gQ2hhdAogICAgICAgICAgICBsb2NhbCBzVXNlcm5hbWVCaXQgPSBzdHJpbmcubWF0Y2goc01lc3NhZ2UsICJePFtePl0qPiIpCiAgICAgICAgICAgIGlmIHNVc2VybmFtZUJpdCB0aGVuCiAgICAgICAgICAgICAgICB0ZXJtLnNldFRleHRDb2xvdXIoaGlnaGxpZ2h0Q29sb3VyKQogICAgICAgICAgICAgICAgd3JpdGUoc1VzZXJuYW1lQml0KQogICAgICAgICAgICAgICAgdGVybS5zZXRUZXh0Q29sb3VyKHRleHRDb2xvdXIpCiAgICAgICAgICAgICAgICB3cml0ZShzdHJpbmcuc3ViKHNNZXNzYWdlLCAjc1VzZXJuYW1lQml0ICsgMSkpCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHdyaXRlKHNNZXNzYWdlKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgICAgICB0ZXJtLnJlZGlyZWN0KHByb21wdFdpbmRvdykKICAgICAgICBwcm9tcHRXaW5kb3cucmVzdG9yZUN1cnNvcigpCiAgICBlbmQKCiAgICBkcmF3VGl0bGUoKQoKICAgIGxvY2FsIG9rLCBlcnJvciA9IHBjYWxsKHBhcmFsbGVsLndhaXRGb3JBbnksCiAgICAgICAgZnVuY3Rpb24oKQogICAgICAgICAgICB3aGlsZSB0cnVlIGRvCiAgICAgICAgICAgICAgICBsb2NhbCBzRXZlbnQsIHRpbWVyID0gb3MucHVsbEV2ZW50KCkKICAgICAgICAgICAgICAgIGlmIHNFdmVudCA9PSAidGltZXIiIHRoZW4KICAgICAgICAgICAgICAgICAgICBpZiB0aW1lciA9PSBwaW5nUG9uZ1RpbWVyIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IGJQaW5nUG9uZ2VkIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50TWVzc2FnZSgiU2VydmVyIHRpbWVvdXQuIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaW5nKCkKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAgICAgZWxzZWlmIHNFdmVudCA9PSAidGVybV9yZXNpemUiIHRoZW4KICAgICAgICAgICAgICAgICAgICBsb2NhbCB3LCBoID0gcGFyZW50VGVybS5nZXRTaXplKCkKICAgICAgICAgICAgICAgICAgICB0aXRsZVdpbmRvdy5yZXBvc2l0aW9uKDEsIDEsIHcsIDEpCiAgICAgICAgICAgICAgICAgICAgaGlzdG9yeVdpbmRvdy5yZXBvc2l0aW9uKDEsIDIsIHcsIGggLSAyKQogICAgICAgICAgICAgICAgICAgIHByb21wdFdpbmRvdy5yZXBvc2l0aW9uKDEsIGgsIHcsIDEpCgogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZCwKICAgICAgICBmdW5jdGlvbigpCiAgICAgICAgICAgIHdoaWxlIHRydWUgZG8KICAgICAgICAgICAgICAgIGxvY2FsIG5TZW5kZXJJRCwgdE1lc3NhZ2UgPSByZWRuZXQucmVjZWl2ZSgiY2hhdCIpCiAgICAgICAgICAgICAgICBpZiBuU2VuZGVySUQgPT0gbkhvc3RJRCBhbmQgdHlwZSh0TWVzc2FnZSkgPT0gInRhYmxlIiBhbmQgdE1lc3NhZ2UublVzZXJJRCA9PSBuVXNlcklEIHRoZW4KICAgICAgICAgICAgICAgICAgICBpZiB0TWVzc2FnZS5zVHlwZSA9PSAidGV4dCIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBzVGV4dCA9IHRNZXNzYWdlLnNUZXh0CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHNUZXh0IHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50TWVzc2FnZShzVGV4dCkKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAgICAgICAgIGVsc2VpZiB0TWVzc2FnZS5zVHlwZSA9PSAicGluZyB0byBjbGllbnQiIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgcmVkbmV0LnNlbmQoblNlbmRlcklELCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzVHlwZSA9ICJwb25nIHRvIHNlcnZlciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuVXNlcklEID0gblVzZXJJRCwKICAgICAgICAgICAgICAgICAgICAgICAgfSwgImNoYXQiKQoKICAgICAgICAgICAgICAgICAgICBlbHNlaWYgdE1lc3NhZ2Uuc1R5cGUgPT0gInBvbmcgdG8gY2xpZW50IiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGJQaW5nUG9uZ2VkID0gdHJ1ZQoKICAgICAgICAgICAgICAgICAgICBlbHNlaWYgdE1lc3NhZ2Uuc1R5cGUgPT0gImtpY2siIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuCgogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZCwKICAgICAgICBmdW5jdGlvbigpCiAgICAgICAgICAgIGxvY2FsIHRTZW5kSGlzdG9yeSA9IHt9CiAgICAgICAgICAgIHdoaWxlIHRydWUgZG8KICAgICAgICAgICAgICAgIHByb21wdFdpbmRvdy5zZXRDdXJzb3JQb3MoMSwgMSkKICAgICAgICAgICAgICAgIHByb21wdFdpbmRvdy5jbGVhckxpbmUoKQogICAgICAgICAgICAgICAgcHJvbXB0V2luZG93LnNldFRleHRDb2xvcihoaWdobGlnaHRDb2xvdXIpCiAgICAgICAgICAgICAgICBwcm9tcHRXaW5kb3cud3JpdGUoIjogIikKICAgICAgICAgICAgICAgIHByb21wdFdpbmRvdy5zZXRUZXh0Q29sb3IodGV4dENvbG91cikKCiAgICAgICAgICAgICAgICBsb2NhbCBzQ2hhdCA9IHJlYWQobmlsLCB0U2VuZEhpc3RvcnkpCiAgICAgICAgICAgICAgICBpZiBzdHJpbmcubWF0Y2goc0NoYXQsICJeL2xvZ291dCIpIHRoZW4KICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIHJlZG5ldC5zZW5kKG5Ib3N0SUQsIHsKICAgICAgICAgICAgICAgICAgICAgICAgc1R5cGUgPSAiY2hhdCIsCiAgICAgICAgICAgICAgICAgICAgICAgIG5Vc2VySUQgPSBuVXNlcklELAogICAgICAgICAgICAgICAgICAgICAgICBzVGV4dCA9IHNDaGF0LAogICAgICAgICAgICAgICAgICAgIH0sICJjaGF0IikKICAgICAgICAgICAgICAgICAgICB0YWJsZS5pbnNlcnQodFNlbmRIaXN0b3J5LCBzQ2hhdCkKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgICkKCiAgICAtLSBDbG9zZSB0aGUgd2luZG93cwogICAgdGVybS5yZWRpcmVjdChwYXJlbnRUZXJtKQoKICAgIC0tIFByaW50IGVycm9yIG5vdGljZQogICAgbG9jYWwgXywgaCA9IHRlcm0uZ2V0U2l6ZSgpCiAgICB0ZXJtLnNldEN1cnNvclBvcygxLCBoKQogICAgdGVybS5jbGVhckxpbmUoKQogICAgdGVybS5zZXRDdXJzb3JCbGluayhmYWxzZSkKICAgIGlmIG5vdCBvayB0aGVuCiAgICAgICAgcHJpbnRFcnJvcihlcnJvcikKICAgIGVuZAoKICAgIC0tIExvZ291dAogICAgcmVkbmV0LnNlbmQobkhvc3RJRCwgewogICAgICAgIHNUeXBlID0gImxvZ291dCIsCiAgICAgICAgblVzZXJJRCA9IG5Vc2VySUQsCiAgICB9LCAiY2hhdCIpCiAgICBjbG9zZU1vZGVtKCkKCiAgICAtLSBQcmludCBkaXNjb25uZWN0aW9uIG5vdGljZQogICAgcHJpbnQoIkRpc2Nvbm5lY3RlZC4iKQoKZWxzZQogICAgLS0gImNoYXQgc29tZXRoaW5nZWxzZSIKICAgIHByaW50VXNhZ2UoKQoKZW5kCg==";
   Module["FS_createDataFile"]("/craftos/rom/programs/rednet", "chat.lua", decodeBase64(fileData81), true, true, false);
   var fileData82 = "";
   Module["FS_createDataFile"]("/craftos/rom/programs/fun", "worm.lua", decodeBase64(fileData82), true, true, false);
   var fileData83 = "bG9jYWwgdEFyZ3MgPSB7IC4uLiB9Cgpsb2NhbCBmdW5jdGlvbiBwcmludFVzYWdlKCkKICAgIGxvY2FsIHByb2dyYW1OYW1lID0gYXJnWzBdIG9yIGZzLmdldE5hbWUoc2hlbGwuZ2V0UnVubmluZ1Byb2dyYW0oKSkKICAgIHByaW50KCJVc2FnZXM6IikKICAgIHByaW50KHByb2dyYW1OYW1lIC4uICIgcGxheSIpCiAgICBwcmludChwcm9ncmFtTmFtZSAuLiAiIHBsYXkgPGRyaXZlPiIpCiAgICBwcmludChwcm9ncmFtTmFtZSAuLiAiIHN0b3AiKQplbmQKCmlmICN0QXJncyA+IDIgdGhlbgogICAgcHJpbnRVc2FnZSgpCiAgICByZXR1cm4KZW5kCgpsb2NhbCBzQ29tbWFuZCA9IHRBcmdzWzFdCmlmIHNDb21tYW5kID09ICJzdG9wIiB0aGVuCiAgICAtLSBTdG9wIGF1ZGlvCiAgICBkaXNrLnN0b3BBdWRpbygpCgplbHNlaWYgc0NvbW1hbmQgPT0gInBsYXkiIG9yIHNDb21tYW5kID09IG5pbCB0aGVuCiAgICAtLSBQbGF5IGF1ZGlvCiAgICBsb2NhbCBzTmFtZSA9IHRBcmdzWzJdCiAgICBpZiBzTmFtZSA9PSBuaWwgdGhlbgogICAgICAgIC0tIE5vIGRpc2Mgc3BlY2lmaWVkLCBwaWNrIG9uZSBhdCByYW5kb20KICAgICAgICBsb2NhbCB0TmFtZXMgPSB7fQogICAgICAgIGZvciBfLCBzTmFtZSBpbiBpcGFpcnMocGVyaXBoZXJhbC5nZXROYW1lcygpKSBkbwogICAgICAgICAgICBpZiBkaXNrLmlzUHJlc2VudChzTmFtZSkgYW5kIGRpc2suaGFzQXVkaW8oc05hbWUpIHRoZW4KICAgICAgICAgICAgICAgIHRhYmxlLmluc2VydCh0TmFtZXMsIHNOYW1lKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgICAgICBpZiAjdE5hbWVzID09IDAgdGhlbgogICAgICAgICAgICBwcmludCgiTm8gTXVzaWMgRGlzY3MgaW4gYXR0YWNoZWQgZGlzayBkcml2ZXMiKQogICAgICAgICAgICByZXR1cm4KICAgICAgICBlbmQKICAgICAgICBzTmFtZSA9IHROYW1lc1ttYXRoLnJhbmRvbSgxLCAjdE5hbWVzKV0KICAgIGVuZAoKICAgIC0tIFBsYXkgdGhlIGRpc2MKICAgIGlmIGRpc2suaXNQcmVzZW50KHNOYW1lKSBhbmQgZGlzay5oYXNBdWRpbyhzTmFtZSkgdGhlbgogICAgICAgIHByaW50KCJQbGF5aW5nICIgLi4gZGlzay5nZXRBdWRpb1RpdGxlKHNOYW1lKSkKICAgICAgICBkaXNrLnBsYXlBdWRpbyhzTmFtZSkKICAgIGVsc2UKICAgICAgICBwcmludCgiTm8gTXVzaWMgRGlzYyBpbiBkaXNrIGRyaXZlOiAiIC4uIHNOYW1lKQogICAgICAgIHJldHVybgogICAgZW5kCgplbHNlCiAgICBwcmludFVzYWdlKCkKCmVuZAo=";
   Module["FS_createDataFile"]("/craftos/rom/programs/fun", "dj.lua", decodeBase64(fileData83), true, true, false);
   var fileData84 = "";
   Module["FS_createDataFile"]("/craftos/rom/programs/fun", "adventure.lua", decodeBase64(fileData84), true, true, false);
   var fileData85 = "aWYgdGVybS5pc0NvbG91cigpIHRoZW4KICAgIHRlcm0uc2V0VGV4dENvbG91cigyIF4gbWF0aC5yYW5kb20oMCwgMTUpKQplbmQKdGV4dHV0aWxzLnNsb3dQcmludCgiSGVsbG8gV29ybGQhIikKdGVybS5zZXRUZXh0Q29sb3VyKGNvbG91cnMud2hpdGUpCg==";
   Module["FS_createDataFile"]("/craftos/rom/programs/fun", "hello.lua", decodeBase64(fileData85), true, true, false);
   var fileData86 = "";
   Module["FS_createDataFile"]("/craftos/rom/programs/fun/advanced", "paint.lua", decodeBase64(fileData86), true, true, false);
   var fileData87 = "aWYgdGVybS5nZXRHcmFwaGljc01vZGUgPT0gbmlsIHRoZW4gZXJyb3IoIlRoaXMgcmVxdWlyZXMgQ3JhZnRPUy1QQyB2MS4yIG9yIGxhdGVyLiIpIGVuZAoKb3JpZ2Vycm9yID0gZXJyb3IKZXJyb3IgPSBmdW5jdGlvbih0ZXh0LCBsZXZlbCwgLi4uKQogICAgdGVybS5zZXRHcmFwaGljc01vZGUoZmFsc2UpCiAgICBvcmlnZXJyb3IodGV4dCwgbGV2ZWwgKyAxLCAuLi4pCmVuZAoKbG9jYWwgZnVuY3Rpb24gc3VtX3RhYmxlKHRhYjEsIHRhYjIpCiAgICBpZiAjdGFiMSB+PSAjdGFiMiB0aGVuIGVycm9yKCJTaXplIG1pc21hdGNoIiwgMikgZW5kCiAgICBsb2NhbCByZXR2YWwgPSB7fQogICAgZm9yIGssdiBpbiBpcGFpcnModGFiMSkgZG8gcmV0dmFsW2tdID0gdiArIHRhYjJba10gZW5kCiAgICByZXR1cm4gcmV0dmFsCmVuZAoKbG9jYWwgZnVuY3Rpb24gcHJvZF90YWJsZSh0YWIxLCB0YWIyKQogICAgaWYgI3RhYjEgfj0gI3RhYjIgdGhlbiBlcnJvcigiU2l6ZSBtaXNtYXRjaCIsIDIpIGVuZAogICAgbG9jYWwgcmV0dmFsID0ge30KICAgIGZvciBrLHYgaW4gaXBhaXJzKHRhYjEpIGRvIHJldHZhbFtrXSA9IHYgKiB0YWIyW2tdIGVuZAogICAgcmV0dXJuIHJldHZhbAplbmQKCmxvY2FsIGZ1bmN0aW9uIHN1bV9udW1iZXIodGFiMSwgbnVtKQogICAgbG9jYWwgcmV0dmFsID0ge30KICAgIGZvciBrLHYgaW4gaXBhaXJzKHRhYjEpIGRvIHJldHZhbFtrXSA9IHYgKyBudW0gZW5kCiAgICByZXR1cm4gcmV0dmFsCmVuZAoKbG9jYWwgZnVuY3Rpb24gcHJvZF9udW1iZXIodGFiMSwgbnVtKQogICAgbG9jYWwgcmV0dmFsID0ge30KICAgIGZvciBrLHYgaW4gaXBhaXJzKHRhYjEpIGRvIHJldHZhbFtrXSA9IHYgKiBudW0gZW5kCiAgICByZXR1cm4gcmV0dmFsCmVuZAoKbG9jYWwgZnVuY3Rpb24gc3VtX2FsbCh0YWIpCiAgICBsb2NhbCByZXMgPSAwCiAgICBmb3Igayx2IGluIGlwYWlycyh0YWIpIGRvIHJlcyA9IHJlcyArIHYgZW5kCiAgICByZXR1cm4gcmVzCmVuZAoKbG9jYWwgZnVuY3Rpb24gcHJvZF9hbGwodGFiKQogICAgbG9jYWwgcmVzID0gMQogICAgZm9yIGssdiBpbiBpcGFpcnModGFiKSBkbyByZXMgPSByZXMgKiB2IGVuZAogICAgcmV0dXJuIHJlcwplbmQKCmxvY2FsIGZ1bmN0aW9uIHN1bSh0YWIsIGIpCiAgICBpZiB0YWIgPT0gbmlsIHRoZW4gZXJyb3IoInRhYiBpcyBuaWwiLCAyKSBlbmQKICAgIGlmIHR5cGUoYikgPT0gIm51bWJlciIgdGhlbiByZXR1cm4gc3VtX251bWJlcih0YWIsIGIpCiAgICBlbHNlaWYgYiA9PSBuaWwgdGhlbiByZXR1cm4gc3VtX2FsbCh0YWIpCiAgICBlbHNlIHJldHVybiBzdW1fdGFibGUodGFiLCBiKSBlbmQKZW5kCgpsb2NhbCBmdW5jdGlvbiBwcm9kKHRhYiwgYikKICAgIGlmIHRhYiA9PSBuaWwgdGhlbiBlcnJvcigidGFiIGlzIG5pbCIsIDIpIGVuZAogICAgaWYgdHlwZShiKSA9PSAibnVtYmVyIiB0aGVuIHJldHVybiBwcm9kX251bWJlcih0YWIsIGIpCiAgICBlbHNlaWYgYiA9PSBuaWwgdGhlbiByZXR1cm4gcHJvZF9hbGwodGFiKQogICAgZWxzZSByZXR1cm4gcHJvZF90YWJsZSh0YWIsIGIpIGVuZAplbmQKCmxvY2FsIGZ1bmN0aW9uIG5lZyh0YWIpCiAgICBsb2NhbCByZXR2YWwgPSB7fQogICAgZm9yIGssdiBpbiBpcGFpcnModGFiKSBkbyByZXR2YWxba10gPSAwIC0gdiBlbmQKICAgIHJldHVybiByZXR2YWwKZW5kCgpsb2NhbCBmdW5jdGlvbiBpbnYodGFiKQogICAgbG9jYWwgcmV0dmFsID0ge30KICAgIGZvciBrLHYgaW4gaXBhaXJzKHRhYikgZG8gcmV0dmFsW2tdID0gMSAvIHYgZW5kCiAgICByZXR1cm4gcmV0dmFsCmVuZAoKdGVybS5zZXRHcmFwaGljc01vZGUodHJ1ZSkKdGVybS5jbGVhcigpCmcgPSAxCmxpc3QxID0gezEyLCAyNCwgMjMsIDIyLCAyMSwgMjB9CmxvY2FsIGNvbG9ybWFwID0gewogICAgY29sb3JzLmxpZ2h0R3JheSwKICAgIGNvbG9ycy5saWdodEdyYXksIAogICAgY29sb3JzLmxpZ2h0R3JheSwgCiAgICBjb2xvcnMubGlnaHRHcmF5LCAKICAgIGNvbG9ycy5saWdodEdyYXksIAogICAgY29sb3JzLmxpZ2h0R3JheSwgCiAgICBjb2xvcnMubGlnaHRHcmF5LCAKICAgIGNvbG9ycy5saWdodEdyYXksIAogICAgY29sb3JzLmxpZ2h0R3JheSwgCiAgICBjb2xvcnMuYmx1ZSwgCiAgICBjb2xvcnMucmVkLCAKICAgIGNvbG9ycy5ibGFjaywgCiAgICBjb2xvcnMubWFnZW50YSwgCiAgICBjb2xvcnMuZ3JlZW4sIAogICAgY29sb3JzLm9yYW5nZSwgCiAgICBjb2xvcnMuYnJvd24sIAogICAgY29sb3JzLmN5YW4sIAogICAgY29sb3JzLmxpZ2h0Qmx1ZSwgCiAgICBjb2xvcnMueWVsbG93LCAKICAgIGNvbG9ycy53aGl0ZSwgCiAgICBjb2xvcnMubGlnaHRHcmF5LCAKICAgIGNvbG9ycy5saWdodEdyYXksIAogICAgY29sb3JzLmdyYXksIAogICAgY29sb3JzLmdyYXkKfQoKbG9jYWwgd2lkdGgsIGhlaWdodCA9IHRlcm0uZ2V0U2l6ZSh0cnVlKTsKCl9HLnJheWNhc3Rfd2lkdGggPSB3aWR0aApfRy5yYXljYXN0X2hlaWdodCA9IGhlaWdodAoKZm9yIHkgPSAwLCAoaGVpZ2h0IC0gMiksIDIgKiBnIGRvCiAgICBiID0gKChoZWlnaHQgLyAyKSAtIHkpIC8gaGVpZ2h0CiAgICBmb3IgeCA9IDAsICh3aWR0aCAtIDIpLCAyICogZyBkbwogICAgICAgIGEgPSAoeCAtICh3aWR0aCAvIDIpKSAvIGhlaWdodAoKICAgICAgICBlID0gYV4yICsgYl4yICsgMQogICAgICAgIGYgPSAyKmIgLSAxMgogICAgICAgIGggPSAzNC43NQogICAgICAgIGQgPSBmXjIgLSAoNCplKmgpCgogICAgICAgIHQgPSAxIC8gYgogICAgICAgIAogICAgICAgIHUgPSBhICogdAogICAgICAgIHYgPSB0CiAgICAgICAgYyA9IG1hdGguYWJzKG1hdGguZmxvb3IodSkgKyBtYXRoLmZsb29yKHYpKSAlIDIKCiAgICAgICAgbCA9IDEyCiAgICAgICAgbSA9IDEyCiAgICAgICAgYyA9IDEyIC0gKHQgPiAwIGFuZCAxIG9yIDApICogKGMgKyAxKQoKICAgICAgICBpZiBkID49IDAgdGhlbgogICAgICAgICAgICB0ID0gLShmIC0gbWF0aC5zcXJ0KGQpKSAvICgyKmUpCiAgICAgICAgICAgIGkgPSBhKnQKICAgICAgICAgICAgaiA9IC1iKnQgLSAxCiAgICAgICAgICAgIGsgPSA2IC0gdAogICAgICAgICAgICBtID0gaiAvIDIKCiAgICAgICAgICAgIGlmIG0gPiAwIHRoZW4KICAgICAgICAgICAgICAgIG0gPSBtYXRoLmZsb29yKDEwICogbSkKICAgICAgICAgICAgICAgIGwgPSBsaXN0MVsxICsgbWF0aC5mbG9vcihtIC8gMildCiAgICAgICAgICAgICAgICBtID0gbGlzdDFbMSArIG1hdGguZmxvb3IobSAvIDIgKyAuNSldCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIG0gPSAxMgogICAgICAgICAgICBlbmQgCgogICAgICAgICAgICBsaXN0MyA9IHtpIC8gMS41LCBqIC8gMiwgayAvIDEuNX0KICAgICAgICAgICAgbGlzdDIgPSB7LWEsIGIsIDF9CiAgICAgICAgICAgIHMgPSAxMF4zMDguMjUgKiBzdW0ocHJvZChsaXN0MywgbGlzdDIpKQoKICAgICAgICAgICAgbGlzdDQgPSBzdW0ocHJvZChsaXN0MywgcyksIG5lZyhsaXN0MikpCiAgICAgICAgICAgIHAgPSBsaXN0NFsxXQogICAgICAgICAgICBxID0gbGlzdDRbMl0KICAgICAgICAgICAgciA9IGxpc3Q0WzNdCgogICAgICAgICAgICB0ID0gKGogKyAyKSAvIHEKCiAgICAgICAgICAgIGlmIHQgPiAwIHRoZW4KICAgICAgICAgICAgICAgIHUgPSBwKnQgKyBpCiAgICAgICAgICAgICAgICB2ID0gcip0ICsgNiAtIGsKICAgICAgICAgICAgICAgIGMgPSAxMSAtIChtYXRoLmFicyhtYXRoLmZsb29yKHUpICsgbWF0aC5mbG9vcih2KSkgJSAyKQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBjID0gMTIKICAgICAgICAgICAgZW5kCiAgICAgICAgZWxzZQogICAgICAgICAgICBpZiB0ID4gMCB0aGVuCiAgICAgICAgICAgICAgICBlID0gMQogICAgICAgICAgICAgICAgZiA9IDQKICAgICAgICAgICAgICAgIGggPSB1XjIgKyB2XjIgLSAxMip2ICsgMzcuNzUKICAgICAgICAgICAgICAgIGQgPSBmXjIgLSA0KmUqaAogICAgICAgICAgICAgICAgbCA9IDEyKihkID49IDAgYW5kIDEgb3IgMCkgKyBjKihkIDwgMCBhbmQgMSBvciAwKQogICAgICAgICAgICAgICAgbSA9IGwKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCgogICAgICAgIGMgPSBjb2xvcm1hcFtjXSBvciBjb2xvcnMucmVkCiAgICAgICAgbCA9IGNvbG9ybWFwW2xdIG9yIGNvbG9ycy5yZWQKICAgICAgICBtID0gY29sb3JtYXBbbV0gb3IgY29sb3JzLnJlZAoKICAgICAgICBpZiB5ID4gMTI1LzE3MCAqIGhlaWdodCBhbmQgKGMgPT0gY29sb3JzLnJlZCBvciBjID09IGNvbG9ycy5ibHVlKSB0aGVuIGMgPSBjb2xvcnMuYmxhY2sgZW5kCgogICAgICAgIHRlcm0uc2V0UGl4ZWwod2lkdGggLSB4IC0gMSwgaGVpZ2h0IC0geSAtIDEsIGMpCiAgICAgICAgdGVybS5zZXRQaXhlbCh3aWR0aCAtIHggLSAxLCBoZWlnaHQgLSB5IC0gMiwgbCkKICAgICAgICB0ZXJtLnNldFBpeGVsKHdpZHRoIC0geCAtIDIsIGhlaWdodCAtIHkgLSAxLCBtKQogICAgICAgIHRlcm0uc2V0UGl4ZWwod2lkdGggLSB4IC0gMiwgaGVpZ2h0IC0geSAtIDIsIGMpCiAgICBlbmQKZW5kCgpvcy5wdWxsRXZlbnQoImNoYXIiKQpvcy5wdWxsRXZlbnQoImNoYXIiKQp0ZXJtLnNldEdyYXBoaWNzTW9kZShmYWxzZSkKLS1wcmludCh3aWR0aCkKLS1wcmludChoZWlnaHQpCg==";
   Module["FS_createDataFile"]("/craftos/rom/programs/fun/advanced", "raycast.lua", decodeBase64(fileData87), true, true, false);
   var fileData88 = "";
   Module["FS_createDataFile"]("/craftos/rom/programs/fun/advanced", "redirection.lua", decodeBase64(fileData88), true, true, false);
   var fileData89 = "aWYgdGVybS5nZXRHcmFwaGljc01vZGUgPT0gbmlsIHRoZW4gZXJyb3IoIlRoaXMgcmVxdWlyZXMgQ3JhZnRPUy1QQyB2MS4yIG9yIGxhdGVyLiIpIGVuZAoKdGVybS5zZXRHcmFwaGljc01vZGUodHJ1ZSkKZm9yIGkgPSAwLCAxNSBkbwogICAgcGFpbnR1dGlscy5kcmF3RmlsbGVkQm94KGkqNCwgMCwgaSo0KzMsIDMsIGJpdC5ibHNoaWZ0KDEsIGkpKQplbmQKbG9jYWwgYyA9IGNvbG9ycy53aGl0ZQpwYWludHV0aWxzLmRyYXdGaWxsZWRCb3goMzAyLCAwLCAzMDUsIDMsIGMpCndoaWxlIHRydWUgZG8KICAgIGxvY2FsIGV2LCBjaCwgeCwgeSA9IG9zLnB1bGxFdmVudCgpCiAgICBpZiBldiA9PSAibW91c2VfY2xpY2siIG9yIGV2ID09ICJtb3VzZV9kcmFnIiB0aGVuCiAgICAgICAgaWYgeSA8IDQgdGhlbgogICAgICAgICAgICBpZiB4IDwgNjQgdGhlbiBjID0gYml0LmJsc2hpZnQoMSwgbWF0aC5mbG9vcih4IC8gNCkpIGVuZAogICAgICAgICAgICBwYWludHV0aWxzLmRyYXdGaWxsZWRCb3goMzAyLCAwLCAzMDUsIDMsIGMpCiAgICAgICAgZWxzZQogICAgICAgICAgICB0ZXJtLnNldFBpeGVsKHgsIHksIGMpCiAgICAgICAgZW5kCiAgICBlbHNlaWYgZXYgPT0gImNoYXIiIGFuZCBjaCA9PSAicSIgdGhlbiBicmVhayBlbmQKZW5kCnRlcm0uY2xlYXIoKQp0ZXJtLnNldEdyYXBoaWNzTW9kZShmYWxzZSkKdGVybS5zZXRCYWNrZ3JvdW5kQ29sb3IoY29sb3JzLmJsYWNrKQp0ZXJtLnNldFRleHRDb2xvcihjb2xvcnMud2hpdGUpCnRlcm0uY2xlYXIoKQp0ZXJtLnNldEN1cnNvclBvcygxLCAxKQ==";
   Module["FS_createDataFile"]("/craftos/rom/programs/fun/advanced", "gfxpaint.lua", decodeBase64(fileData89), true, true, false);
   var fileData90 = "";
   Module["FS_createDataFile"]("/craftos/rom/programs/fun/advanced", "pngview.lua", decodeBase64(fileData90), true, true, false);
   var fileData91 = "MgogICAgNzc3ICA3NzcKICA3Nzc4Nzc3Nzg3NzcKICA3ODg4Mzg4ODg4ODcKNzc3OGJiYmJiYmJiODc3Nwo3ODg4Yjg4ODg4OGI4ODk3Cjc4NzhiZTg4ODhlYjg3ODcKNzU4OGI4ODg4ODhiODg4Nwo3Nzc4YmJiYmJiYmI4Nzc3CiAgNzg4ODg4ODE4ODg3CiAgNzc3ODc3Nzc4Nzc3CiAgICA3NzcgIDc3Nwo=";
   Module["FS_createDataFile"]("/craftos/rom/programs/fun/advanced/levels", "9.dat", decodeBase64(fileData91), true, true, false);
   var fileData92 = "NAo3Nzc3NzcgNzc3Nwo3Mjg3YjcgNzg2Nwo3ODg3ODcgNzg4Nwo3Nzg3ODc3Nzg3NwogNzg4OGViODg4NwogNzc4Nzc3ODc4NzcKIDc4ODcgNzg3ODg3CiA3NDg3IDdlNzgwNwogNzc3NyA3Nzc3NzcK";
   Module["FS_createDataFile"]("/craftos/rom/programs/fun/advanced/levels", "8.dat", decodeBase64(fileData92), true, true, false);
   var fileData93 = "Ngo3NyAgNzc3ICA3Nwo3Mjg4ODg4ODg5NwogOCAgIDggICA4CiA4IDhiODg4IDgKNzggZTg4ODggODcKNzg4ODg3ODg4ODcKNzggODg4OGUgODcKIDggODg4YjggOAogOCAgIDggICA4Cjc1ODg4ODg4ODA3Cjc3ICA3NzcgIDc3Cg==";
   Module["FS_createDataFile"]("/craftos/rom/programs/fun/advanced/levels", "12.dat", decodeBase64(fileData93), true, true, false);
   var fileData94 = "NQogNzc3ICAgIDc3Nzc3CiA3Mjc3Nzc3Nzg4MzcKIDc4ODg4ODg3ODc4NwogNzg3Nzc3ODg4ODg3Cjc3ODc3Nzc4Nzc3Nzc3CjdlOGI3ODg4Yjg4OGU3Cjc3ODc3ODdiNzc3ODc3CiA3Nzc4ODc4ODc4ODcKICAgNzQ4NzgwNzQ4NwogICA3Nzc3Nzc3Nzc3Cg==";
   Module["FS_createDataFile"]("/craftos/rom/programs/fun/advanced/levels", "10.dat", decodeBase64(fileData94), true, true, false);
   var fileData95 = "NAogICA3Nzc3Nzc3NzcKICAgNzI3ODcyNzg3CiAgIDc4Nzg3ODc4Nwo3Nzc3ODc4Nzg3ODc3NzcKN2JlODg4ODg4ODg4YmU3Cjc3Nzc4Nzg3ODc4Nzc3NwogICA3ODc4Nzg3ODcKICAgNzg3NDc4NzQ3CiAgIDc3Nzc3Nzc3Nwo=";
   Module["FS_createDataFile"]("/craftos/rom/programs/fun/advanced/levels", "11.dat", decodeBase64(fileData95), true, true, false);
   var fileData96 = "MgogIDc3Nzc3Nzc3Cjc3Nzg4ODE4ODc3Nwo3Yjc4Nzc3Nzg3YjcKNzg3ODcgIDc4Nzg3Cjc4Nzg3ICA3ODc4Nwo3ODg4NyAgNzg4ODcKNzc3ODc3Nzc4Nzc3CiAgNzg4Mzg4ODcKICA3Nzc3Nzc3Nwo=";
   Module["FS_createDataFile"]("/craftos/rom/programs/fun/advanced/levels", "3.dat", decodeBase64(fileData96), true, true, false);
   var fileData97 = "MQo3Nzc3Nzc3NzcKNzg4ODg4OGI3Cjc4Nzc3ODg4Nwo3ODcgNzg3NzcKNzg3Nzc4Nwo3ODg4ODg3Cjc3Nzc3ODcKICAgIDcwNwogICAgNzc3Cg==";
   Module["FS_createDataFile"]("/craftos/rom/programs/fun/advanced/levels", "2.dat", decodeBase64(fileData97), true, true, false);
   var fileData98 = "MAo3NyAgICAgNzcKNzE4ODg4ODg3CiA4ICAgICA4CiA4ICAgICA4CiA4ICAgICA4Cjc4ODg4ODg5Nwo3NyAgICAgNzcK";
   Module["FS_createDataFile"]("/craftos/rom/programs/fun/advanced/levels", "0.dat", decodeBase64(fileData98), true, true, false);
   var fileData99 = "MQogICAgIDc3NwogICAgIDdiNwogICAgIDc4Nwo3Nzc3Nzc4Nzc3CjcxODg4ODg4ODcKNzc3Nzc3Nzc3Nwo=";
   Module["FS_createDataFile"]("/craftos/rom/programs/fun/advanced/levels", "1.dat", decodeBase64(fileData99), true, true, false);
   var fileData100 = "Mwo3Nzc3Nzc3NzcKNzg4ODg4ODg3Cjc4Nzc4Nzc4Nwo3ODc3ODc3ODcKNzg4ODg4ODg3Cjc4Nzc4Nzc4Nwo3ODc3ODc3ODcKNzhlNzQ4ODg3Cjc3Nzc3Nzc3Nwo=";
   Module["FS_createDataFile"]("/craftos/rom/programs/fun/advanced/levels", "5.dat", decodeBase64(fileData100), true, true, false);
   var fileData101 = "MgogICAgNzc3Nzc3NzcKNzc3Nzc4ODg4ODg3Cjc4ODg4ODc3Nzc4Nwo3Yjc3Nzg3ICA3ODcKNzg3IDc4NyAgNzg3CjdiNzc3ODcgIDc4Nwo3ODg4ODg3ICA3ODcKNzc3NzcwNyAgNzA3CiAgICA3NzcgIDc3Nwo=";
   Module["FS_createDataFile"]("/craftos/rom/programs/fun/advanced/levels", "4.dat", decodeBase64(fileData101), true, true, false);
   var fileData102 = "NAo3Nzc3Nzc3Nzc3CjcyODg4ODg4MzcKNzggICAgICA4Nwo3ODg4ODhiIDg3Cjc4ODg4OGIgODcKNzg4ODg4YiA4Nwo3ODg4ODhiIDg3Cjc4ICAgICAgODcKNzE4ODg4ODgwNwo3Nzc3Nzc3Nzc3Cg==";
   Module["FS_createDataFile"]("/craftos/rom/programs/fun/advanced/levels", "6.dat", decodeBase64(fileData102), true, true, false);
   var fileData103 = "Mwo3Mjg3Nzc3NzhiNwo3ODg4ODg4ODg4Nwo3ODc3Nzg3Nzc4Nwo3ODcgNzg3IDc4Nwo3ODcgNzg3Nzc4OAo3ODcgNzg4ODg4OQo4ODc3Nzg3Nzc3NwplODg4ODg3Cjc3Nzc4ODcK";
   Module["FS_createDataFile"]("/craftos/rom/programs/fun/advanced/levels", "7.dat", decodeBase64(fileData103), true, true, false);
   var fileData104 = "LS0gZ2lzdC5sdWEgLSBHaXN0IGNsaWVudCBmb3IgQ29tcHV0ZXJDcmFmdAotLSBNYWRlIGJ5IEphY2tNYWNXaW5kb3dzIGZvciBDcmFmdE9TLVBDIGFuZCBDQzogVHdlYWtlZAoKaWYgbm90IGh0dHAgdGhlbgogICAgcHJpbnRFcnJvcigiR2lzdCByZXF1aXJlcyBodHRwIEFQSSIpCiAgICBpZiBfRy5jb25maWcgfj0gbmlsIHRoZW4gcHJpbnRFcnJvcigiU2V0IGh0dHBfZW5hYmxlIHRvIHRydWUgaW4gdGhlIENyYWZ0T1MtUEMgY29uZmlndXJhdGlvbiIpCiAgICBlbHNlIHByaW50RXJyb3IoIlNldCBodHRwX2VuYWJsZSB0byB0cnVlIGluIENvbXB1dGVyQ3JhZnQncyBjb25maWd1cmF0aW9uIikgZW5kCiAgICByZXR1cm4gMgplbmQKCmxvY2FsIGdpc3QgPSByZXF1aXJlICJjYy5odHRwLmdpc3QiCgpsb2NhbCBhcmdzID0geyAuLi4gfQoKbG9jYWwgZnVuY3Rpb24gcmVhZEZpbGUoZmlsZW5hbWUsIGZpbGVzLCBpc0VkaXRpbmcpCiAgICBpZiBmcy5pc0RpcihzaGVsbC5yZXNvbHZlKGZpbGVuYW1lKSkgdGhlbgogICAgICAgIGZvciBfLCB2IGluIGlwYWlycyhmcy5saXN0KHNoZWxsLnJlc29sdmUoZmlsZW5hbWUpKSkgZG8gaWYgcmVhZEZpbGUoZnMuY29tYmluZShmaWxlbmFtZSwgdiksIGZpbGVzLCBpc0VkaXRpbmcpIHRoZW4gcmV0dXJuIHRydWUgZW5kIGVuZAogICAgZWxzZQogICAgICAgIGlmIGZpbGVzW2ZzLmdldE5hbWUoZmlsZW5hbWUpXSB0aGVuIHByaW50KCJDYW5ub3QgdXBsb2FkIGZpbGVzIHdpdGggZHVwbGljYXRlIG5hbWVzLiIpIHJldHVybiB0cnVlIGVuZAogICAgICAgIGxvY2FsIGZpbGUgPSBmcy5vcGVuKHNoZWxsLnJlc29sdmUoZmlsZW5hbWUpLCAicmIiKQogICAgICAgIGlmIGZpbGUgPT0gbmlsIHRoZW4KICAgICAgICAgICAgaWYgbm90IGlzRWRpdGluZyB0aGVuIHByaW50KCJDb3VsZCBub3QgcmVhZCAiIC4uIGZpbGVuYW1lIC4uICIuIikgcmV0dXJuIHRydWUKICAgICAgICAgICAgZWxzZSBmaWxlc1tmcy5nZXROYW1lKGZpbGVuYW1lKV0gPSB0ZXh0dXRpbHMuanNvbl9udWxsIGVuZAogICAgICAgIGVsc2UKICAgICAgICAgICAgZmlsZXNbZnMuZ2V0TmFtZShmaWxlbmFtZSldID0gZmlsZS5yZWFkQWxsKCkKICAgICAgICAgICAgZmlsZS5jbG9zZSgpCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCgpsb2NhbCBmdW5jdGlvbiBnZXRGaWxlcyhpc0VkaXRpbmcpCiAgICBsb2NhbCBmaWxlcyA9IHt9CiAgICBsb2NhbCBpID0gaXNFZGl0aW5nIGFuZCAzIG9yIDIKICAgIHdoaWxlIGFyZ3NbaV0gfj0gbmlsIGFuZCBhcmdzW2ldIH49ICItLSIgZG8KICAgICAgICBpZiByZWFkRmlsZShhcmdzW2ldLCBmaWxlcywgaXNFZGl0aW5nKSB0aGVuIHJldHVybiBuaWwgZW5kCiAgICAgICAgaSA9IGkgKyAxCiAgICBlbmQKICAgIGlmIGFyZ3NbaV0gPT0gIi0tIiB0aGVuIHJldHVybiBmaWxlcywgdGFibGUuY29uY2F0KHsgdGFibGUudW5wYWNrKGFyZ3MsIGkgKyAxKSB9LCAiICIpIGVuZAogICAgcmV0dXJuIGZpbGVzCmVuZAoKbG9jYWwgZnVuY3Rpb24gc2V0VGV4dENvbG9yKGMpIGlmIHRlcm0uaXNDb2xvcigpIHRoZW4gdGVybS5zZXRUZXh0Q29sb3IoYykgZWxzZWlmIGMgPT0gY29sb3JzLndoaXRlIG9yIGMgPT0gY29sb3JzLnllbGxvdyB0aGVuIHRlcm0uc2V0VGV4dENvbG9yKGNvbG9ycy53aGl0ZSkgZWxzZSB0ZXJtLnNldFRleHRDb2xvcihjb2xvcnMubGlnaHRHcmF5KSBlbmQgZW5kCgpsb2NhbCBoZWxwc3RyID0gIlVzYWdlczpcbmdpc3QgcHV0IDxmaWxlcy4uLj4gWy0tIGRlc2NyaXB0aW9uLi4uXVxuZ2lzdCBlZGl0IDxpZD4gPGZpbGVzLi4uPiBbLS0gZGVzY3JpcHRpb25dXG5naXN0IGRlbGV0ZSA8aWQ+XG5naXN0IGdldCA8aWQ+IDxmaWxlbmFtZT5cbmdpc3QgcnVuIDxpZD4gW2FyZ3VtZW50cy4uLl1cbmdpc3QgaW5mbyA8aWQ+IgoKaWYgI2FyZ3MgPCAyIHRoZW4KICAgIHByaW50KGhlbHBzdHIpCiAgICByZXR1cm4gMQplbmQKCmlmIGFyZ3NbMV0gPT0gImdldCIgdGhlbgogICAgaWYgI2FyZ3MgPCAzIHRoZW4gcHJpbnQoaGVscHN0cikgcmV0dXJuIDEgZW5kCiAgICBpZiBhcmdzWzNdOnN1YigjYXJnc1szXSkgPT0gIi8iIG9yIGZzLmlzRGlyKHNoZWxsLnJlc29sdmUoYXJnc1szXSkpIHRoZW4KICAgICAgICBmcy5tYWtlRGlyKHNoZWxsLnJlc29sdmUoYXJnc1szXSkpCiAgICAgICAgbG9jYWwgZmlsZXMsIGVyciA9IGdpc3QuZ2V0QWxsKGFyZ3NbMl0sIHdyaXRlKQogICAgICAgIGlmIGZpbGVzID09IG5pbCB0aGVuIHByaW50RXJyb3IoZXJyKSByZXR1cm4gMyBlbmQKICAgICAgICBmb3IgaywgdiBpbiBwYWlycyhmaWxlcykgZG8KICAgICAgICAgICAgbG9jYWwgZmlsZSA9IGZzLm9wZW4oc2hlbGwucmVzb2x2ZShmcy5jb21iaW5lKGFyZ3NbM10sIGspKSwgIndiIikKICAgICAgICAgICAgZmlsZS53cml0ZSh2KQogICAgICAgICAgICBmaWxlLmNsb3NlKCkKICAgICAgICBlbmQKICAgICAgICBwcmludCgiRG93bmxvYWRlZCBhbGwgZmlsZXMgdG8gIiAuLiBzaGVsbC5yZXNvbHZlKGFyZ3NbM10pKQogICAgZWxzZQogICAgICAgIGxvY2FsIGRhdGEsIGVyciA9IGdpc3QuZ2V0KGFyZ3NbMl0sIHdyaXRlKQogICAgICAgIGlmIGRhdGEgPT0gbmlsIHRoZW4gcHJpbnRFcnJvcihlcnIpIHJldHVybiAzIGVuZAogICAgICAgIGxvY2FsIGZpbGUgPSBmcy5vcGVuKHNoZWxsLnJlc29sdmUoYXJnc1szXSksICJ3YiIpCiAgICAgICAgZmlsZS53cml0ZShkYXRhKQogICAgICAgIGZpbGUuY2xvc2UoKQogICAgICAgIHByaW50KCJEb3dubG9hZGVkIGFzICIgLi4gc2hlbGwucmVzb2x2ZShhcmdzWzNdKSkKICAgIGVuZAplbHNlaWYgYXJnc1sxXSA9PSAicnVuIiB0aGVuCiAgICByZXR1cm4gZ2lzdC5ydW4oYXJnc1syXSwgd3JpdGUsIHRhYmxlLnVucGFjayhhcmdzLCAzKSkKZWxzZWlmIGFyZ3NbMV0gPT0gInB1dCIgdGhlbgogICAgbG9jYWwgZmlsZXMsIGRlc2NyaXB0aW9uID0gZ2V0RmlsZXMoZmFsc2UpCiAgICBpZiBmaWxlcyA9PSBuaWwgdGhlbiByZXR1cm4gZW5kCiAgICBsb2NhbCBpZCwgaHRtbF91cmwgPSBnaXN0LnB1dChmaWxlcywgZGVzY3JpcHRpb24sIG5pbCwgdHJ1ZSkKICAgIGlmIGlkIH49IG5pbCB0aGVuIHByaW50KCJVcGxvYWRlZCBhcyAiIC4uIGh0bWxfdXJsIC4uICJcblJ1biAnZ2lzdCBnZXQgIiAuLiBpZCAuLiAiJyB0byBkb3dubG9hZCBhbnl3aGVyZSIpCiAgICBlbHNlIHByaW50RXJyb3IoaHRtbF91cmwpIHJldHVybiAzIGVuZAplbHNlaWYgYXJnc1sxXSA9PSAiaW5mbyIgdGhlbgogICAgbG9jYWwgdGFiLCBlcnIgPSBnaXN0LmluZm8oYXJnc1syXSwgd3JpdGUpCiAgICBpZiB0YWIgPT0gbmlsIHRoZW4gcHJpbnRFcnJvcihlcnIpIHJldHVybiAzIGVuZAogICAgc2V0VGV4dENvbG9yKGNvbG9ycy55ZWxsb3cpCiAgICB3cml0ZSgiRGVzY3JpcHRpb246ICIpCiAgICBzZXRUZXh0Q29sb3IoY29sb3JzLndoaXRlKQogICAgcHJpbnQodGFiLmRlc2NyaXB0aW9uKQogICAgc2V0VGV4dENvbG9yKGNvbG9ycy55ZWxsb3cpCiAgICB3cml0ZSgiQXV0aG9yOiAiKQogICAgc2V0VGV4dENvbG9yKGNvbG9ycy53aGl0ZSkKICAgIHByaW50KHRhYi5hdXRob3IpCiAgICBzZXRUZXh0Q29sb3IoY29sb3JzLnllbGxvdykKICAgIHdyaXRlKCJSZXZpc2lvbnM6ICIpCiAgICBzZXRUZXh0Q29sb3IoY29sb3JzLndoaXRlKQogICAgcHJpbnQodGFiLnJldmlzaW9uQ291bnQpCiAgICBzZXRUZXh0Q29sb3IoY29sb3JzLnllbGxvdykKICAgIHByaW50KCJGaWxlcyBpbiB0aGlzIEdpc3Q6IikKICAgIHNldFRleHRDb2xvcihjb2xvcnMud2hpdGUpCiAgICB0ZXh0dXRpbHMudGFidWxhdGUodGFiLmZpbGVzKQplbHNlaWYgYXJnc1sxXSA9PSAiZWRpdCIgdGhlbgogICAgaWYgI2FyZ3MgPCAzIHRoZW4gcHJpbnQoaGVscHN0cikgcmV0dXJuIDEgZW5kCiAgICBsb2NhbCBmaWxlcywgZGVzY3JpcHRpb24gPSBnZXRGaWxlcyh0cnVlKQogICAgaWYgZmlsZXMgPT0gbmlsIHRoZW4gcmV0dXJuIDIgZW5kCiAgICBpZiBub3QgZGVzY3JpcHRpb24gdGhlbiBkZXNjcmlwdGlvbiA9IGdpc3QuaW5mbyhhcmdzWzJdLCB3cml0ZSkuZGVzY3JpcHRpb24gZW5kCiAgICBsb2NhbCBpZCwgaHRtbF91cmwgPSBnaXN0LnB1dChmaWxlcywgZGVzY3JpcHRpb24sIGFyZ3NbMl0sIHRydWUpCiAgICBpZiBpZCB0aGVuIHByaW50KCJVcGxvYWRlZCBhcyAiIC4uIGh0bWxfdXJsIC4uICJcblJ1biAnZ2lzdCBnZXQgIiAuLiBhcmdzWzJdIC4uICInIHRvIGRvd25sb2FkIGFueXdoZXJlIikKICAgIGVsc2UgcHJpbnRFcnJvcihodG1sX3VybCkgcmV0dXJuIDMgZW5kCmVsc2VpZiBhcmdzWzFdID09ICJkZWxldGUiIHRoZW4KICAgIGxvY2FsIG9rLCBlcnIgPSBnaXN0LmRlbGV0ZShhcmdzWzJdLCB0cnVlKQogICAgaWYgb2sgdGhlbiBwcmludCgiVGhlIHJlcXVlc3RlZCBHaXN0IGhhcyBiZWVuIGRlbGV0ZWQuIikgZWxzZSBwcmludEVycm9yKGVycikgcmV0dXJuIDMgZW5kCmVsc2UgcHJpbnQoaGVscHN0cikgcmV0dXJuIDEgZW5kCg==";
   Module["FS_createDataFile"]("/craftos/rom/programs/http", "gist.lua", decodeBase64(fileData104), true, true, false);
   var fileData105 = "bG9jYWwgZnVuY3Rpb24gcHJpbnRVc2FnZSgpCiAgICBsb2NhbCBwcm9ncmFtTmFtZSA9IGFyZ1swXSBvciBmcy5nZXROYW1lKHNoZWxsLmdldFJ1bm5pbmdQcm9ncmFtKCkpCiAgICBwcmludCgiVXNhZ2U6IikKICAgIHByaW50KHByb2dyYW1OYW1lIC4uICIgPHVybD4gW2ZpbGVuYW1lXSIpCiAgICBwcmludChwcm9ncmFtTmFtZSAuLiAiIHJ1biA8dXJsPiIpCmVuZAoKbG9jYWwgdEFyZ3MgPSB7IC4uLiB9Cgpsb2NhbCBydW4gPSBmYWxzZQppZiB0QXJnc1sxXSA9PSAicnVuIiB0aGVuCiAgICB0YWJsZS5yZW1vdmUodEFyZ3MsIDEpCiAgICBydW4gPSB0cnVlCmVuZAoKaWYgI3RBcmdzIDwgMSB0aGVuCiAgICBwcmludFVzYWdlKCkKICAgIHJldHVybgplbmQKCmxvY2FsIHVybCA9IHRhYmxlLnJlbW92ZSh0QXJncywgMSkKCmlmIG5vdCBodHRwIHRoZW4KICAgIHByaW50RXJyb3IoIndnZXQgcmVxdWlyZXMgdGhlIGh0dHAgQVBJIikKICAgIHByaW50RXJyb3IoIlNldCBodHRwLmVuYWJsZWQgdG8gdHJ1ZSBpbiBDQzogVHdlYWtlZCdzIGNvbmZpZyIpCiAgICByZXR1cm4KZW5kCgpsb2NhbCBmdW5jdGlvbiBnZXRGaWxlbmFtZShzVXJsKQogICAgc1VybCA9IHNVcmw6Z3N1YigiWyM/XS4qIiAsICIiKTpnc3ViKCIvKyQiICwgIiIpCiAgICByZXR1cm4gc1VybDptYXRjaCgiLyhbXi9dKykkIikKZW5kCgpsb2NhbCBmdW5jdGlvbiBnZXQoc1VybCkKICAgIC0tIENoZWNrIGlmIHRoZSBVUkwgaXMgdmFsaWQKICAgIGxvY2FsIG9rLCBlcnIgPSBodHRwLmNoZWNrVVJMKHVybCkKICAgIGlmIG5vdCBvayB0aGVuCiAgICAgICAgcHJpbnRFcnJvcihlcnIgb3IgIkludmFsaWQgVVJMLiIpCiAgICAgICAgcmV0dXJuCiAgICBlbmQKCiAgICB3cml0ZSgiQ29ubmVjdGluZyB0byAiIC4uIHNVcmwgLi4gIi4uLiAiKQoKICAgIGxvY2FsIHJlc3BvbnNlID0gaHR0cC5nZXQoc1VybCAsIG5pbCAsIHRydWUpCiAgICBpZiBub3QgcmVzcG9uc2UgdGhlbgogICAgICAgIHByaW50KCJGYWlsZWQuIikKICAgICAgICByZXR1cm4gbmlsCiAgICBlbmQKCiAgICBwcmludCgiU3VjY2Vzcy4iKQoKICAgIGxvY2FsIHNSZXNwb25zZSA9IHJlc3BvbnNlLnJlYWRBbGwoKQogICAgcmVzcG9uc2UuY2xvc2UoKQogICAgcmV0dXJuIHNSZXNwb25zZSBvciAiIgplbmQKCmlmIHJ1biB0aGVuCiAgICBsb2NhbCByZXMgPSBnZXQodXJsKQogICAgaWYgbm90IHJlcyB0aGVuIHJldHVybiBlbmQKCiAgICBsb2NhbCBmdW5jLCBlcnIgPSBsb2FkKHJlcywgZ2V0RmlsZW5hbWUodXJsKSwgInQiLCBfRU5WKQogICAgaWYgbm90IGZ1bmMgdGhlbgogICAgICAgIHByaW50RXJyb3IoZXJyKQogICAgICAgIHJldHVybgogICAgZW5kCgogICAgbG9jYWwgb2ssIGVyciA9IHBjYWxsKGZ1bmMsIHRhYmxlLnVucGFjayh0QXJncykpCiAgICBpZiBub3Qgb2sgdGhlbgogICAgICAgIHByaW50RXJyb3IoZXJyKQogICAgZW5kCmVsc2UKICAgIGxvY2FsIHNGaWxlID0gdEFyZ3NbMV0gb3IgZ2V0RmlsZW5hbWUodXJsKSBvciB1cmwKICAgIGxvY2FsIHNQYXRoID0gc2hlbGwucmVzb2x2ZShzRmlsZSkKICAgIGlmIGZzLmV4aXN0cyhzUGF0aCkgdGhlbgogICAgICAgIHByaW50KCJGaWxlIGFscmVhZHkgZXhpc3RzIikKICAgICAgICByZXR1cm4KICAgIGVuZAoKICAgIGxvY2FsIHJlcyA9IGdldCh1cmwpCiAgICBpZiBub3QgcmVzIHRoZW4gcmV0dXJuIGVuZAoKICAgIGxvY2FsIGZpbGUsIGVyciA9IGZzLm9wZW4oc1BhdGgsICJ3YiIpCiAgICBpZiBub3QgZmlsZSB0aGVuCiAgICAgICAgcHJpbnRFcnJvcigiQ2Fubm90IHNhdmUgZmlsZTogIiAuLiBlcnIpCiAgICAgICAgcmV0dXJuCiAgICBlbmQKCiAgICBmaWxlLndyaXRlKHJlcykKICAgIGZpbGUuY2xvc2UoKQoKICAgIHByaW50KCJEb3dubG9hZGVkIGFzICIgLi4gc0ZpbGUpCmVuZAo=";
   Module["FS_createDataFile"]("/craftos/rom/programs/http", "wget.lua", decodeBase64(fileData105), true, true, false);
   var fileData106 = "bG9jYWwgZnVuY3Rpb24gcHJpbnRVc2FnZSgpCiAgICBsb2NhbCBwcm9ncmFtTmFtZSA9IGFyZ1swXSBvciBmcy5nZXROYW1lKHNoZWxsLmdldFJ1bm5pbmdQcm9ncmFtKCkpCiAgICBwcmludCgiVXNhZ2VzOiIpCiAgICBwcmludChwcm9ncmFtTmFtZSAuLiAiIHB1dCA8ZmlsZW5hbWU+IikKICAgIHByaW50KHByb2dyYW1OYW1lIC4uICIgZ2V0IDxjb2RlPiA8ZmlsZW5hbWU+IikKICAgIHByaW50KHByb2dyYW1OYW1lIC4uICIgcnVuIDxjb2RlPiA8YXJndW1lbnRzPiIpCmVuZAoKbG9jYWwgdEFyZ3MgPSB7IC4uLiB9CmlmICN0QXJncyA8IDIgdGhlbgogICAgcHJpbnRVc2FnZSgpCiAgICByZXR1cm4KZW5kCgppZiBub3QgaHR0cCB0aGVuCiAgICBwcmludEVycm9yKCJQYXN0ZWJpbiByZXF1aXJlcyB0aGUgaHR0cCBBUEkiKQogICAgcHJpbnRFcnJvcigiU2V0IGh0dHAuZW5hYmxlZCB0byB0cnVlIGluIENDOiBUd2Vha2VkJ3MgY29uZmlnIikKICAgIHJldHVybgplbmQKCi0tLSBBdHRlbXB0cyB0byBndWVzcyB0aGUgcGFzdGViaW4gSUQgZnJvbSB0aGUgZ2l2ZW4gY29kZSBvciBVUkwKbG9jYWwgZnVuY3Rpb24gZXh0cmFjdElkKHBhc3RlKQogICAgbG9jYWwgcGF0dGVybnMgPSB7CiAgICAgICAgIl4oWyVhJWRdKykkIiwKICAgICAgICAiXmh0dHBzPzovL3Bhc3RlYmluLmNvbS8oWyVhJWRdKykkIiwKICAgICAgICAiXnBhc3RlYmluLmNvbS8oWyVhJWRdKykkIiwKICAgICAgICAiXmh0dHBzPzovL3Bhc3RlYmluLmNvbS9yYXcvKFslYSVkXSspJCIsCiAgICAgICAgIl5wYXN0ZWJpbi5jb20vcmF3LyhbJWElZF0rKSQiLAogICAgfQoKICAgIGZvciBpID0gMSwgI3BhdHRlcm5zIGRvCiAgICAgICAgbG9jYWwgY29kZSA9IHBhc3RlOm1hdGNoKHBhdHRlcm5zW2ldKQogICAgICAgIGlmIGNvZGUgdGhlbiByZXR1cm4gY29kZSBlbmQKICAgIGVuZAoKICAgIHJldHVybiBuaWwKZW5kCgpsb2NhbCBmdW5jdGlvbiBnZXQodXJsKQogICAgbG9jYWwgcGFzdGUgPSBleHRyYWN0SWQodXJsKQogICAgaWYgbm90IHBhc3RlIHRoZW4KICAgICAgICBpby5zdGRlcnI6d3JpdGUoIkludmFsaWQgcGFzdGViaW4gY29kZS5cbiIpCiAgICAgICAgaW8ud3JpdGUoIlRoZSBjb2RlIGlzIHRoZSBJRCBhdCB0aGUgZW5kIG9mIHRoZSBwYXN0ZWJpbi5jb20gVVJMLlxuIikKICAgICAgICByZXR1cm4KICAgIGVuZAoKICAgIHdyaXRlKCJDb25uZWN0aW5nIHRvIHBhc3RlYmluLmNvbS4uLiAiKQogICAgLS0gQWRkIGEgY2FjaGUgYnVzdGVyIHNvIHRoYXQgc3BhbSBwcm90ZWN0aW9uIGlzIHJlLWNoZWNrZWQKICAgIGxvY2FsIGNhY2hlQnVzdGVyID0gKCIleCIpOmZvcm1hdChtYXRoLnJhbmRvbSgwLCAyIF4gMzApKQogICAgbG9jYWwgcmVzcG9uc2UsIGVyciA9IGh0dHAuZ2V0KAogICAgICAgICJodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvIiAuLiB0ZXh0dXRpbHMudXJsRW5jb2RlKHBhc3RlKSAuLiAiP2NiPSIgLi4gY2FjaGVCdXN0ZXIKICAgICkKCiAgICBpZiByZXNwb25zZSB0aGVuCiAgICAgICAgLS0gSWYgc3BhbSBwcm90ZWN0aW9uIGlzIGFjdGl2YXRlZCwgd2UgZ2V0IHJlZGlyZWN0ZWQgdG8gL3Bhc3RlIHdpdGggQ29udGVudC1UeXBlOiB0ZXh0L2h0bWwKICAgICAgICBsb2NhbCBoZWFkZXJzID0gcmVzcG9uc2UuZ2V0UmVzcG9uc2VIZWFkZXJzKCkKICAgICAgICBpZiBub3QgaGVhZGVyc1siQ29udGVudC1UeXBlIl0gb3Igbm90IGhlYWRlcnNbIkNvbnRlbnQtVHlwZSJdOmZpbmQoIl50ZXh0L3BsYWluIikgdGhlbgogICAgICAgICAgICBpby5zdGRlcnI6d3JpdGUoIkZhaWxlZC5cbiIpCiAgICAgICAgICAgIHByaW50KCJQYXN0ZWJpbiBibG9ja2VkIHRoZSBkb3dubG9hZCBkdWUgdG8gc3BhbSBwcm90ZWN0aW9uLiBQbGVhc2UgY29tcGxldGUgdGhlIGNhcHRjaGEgaW4gYSB3ZWIgYnJvd3NlcjogaHR0cHM6Ly9wYXN0ZWJpbi5jb20vIiAuLiB0ZXh0dXRpbHMudXJsRW5jb2RlKHBhc3RlKSkKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgZW5kCgogICAgICAgIHByaW50KCJTdWNjZXNzLiIpCgogICAgICAgIGxvY2FsIHNSZXNwb25zZSA9IHJlc3BvbnNlLnJlYWRBbGwoKQogICAgICAgIHJlc3BvbnNlLmNsb3NlKCkKICAgICAgICByZXR1cm4gc1Jlc3BvbnNlCiAgICBlbHNlCiAgICAgICAgaW8uc3RkZXJyOndyaXRlKCJGYWlsZWQuXG4iKQogICAgICAgIHByaW50KGVycikKICAgIGVuZAplbmQKCmxvY2FsIHNDb21tYW5kID0gdEFyZ3NbMV0KaWYgc0NvbW1hbmQgPT0gInB1dCIgdGhlbgogICAgLS0gVXBsb2FkIGEgZmlsZSB0byBwYXN0ZWJpbi5jb20KICAgIC0tIERldGVybWluZSBmaWxlIHRvIHVwbG9hZAogICAgbG9jYWwgc0ZpbGUgPSB0QXJnc1syXQogICAgbG9jYWwgc1BhdGggPSBzaGVsbC5yZXNvbHZlKHNGaWxlKQogICAgaWYgbm90IGZzLmV4aXN0cyhzUGF0aCkgb3IgZnMuaXNEaXIoc1BhdGgpIHRoZW4KICAgICAgICBwcmludCgiTm8gc3VjaCBmaWxlIikKICAgICAgICByZXR1cm4KICAgIGVuZAoKICAgIC0tIFJlYWQgaW4gdGhlIGZpbGUKICAgIGxvY2FsIHNOYW1lID0gZnMuZ2V0TmFtZShzUGF0aCkKICAgIGxvY2FsIGZpbGUgPSBmcy5vcGVuKHNQYXRoLCAiciIpCiAgICBsb2NhbCBzVGV4dCA9IGZpbGUucmVhZEFsbCgpCiAgICBmaWxlLmNsb3NlKCkKCiAgICAtLSBQT1NUIHRoZSBjb250ZW50cyB0byBwYXN0ZWJpbgogICAgd3JpdGUoIkNvbm5lY3RpbmcgdG8gcGFzdGViaW4uY29tLi4uICIpCiAgICBsb2NhbCBrZXkgPSAiMGVjMmViMjViNjE2NmMwYzI3YTM5NGFlMTE4YWQ4MjkiCiAgICBsb2NhbCByZXNwb25zZSA9IGh0dHAucG9zdCgKICAgICAgICAiaHR0cHM6Ly9wYXN0ZWJpbi5jb20vYXBpL2FwaV9wb3N0LnBocCIsCiAgICAgICAgImFwaV9vcHRpb249cGFzdGUmIiAuLgogICAgICAgICJhcGlfZGV2X2tleT0iIC4uIGtleSAuLiAiJiIgLi4KICAgICAgICAiYXBpX3Bhc3RlX2Zvcm1hdD1sdWEmIiAuLgogICAgICAgICJhcGlfcGFzdGVfbmFtZT0iIC4uIHRleHR1dGlscy51cmxFbmNvZGUoc05hbWUpIC4uICImIiAuLgogICAgICAgICJhcGlfcGFzdGVfY29kZT0iIC4uIHRleHR1dGlscy51cmxFbmNvZGUoc1RleHQpCiAgICApCgogICAgaWYgcmVzcG9uc2UgdGhlbgogICAgICAgIHByaW50KCJTdWNjZXNzLiIpCgogICAgICAgIGxvY2FsIHNSZXNwb25zZSA9IHJlc3BvbnNlLnJlYWRBbGwoKQogICAgICAgIHJlc3BvbnNlLmNsb3NlKCkKCiAgICAgICAgbG9jYWwgc0NvZGUgPSBzdHJpbmcubWF0Y2goc1Jlc3BvbnNlLCAiW14vXSskIikKICAgICAgICBwcmludCgiVXBsb2FkZWQgYXMgIiAuLiBzUmVzcG9uc2UpCiAgICAgICAgcHJpbnQoIlJ1biBcInBhc3RlYmluIGdldCAiIC4uIHNDb2RlIC4uICJcIiB0byBkb3dubG9hZCBhbnl3aGVyZSIpCgogICAgZWxzZQogICAgICAgIHByaW50KCJGYWlsZWQuIikKICAgIGVuZAoKZWxzZWlmIHNDb21tYW5kID09ICJnZXQiIHRoZW4KICAgIC0tIERvd25sb2FkIGEgZmlsZSBmcm9tIHBhc3RlYmluLmNvbQogICAgaWYgI3RBcmdzIDwgMyB0aGVuCiAgICAgICAgcHJpbnRVc2FnZSgpCiAgICAgICAgcmV0dXJuCiAgICBlbmQKCiAgICAtLSBEZXRlcm1pbmUgZmlsZSB0byBkb3dubG9hZAogICAgbG9jYWwgc0NvZGUgPSB0QXJnc1syXQogICAgbG9jYWwgc0ZpbGUgPSB0QXJnc1szXQogICAgbG9jYWwgc1BhdGggPSBzaGVsbC5yZXNvbHZlKHNGaWxlKQogICAgaWYgZnMuZXhpc3RzKHNQYXRoKSB0aGVuCiAgICAgICAgcHJpbnQoIkZpbGUgYWxyZWFkeSBleGlzdHMiKQogICAgICAgIHJldHVybgogICAgZW5kCgogICAgLS0gR0VUIHRoZSBjb250ZW50cyBmcm9tIHBhc3RlYmluCiAgICBsb2NhbCByZXMgPSBnZXQoc0NvZGUpCiAgICBpZiByZXMgdGhlbgogICAgICAgIGxvY2FsIGZpbGUgPSBmcy5vcGVuKHNQYXRoLCAidyIpCiAgICAgICAgZmlsZS53cml0ZShyZXMpCiAgICAgICAgZmlsZS5jbG9zZSgpCgogICAgICAgIHByaW50KCJEb3dubG9hZGVkIGFzICIgLi4gc0ZpbGUpCiAgICBlbmQKZWxzZWlmIHNDb21tYW5kID09ICJydW4iIHRoZW4KICAgIGxvY2FsIHNDb2RlID0gdEFyZ3NbMl0KCiAgICBsb2NhbCByZXMgPSBnZXQoc0NvZGUpCiAgICBpZiByZXMgdGhlbgogICAgICAgIGxvY2FsIGZ1bmMsIGVyciA9IGxvYWQocmVzLCBzQ29kZSwgInQiLCBfRU5WKQogICAgICAgIGlmIG5vdCBmdW5jIHRoZW4KICAgICAgICAgICAgcHJpbnRFcnJvcihlcnIpCiAgICAgICAgICAgIHJldHVybgogICAgICAgIGVuZAogICAgICAgIGxvY2FsIHN1Y2Nlc3MsIG1zZyA9IHBjYWxsKGZ1bmMsIHNlbGVjdCgzLCAuLi4pKQogICAgICAgIGlmIG5vdCBzdWNjZXNzIHRoZW4KICAgICAgICAgICAgcHJpbnRFcnJvcihtc2cpCiAgICAgICAgZW5kCiAgICBlbmQKZWxzZQogICAgcHJpbnRVc2FnZSgpCiAgICByZXR1cm4KZW5kCg==";
   Module["FS_createDataFile"]("/craftos/rom/programs/http", "pastebin.lua", decodeBase64(fileData106), true, true, false);
   var fileData107 = "aWYgbm90IGNvbW1hbmRzIHRoZW4KICAgIHByaW50RXJyb3IoIlJlcXVpcmVzIGEgQ29tbWFuZCBDb21wdXRlci4iKQogICAgcmV0dXJuCmVuZAoKbG9jYWwgdENvbW1hbmRzID0gY29tbWFuZHMubGlzdCgpCnRhYmxlLnNvcnQodENvbW1hbmRzKQoKaWYgdGVybS5pc0NvbG9yKCkgdGhlbgogICAgdGVybS5zZXRUZXh0Q29sb3IoY29sb3JzLmdyZWVuKQplbmQKcHJpbnQoIkF2YWlsYWJsZSBjb21tYW5kczoiKQp0ZXJtLnNldFRleHRDb2xvcihjb2xvcnMud2hpdGUpCgp0ZXh0dXRpbHMucGFnZWRUYWJ1bGF0ZSh0Q29tbWFuZHMpCg==";
   Module["FS_createDataFile"]("/craftos/rom/programs/command", "commands.lua", decodeBase64(fileData107), true, true, false);
   var fileData108 = "bG9jYWwgdEFyZ3MgPSB7IC4uLiB9CmlmIG5vdCBjb21tYW5kcyB0aGVuCiAgICBwcmludEVycm9yKCJSZXF1aXJlcyBhIENvbW1hbmQgQ29tcHV0ZXIuIikKICAgIHJldHVybgplbmQKaWYgI3RBcmdzID09IDAgdGhlbgogICAgbG9jYWwgcHJvZ3JhbU5hbWUgPSBhcmdbMF0gb3IgZnMuZ2V0TmFtZShzaGVsbC5nZXRSdW5uaW5nUHJvZ3JhbSgpKQogICAgcHJpbnRFcnJvcigiVXNhZ2U6ICIgLi4gcHJvZ3JhbU5hbWUgLi4gIiA8Y29tbWFuZD4iKQogICAgcmV0dXJuCmVuZAoKbG9jYWwgZnVuY3Rpb24gcHJpbnRTdWNjZXNzKHRleHQpCiAgICBpZiB0ZXJtLmlzQ29sb3IoKSB0aGVuCiAgICAgICAgdGVybS5zZXRUZXh0Q29sb3IoY29sb3JzLmdyZWVuKQogICAgZW5kCiAgICBwcmludCh0ZXh0KQogICAgdGVybS5zZXRUZXh0Q29sb3IoY29sb3JzLndoaXRlKQplbmQKCmxvY2FsIHNDb21tYW5kID0gc3RyaW5nLmxvd2VyKHRBcmdzWzFdKQpmb3IgbiA9IDIsICN0QXJncyBkbwogICAgc0NvbW1hbmQgPSBzQ29tbWFuZCAuLiAiICIgLi4gdEFyZ3Nbbl0KZW5kCgpsb2NhbCBiUmVzdWx0LCB0T3V0cHV0ID0gY29tbWFuZHMuZXhlYyhzQ29tbWFuZCkKaWYgYlJlc3VsdCB0aGVuCiAgICBwcmludFN1Y2Nlc3MoIlN1Y2Nlc3MiKQogICAgaWYgI3RPdXRwdXQgPiAwIHRoZW4KICAgICAgICBmb3IgbiA9IDEsICN0T3V0cHV0IGRvCiAgICAgICAgICAgIHByaW50KHRPdXRwdXRbbl0pCiAgICAgICAgZW5kCiAgICBlbmQKZWxzZQogICAgcHJpbnRFcnJvcigiRmFpbGVkIikKICAgIGlmICN0T3V0cHV0ID4gMCB0aGVuCiAgICAgICAgZm9yIG4gPSAxLCAjdE91dHB1dCBkbwogICAgICAgICAgICBwcmludCh0T3V0cHV0W25dKQogICAgICAgIGVuZAogICAgZW5kCmVuZAo=";
   Module["FS_createDataFile"]("/craftos/rom/programs/command", "exec.lua", decodeBase64(fileData108), true, true, false);
   var fileData109 = "AAAAAUJ1ZDEAABAAAAAIAAAAEAAAAAQKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAABEAAAABAAAQAABhAG4AZElsb2NibcAYwBvAG0AbQBhAG4AZElsb2NibG9iAAAAEAAAAF4AAAAl////////AAAAAAAHAGMAbwBtAG0AYQBuAGRsZzFTY29tcAAAAAAAAADLAAAABwBjAG8AbQBtAGEAbgBkbW9ERGJsb2IAAAAIAAAAyQbKwkEAAAAHAGMAbwBtAG0AYQBuAGRtb2REYmxvYgAAAAgAAADJBsrCQQAAAAcAYwBvAG0AbQBhAG4AZHBoMVNjb21wAAAAAAAAEAAAAAAEAG0AYQBpAG5JbG9jYmxvYgAAABAAAAEGAAAAJf///////wAAAAAABABtAGEAaQBuYndzcGJsb2IAAAC3YnBsaXN0MDDWAQIDBAUGBwcHBwsHXVNob3dTdGF0dXNCYXJbU2hvd1Rvb2xiYXJbU2hvd1RhYlZpZXdfEBRDb250YWluZXJTaG93U2lkZWJhclxXaW5kb3dCb3VuZHNbU2hvd1NpZGViYXIJCQkJXxAXe3s3NTksIDM0fSwgezc3MCwgNTg5fX0JCBUjLztSX2tsbW5viQAAAAAAAAEBAAAAAAAAAA0AAAAAAAAAAAAAAAAAAACKAAAABABtAGEAaQBubGcxU2NvbXAAAAAAAAEXRgAAAAQAbQBhAGkAbm1vRERibG9iAAAACIL2Xqe1qsNBAAAABABtAGEAaQBubW9kRGJsb2IAAAAIgvZep7Wqw0EAAAAEAG0AYQBpAG5waDFTY29tcAAAAAAAAWAAAAAABABtAGEAaQBudlNybmxvbmcAAAABAAAABgB0AHUAcgB0AGwAZUlsb2NibG9iAAAAEAAAAa4AAAAl////////AAAAAAAGAHQAdQByAHQAbABlbGcxU2NvbXAAAAAAAAAAygAAAAYAdAB1AHIAdABsAGVtb0REYmxvYgAAAAgAAADJBsrCQQAAAAYAdAB1AHIAdABsAGVtb2REYmxvYgAAAAgAAADJBsrCQQAAAAYAdAB1AHIAdABsAGVwaDFTY29tcAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAgsAAABFAAAECggAAAAYAAAAAAAAAAABAAAgAAAAAAEAAEAAAAAAAQAAgAAAAAABAAEAAAAAAAEAAgAAAAAAAQAEAAAAAAABAAgAAAAAAAEAEAAAAAAAAQAgAAAAAAABAEAAAAAAAAEAgAAAAAAAAQEAAAAAAAABAgAAAAAAAAEEAAAAAAAAAQgAAAAAAAABEAAAAAAAAAEg
   Module["FS_createDataFile"]("/craftos/rom/modules", ".DS_Store", decodeBase64(fileData109), true, true, false);
   var fileData110 = "LS1bWwpBbHJpZ2h0IHRoZW4sIGRvbid0IGlnbm9yZSBtZS4gVGhpcyBmaWxlIGlzIHRvIGVuc3VyZSB0aGUgZXhpc3RlbmNlIG9mIHRoZSAibW9kdWxlcy90dXJ0bGUiIGZvbGRlci4KWW91IGNhbiB1c2UgdGhpcyBmb2xkZXIgdG8gYWRkIG1vZHVsZXMgd2hvIGNhbiBiZSBsb2FkZWQgd2l0aCByZXF1aXJlKCkgdG8geW91ciBSZXNvdXJjZXBhY2suCl1dCg==";
   Module["FS_createDataFile"]("/craftos/rom/modules/turtle", ".ignoreme", decodeBase64(fileData110), true, true, false);
   var fileData111 = "LS1bWwpBbHJpZ2h0IHRoZW4sIGRvbid0IGlnbm9yZSBtZS4gVGhpcyBmaWxlIGlzIHRvIGVuc3VyZSB0aGUgZXhpc3RlbmNlIG9mIHRoZSAibW9kdWxlcy9jb21tYW5kIiBmb2xkZXIuCllvdSBjYW4gdXNlIHRoaXMgZm9sZGVyIHRvIGFkZCBtb2R1bGVzIHdobyBjYW4gYmUgbG9hZGVkIHdpdGggcmVxdWlyZSgpIHRvIHlvdXIgUmVzb3VyY2VwYWNrLgpdXQo=";
   Module["FS_createDataFile"]("/craftos/rom/modules/command", ".ignoreme", decodeBase64(fileData111), true, true, false);
   var fileData112 = "AAAAAUJ1ZDEAABAAAAAIAAAAEAAAAAIJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAgAAAABAAAQAABvAHIAZQBtAGVJbgAAAAJAC4AaQBnAG4AbwByAGUAbQBlSWxvY2Jsb2IAAAAQAAAAXgAAACX///////8AAAAAAAIAYwBjSWxvY2Jsb2IAAAAQAAABBgAAACX///////8AAAAAAAIAYwBjYndzcGJsb2IAAAC3YnBsaXN0MDDWAQIDBAUGBwcHBwsHXVNob3dTdGF0dXNCYXJbU2hvd1Rvb2xiYXJbU2hvd1RhYlZpZXdfEBRDb250YWluZXJTaG93U2lkZWJhclxXaW5kb3dCb3VuZHNbU2hvd1NpZGViYXIJCQkJXxAXe3s3NTksIDM0fSwgezc3MCwgNTg5fX0JCBUjLztSX2tsbW5viQAAAAAAAAEBAAAAAAAAAA0AAAAAAAAAAAAAAAAAAACKAAAAAgBjAGNsZzFTY29tcAAAAAAAAP56AAAAAgBjAGNtb0REYmxvYgAAAAikUqb0frLDQQAAAAIAYwBjbW9kRGJsb2IAAAAIpFKm9H6yw0EAAAACAGMAY3BoMVNjb21wAAAAAAABMAAAAAACAGMAY3ZTcm5sb25ngsgAAAAYAAAAAAAAAAABAAAgAAAAAAEAAEAAAAAAAQAAgAAAAAABAAEAAAAAAAEAAgAAAAAAAQAEAAAAAAABAAgAAAAAAAEAEAAAAAAAAQAgAAAAAAABAEAAAAAAAAEAgAAAAAAAAQEAAAAAAAABAgAAAAAAAAEEAAAAAAAAAQgAAAAAAAABEAAAAAAAAAEg
   Module["FS_createDataFile"]("/craftos/rom/modules/main", ".DS_Store", decodeBase64(fileData112), true, true, false);
   var fileData113 = "LS1bWwpBbHJpZ2h0IHRoZW4sIGRvbid0IGlnbm9yZSBtZS4gVGhpcyBmaWxlIGlzIHRvIGVuc3VyZSB0aGUgZXhpc3RlbmNlIG9mIHRoZSAibW9kdWxlcy9tYWluIiBmb2xkZXIuCllvdSBjYW4gdXNlIHRoaXMgZm9sZGVyIHRvIGFkZCBtb2R1bGVzIHdobyBjYW4gYmUgbG9hZGVkIHdpdGggcmVxdWlyZSgpIHRvIHlvdXIgUmVzb3VyY2VwYWNrLgpdXQo=";
   Module["FS_createDataFile"]("/craftos/rom/modules/main", ".ignoreme", decodeBase64(fileData113), true, true, false);
   var fileData114 = "LS1bWy0gUHJvdmlkZXMgYSAicHJldHR5IHByaW50ZXIiLCBmb3IgcmVuZGVyaW5nIGRhdGEgc3RydWN0dXJlcyBpbiBhbgphZXN0aGV0aWNhbGx5IHBsZWFzaW5nIG1hbm5lci4KCkluIG9yZGVyIHRvIGRpc3BsYXkgc29tZXRoaW5nIHVzaW5nIEB7Y2MucHJldHR5fSwgeW91IGJ1aWxkIHVwIGEgc2VyaWVzIG9mCkB7RG9jfGRvY3VtZW50c30uIFRoZXNlIGJlaGF2ZSBhIGxpdHRsZSBiaXQgbGlrZSBzdHJpbmdzOyB5b3UgY2FuIGNvbmNhdGVuYXRlCnRoZW0gdG9nZXRoZXIgYW5kIHRoZW4gcHJpbnQgdGhlbSB0byB0aGUgc2NyZWVuLgoKSG93ZXZlciwgZG9jdW1lbnRzIGFsc28gYWxsb3cgeW91IHRvIGNvbnRyb2wgaG93IHRoZXkgc2hvdWxkIGJlIHByaW50ZWQuIFRoZXJlCmFyZSBzZXZlcmFsIGZ1bmN0aW9ucyAoc3VjaCBhcyBAe25lc3R9IGFuZCBAe2dyb3VwfSkgd2hpY2ggYWxsb3cgeW91IHRvIGNvbnRyb2wKdGhlICJsYXlvdXQiIG9mIHRoZSBkb2N1bWVudC4gV2hlbiB5b3UgY29tZSB0byBkaXNwbGF5IHRoZSBkb2N1bWVudCwgdGhlICdiZXN0JwoobW9zdCBjb21wYWN0KSBsYXlvdXQgaXMgdXNlZC4KClRoZSBzdHJ1Y3R1cmUgb2YgdGhpcyBtb2R1bGUgaXMgYmFzZWQgb24gW0EgUHJldHRpZXIgUHJpbnRlcl1bcHJldHRpZXJdLgoKW3ByZXR0aWVyXTogaHR0cHM6Ly9ob21lcGFnZXMuaW5mLmVkLmFjLnVrL3dhZGxlci9wYXBlcnMvcHJldHRpZXIvcHJldHRpZXIucGRmICJBIFByZXR0aWVyIFByaW50ZXIiCgpAbW9kdWxlIGNjLnByZXR0eQpAc2luY2UgMS44Ny4wCkB1c2FnZSBQcmludCBhIHRhYmxlIHRvIHRoZSB0ZXJtaW5hbAoKICAgIGxvY2FsIHByZXR0eSA9IHJlcXVpcmUgImNjLnByZXR0eSIKICAgIHByZXR0eS5wcmV0dHlfcHJpbnQoeyAxLCAyLCAzIH0pCgpAdXNhZ2UgQnVpbGQgYSBjdXN0b20gZG9jdW1lbnQgYW5kIGRpc3BsYXkgaXQKCiAgICBsb2NhbCBwcmV0dHkgPSByZXF1aXJlICJjYy5wcmV0dHkiCiAgICBwcmV0dHkucHJpbnQocHJldHR5Lmdyb3VwKHByZXR0eS50ZXh0KCJoZWxsbyIpIC4uIHByZXR0eS5zcGFjZV9saW5lIC4uIHByZXR0eS50ZXh0KCJ3b3JsZCIpKSkKXV0KCmxvY2FsIGV4cGVjdCA9IHJlcXVpcmUgImNjLmV4cGVjdCIKbG9jYWwgZXhwZWN0LCBmaWVsZCA9IGV4cGVjdC5leHBlY3QsIGV4cGVjdC5maWVsZAoKbG9jYWwgdHlwZSwgZ2V0bWV0YXRhYmxlLCBzZXRtZXRhdGFibGUsIGNvbG91cnMsIHN0cl93cml0ZSwgdG9zdHJpbmcgPSB0eXBlLCBnZXRtZXRhdGFibGUsIHNldG1ldGF0YWJsZSwgY29sb3Vycywgd3JpdGUsIHRvc3RyaW5nCmxvY2FsIGRlYnVnX2luZm8sIGRlYnVnX2xvY2FsID0gZGVidWcuZ2V0aW5mbywgZGVidWcuZ2V0bG9jYWwKCi0tLSBAe3RhYmxlLmluc2VydH0gYWx0ZXJuYXRpdmUsIGJ1dCB3aXRoIHRoZSBsZW5ndGggc3RvcmVkIGlubGluZS4KbG9jYWwgZnVuY3Rpb24gYXBwZW5kKG91dCwgdmFsdWUpCiAgICBsb2NhbCBuID0gb3V0Lm4gKyAxCiAgICBvdXRbbl0sIG91dC5uID0gdmFsdWUsIG4KZW5kCgotLS0gQSBkb2N1bWVudCBjb250YWluaW5nIGZvcm1hdHRlZCB0ZXh0LCB3aXRoIG11bHRpcGxlIHBvc3NpYmxlIGxheW91dHMuCi0tCi0tIERvY3VtZW50cyBlZmZlY3RpdmVseSByZXByZXNlbnQgYSBzZXF1ZW5jZSBvZiBzdHJpbmdzIGluIGFsdGVybmF0aXZlIGxheW91dHMsCi0tIHdoaWNoIHdlIHdpbGwgdHJ5IHRvIHByaW50IGluIHRoZSBtb3N0IGNvbXBhY3QgZm9ybSBuZWNlc3NhcnkuCi0tCi0tIEB0eXBlIERvYwpsb2NhbCBEb2MgPSB7IH0KCmxvY2FsIGZ1bmN0aW9uIG1rX2RvYyh0YmwpIHJldHVybiBzZXRtZXRhdGFibGUodGJsLCBEb2MpIGVuZAoKLS0tIEFuIGVtcHR5IGRvY3VtZW50Lgpsb2NhbCBlbXB0eSA9IG1rX2RvYyh7IHRhZyA9ICJuaWwiIH0pCgotLS0gQSBkb2N1bWVudCB3aXRoIGEgc2luZ2xlIHNwYWNlIGluIGl0Lgpsb2NhbCBzcGFjZSA9IG1rX2RvYyh7IHRhZyA9ICJ0ZXh0IiwgdGV4dCA9ICIgIiB9KQoKLS0tIEEgbGluZSBicmVhay4gV2hlbiBjb2xsYXBzZWQgd2l0aCBAe2dyb3VwfSwgdGhpcyB3aWxsIGJlIHJlcGxhY2VkIHdpdGggQHtlbXB0eX0uCmxvY2FsIGxpbmUgPSBta19kb2MoeyB0YWcgPSAibGluZSIsIGZsYXQgPSBlbXB0eSB9KQoKLS0tIEEgbGluZSBicmVhay4gV2hlbiBjb2xsYXBzZWQgd2l0aCBAe2dyb3VwfSwgdGhpcyB3aWxsIGJlIHJlcGxhY2VkIHdpdGggQHtzcGFjZX0uCmxvY2FsIHNwYWNlX2xpbmUgPSBta19kb2MoeyB0YWcgPSAibGluZSIsIGZsYXQgPSBzcGFjZSB9KQoKbG9jYWwgdGV4dF9jYWNoZSA9IHsgWyIiXSA9IGVtcHR5LCBbIiAiXSA9IHNwYWNlLCBbIlxuIl0gPSBzcGFjZV9saW5lIH0KCmxvY2FsIGZ1bmN0aW9uIG1rX3RleHQodGV4dCwgY29sb3VyKQogICAgcmV0dXJuIHRleHRfY2FjaGVbdGV4dF0gb3Igc2V0bWV0YXRhYmxlKHsgdGFnID0gInRleHQiLCB0ZXh0ID0gdGV4dCwgY29sb3VyID0gY29sb3VyIH0sIERvYykKZW5kCgotLS0gQ3JlYXRlIGEgbmV3IGRvY3VtZW50IGZyb20gYSBzdHJpbmcuCi0tCi0tIElmIHlvdXIgc3RyaW5nIGNvbnRhaW5zIG11bHRpcGxlIGxpbmVzLCBAe2dyb3VwfSB3aWxsIGZsYXR0ZW4gdGhlIHN0cmluZwotLSBpbnRvIGEgc2luZ2xlIGxpbmUsIHdpdGggc3BhY2VzIGJldHdlZW4gZWFjaCBsaW5lLgotLQotLSBAdHBhcmFtICAgICAgc3RyaW5nIHRleHQgICBUaGUgc3RyaW5nIHRvIGNvbnN0cnVjdCBhIG5ldyBkb2N1bWVudCB3aXRoLgotLSBAdHBhcmFtW29wdF0gbnVtYmVyIGNvbG91ciBUaGUgY29sb3VyIHRoaXMgdGV4dCBzaG91bGQgYmUgcHJpbnRlZCB3aXRoLiBJZiBub3QgZ2l2ZW4sIHdlIGRlZmF1bHQgdG8gdGhlIGN1cnJlbnQKLS0gY29sb3VyLgotLSBAdHJldHVybiBEb2MgVGhlIGRvY3VtZW50IHdpdGggdGhlIHByb3ZpZGVkIHRleHQuCi0tIEB1c2FnZSBXcml0ZSBzb21lIGJsdWUgdGV4dC4KLS0KLS0gICAgIGxvY2FsIHByZXR0eSA9IHJlcXVpcmUgImNjLnByZXR0eSIKLS0gICAgIHByZXR0eS5wcmludChwcmV0dHkudGV4dCgiSGVsbG8hIiwgY29sb3Vycy5ibHVlKSkKbG9jYWwgZnVuY3Rpb24gdGV4dCh0ZXh0LCBjb2xvdXIpCiAgICBleHBlY3QoMSwgdGV4dCwgInN0cmluZyIpCiAgICBleHBlY3QoMiwgY29sb3VyLCAibnVtYmVyIiwgIm5pbCIpCgogICAgbG9jYWwgY2FjaGVkID0gdGV4dF9jYWNoZVt0ZXh0XQogICAgaWYgY2FjaGVkIHRoZW4gcmV0dXJuIGNhY2hlZCBlbmQKCiAgICBsb2NhbCBuZXdfbGluZSA9IHRleHQ6ZmluZCgiXG4iLCAxKQogICAgaWYgbm90IG5ld19saW5lIHRoZW4gcmV0dXJuIG1rX3RleHQodGV4dCwgY29sb3VyKSBlbmQKCiAgICAtLSBTcGxpdCB0aGUgc3RyaW5nIGJ5ICJcbiIuIFdpdGggYSBtaWNyby1vcHRpbWlzYXRpb24gdG8gc2tpcCBlbXB0eSBzdHJpbmdzLgogICAgbG9jYWwgZG9jID0gc2V0bWV0YXRhYmxlKHsgdGFnID0gImNvbmNhdCIsIG4gPSAwIH0sIERvYykKICAgIGlmIG5ld19saW5lIH49IDEgdGhlbiBhcHBlbmQoZG9jLCBta190ZXh0KHRleHQ6c3ViKDEsIG5ld19saW5lIC0gMSksIGNvbG91cikpIGVuZAoKICAgIG5ld19saW5lID0gbmV3X2xpbmUgKyAxCiAgICB3aGlsZSB0cnVlIGRvCiAgICAgICAgbG9jYWwgbmV4dF9saW5lID0gdGV4dDpmaW5kKCJcbiIsIG5ld19saW5lKQogICAgICAgIGFwcGVuZChkb2MsIHNwYWNlX2xpbmUpCiAgICAgICAgaWYgbm90IG5leHRfbGluZSB0aGVuCiAgICAgICAgICAgIGlmIG5ld19saW5lIDw9ICN0ZXh0IHRoZW4gYXBwZW5kKGRvYywgbWtfdGV4dCh0ZXh0OnN1YihuZXdfbGluZSksIGNvbG91cikpIGVuZAogICAgICAgICAgICByZXR1cm4gZG9jCiAgICAgICAgZWxzZQogICAgICAgICAgICBpZiBuZXdfbGluZSA8PSBuZXh0X2xpbmUgLSAxIHRoZW4KICAgICAgICAgICAgICAgIGFwcGVuZChkb2MsIG1rX3RleHQodGV4dDpzdWIobmV3X2xpbmUsIG5leHRfbGluZSAtIDEpLCBjb2xvdXIpKQogICAgICAgICAgICBlbmQKICAgICAgICAgICAgbmV3X2xpbmUgPSBuZXh0X2xpbmUgKyAxCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCgotLS0gQ29uY2F0ZW5hdGUgc2V2ZXJhbCBkb2N1bWVudHMgdG9nZXRoZXIuIFRoaXMgYmVoYXZlcyB2ZXJ5IHNpbWlsYXIgdG8gc3RyaW5nIGNvbmNhdGVuYXRpb24uCi0tCi0tIEB0cGFyYW0gRG9jfHN0cmluZyAuLi4gVGhlIGRvY3VtZW50cyB0byBjb25jYXRlbmF0ZS4KLS0gQHRyZXR1cm4gRG9jIFRoZSBjb25jYXRlbmF0ZWQgZG9jdW1lbnRzLgotLSBAdXNhZ2UKLS0gICAgIGxvY2FsIHByZXR0eSA9IHJlcXVpcmUgImNjLnByZXR0eSIKLS0gICAgIGxvY2FsIGRvYzEsIGRvYzIgPSBwcmV0dHkudGV4dCgiZG9jMSIpLCBwcmV0dHkudGV4dCgiZG9jMiIpCi0tICAgICBwcmludChwcmV0dHkuY29uY2F0KGRvYzEsICIgLSAiLCBkb2MyKSkKLS0gICAgIHByaW50KGRvYzEgLi4gIiAtICIgLi4gZG9jMikgLS0gQWxzbyBzdXBwb3J0cyAuLgpsb2NhbCBmdW5jdGlvbiBjb25jYXQoLi4uKQogICAgbG9jYWwgYXJncyA9IHRhYmxlLnBhY2soLi4uKQogICAgZm9yIGkgPSAxLCBhcmdzLm4gZG8KICAgICAgICBpZiB0eXBlKGFyZ3NbaV0pID09ICJzdHJpbmciIHRoZW4gYXJnc1tpXSA9IHRleHQoYXJnc1tpXSkgZW5kCiAgICAgICAgaWYgZ2V0bWV0YXRhYmxlKGFyZ3NbaV0pIH49IERvYyB0aGVuIGV4cGVjdChpLCBhcmdzW2ldLCAiZG9jdW1lbnQiKSBlbmQKICAgIGVuZAoKICAgIGlmIGFyZ3MubiA9PSAwIHRoZW4gcmV0dXJuIGVtcHR5IGVuZAogICAgaWYgYXJncy5uID09IDEgdGhlbiByZXR1cm4gYXJnc1sxXSBlbmQKCiAgICBhcmdzLnRhZyA9ICJjb25jYXQiCiAgICByZXR1cm4gc2V0bWV0YXRhYmxlKGFyZ3MsIERvYykKZW5kCgpEb2MuX19jb25jYXQgPSBjb25jYXQgLS0tIEBsb2NhbAoKLS0tIEluZGVudCBsYXRlciBsaW5lcyBvZiB0aGUgZ2l2ZW4gZG9jdW1lbnQgd2l0aCB0aGUgZ2l2ZW4gbnVtYmVyIG9mIHNwYWNlcy4KLS0KLS0gRm9yIGluc3RhbmNlLCBuZXN0aW5nIHRoZSBkb2N1bWVudAotLSBgYGB0eHQKLS0gZm9vCi0tIGJhcgotLSBgYGAKLS0gYnkgdHdvIHNwYWNlcyB3aWxsIHByb2R1Y2UKLS0gYGBgdHh0Ci0tIGZvbwotLSAgIGJhcgotLSBgYGAKLS0KLS0gQHRwYXJhbSBudW1iZXIgZGVwdGggVGhlIG51bWJlciBvZiBzcGFjZXMgd2l0aCB3aGljaCB0aGUgZG9jdW1lbnQgc2hvdWxkIGJlIGluZGVudGVkLgotLSBAdHBhcmFtIERvYyAgICBkb2MgICBUaGUgZG9jdW1lbnQgdG8gaW5kZW50LgotLSBAdHJldHVybiBEb2MgVGhlIG5lc3RlZCBkb2N1bWVudC4KLS0gQHVzYWdlCi0tICAgICBsb2NhbCBwcmV0dHkgPSByZXF1aXJlICJjYy5wcmV0dHkiCi0tICAgICBwcmludChwcmV0dHkubmVzdCgyLCBwcmV0dHkudGV4dCgiZm9vXG5iYXIiKSkpCmxvY2FsIGZ1bmN0aW9uIG5lc3QoZGVwdGgsIGRvYykKICAgIGV4cGVjdCgxLCBkZXB0aCwgIm51bWJlciIpCiAgICBpZiBnZXRtZXRhdGFibGUoZG9jKSB+PSBEb2MgdGhlbiBleHBlY3QoMiwgZG9jLCAiZG9jdW1lbnQiKSBlbmQKICAgIGlmIGRlcHRoIDw9IDAgdGhlbiBlcnJvcigiZGVwdGggbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlciIsIDIpIGVuZAoKICAgIHJldHVybiBzZXRtZXRhdGFibGUoeyB0YWcgPSAibmVzdCIsIGRlcHRoID0gZGVwdGgsIGRvYyB9LCBEb2MpCmVuZAoKbG9jYWwgZnVuY3Rpb24gZmxhdHRlbihkb2MpCiAgICBpZiBkb2MuZmxhdCB0aGVuIHJldHVybiBkb2MuZmxhdCBlbmQKCiAgICBsb2NhbCBraW5kID0gZG9jLnRhZwogICAgaWYga2luZCA9PSAibmlsIiBvciBraW5kID09ICJ0ZXh0IiB0aGVuCiAgICAgICAgcmV0dXJuIGRvYwogICAgZWxzZWlmIGtpbmQgPT0gImNvbmNhdCIgdGhlbgogICAgICAgIGxvY2FsIG91dCA9IHNldG1ldGF0YWJsZSh7IHRhZyA9ICJjb25jYXQiLCBuID0gZG9jLm4gfSwgRG9jKQogICAgICAgIGZvciBpID0gMSwgZG9jLm4gZG8gb3V0W2ldID0gZmxhdHRlbihkb2NbaV0pIGVuZAogICAgICAgIGRvYy5mbGF0LCBvdXQuZmxhdCA9IG91dCwgb3V0IC0tIGNhY2hlIHRoZSBmbGF0dGVuZWQgbm9kZQogICAgICAgIHJldHVybiBvdXQKICAgIGVsc2VpZiBraW5kID09ICJuZXN0IiB0aGVuCiAgICAgICAgcmV0dXJuIGZsYXR0ZW4oZG9jWzFdKQogICAgZWxzZWlmIGtpbmQgPT0gImdyb3VwIiB0aGVuCiAgICAgICAgcmV0dXJuIGRvY1sxXQogICAgZWxzZQogICAgICAgIGVycm9yKCJVbmtub3duIGRvYyAiIC4uIGtpbmQpCiAgICBlbmQKZW5kCgotLS0gQnVpbGRzIGEgZG9jdW1lbnQgd2hpY2ggaXMgZGlzcGxheWVkIG9uIGEgc2luZ2xlIGxpbmUgaWYgdGhlcmUgaXMgZW5vdWdoCi0tIHJvb20sIG9yIGFzIG5vcm1hbCBpZiBub3QuCi0tCi0tIEB0cGFyYW0gRG9jIGRvYyBUaGUgZG9jdW1lbnQgdG8gZ3JvdXAuCi0tIEB0cmV0dXJuIERvYyBUaGUgZ3JvdXBlZCBkb2N1bWVudC4KLS0gQHVzYWdlIFVzZXMgZ3JvdXAgdG8gc2hvdyB0aGluZ3MgYmVpbmcgZGlzcGxheWVkIG9uIG9uZSBvciBtdWx0aXBsZSBsaW5lcy4KLS0KLS0gICAgIGxvY2FsIHByZXR0eSA9IHJlcXVpcmUgImNjLnByZXR0eSIKLS0gICAgIGxvY2FsIGRvYyA9IHByZXR0eS5ncm91cCgiSGVsbG8iIC4uIHByZXR0eS5zcGFjZV9saW5lIC4uICJXb3JsZCIpCi0tICAgICBwcmludChwcmV0dHkucmVuZGVyKGRvYywgNSkpIC0tIE9uIG11bHRpcGxlIGxpbmVzCi0tICAgICBwcmludChwcmV0dHkucmVuZGVyKGRvYywgMjApKSAtLSBDb2xsYXBzZWQgb250byBvbmUuCmxvY2FsIGZ1bmN0aW9uIGdyb3VwKGRvYykKICAgIGlmIGdldG1ldGF0YWJsZShkb2MpIH49IERvYyB0aGVuIGV4cGVjdCgxLCBkb2MsICJkb2N1bWVudCIpIGVuZAoKICAgIGlmIGRvYy50YWcgPT0gImdyb3VwIiB0aGVuIHJldHVybiBkb2MgZW5kIC0tIFNraXAgaWYgYWxyZWFkeSBncm91cGVkLgoKICAgIGxvY2FsIGZsYXR0ZW5lZCA9IGZsYXR0ZW4oZG9jKQogICAgaWYgZmxhdHRlbmVkID09IGRvYyB0aGVuIHJldHVybiBkb2MgZW5kIC0tIEFsc28gc2tpcCBpZiBmbGF0dGVuaW5nIGRvZXMgbm90aGluZy4KICAgIHJldHVybiBzZXRtZXRhdGFibGUoeyB0YWcgPSAiZ3JvdXAiLCBmbGF0dGVuZWQsIGRvYyB9LCBEb2MpCmVuZAoKbG9jYWwgZnVuY3Rpb24gZ2V0X3JlbWFpbmluZyhkb2MsIHdpZHRoKQogICAgbG9jYWwga2luZCA9IGRvYy50YWcKICAgIGlmIGtpbmQgPT0gIm5pbCIgb3Iga2luZCA9PSAibGluZSIgdGhlbgogICAgICAgIHJldHVybiB3aWR0aAogICAgZWxzZWlmIGtpbmQgPT0gInRleHQiIHRoZW4KICAgICAgICByZXR1cm4gd2lkdGggLSAjZG9jLnRleHQKICAgIGVsc2VpZiBraW5kID09ICJjb25jYXQiIHRoZW4KICAgICAgICBmb3IgaSA9IDEsIGRvYy5uIGRvCiAgICAgICAgICAgIHdpZHRoID0gZ2V0X3JlbWFpbmluZyhkb2NbaV0sIHdpZHRoKQogICAgICAgICAgICBpZiB3aWR0aCA8IDAgdGhlbiBicmVhayBlbmQKICAgICAgICBlbmQKICAgICAgICByZXR1cm4gd2lkdGgKICAgIGVsc2VpZiBraW5kID09ICJncm91cCIgb3Iga2luZCA9PSAibmVzdCIgdGhlbgogICAgICAgIHJldHVybiBnZXRfcmVtYWluaW5nKGtpbmRbMV0pCiAgICBlbHNlCiAgICAgICAgZXJyb3IoIlVua25vd24gZG9jICIgLi4ga2luZCkKICAgIGVuZAplbmQKCi0tLSBEaXNwbGF5IGEgZG9jdW1lbnQgb24gdGhlIHRlcm1pbmFsLgotLQotLSBAdHBhcmFtICAgICAgRG9jICAgICBkb2MgICAgICAgICBUaGUgZG9jdW1lbnQgdG8gcmVuZGVyCi0tIEB0cGFyYW1bb3B0XSBudW1iZXIgIHJpYmJvbl9mcmFjIFRoZSBtYXhpbXVtIGZyYWN0aW9uIG9mIHRoZSB3aWR0aCB0aGF0IHdlIHNob3VsZCB3cml0ZSBpbi4KbG9jYWwgZnVuY3Rpb24gd3JpdGUoZG9jLCByaWJib25fZnJhYykKICAgIGlmIGdldG1ldGF0YWJsZShkb2MpIH49IERvYyB0aGVuIGV4cGVjdCgxLCBkb2MsICJkb2N1bWVudCIpIGVuZAogICAgZXhwZWN0KDIsIHJpYmJvbl9mcmFjLCAibnVtYmVyIiwgIm5pbCIpCgogICAgbG9jYWwgdGVybSA9IHRlcm0KICAgIGxvY2FsIHdpZHRoLCBoZWlnaHQgPSB0ZXJtLmdldFNpemUoKQogICAgbG9jYWwgcmliYm9uX3dpZHRoID0gKHJpYmJvbl9mcmFjIG9yIDAuNikgKiB3aWR0aAogICAgaWYgcmliYm9uX3dpZHRoIDwgMCB0aGVuIHJpYmJvbl93aWR0aCA9IDAgZW5kCiAgICBpZiByaWJib25fd2lkdGggPiB3aWR0aCB0aGVuIHJpYmJvbl93aWR0aCA9IHdpZHRoIGVuZAoKICAgIGxvY2FsIGRlZl9jb2xvdXIgPSB0ZXJtLmdldFRleHRDb2xvdXIoKQogICAgbG9jYWwgY3VycmVudF9jb2xvdXIgPSBkZWZfY29sb3VyCgogICAgbG9jYWwgZnVuY3Rpb24gZ28oZG9jLCBpbmRlbnQsIGNvbCkKICAgICAgICBsb2NhbCBraW5kID0gZG9jLnRhZwogICAgICAgIGlmIGtpbmQgPT0gIm5pbCIgdGhlbgogICAgICAgICAgICByZXR1cm4gY29sCiAgICAgICAgZWxzZWlmIGtpbmQgPT0gInRleHQiIHRoZW4KICAgICAgICAgICAgbG9jYWwgZG9jX2NvbG91ciA9IGRvYy5jb2xvdXIgb3IgZGVmX2NvbG91cgogICAgICAgICAgICBpZiBkb2NfY29sb3VyIH49IGN1cnJlbnRfY29sb3VyIHRoZW4KICAgICAgICAgICAgICAgIHRlcm0uc2V0VGV4dENvbG91cihkb2NfY29sb3VyKQogICAgICAgICAgICAgICAgY3VycmVudF9jb2xvdXIgPSBkb2NfY29sb3VyCiAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgc3RyX3dyaXRlKGRvYy50ZXh0KQoKICAgICAgICAgICAgcmV0dXJuIGNvbCArICNkb2MudGV4dAogICAgICAgIGVsc2VpZiBraW5kID09ICJsaW5lIiB0aGVuCiAgICAgICAgICAgIGxvY2FsIF8sIHkgPSB0ZXJtLmdldEN1cnNvclBvcygpCiAgICAgICAgICAgIGlmIHkgPCBoZWlnaHQgdGhlbgogICAgICAgICAgICAgICAgdGVybS5zZXRDdXJzb3JQb3MoaW5kZW50ICsgMSwgeSArIDEpCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHRlcm0uc2Nyb2xsKDEpCiAgICAgICAgICAgICAgICB0ZXJtLnNldEN1cnNvclBvcyhpbmRlbnQgKyAxLCBoZWlnaHQpCiAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgcmV0dXJuIGluZGVudAogICAgICAgIGVsc2VpZiBraW5kID09ICJjb25jYXQiIHRoZW4KICAgICAgICAgICAgZm9yIGkgPSAxLCBkb2MubiBkbyBjb2wgPSBnbyhkb2NbaV0sIGluZGVudCwgY29sKSBlbmQKICAgICAgICAgICAgcmV0dXJuIGNvbAogICAgICAgIGVsc2VpZiBraW5kID09ICJuZXN0IiB0aGVuCiAgICAgICAgICAgIHJldHVybiBnbyhkb2NbMV0sIGluZGVudCArIGRvYy5kZXB0aCwgY29sKQogICAgICAgIGVsc2VpZiBraW5kID09ICJncm91cCIgdGhlbgogICAgICAgICAgICBpZiBnZXRfcmVtYWluaW5nKGRvY1sxXSwgbWF0aC5taW4od2lkdGgsIHJpYmJvbl93aWR0aCArIGluZGVudCkgLSBjb2wpID49IDAgdGhlbgogICAgICAgICAgICAgICAgcmV0dXJuIGdvKGRvY1sxXSwgaW5kZW50LCBjb2wpCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHJldHVybiBnbyhkb2NbMl0sIGluZGVudCwgY29sKQogICAgICAgICAgICBlbmQKICAgICAgICBlbHNlCiAgICAgICAgICAgIGVycm9yKCJVbmtub3duIGRvYyAiIC4uIGtpbmQpCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICBsb2NhbCBjb2wgPSBtYXRoLm1heCh0ZXJtLmdldEN1cnNvclBvcygpIC0gMSwgMCkKICAgIGdvKGRvYywgMCwgY29sKQogICAgaWYgY3VycmVudF9jb2xvdXIgfj0gZGVmX2NvbG91ciB0aGVuIHRlcm0uc2V0VGV4dENvbG91cihkZWZfY29sb3VyKSBlbmQKZW5kCgotLS0gRGlzcGxheSBhIGRvY3VtZW50IG9uIHRoZSB0ZXJtaW5hbCB3aXRoIGEgdHJhaWxpbmcgbmV3IGxpbmUuCi0tCi0tIEB0cGFyYW0gICAgICBEb2MgICAgIGRvYyAgICAgICAgIFRoZSBkb2N1bWVudCB0byByZW5kZXIuCi0tIEB0cGFyYW1bb3B0XSBudW1iZXIgIHJpYmJvbl9mcmFjIFRoZSBtYXhpbXVtIGZyYWN0aW9uIG9mIHRoZSB3aWR0aCB0aGF0IHdlIHNob3VsZCB3cml0ZSBpbi4KbG9jYWwgZnVuY3Rpb24gcHJpbnQoZG9jLCByaWJib25fZnJhYykKICAgIGlmIGdldG1ldGF0YWJsZShkb2MpIH49IERvYyB0aGVuIGV4cGVjdCgxLCBkb2MsICJkb2N1bWVudCIpIGVuZAogICAgZXhwZWN0KDIsIHJpYmJvbl9mcmFjLCAibnVtYmVyIiwgIm5pbCIpCiAgICB3cml0ZShkb2MsIHJpYmJvbl9mcmFjKQogICAgc3RyX3dyaXRlKCJcbiIpCmVuZAoKLS0tIFJlbmRlciBhIGRvY3VtZW50LCBjb252ZXJ0aW5nIGl0IGludG8gYSBzdHJpbmcuCi0tCi0tIEB0cGFyYW0gICAgICBEb2MgICAgIGRvYyAgICAgICAgIFRoZSBkb2N1bWVudCB0byByZW5kZXIuCi0tIEB0cGFyYW1bb3B0XSBudW1iZXIgIHdpZHRoICAgICAgIFRoZSBtYXhpbXVtIHdpZHRoIG9mIHRoaXMgZG9jdW1lbnQuIE5vdGUgdGhhdCBsb25nIHN0cmluZ3Mgd2lsbCBub3QgYmUgd3JhcHBlZCB0bwotLSBmaXQgdGhpcyB3aWR0aCAtIGl0IGlzIG9ubHkgdXNlZCBmb3IgZmluZGluZyB0aGUgYmVzdCBsYXlvdXQuCi0tIEB0cGFyYW1bb3B0XSBudW1iZXIgIHJpYmJvbl9mcmFjIFRoZSBtYXhpbXVtIGZyYWN0aW9uIG9mIHRoZSB3aWR0aCB0aGF0IHdlIHNob3VsZCB3cml0ZSBpbi4KLS0gQHRyZXR1cm4gc3RyaW5nIFRoZSByZW5kZXJlZCBkb2N1bWVudCBhcyBhIHN0cmluZy4KbG9jYWwgZnVuY3Rpb24gcmVuZGVyKGRvYywgd2lkdGgsIHJpYmJvbl9mcmFjKQogICAgaWYgZ2V0bWV0YXRhYmxlKGRvYykgfj0gRG9jIHRoZW4gZXhwZWN0KDEsIGRvYywgImRvY3VtZW50IikgZW5kCiAgICBleHBlY3QoMiwgd2lkdGgsICJudW1iZXIiLCAibmlsIikKICAgIGV4cGVjdCgzLCByaWJib25fZnJhYywgIm51bWJlciIsICJuaWwiKQoKICAgIGxvY2FsIHJpYmJvbl93aWR0aAogICAgaWYgd2lkdGggdGhlbgogICAgICAgIHJpYmJvbl93aWR0aCA9IChyaWJib25fZnJhYyBvciAwLjYpICogd2lkdGgKICAgICAgICBpZiByaWJib25fd2lkdGggPCAwIHRoZW4gcmliYm9uX3dpZHRoID0gMCBlbmQKICAgICAgICBpZiByaWJib25fd2lkdGggPiB3aWR0aCB0aGVuIHJpYmJvbl93aWR0aCA9IHdpZHRoIGVuZAogICAgZW5kCgogICAgbG9jYWwgb3V0ID0geyBuID0gMCB9CiAgICBsb2NhbCBmdW5jdGlvbiBnbyhkb2MsIGluZGVudCwgY29sKQogICAgICAgIGxvY2FsIGtpbmQgPSBkb2MudGFnCiAgICAgICAgaWYga2luZCA9PSAibmlsIiB0aGVuCiAgICAgICAgICAgIHJldHVybiBjb2wKICAgICAgICBlbHNlaWYga2luZCA9PSAidGV4dCIgdGhlbgogICAgICAgICAgICBhcHBlbmQob3V0LCBkb2MudGV4dCkKICAgICAgICAgICAgcmV0dXJuIGNvbCArICNkb2MudGV4dAogICAgICAgIGVsc2VpZiBraW5kID09ICJsaW5lIiB0aGVuCiAgICAgICAgICAgIGFwcGVuZChvdXQsICJcbiIgLi4gKCIgIik6cmVwKGluZGVudCkpCiAgICAgICAgICAgIHJldHVybiBpbmRlbnQKICAgICAgICBlbHNlaWYga2luZCA9PSAiY29uY2F0IiB0aGVuCiAgICAgICAgICAgIGZvciBpID0gMSwgZG9jLm4gZG8gY29sID0gZ28oZG9jW2ldLCBpbmRlbnQsIGNvbCkgZW5kCiAgICAgICAgICAgIHJldHVybiBjb2wKICAgICAgICBlbHNlaWYga2luZCA9PSAibmVzdCIgdGhlbgogICAgICAgICAgICByZXR1cm4gZ28oZG9jWzFdLCBpbmRlbnQgKyBkb2MuZGVwdGgsIGNvbCkKICAgICAgICBlbHNlaWYga2luZCA9PSAiZ3JvdXAiIHRoZW4KICAgICAgICAgICAgaWYgbm90IHdpZHRoIG9yIGdldF9yZW1haW5pbmcoZG9jWzFdLCBtYXRoLm1pbih3aWR0aCwgcmliYm9uX3dpZHRoICsgaW5kZW50KSAtIGNvbCkgPj0gMCB0aGVuCiAgICAgICAgICAgICAgICByZXR1cm4gZ28oZG9jWzFdLCBpbmRlbnQsIGNvbCkKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgcmV0dXJuIGdvKGRvY1syXSwgaW5kZW50LCBjb2wpCiAgICAgICAgICAgIGVuZAogICAgICAgIGVsc2UKICAgICAgICAgICAgZXJyb3IoIlVua25vd24gZG9jICIgLi4ga2luZCkKICAgICAgICBlbmQKICAgIGVuZAoKICAgIGdvKGRvYywgMCwgMCkKICAgIHJldHVybiB0YWJsZS5jb25jYXQob3V0LCAiIiwgMSwgb3V0Lm4pCmVuZAoKRG9jLl9fdG9zdHJpbmcgPSByZW5kZXIgLS0tIEBsb2NhbAoKbG9jYWwga2V5d29yZHMgPSB7CiAgICBbImFuZCJdID0gdHJ1ZSwgWyJicmVhayJdID0gdHJ1ZSwgWyJkbyJdID0gdHJ1ZSwgWyJlbHNlIl0gPSB0cnVlLAogICAgWyJlbHNlaWYiXSA9IHRydWUsIFsiZW5kIl0gPSB0cnVlLCBbImZhbHNlIl0gPSB0cnVlLCBbImZvciJdID0gdHJ1ZSwKICAgIFsiZnVuY3Rpb24iXSA9IHRydWUsIFsiaWYiXSA9IHRydWUsIFsiaW4iXSA9IHRydWUsIFsibG9jYWwiXSA9IHRydWUsCiAgICBbIm5pbCJdID0gdHJ1ZSwgWyJub3QiXSA9IHRydWUsIFsib3IiXSA9IHRydWUsIFsicmVwZWF0Il0gPSB0cnVlLCBbInJldHVybiJdID0gdHJ1ZSwKICAgIFsidGhlbiJdID0gdHJ1ZSwgWyJ0cnVlIl0gPSB0cnVlLCBbInVudGlsIl0gPSB0cnVlLCBbIndoaWxlIl0gPSB0cnVlLAogIH0KCmxvY2FsIGNvbW1hID0gdGV4dCgiLCIpCmxvY2FsIGJyYWNlcyA9IHRleHQoInt9IikKbG9jYWwgb2JyYWNlLCBjYnJhY2UgPSB0ZXh0KCJ7IiksIHRleHQoIn0iKQpsb2NhbCBvYnJhY2tldCwgY2JyYWNrZXQgPSB0ZXh0KCJbIiksIHRleHQoIl0gPSAiKQoKbG9jYWwgZnVuY3Rpb24ga2V5X2NvbXBhcmUoYSwgYikKICAgIGxvY2FsIHRhLCB0YiA9IHR5cGUoYSksIHR5cGUoYikKCiAgICBpZiB0YSA9PSAic3RyaW5nIiB0aGVuIHJldHVybiB0YiB+PSAic3RyaW5nIiBvciBhIDwgYgogICAgZWxzZWlmIHRiID09ICJzdHJpbmciIHRoZW4gcmV0dXJuIGZhbHNlCiAgICBlbmQKCiAgICBpZiB0YSA9PSAibnVtYmVyIiB0aGVuIHJldHVybiB0YiB+PSAibnVtYmVyIiBvciBhIDwgYiBlbmQKICAgIHJldHVybiBmYWxzZQplbmQKCmxvY2FsIGZ1bmN0aW9uIHNob3dfZnVuY3Rpb24oZm4sIG9wdGlvbnMpCiAgICBsb2NhbCBpbmZvID0gZGVidWdfaW5mbyBhbmQgZGVidWdfaW5mbyhmbiwgIlN1IikKCiAgICAtLSBJbmNsdWRlIGZ1bmN0aW9uIHNvdXJjZSBwb3NpdGlvbiBpZiBhdmFpbGFibGUKICAgIGxvY2FsIG5hbWUKICAgIGlmIG9wdGlvbnMuZnVuY3Rpb25fc291cmNlIGFuZCBpbmZvIGFuZCBpbmZvLnNob3J0X3NyYyBhbmQgaW5mby5saW5lZGVmaW5lZCBhbmQgaW5mby5saW5lZGVmaW5lZCA+PSAxIHRoZW4KICAgICAgICBuYW1lID0gImZ1bmN0aW9uPCIgLi4gaW5mby5zaG9ydF9zcmMgLi4gIjoiIC4uIGluZm8ubGluZWRlZmluZWQgLi4gIj4iCiAgICBlbHNlCiAgICAgICAgbmFtZSA9IHRvc3RyaW5nKGZuKQogICAgZW5kCgogICAgLS0gSW5jbHVkZSBhcmd1bWVudHMgaWYgYSBMdWEgZnVuY3Rpb24gYW5kIGlmIGF2YWlsYWJsZS4gTHVhIHdpbGwgcmVwb3J0ICJDIgogICAgLS0gZnVuY3Rpb25zIGFzIHZhcmlhZGljLgogICAgaWYgb3B0aW9ucy5mdW5jdGlvbl9hcmdzIGFuZCBpbmZvIGFuZCBpbmZvLndoYXQgPT0gIkx1YSIgYW5kIGluZm8ubnBhcmFtcyBhbmQgZGVidWdfbG9jYWwgdGhlbgogICAgICAgIGxvY2FsIGFyZ3MgPSB7fQogICAgICAgIGZvciBpID0gMSwgaW5mby5ucGFyYW1zIGRvIGFyZ3NbaV0gPSBkZWJ1Z19sb2NhbChmbiwgaSkgb3IgIj8iIGVuZAogICAgICAgIGlmIGluZm8uaXN2YXJhcmcgdGhlbiBhcmdzWyNhcmdzICsgMV0gPSAiLi4uIiBlbmQKICAgICAgICBuYW1lID0gbmFtZSAuLiAiKCIgLi4gdGFibGUuY29uY2F0KGFyZ3MsICIsICIpIC4uICIpIgogICAgZW5kCgogICAgcmV0dXJuIG5hbWUKZW5kCgpsb2NhbCBmdW5jdGlvbiBwcmV0dHlfaW1wbChvYmosIG9wdGlvbnMsIHRyYWNraW5nKQogICAgbG9jYWwgb2JqX3R5cGUgPSB0eXBlKG9iaikKICAgIGlmIG9ial90eXBlID09ICJzdHJpbmciIHRoZW4KICAgICAgICBsb2NhbCBmb3JtYXR0ZWQgPSAoIiVxIik6Zm9ybWF0KG9iaik6Z3N1YigiXFxcbiIsICJcXG4iKQogICAgICAgIHJldHVybiB0ZXh0KGZvcm1hdHRlZCwgY29sb3Vycy5yZWQpCiAgICBlbHNlaWYgb2JqX3R5cGUgPT0gIm51bWJlciIgdGhlbgogICAgICAgIHJldHVybiB0ZXh0KHRvc3RyaW5nKG9iaiksIGNvbG91cnMubWFnZW50YSkKICAgIGVsc2VpZiBvYmpfdHlwZSA9PSAiZnVuY3Rpb24iIHRoZW4KICAgICAgICByZXR1cm4gdGV4dChzaG93X2Z1bmN0aW9uKG9iaiwgb3B0aW9ucyksIGNvbG91cnMubGlnaHRHcmV5KQogICAgZWxzZWlmIG9ial90eXBlIH49ICJ0YWJsZSIgb3IgdHJhY2tpbmdbb2JqXSB0aGVuCiAgICAgICAgcmV0dXJuIHRleHQodG9zdHJpbmcob2JqKSwgY29sb3Vycy5saWdodEdyZXkpCiAgICBlbHNlaWYgZ2V0bWV0YXRhYmxlKG9iaikgfj0gbmlsIGFuZCBnZXRtZXRhdGFibGUob2JqKS5fX3Rvc3RyaW5nIHRoZW4KICAgICAgICByZXR1cm4gdGV4dCh0b3N0cmluZyhvYmopKQogICAgZWxzZWlmIG5leHQob2JqKSA9PSBuaWwgdGhlbgogICAgICAgIHJldHVybiBicmFjZXMKICAgIGVsc2UKICAgICAgICB0cmFja2luZ1tvYmpdID0gdHJ1ZQogICAgICAgIGxvY2FsIGRvYyA9IHNldG1ldGF0YWJsZSh7IHRhZyA9ICJjb25jYXQiLCBuID0gMSwgc3BhY2VfbGluZSB9LCBEb2MpCgogICAgICAgIGxvY2FsIGxlbmd0aCwga2V5cywga2V5c24gPSAjb2JqLCB7fSwgMQogICAgICAgIGZvciBrIGluIHBhaXJzKG9iaikgZG8KICAgICAgICAgICAgaWYgdHlwZShrKSB+PSAibnVtYmVyIiBvciBrICUgMSB+PSAwIG9yIGsgPCAxIG9yIGsgPiBsZW5ndGggdGhlbgogICAgICAgICAgICAgICAga2V5c1trZXlzbl0sIGtleXNuID0gaywga2V5c24gKyAxCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgICAgIHRhYmxlLnNvcnQoa2V5cywga2V5X2NvbXBhcmUpCgogICAgICAgIGZvciBpID0gMSwgbGVuZ3RoIGRvCiAgICAgICAgICAgIGlmIGkgPiAxIHRoZW4gYXBwZW5kKGRvYywgY29tbWEpIGFwcGVuZChkb2MsIHNwYWNlX2xpbmUpIGVuZAogICAgICAgICAgICBhcHBlbmQoZG9jLCBwcmV0dHlfaW1wbChvYmpbaV0sIG9wdGlvbnMsIHRyYWNraW5nKSkKICAgICAgICBlbmQKCiAgICAgICAgZm9yIGkgPSAxLCBrZXlzbiAtIDEgZG8KICAgICAgICAgICAgaWYgaSA+IDEgb3IgbGVuZ3RoID49IDEgdGhlbiBhcHBlbmQoZG9jLCBjb21tYSkgYXBwZW5kKGRvYywgc3BhY2VfbGluZSkgZW5kCgogICAgICAgICAgICBsb2NhbCBrID0ga2V5c1tpXQogICAgICAgICAgICBsb2NhbCB2ID0gb2JqW2tdCiAgICAgICAgICAgIGlmIHR5cGUoaykgPT0gInN0cmluZyIgYW5kIG5vdCBrZXl3b3Jkc1trXSBhbmQgazptYXRjaCgiXlslYV9dWyVhJWRfXSokIikgdGhlbgogICAgICAgICAgICAgICAgYXBwZW5kKGRvYywgdGV4dChrIC4uICIgPSAiKSkKICAgICAgICAgICAgICAgIGFwcGVuZChkb2MsIHByZXR0eV9pbXBsKHYsIG9wdGlvbnMsIHRyYWNraW5nKSkKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgYXBwZW5kKGRvYywgb2JyYWNrZXQpCiAgICAgICAgICAgICAgICBhcHBlbmQoZG9jLCBwcmV0dHlfaW1wbChrLCBvcHRpb25zLCB0cmFja2luZykpCiAgICAgICAgICAgICAgICBhcHBlbmQoZG9jLCBjYnJhY2tldCkKICAgICAgICAgICAgICAgIGFwcGVuZChkb2MsIHByZXR0eV9pbXBsKHYsIG9wdGlvbnMsIHRyYWNraW5nKSkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCgogICAgICAgIHRyYWNraW5nW29ial0gPSBuaWwKICAgICAgICByZXR1cm4gZ3JvdXAoY29uY2F0KG9icmFjZSwgbmVzdCgyLCBjb25jYXQodGFibGUudW5wYWNrKGRvYywgMSwgZG9jLm4pKSksIHNwYWNlX2xpbmUsIGNicmFjZSkpCiAgICBlbmQKZW5kCgotLS0gUHJldHR5LXByaW50IGFuIGFyYml0cmFyeSBvYmplY3QsIGNvbnZlcnRpbmcgaXQgaW50byBhIGRvY3VtZW50LgotLQotLSBUaGlzIGNhbiB0aGVuIGJlIHJlbmRlcmVkIHdpdGggQHt3cml0ZX0gb3IgQHtwcmludH0uCi0tCi0tIEBwYXJhbSBvYmogVGhlIG9iamVjdCB0byBwcmV0dHktcHJpbnQuCi0tIEB0cGFyYW1bb3B0XSB7IGZ1bmN0aW9uX2FyZ3MgPSBib29sZWFuLCBmdW5jdGlvbl9zb3VyY2UgPSBib29sZWFuIH0gb3B0aW9ucwotLSBDb250cm9scyBob3cgdmFyaW91cyBwcm9wZXJ0aWVzIGFyZSBkaXNwbGF5ZWQuCi0tICAtIGBmdW5jdGlvbl9hcmdzYDogU2hvdyB0aGUgYXJndW1lbnRzIHRvIGEgZnVuY3Rpb24gaWYga25vd24gKGBmYWxzZWAgYnkgZGVmYXVsdCkuCi0tICAtIGBmdW5jdGlvbl9zb3VyY2VgOiBTaG93IHdoZXJlIHRoZSBmdW5jdGlvbiB3YXMgZGVmaW5lZCwgaW5zdGVhZCBvZgotLSAgICBgZnVuY3Rpb246IHh4eHh4eHh4YCAoYGZhbHNlYCBieSBkZWZhdWx0KS4KLS0gQHRyZXR1cm4gRG9jIFRoZSBvYmplY3QgZm9ybWF0dGVkIGFzIGEgZG9jdW1lbnQuCi0tIEBjaGFuZ2VkIDEuODguMCBBZGRlZCBgb3B0aW9uc2AgYXJndW1lbnQuCi0tIEB1c2FnZSBEaXNwbGF5IGEgdGFibGUgb24gdGhlIHNjcmVlbgotLQotLSAgICAgbG9jYWwgcHJldHR5ID0gcmVxdWlyZSAiY2MucHJldHR5IgotLSAgICAgcHJldHR5LnByaW50KHByZXR0eS5wcmV0dHkoeyAxLCAyLCAzIH0pKQotLSBAc2VlIHByZXR0eV9wcmludCBmb3IgYSBzaG9ydGhhbmQgdG8gcHJldHRpZnkgYW5kIHByaW50IGFuIG9iamVjdC4KbG9jYWwgZnVuY3Rpb24gcHJldHR5KG9iaiwgb3B0aW9ucykKICAgIGV4cGVjdCgyLCBvcHRpb25zLCAidGFibGUiLCAibmlsIikKICAgIG9wdGlvbnMgPSBvcHRpb25zIG9yIHt9CgogICAgbG9jYWwgYWN0dWFsX29wdGlvbnMgPSB7CiAgICAgICAgZnVuY3Rpb25fc291cmNlID0gZmllbGQob3B0aW9ucywgImZ1bmN0aW9uX3NvdXJjZSIsICJib29sZWFuIiwgIm5pbCIpIG9yIGZhbHNlLAogICAgICAgIGZ1bmN0aW9uX2FyZ3MgPSBmaWVsZChvcHRpb25zLCAiZnVuY3Rpb25fYXJncyIsICJib29sZWFuIiwgIm5pbCIpIG9yIGZhbHNlLAogICAgfQogICAgcmV0dXJuIHByZXR0eV9pbXBsKG9iaiwgYWN0dWFsX29wdGlvbnMsIHt9KQplbmQKCi0tW1stIEEgc2hvcnRjdXQgZm9yIGNhbGxpbmcgQHtwcmV0dHl9IGFuZCBAe3ByaW50fSB0b2dldGhlci4KCkBwYXJhbSBvYmogVGhlIG9iamVjdCB0byBwcmV0dHktcHJpbnQuCkB0cGFyYW1bb3B0XSB7IGZ1bmN0aW9uX2FyZ3MgPSBib29sZWFuLCBmdW5jdGlvbl9zb3VyY2UgPSBib29sZWFuIH0gb3B0aW9ucwpDb250cm9scyBob3cgdmFyaW91cyBwcm9wZXJ0aWVzIGFyZSBkaXNwbGF5ZWQuCiAtIGBmdW5jdGlvbl9hcmdzYDogU2hvdyB0aGUgYXJndW1lbnRzIHRvIGEgZnVuY3Rpb24gaWYga25vd24gKGBmYWxzZWAgYnkgZGVmYXVsdCkuCiAtIGBmdW5jdGlvbl9zb3VyY2VgOiBTaG93IHdoZXJlIHRoZSBmdW5jdGlvbiB3YXMgZGVmaW5lZCwgaW5zdGVhZCBvZgogICBgZnVuY3Rpb246IHh4eHh4eHh4YCAoYGZhbHNlYCBieSBkZWZhdWx0KS4KQHRwYXJhbVtvcHRdIG51bWJlciAgcmliYm9uX2ZyYWMgVGhlIG1heGltdW0gZnJhY3Rpb24gb2YgdGhlIHdpZHRoIHRoYXQgd2Ugc2hvdWxkIHdyaXRlIGluLgoKQHVzYWdlIERpc3BsYXkgYSB0YWJsZSBvbiB0aGUgc2NyZWVuLgoKICAgIGxvY2FsIHByZXR0eSA9IHJlcXVpcmUgImNjLnByZXR0eSIKICAgIHByZXR0eS5wcmV0dHlfcHJpbnQoeyAxLCAyLCAzIH0pCgpAc2VlIHByZXR0eQpAc2VlIHByaW50CkBzaW5jZSAxLjk5Cl1dCmxvY2FsIGZ1bmN0aW9uIHByZXR0eV9wcmludChvYmosIG9wdGlvbnMsIHJpYmJvbl9mcmFjKQogICAgZXhwZWN0KDIsIG9wdGlvbnMsICJ0YWJsZSIsICJuaWwiKQogICAgb3B0aW9ucyA9IG9wdGlvbnMgb3Ige30KICAgIGV4cGVjdCgzLCByaWJib25fZnJhYywgIm51bWJlciIsICJuaWwiKQoKICAgIHJldHVybiBwcmludChwcmV0dHkob2JqLCBvcHRpb25zKSwgcmliYm9uX2ZyYWMpCmVuZAoKcmV0dXJuIHsKICAgIGVtcHR5ID0gZW1wdHksCiAgICBzcGFjZSA9IHNwYWNlLAogICAgbGluZSA9IGxpbmUsCiAgICBzcGFjZV9saW5lID0gc3BhY2VfbGluZSwKICAgIHRleHQgPSB0ZXh0LAogICAgY29uY2F0ID0gY29uY2F0LAogICAgbmVzdCA9IG5lc3QsCiAgICBncm91cCA9IGdyb3VwLAoKICAgIHdyaXRlID0gd3JpdGUsCiAgICBwcmludCA9IHByaW50LAogICAgcmVuZGVyID0gcmVuZGVyLAoKICAgIHByZXR0eSA9IHByZXR0eSwKCiAgICBwcmV0dHlfcHJpbnQgPSBwcmV0dHlfcHJpbnQsCn0K";
   Module["FS_createDataFile"]("/craftos/rom/modules/main/cc", "pretty.lua", decodeBase64(fileData114), true, true, false);
   var fileData115 = "LS1bWy0gVGhlIEB7Y2MuZXhwZWN0fSBsaWJyYXJ5IHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgZm9yIHZlcmlmeWluZyB0aGF0CmZ1bmN0aW9uIGFyZ3VtZW50cyBhcmUgd2VsbC1mb3JtZWQgYW5kIG9mIHRoZSBjb3JyZWN0IHR5cGUuCgpAbW9kdWxlIGNjLmV4cGVjdApAc2luY2UgMS44NC4wCkBjaGFuZ2VkIDEuOTYuMCBUaGUgbW9kdWxlIGNhbiBub3cgYmUgY2FsbGVkIGRpcmVjdGx5IGFzIGEgZnVuY3Rpb24sIHdoaWNoIHdyYXBzIGFyb3VuZCBgZXhwZWN0LmV4cGVjdGAuCkB1c2FnZSBEZWZpbmUgYSBiYXNpYyBmdW5jdGlvbiBhbmQgY2hlY2sgaXQgaGFzIHRoZSBjb3JyZWN0IGFyZ3VtZW50cy4KCiAgICBsb2NhbCBleHBlY3QgPSByZXF1aXJlICJjYy5leHBlY3QiCiAgICBsb2NhbCBleHBlY3QsIGZpZWxkID0gZXhwZWN0LmV4cGVjdCwgZXhwZWN0LmZpZWxkCgogICAgbG9jYWwgZnVuY3Rpb24gYWRkX3BlcnNvbihuYW1lLCBpbmZvKQogICAgICAgIGV4cGVjdCgxLCBuYW1lLCAic3RyaW5nIikKICAgICAgICBleHBlY3QoMiwgaW5mbywgInRhYmxlIiwgIm5pbCIpCgogICAgICAgIGlmIGluZm8gdGhlbgogICAgICAgICAgICBwcmludCgiR290IGFnZT0iLCBmaWVsZChpbmZvLCAiYWdlIiwgIm51bWJlciIpKQogICAgICAgICAgICBwcmludCgiR290IGdlbmRlcj0iLCBmaWVsZChpbmZvLCAiZ2VuZGVyIiwgInN0cmluZyIsICJuaWwiKSkKICAgICAgICBlbmQKICAgIGVuZAoKICAgIGFkZF9wZXJzb24oIkFuYXN0YXpqYSIpIC0tIGBpbmZvJyBpcyBvcHRpb25hbAogICAgYWRkX3BlcnNvbigiS2lvbiIsIHsgYWdlID0gMjMgfSkgLS0gYGdlbmRlcicgaXMgb3B0aW9uYWwKICAgIGFkZF9wZXJzb24oIkNhb2ltaGluIiwgeyBhZ2UgPSAyMywgZ2VuZGVyID0gdHJ1ZSB9KSAtLSBlcnJvciEKXV0KCmxvY2FsIG5hdGl2ZV9zZWxlY3QsIG5hdGl2ZV90eXBlID0gc2VsZWN0LCB0eXBlCgpsb2NhbCBmdW5jdGlvbiBnZXRfdHlwZV9uYW1lcyguLi4pCiAgICBsb2NhbCB0eXBlcyA9IHRhYmxlLnBhY2soLi4uKQogICAgZm9yIGkgPSB0eXBlcy5uLCAxLCAtMSBkbwogICAgICAgIGlmIHR5cGVzW2ldID09ICJuaWwiIHRoZW4gdGFibGUucmVtb3ZlKHR5cGVzLCBpKSBlbmQKICAgIGVuZAoKICAgIGlmICN0eXBlcyA8PSAxIHRoZW4KICAgICAgICByZXR1cm4gdG9zdHJpbmcoLi4uKQogICAgZWxzZQogICAgICAgIHJldHVybiB0YWJsZS5jb25jYXQodHlwZXMsICIsICIsIDEsICN0eXBlcyAtIDEpIC4uICIgb3IgIiAuLiB0eXBlc1sjdHlwZXNdCiAgICBlbmQKZW5kCi0tLSBFeHBlY3QgYW4gYXJndW1lbnQgdG8gaGF2ZSBhIHNwZWNpZmljIHR5cGUuCi0tCi0tIEB0cGFyYW0gbnVtYmVyIGluZGV4IFRoZSAxLWJhc2VkIGFyZ3VtZW50IGluZGV4LgotLSBAcGFyYW0gdmFsdWUgVGhlIGFyZ3VtZW50J3MgdmFsdWUuCi0tIEB0cGFyYW0gc3RyaW5nIC4uLiBUaGUgYWxsb3dlZCB0eXBlcyBvZiB0aGUgYXJndW1lbnQuCi0tIEByZXR1cm4gVGhlIGdpdmVuIGB2YWx1ZWAuCi0tIEB0aHJvd3MgSWYgdGhlIHZhbHVlIGlzIG5vdCBvbmUgb2YgdGhlIGFsbG93ZWQgdHlwZXMuCmxvY2FsIGZ1bmN0aW9uIGV4cGVjdChpbmRleCwgdmFsdWUsIC4uLikKICAgIGxvY2FsIHQgPSBuYXRpdmVfdHlwZSh2YWx1ZSkKICAgIGZvciBpID0gMSwgbmF0aXZlX3NlbGVjdCgiIyIsIC4uLikgZG8KICAgICAgICBpZiB0ID09IG5hdGl2ZV9zZWxlY3QoaSwgLi4uKSB0aGVuIHJldHVybiB2YWx1ZSBlbmQKICAgIGVuZAoKICAgIC0tIElmIHdlIGNhbiBkZXRlcm1pbmUgdGhlIGZ1bmN0aW9uIG5hbWUgd2l0aCBhIGhpZ2ggbGV2ZWwgb2YgY29uZmlkZW5jZSwgdHJ5IHRvIGluY2x1ZGUgaXQuCiAgICBsb2NhbCBuYW1lCiAgICBsb2NhbCBvaywgaW5mbyA9IHBjYWxsKGRlYnVnLmdldGluZm8sIDMsICJuUyIpCiAgICBpZiBvayBhbmQgaW5mby5uYW1lIGFuZCBpbmZvLm5hbWUgfj0gIiIgYW5kIGluZm8ud2hhdCB+PSAiQyIgdGhlbiBuYW1lID0gaW5mby5uYW1lIGVuZAoKICAgIGxvY2FsIHR5cGVfbmFtZXMgPSBnZXRfdHlwZV9uYW1lcyguLi4pCiAgICBpZiBuYW1lIHRoZW4KICAgICAgICBlcnJvcigoImJhZCBhcmd1bWVudCAjJWQgdG8gJyVzJyAoZXhwZWN0ZWQgJXMsIGdvdCAlcykiKTpmb3JtYXQoaW5kZXgsIG5hbWUsIHR5cGVfbmFtZXMsIHQpLCAzKQogICAgZWxzZQogICAgICAgIGVycm9yKCgiYmFkIGFyZ3VtZW50ICMlZCAoZXhwZWN0ZWQgJXMsIGdvdCAlcykiKTpmb3JtYXQoaW5kZXgsIHR5cGVfbmFtZXMsIHQpLCAzKQogICAgZW5kCmVuZAoKLS0tIEV4cGVjdCBhbiBmaWVsZCB0byBoYXZlIGEgc3BlY2lmaWMgdHlwZS4KLS0KLS0gQHRwYXJhbSB0YWJsZSB0YmwgVGhlIHRhYmxlIHRvIGluZGV4LgotLSBAdHBhcmFtIHN0cmluZyBpbmRleCBUaGUgZmllbGQgbmFtZSB0byBjaGVjay4KLS0gQHRwYXJhbSBzdHJpbmcgLi4uIFRoZSBhbGxvd2VkIHR5cGVzIG9mIHRoZSBhcmd1bWVudC4KLS0gQHJldHVybiBUaGUgY29udGVudHMgb2YgdGhlIGdpdmVuIGZpZWxkLgotLSBAdGhyb3dzIElmIHRoZSBmaWVsZCBpcyBub3Qgb25lIG9mIHRoZSBhbGxvd2VkIHR5cGVzLgpsb2NhbCBmdW5jdGlvbiBmaWVsZCh0YmwsIGluZGV4LCAuLi4pCiAgICBleHBlY3QoMSwgdGJsLCAidGFibGUiKQogICAgZXhwZWN0KDIsIGluZGV4LCAic3RyaW5nIikKCiAgICBsb2NhbCB2YWx1ZSA9IHRibFtpbmRleF0KICAgIGxvY2FsIHQgPSBuYXRpdmVfdHlwZSh2YWx1ZSkKICAgIGZvciBpID0gMSwgbmF0aXZlX3NlbGVjdCgiIyIsIC4uLikgZG8KICAgICAgICBpZiB0ID09IG5hdGl2ZV9zZWxlY3QoaSwgLi4uKSB0aGVuIHJldHVybiB2YWx1ZSBlbmQKICAgIGVuZAoKICAgIGlmIHZhbHVlID09IG5pbCB0aGVuCiAgICAgICAgZXJyb3IoKCJmaWVsZCAnJXMnIG1pc3NpbmcgZnJvbSB0YWJsZSIpOmZvcm1hdChpbmRleCksIDMpCiAgICBlbHNlCiAgICAgICAgZXJyb3IoKCJiYWQgZmllbGQgJyVzJyAoZXhwZWN0ZWQgJXMsIGdvdCAlcykiKTpmb3JtYXQoaW5kZXgsIGdldF90eXBlX25hbWVzKC4uLiksIHQpLCAzKQogICAgZW5kCmVuZAoKbG9jYWwgZnVuY3Rpb24gaXNfbmFuKG51bSkKICByZXR1cm4gbnVtIH49IG51bQplbmQKCi0tLSBFeHBlY3QgYSBudW1iZXIgdG8gYmUgd2l0aGluIGEgc3BlY2lmaWMgcmFuZ2UuCi0tCi0tIEB0cGFyYW0gbnVtYmVyIG51bSBUaGUgdmFsdWUgdG8gY2hlY2suCi0tIEB0cGFyYW0gbnVtYmVyIG1pbiBUaGUgbWluaW11bSB2YWx1ZSwgaWYgbmlsIHRoZW4gYC1tYXRoLmh1Z2VgIGlzIHVzZWQuCi0tIEB0cGFyYW0gbnVtYmVyIG1heCBUaGUgbWF4aW11bSB2YWx1ZSwgaWYgbmlsIHRoZW4gYG1hdGguaHVnZWAgaXMgdXNlZC4KLS0gQHJldHVybiBUaGUgZ2l2ZW4gYHZhbHVlYC4KLS0gQHRocm93cyBJZiB0aGUgdmFsdWUgaXMgb3V0c2lkZSBvZiB0aGUgYWxsb3dlZCByYW5nZS4KLS0gQHNpbmNlIDEuOTYuMApsb2NhbCBmdW5jdGlvbiByYW5nZShudW0sIG1pbiwgbWF4KQogIGV4cGVjdCgxLCBudW0sICJudW1iZXIiKQogIG1pbiA9IGV4cGVjdCgyLCBtaW4sICJudW1iZXIiLCAibmlsIikgb3IgLW1hdGguaHVnZQogIG1heCA9IGV4cGVjdCgzLCBtYXgsICJudW1iZXIiLCAibmlsIikgb3IgbWF0aC5odWdlCiAgaWYgbWluID4gbWF4IHRoZW4KICAgICAgZXJyb3IoIm1pbiBtdXN0IGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byBtYXgpIiwgMikKICBlbmQKCiAgaWYgaXNfbmFuKG51bSkgb3IgbnVtIDwgbWluIG9yIG51bSA+IG1heCB0aGVuCiAgICAgIGVycm9yKCgibnVtYmVyIG91dHNpZGUgb2YgcmFuZ2UgKGV4cGVjdGVkICVzIHRvIGJlIHdpdGhpbiAlcyBhbmQgJXMpIik6Zm9ybWF0KG51bSwgbWluLCBtYXgpLCAzKQogIGVuZAoKICByZXR1cm4gbnVtCmVuZAoKcmV0dXJuIHNldG1ldGF0YWJsZSh7CiAgICBleHBlY3QgPSBleHBlY3QsCiAgICBmaWVsZCA9IGZpZWxkLAogICAgcmFuZ2UgPSByYW5nZSwKfSwgeyBfX2NhbGwgPSBmdW5jdGlvbihfLCAuLi4pIHJldHVybiBleHBlY3QoLi4uKSBlbmQgfSkK";
   Module["FS_createDataFile"]("/craftos/rom/modules/main/cc", "expect.lua", decodeBase64(fileData115), true, true, false);
   var fileData116 = "AAAAAUJ1ZDEAABAAAAAIAAAAEAAAAAQKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAABQAAAABAAAQAABsAGUAdABpAG8AbgwBvAG0AcABsAGUAdABpAG8AbgAuAGwAdQBhSWxvY2Jsb2IAAAAQAAAAXgAAACX///////8AAAAAAAoAZQB4AHAAZQBjAHQALgBsAHUAYUlsb2NibG9iAAAAEAAAAQYAAAAl////////AAAAAAAEAGgAdAB0AHBJbG9jYmxvYgAAABAAAAGuAAAAJf///////wAAAAAABABoAHQAdABwbGcxU2NvbXAAAAAAAAA4DAAAAAQAaAB0AHQAcG1vRERibG9iAAAACAAAgDoMQsJBAAAABABoAHQAdABwbW9kRGJsb2IAAAAIAACAOgxCwkEAAAAEAGgAdAB0AHBwaDFTY29tcAAAAAAAAEAAAAAABQBpAG0AYQBnAGVJbG9jYmxvYgAAABAAAABeAAAAg////////wAAAAAABQBpAG0AYQBnAGVsZzFTY29tcAAAAAAAAAy1AAAABQBpAG0AYQBnAGVtb0REYmxvYgAAAAgAAAC/rKrDQQAAAAUAaQBtAGEAZwBlbW9kRGJsb2IAAAAIAAAAv6yqw0EAAAAFAGkAbQBhAGcAZXBoMVNjb21wAAAAAAAAEAAAAAAKAHAAcgBlAHQAdAB5AC4AbAB1AGFJbG9jYmxvYgAAABAAAAEGAAAAg////////wAAAAAACwByAGUAcQB1AGkAcgBlAC4AbAB1AGFJbG9jYmxvYgAAABAAAAGuAAAAg////////wAAAAAABQBzAGgAZQBsAGxJbG9jYmxvYgAAABAAAABeAAAA4f///////wAAAAAABQBzAGgAZQBsAGxsZzFTY29tcAAAAAAAAB1LAAAABQBzAGgAZQBsAGxtb0REYmxvYgAAAAgAAAC/rKrDQQAAAAUAcwBoAGUAbABsbW9kRGJsb2IAAAAIAAAAv6yqw0EAAAAFAHMAaABlAGwAbHBoMVNjb21wAAAAAAAAIAAAAAALAHMAdAByAGkAbgBnAHMALgBsAHUAYUlsb2NibG9iAAAAEAAAAQYAAADh////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAgsAAABFAAAECggAAAAYAAAAAAAAAAABAAAgAAAAAAEAAEAAAAAAAQAAgAAAAAABAAEAAAAAAAEAAgAAAAAAAQAEAAAAAAABAAgAAAAAAAEAEAAAAAAAAQAgAAAAAAABAEAAAAAAAAEAgAAAAAAAAQEAAAAAAAABAgAAAAAAAAEEAAAAAAAAAQgAAAAAAAABEAAAAAAAAAEg
   Module["FS_createDataFile"]("/craftos/rom/modules/main/cc", ".DS_Store", decodeBase64(fileData116), true, true, false);
   var fileData117 = "LS0tIFRoaXMgcHJvdmlkZXMgYSBwdXJlIEx1YSBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgYnVpbHRpbiBAe3JlcXVpcmV9IGZ1bmN0aW9uCi0tIGFuZCBAe3BhY2thZ2V9IGxpYnJhcnkuCi0tCi0tIEdlbmVyYWxseSB5b3UgZG8gbm90IG5lZWQgdG8gdXNlIHRoaXMgbW9kdWxlIC0gaXQgaXMgaW5qZWN0ZWQgaW50byB0aGUKLS0gZXZlcnkgcHJvZ3JhbSdzIGVudmlyb25tZW50LiBIb3dldmVyLCBpdCBtYXkgYmUgdXNlZnVsIHdoZW4gYnVpbGRpbmcgYQotLSBjdXN0b20gc2hlbGwgb3Igd2hlbiBydW5uaW5nIHByb2dyYW1zIHlvdXJzZWxmLgotLQotLSBAbW9kdWxlIGNjLnJlcXVpcmUKLS0gQHNpbmNlIDEuODguMAotLSBAdXNhZ2UgQ29uc3RydWN0IHRoZSBwYWNrYWdlIGFuZCByZXF1aXJlIGZ1bmN0aW9uLCBhbmQgaW5zZXJ0IHRoZW0gaW50byBhCi0tIGN1c3RvbSBlbnZpcm9ubWVudC4KLS0KLS0gICAgIGxvY2FsIHIgPSByZXF1aXJlICJjYy5yZXF1aXJlIgotLSAgICAgbG9jYWwgZW52ID0gc2V0bWV0YXRhYmxlKHt9LCB7IF9faW5kZXggPSBfRU5WIH0pCi0tICAgICBlbnYucmVxdWlyZSwgZW52LnBhY2thZ2UgPSByLm1ha2UoZW52LCAiLyIpCi0tCi0tICAgICAtLSBOb3cgd2UgaGF2ZSBvdXIgb3duIHJlcXVpcmUgZnVuY3Rpb24sIHNlcGFyYXRlIHRvIHRoZSBvcmlnaW5hbC4KLS0gICAgIGxvY2FsIHIyID0gZW52LnJlcXVpcmUgImNjLnJlcXVpcmUiCi0tICAgICBwcmludChyLCByMikKCmxvY2FsIGV4cGVjdCA9IHJlcXVpcmUgYW5kIHJlcXVpcmUoImNjLmV4cGVjdCIpIG9yIGRvZmlsZSgicm9tL21vZHVsZXMvbWFpbi9jYy9leHBlY3QubHVhIikKbG9jYWwgZXhwZWN0ID0gZXhwZWN0LmV4cGVjdAoKbG9jYWwgZnVuY3Rpb24gcHJlbG9hZChwYWNrYWdlKQogICAgcmV0dXJuIGZ1bmN0aW9uKG5hbWUpCiAgICAgICAgaWYgcGFja2FnZS5wcmVsb2FkW25hbWVdIHRoZW4KICAgICAgICAgICAgcmV0dXJuIHBhY2thZ2UucHJlbG9hZFtuYW1lXQogICAgICAgIGVsc2UKICAgICAgICAgICAgcmV0dXJuIG5pbCwgIm5vIGZpZWxkIHBhY2thZ2UucHJlbG9hZFsnIiAuLiBuYW1lIC4uICInXSIKICAgICAgICBlbmQKICAgIGVuZAplbmQKCmxvY2FsIGZ1bmN0aW9uIGZyb21fZmlsZShwYWNrYWdlLCBlbnYpCiAgICByZXR1cm4gZnVuY3Rpb24obmFtZSkKICAgICAgICBsb2NhbCBzUGF0aCwgc0Vycm9yID0gcGFja2FnZS5zZWFyY2hwYXRoKG5hbWUsIHBhY2thZ2UucGF0aCkKICAgICAgICBpZiBub3Qgc1BhdGggdGhlbgogICAgICAgICAgICByZXR1cm4gbmlsLCBzRXJyb3IKICAgICAgICBlbmQKICAgICAgICBsb2NhbCBmbkZpbGUsIHNFcnJvciA9IGxvYWRmaWxlKHNQYXRoLCBuaWwsIGVudikKICAgICAgICBpZiBmbkZpbGUgdGhlbgogICAgICAgICAgICByZXR1cm4gZm5GaWxlLCBzUGF0aAogICAgICAgIGVsc2UKICAgICAgICAgICAgcmV0dXJuIG5pbCwgc0Vycm9yCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCgpsb2NhbCBmdW5jdGlvbiBtYWtlX3NlYXJjaHBhdGgoZGlyKQogICAgcmV0dXJuIGZ1bmN0aW9uKG5hbWUsIHBhdGgsIHNlcCwgcmVwKQogICAgICAgIGV4cGVjdCgxLCBuYW1lLCAic3RyaW5nIikKICAgICAgICBleHBlY3QoMiwgcGF0aCwgInN0cmluZyIpCiAgICAgICAgc2VwID0gZXhwZWN0KDMsIHNlcCwgInN0cmluZyIsICJuaWwiKSBvciAiLiIKICAgICAgICByZXAgPSBleHBlY3QoNCwgcmVwLCAic3RyaW5nIiwgIm5pbCIpIG9yICIvIgoKICAgICAgICBsb2NhbCBmbmFtZSA9IHN0cmluZy5nc3ViKG5hbWUsIHNlcDpnc3ViKCIlLiIsICIlJSUuIiksIHJlcCkKICAgICAgICBsb2NhbCBzRXJyb3IgPSAiIgogICAgICAgIGZvciBwYXR0ZXJuIGluIHN0cmluZy5nbWF0Y2gocGF0aCwgIlteO10rIikgZG8KICAgICAgICAgICAgbG9jYWwgc1BhdGggPSBzdHJpbmcuZ3N1YihwYXR0ZXJuLCAiJT8iLCBmbmFtZSkKICAgICAgICAgICAgaWYgc1BhdGg6c3ViKDEsIDEpIH49ICIvIiB0aGVuCiAgICAgICAgICAgICAgICBzUGF0aCA9IGZzLmNvbWJpbmUoZGlyLCBzUGF0aCkKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGlmIGZzLmV4aXN0cyhzUGF0aCkgYW5kIG5vdCBmcy5pc0RpcihzUGF0aCkgdGhlbgogICAgICAgICAgICAgICAgcmV0dXJuIHNQYXRoCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIGlmICNzRXJyb3IgPiAwIHRoZW4KICAgICAgICAgICAgICAgICAgICBzRXJyb3IgPSBzRXJyb3IgLi4gIlxuICAiCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIHNFcnJvciA9IHNFcnJvciAuLiAibm8gZmlsZSAnIiAuLiBzUGF0aCAuLiAiJyIKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAgICAgcmV0dXJuIG5pbCwgc0Vycm9yCiAgICBlbmQKZW5kCgpsb2NhbCBmdW5jdGlvbiBtYWtlX3JlcXVpcmUocGFja2FnZSkKICAgIGxvY2FsIHNlbnRpbmVsID0ge30KICAgIHJldHVybiBmdW5jdGlvbihuYW1lKQogICAgICAgIGV4cGVjdCgxLCBuYW1lLCAic3RyaW5nIikKCiAgICAgICAgaWYgcGFja2FnZS5sb2FkZWRbbmFtZV0gPT0gc2VudGluZWwgdGhlbgogICAgICAgICAgICBlcnJvcigibG9vcCBvciBwcmV2aW91cyBlcnJvciBsb2FkaW5nIG1vZHVsZSAnIiAuLiBuYW1lIC4uICInIiwgMCkKICAgICAgICBlbmQKCiAgICAgICAgaWYgcGFja2FnZS5sb2FkZWRbbmFtZV0gdGhlbgogICAgICAgICAgICByZXR1cm4gcGFja2FnZS5sb2FkZWRbbmFtZV0KICAgICAgICBlbmQKCiAgICAgICAgbG9jYWwgc0Vycm9yID0gIm1vZHVsZSAnIiAuLiBuYW1lIC4uICInIG5vdCBmb3VuZDoiCiAgICAgICAgZm9yIF8sIHNlYXJjaGVyIGluIGlwYWlycyhwYWNrYWdlLmxvYWRlcnMpIGRvCiAgICAgICAgICAgIGxvY2FsIGxvYWRlciA9IHRhYmxlLnBhY2soc2VhcmNoZXIobmFtZSkpCiAgICAgICAgICAgIGlmIGxvYWRlclsxXSB0aGVuCiAgICAgICAgICAgICAgICBwYWNrYWdlLmxvYWRlZFtuYW1lXSA9IHNlbnRpbmVsCiAgICAgICAgICAgICAgICBsb2NhbCByZXN1bHQgPSBsb2FkZXJbMV0obmFtZSwgdGFibGUudW5wYWNrKGxvYWRlciwgMiwgbG9hZGVyLm4pKQogICAgICAgICAgICAgICAgaWYgcmVzdWx0ID09IG5pbCB0aGVuIHJlc3VsdCA9IHRydWUgZW5kCgogICAgICAgICAgICAgICAgcGFja2FnZS5sb2FkZWRbbmFtZV0gPSByZXN1bHQKICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgc0Vycm9yID0gc0Vycm9yIC4uICJcbiAgIiAuLiBsb2FkZXJbMl0KICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAgICAgZXJyb3Ioc0Vycm9yLCAyKQogICAgZW5kCmVuZAoKLS0tIEJ1aWxkIGFuIGltcGxlbWVudGF0aW9uIG9mIEx1YSdzIEB7cGFja2FnZX0gbGlicmFyeSwgYW5kIGEgQHtyZXF1aXJlfQotLSBmdW5jdGlvbiB0byBsb2FkIG1vZHVsZXMgd2l0aGluIGl0LgotLQotLSBAdHBhcmFtIHRhYmxlIGVudiBUaGUgZW52aXJvbm1lbnQgdG8gbG9hZCBwYWNrYWdlcyBpbnRvLgotLSBAdHBhcmFtIHN0cmluZyBkaXIgVGhlIGRpcmVjdG9yeSB0aGF0IHJlbGF0aXZlIHBhY2thZ2VzIGFyZSBsb2FkZWQgZnJvbS4KLS0gQHRyZXR1cm4gZnVuY3Rpb24gVGhlIG5ldyBAe3JlcXVpcmV9IGZ1bmN0aW9uLgotLSBAdHJldHVybiB0YWJsZSBUaGUgbmV3IEB7cGFja2FnZX0gbGlicmFyeS4KbG9jYWwgZnVuY3Rpb24gbWFrZV9wYWNrYWdlKGVudiwgZGlyKQogICAgZXhwZWN0KDEsIGVudiwgInRhYmxlIikKICAgIGV4cGVjdCgyLCBkaXIsICJzdHJpbmciKQoKICAgIGxvY2FsIHBhY2thZ2UgPSB7fQogICAgcGFja2FnZS5sb2FkZWQgPSB7CiAgICAgICAgX0cgPSBfRywKICAgICAgICBiaXQgPSBiaXQsCiAgICAgICAgYml0MzIgPSBiaXQzMiwKICAgICAgICBjb3JvdXRpbmUgPSBjb3JvdXRpbmUsCiAgICAgICAgZmZpID0gZmZpLAogICAgICAgIGppdCA9IGppdCwKICAgICAgICBtYXRoID0gbWF0aCwKICAgICAgICBwYWNrYWdlID0gcGFja2FnZSwKICAgICAgICBzdHJpbmcgPSBzdHJpbmcsCiAgICAgICAgdGFibGUgPSB0YWJsZSwKICAgIH0KICAgIHBhY2thZ2UucGF0aCA9ICI/Oz8ubHVhOz8vaW5pdC5sdWE7L3JvbS9tb2R1bGVzL21haW4vPzsvcm9tL21vZHVsZXMvbWFpbi8/Lmx1YTsvcm9tL21vZHVsZXMvbWFpbi8/L2luaXQubHVhIgogICAgaWYgdHVydGxlIHRoZW4KICAgICAgICBwYWNrYWdlLnBhdGggPSBwYWNrYWdlLnBhdGggLi4gIjsvcm9tL21vZHVsZXMvdHVydGxlLz87L3JvbS9tb2R1bGVzL3R1cnRsZS8/Lmx1YTsvcm9tL21vZHVsZXMvdHVydGxlLz8vaW5pdC5sdWEiCiAgICBlbHNlaWYgY29tbWFuZHMgdGhlbgogICAgICAgIHBhY2thZ2UucGF0aCA9IHBhY2thZ2UucGF0aCAuLiAiOy9yb20vbW9kdWxlcy9jb21tYW5kLz87L3JvbS9tb2R1bGVzL2NvbW1hbmQvPy5sdWE7L3JvbS9tb2R1bGVzL2NvbW1hbmQvPy9pbml0Lmx1YSIKICAgIGVuZAogICAgcGFja2FnZS5jb25maWcgPSAiL1xuO1xuP1xuIVxuLSIKICAgIHBhY2thZ2UucHJlbG9hZCA9IHt9CiAgICBwYWNrYWdlLmxvYWRlcnMgPSB7IHByZWxvYWQocGFja2FnZSksIGZyb21fZmlsZShwYWNrYWdlLCBlbnYpIH0KICAgIHBhY2thZ2Uuc2VhcmNocGF0aCA9IG1ha2Vfc2VhcmNocGF0aChkaXIpCgogICAgcmV0dXJuIG1ha2VfcmVxdWlyZShwYWNrYWdlKSwgcGFja2FnZQplbmQKCnJldHVybiB7IG1ha2UgPSBtYWtlX3BhY2thZ2UgfQo=";
   Module["FS_createDataFile"]("/craftos/rom/modules/main/cc", "require.lua", decodeBase64(fileData117), true, true, false);
   var fileData118 = "LS0tIFZhcmlvdXMgdXRpbGl0aWVzIGZvciB3b3JraW5nIHdpdGggc3RyaW5ncyBhbmQgdGV4dC4KLS0KLS0gQG1vZHVsZSBjYy5zdHJpbmdzCi0tIEBzaW5jZSAxLjk1LjAKLS0gQHNlZSB0ZXh0dXRpbHMgRm9yIGFkZGl0aW9uYWwgc3RyaW5nIHJlbGF0ZWQgdXRpbGl0aWVzLgoKbG9jYWwgZXhwZWN0ID0gKHJlcXVpcmUgYW5kIHJlcXVpcmUoImNjLmV4cGVjdCIpIG9yIGRvZmlsZSgicm9tL21vZHVsZXMvbWFpbi9jYy9leHBlY3QubHVhIikpLmV4cGVjdAoKLS1bWy0gV3JhcHMgYSBibG9jayBvZiB0ZXh0LCBzbyB0aGF0IGVhY2ggbGluZSBmaXRzIHdpdGhpbiB0aGUgZ2l2ZW4gd2lkdGguCgpUaGlzIG1heSBiZSB1c2VmdWwgaWYgeW91IHdhbnQgdG8gd3JhcCB0ZXh0IGJlZm9yZSBkaXNwbGF5aW5nIGl0IHRvIGEKQHttb25pdG9yfSBvciBAe3ByaW50ZXJ9IHdpdGhvdXQgdXNpbmcgQHtfRy5wcmludHxwcmludH0uCgpAdHBhcmFtIHN0cmluZyB0ZXh0IFRoZSBzdHJpbmcgdG8gd3JhcC4KQHRwYXJhbVtvcHRdIG51bWJlciB3aWR0aCBUaGUgd2lkdGggdG8gY29uc3RyYWluIHRvLCBkZWZhdWx0cyB0byB0aGUgd2lkdGggb2YKdGhlIHRlcm1pbmFsLgpAdHJldHVybiB7IHN0cmluZy4uLiB9IFRoZSB3cmFwcGVkIGlucHV0IHN0cmluZyBhcyBhIGxpc3Qgb2YgbGluZXMuCkB1c2FnZSBXcmFwIGEgc3RyaW5nIGFuZCB3cml0ZSBpdCB0byB0aGUgdGVybWluYWwuCgogICAgdGVybS5jbGVhcigpCiAgICBsb2NhbCBsaW5lcyA9IHJlcXVpcmUgImNjLnN0cmluZ3MiLndyYXAoIlRoaXMgaXMgYSBsb25nIHBpZWNlIG9mIHRleHQiLCAxMCkKICAgIGZvciBpID0gMSwgI2xpbmVzIGRvCiAgICAgIHRlcm0uc2V0Q3Vyc29yUG9zKDEsIGkpCiAgICAgIHRlcm0ud3JpdGUobGluZXNbaV0pCiAgICBlbmQKXV0KbG9jYWwgZnVuY3Rpb24gd3JhcCh0ZXh0LCB3aWR0aCkKICAgIGV4cGVjdCgxLCB0ZXh0LCAic3RyaW5nIikKICAgIGV4cGVjdCgyLCB3aWR0aCwgIm51bWJlciIsICJuaWwiKQogICAgd2lkdGggPSB3aWR0aCBvciB0ZXJtLmdldFNpemUoKQoKCiAgICBsb2NhbCBsaW5lcywgbGluZXNfbiwgY3VycmVudF9saW5lID0ge30sIDAsICIiCiAgICBsb2NhbCBmdW5jdGlvbiBwdXNoX2xpbmUoKQogICAgICAgIGxpbmVzX24gPSBsaW5lc19uICsgMQogICAgICAgIGxpbmVzW2xpbmVzX25dID0gY3VycmVudF9saW5lCiAgICAgICAgY3VycmVudF9saW5lID0gIiIKICAgIGVuZAoKICAgIGxvY2FsIHBvcywgbGVuZ3RoID0gMSwgI3RleHQKICAgIGxvY2FsIHN1YiwgbWF0Y2ggPSBzdHJpbmcuc3ViLCBzdHJpbmcubWF0Y2gKICAgIHdoaWxlIHBvcyA8PSBsZW5ndGggZG8KICAgICAgICBsb2NhbCBoZWFkID0gc3ViKHRleHQsIHBvcywgcG9zKQogICAgICAgIGlmIGhlYWQgPT0gIiAiIG9yIGhlYWQgPT0gIlx0IiB0aGVuCiAgICAgICAgICAgIGxvY2FsIHdoaXRlc3BhY2UgPSBtYXRjaCh0ZXh0LCAiXlsgXHRdKyIsIHBvcykKICAgICAgICAgICAgY3VycmVudF9saW5lID0gY3VycmVudF9saW5lIC4uIHdoaXRlc3BhY2UKICAgICAgICAgICAgcG9zID0gcG9zICsgI3doaXRlc3BhY2UKICAgICAgICBlbHNlaWYgaGVhZCA9PSAiXG4iIHRoZW4KICAgICAgICAgICAgcHVzaF9saW5lKCkKICAgICAgICAgICAgcG9zID0gcG9zICsgMQogICAgICAgIGVsc2UKICAgICAgICAgICAgbG9jYWwgd29yZCA9IG1hdGNoKHRleHQsICJeW14gXHRcbl0rIiwgcG9zKQogICAgICAgICAgICBwb3MgPSBwb3MgKyAjd29yZAogICAgICAgICAgICBpZiAjd29yZCA+IHdpZHRoIHRoZW4KICAgICAgICAgICAgICAgIC0tIFByaW50IGEgbXVsdGlsaW5lIHdvcmQKICAgICAgICAgICAgICAgIHdoaWxlICN3b3JkID4gMCBkbwogICAgICAgICAgICAgICAgICAgIGxvY2FsIHNwYWNlX3JlbWFpbmluZyA9IHdpZHRoIC0gI2N1cnJlbnRfbGluZSAtIDEKICAgICAgICAgICAgICAgICAgICBpZiBzcGFjZV9yZW1haW5pbmcgPD0gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIHB1c2hfbGluZSgpCiAgICAgICAgICAgICAgICAgICAgICAgIHNwYWNlX3JlbWFpbmluZyA9IHdpZHRoCiAgICAgICAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfbGluZSA9IGN1cnJlbnRfbGluZSAuLiBzdWIod29yZCwgMSwgc3BhY2VfcmVtYWluaW5nKQogICAgICAgICAgICAgICAgICAgIHdvcmQgPSBzdWIod29yZCwgc3BhY2VfcmVtYWluaW5nICsgMSkKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAtLSBQcmludCBhIHdvcmQgbm9ybWFsbHkKICAgICAgICAgICAgICAgIGlmIHdpZHRoIC0gI2N1cnJlbnRfbGluZSA8ICN3b3JkIHRoZW4gcHVzaF9saW5lKCkgZW5kCiAgICAgICAgICAgICAgICBjdXJyZW50X2xpbmUgPSBjdXJyZW50X2xpbmUgLi4gd29yZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAoKICAgIHB1c2hfbGluZSgpCgogICAgLS0gVHJpbSB3aGl0ZXNwYWNlIGxvbmdlciB0aGFuIHdpZHRoLgogICAgZm9yIGssIGxpbmUgaW4gcGFpcnMobGluZXMpIGRvCiAgICAgICAgbGluZSA9IGxpbmU6c3ViKDEsIHdpZHRoKQogICAgICAgIGxpbmVzW2tdID0gbGluZQogICAgZW5kCgogICAgcmV0dXJuIGxpbmVzCmVuZAoKLS0tIE1ha2VzIHRoZSBpbnB1dCBzdHJpbmcgYSBmaXhlZCB3aWR0aC4gVGhpcyBlaXRoZXIgdHJ1bmNhdGVzIGl0LCBvciBwYWRzIGl0Ci0tIHdpdGggc3BhY2VzLgotLQotLSBAdHBhcmFtIHN0cmluZyBsaW5lIFRoZSBzdHJpbmcgdG8gbm9ybWFsaXNlLgotLSBAdHBhcmFtW29wdF0gbnVtYmVyIHdpZHRoIFRoZSB3aWR0aCB0byBjb25zdHJhaW4gdG8sIGRlZmF1bHRzIHRvIHRoZSB3aWR0aCBvZgotLSB0aGUgdGVybWluYWwuCi0tCi0tIEB0cmV0dXJuIHN0cmluZyBUaGUgc3RyaW5nIHdpdGggYSBzcGVjaWZpYyB3aWR0aC4KLS0gQHVzYWdlIHJlcXVpcmUgImNjLnN0cmluZ3MiLmVuc3VyZV93aWR0aCgiYSBzaG9ydCBzdHJpbmciLCAyMCkKLS0gQHVzYWdlIHJlcXVpcmUgImNjLnN0cmluZ3MiLmVuc3VyZV93aWR0aCgiYSByYXRoZXIgbG9uZyBzdHJpbmcgd2hpY2ggaXMgdHJ1bmNhdGVkIiwgMjApCmxvY2FsIGZ1bmN0aW9uIGVuc3VyZV93aWR0aChsaW5lLCB3aWR0aCkKICAgIGV4cGVjdCgxLCBsaW5lLCAic3RyaW5nIikKICAgIGV4cGVjdCgyLCB3aWR0aCwgIm51bWJlciIsICJuaWwiKQogICAgd2lkdGggPSB3aWR0aCBvciB0ZXJtLmdldFNpemUoKQoKICAgIGxpbmUgPSBsaW5lOnN1YigxLCB3aWR0aCkKICAgIGlmICNsaW5lIDwgd2lkdGggdGhlbgogICAgICAgIGxpbmUgPSBsaW5lIC4uICgiICIpOnJlcCh3aWR0aCAtICNsaW5lKQogICAgZW5kCgogICAgcmV0dXJuIGxpbmUKZW5kCgpyZXR1cm4gewogICAgd3JhcCA9IHdyYXAsCiAgICBlbnN1cmVfd2lkdGggPSBlbnN1cmVfd2lkdGgsCn0K";
   Module["FS_createDataFile"]("/craftos/rom/modules/main/cc", "strings.lua", decodeBase64(fileData118), true, true, false);
   var fileData119 = "LS0tIEEgY29sbGVjdGlvbiBvZiBoZWxwZXIgbWV0aG9kcyBmb3Igd29ya2luZyB3aXRoIGlucHV0IGNvbXBsZXRpb24sIHN1Y2gKLS0gYXMgdGhhdCByZXF1aXJlIGJ5IEB7X0cucmVhZH0uCi0tCi0tIEBtb2R1bGUgY2MuY29tcGxldGlvbgotLSBAc2VlIGNjLnNoZWxsLmNvbXBsZXRpb24gRm9yIGFkZGl0aW9uYWwgaGVscGVycyB0byB1c2Ugd2l0aAotLSBAe3NoZWxsLnNldENvbXBsZXRpb25GdW5jdGlvbn0uCi0tIEBzaW5jZSAxLjg1LjAKCmxvY2FsIGV4cGVjdCA9IHJlcXVpcmUgImNjLmV4cGVjdCIuZXhwZWN0Cgpsb2NhbCBmdW5jdGlvbiBjaG9pY2VfaW1wbCh0ZXh0LCBjaG9pY2VzLCBhZGRfc3BhY2UpCiAgICBsb2NhbCByZXN1bHRzID0ge30KICAgIGZvciBuID0gMSwgI2Nob2ljZXMgZG8KICAgICAgICBsb2NhbCBvcHRpb24gPSBjaG9pY2VzW25dCiAgICAgICAgaWYgI29wdGlvbiArIChhZGRfc3BhY2UgYW5kIDEgb3IgMCkgPiAjdGV4dCBhbmQgb3B0aW9uOnN1YigxLCAjdGV4dCkgPT0gdGV4dCB0aGVuCiAgICAgICAgICAgIGxvY2FsIHJlc3VsdCA9IG9wdGlvbjpzdWIoI3RleHQgKyAxKQogICAgICAgICAgICBpZiBhZGRfc3BhY2UgdGhlbgogICAgICAgICAgICAgICAgdGFibGUuaW5zZXJ0KHJlc3VsdHMsIHJlc3VsdCAuLiAiICIpCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHRhYmxlLmluc2VydChyZXN1bHRzLCByZXN1bHQpCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kCiAgICByZXR1cm4gcmVzdWx0cwplbmQKCi0tLSBDb21wbGV0ZSBmcm9tIGEgY2hvaWNlIG9mIG9uZSBvciBtb3JlIHN0cmluZ3MuCi0tCi0tIEB0cGFyYW0gc3RyaW5nIHRleHQgVGhlIGlucHV0IHN0cmluZyB0byBjb21wbGV0ZS4KLS0gQHRwYXJhbSB7IHN0cmluZy4uLiB9IGNob2ljZXMgVGhlIGxpc3Qgb2YgY2hvaWNlcyB0byBjb21wbGV0ZSBmcm9tLgotLSBAdHBhcmFtW29wdF0gYm9vbGVhbiBhZGRfc3BhY2UgV2hldGhlciB0byBhZGQgYSBzcGFjZSBhZnRlciB0aGUgY29tcGxldGVkIGl0ZW0uCi0tIEB0cmV0dXJuIHsgc3RyaW5nLi4uIH0gQSBsaXN0IG9mIHN1ZmZpeGVzIG9mIG1hdGNoaW5nIHN0cmluZ3MuCi0tIEB1c2FnZSBDYWxsIEB7X0cucmVhZH0sIGNvbXBsZXRpbmcgdGhlIG5hbWVzIG9mIHZhcmlvdXMgYW5pbWFscy4KLS0KLS0gICAgIGxvY2FsIGNvbXBsZXRpb24gPSByZXF1aXJlICJjYy5jb21wbGV0aW9uIgotLSAgICAgbG9jYWwgYW5pbWFscyA9IHsgImRvZyIsICJjYXQiLCAibGlvbiIsICJ1bmljb3JuIiB9Ci0tICAgICByZWFkKG5pbCwgbmlsLCBmdW5jdGlvbih0ZXh0KSByZXR1cm4gY29tcGxldGlvbi5jaG9pY2UodGV4dCwgYW5pbWFscykgZW5kKQpsb2NhbCBmdW5jdGlvbiBjaG9pY2UodGV4dCwgY2hvaWNlcywgYWRkX3NwYWNlKQogICAgZXhwZWN0KDEsIHRleHQsICJzdHJpbmciKQogICAgZXhwZWN0KDIsIGNob2ljZXMsICJ0YWJsZSIpCiAgICBleHBlY3QoMywgYWRkX3NwYWNlLCAiYm9vbGVhbiIsICJuaWwiKQogICAgcmV0dXJuIGNob2ljZV9pbXBsKHRleHQsIGNob2ljZXMsIGFkZF9zcGFjZSkKZW5kCgotLS0gQ29tcGxldGUgdGhlIG5hbWUgb2YgYSBjdXJyZW50bHkgYXR0YWNoZWQgcGVyaXBoZXJhbC4KLS0KLS0gQHRwYXJhbSBzdHJpbmcgdGV4dCBUaGUgaW5wdXQgc3RyaW5nIHRvIGNvbXBsZXRlLgotLSBAdHBhcmFtW29wdF0gYm9vbGVhbiBhZGRfc3BhY2UgV2hldGhlciB0byBhZGQgYSBzcGFjZSBhZnRlciB0aGUgY29tcGxldGVkIG5hbWUuCi0tIEB0cmV0dXJuIHsgc3RyaW5nLi4uIH0gQSBsaXN0IG9mIHN1ZmZpeGVzIG9mIG1hdGNoaW5nIHBlcmlwaGVyYWxzLgotLSBAdXNhZ2UKLS0gICAgIGxvY2FsIGNvbXBsZXRpb24gPSByZXF1aXJlICJjYy5jb21wbGV0aW9uIgotLSAgICAgcmVhZChuaWwsIG5pbCwgY29tcGxldGlvbi5wZXJpcGhlcmFsKQpsb2NhbCBmdW5jdGlvbiBwZXJpcGhlcmFsXyh0ZXh0LCBhZGRfc3BhY2UpCiAgICBleHBlY3QoMSwgdGV4dCwgInN0cmluZyIpCiAgICBleHBlY3QoMiwgYWRkX3NwYWNlLCAiYm9vbGVhbiIsICJuaWwiKQogICAgcmV0dXJuIGNob2ljZV9pbXBsKHRleHQsIHBlcmlwaGVyYWwuZ2V0TmFtZXMoKSwgYWRkX3NwYWNlKQplbmQKCmxvY2FsIHNpZGVzID0gcmVkc3RvbmUuZ2V0U2lkZXMoKQoKLS0tIENvbXBsZXRlIHRoZSBzaWRlIG9mIGEgY29tcHV0ZXIuCi0tCi0tIEB0cGFyYW0gc3RyaW5nIHRleHQgVGhlIGlucHV0IHN0cmluZyB0byBjb21wbGV0ZS4KLS0gQHRwYXJhbVtvcHRdIGJvb2xlYW4gYWRkX3NwYWNlIFdoZXRoZXIgdG8gYWRkIGEgc3BhY2UgYWZ0ZXIgdGhlIGNvbXBsZXRlZCBzaWRlLgotLSBAdHJldHVybiB7IHN0cmluZy4uLiB9IEEgbGlzdCBvZiBzdWZmaXhlcyBvZiBtYXRjaGluZyBzaWRlcy4KLS0gQHVzYWdlCi0tICAgICBsb2NhbCBjb21wbGV0aW9uID0gcmVxdWlyZSAiY2MuY29tcGxldGlvbiIKLS0gICAgIHJlYWQobmlsLCBuaWwsIGNvbXBsZXRpb24uc2lkZSkKbG9jYWwgZnVuY3Rpb24gc2lkZSh0ZXh0LCBhZGRfc3BhY2UpCiAgICBleHBlY3QoMSwgdGV4dCwgInN0cmluZyIpCiAgICBleHBlY3QoMiwgYWRkX3NwYWNlLCAiYm9vbGVhbiIsICJuaWwiKQogICAgcmV0dXJuIGNob2ljZV9pbXBsKHRleHQsIHNpZGVzLCBhZGRfc3BhY2UpCmVuZAoKLS0tIENvbXBsZXRlIGEgQHtzZXR0aW5nc3xzZXR0aW5nfS4KLS0KLS0gQHRwYXJhbSBzdHJpbmcgdGV4dCBUaGUgaW5wdXQgc3RyaW5nIHRvIGNvbXBsZXRlLgotLSBAdHBhcmFtW29wdF0gYm9vbGVhbiBhZGRfc3BhY2UgV2hldGhlciB0byBhZGQgYSBzcGFjZSBhZnRlciB0aGUgY29tcGxldGVkIHNldHRpbmdzLgotLSBAdHJldHVybiB7IHN0cmluZy4uLiB9IEEgbGlzdCBvZiBzdWZmaXhlcyBvZiBtYXRjaGluZyBzZXR0aW5ncy4KLS0gQHVzYWdlCi0tICAgICBsb2NhbCBjb21wbGV0aW9uID0gcmVxdWlyZSAiY2MuY29tcGxldGlvbiIKLS0gICAgIHJlYWQobmlsLCBuaWwsIGNvbXBsZXRpb24uc2V0dGluZykKbG9jYWwgZnVuY3Rpb24gc2V0dGluZyh0ZXh0LCBhZGRfc3BhY2UpCiAgICBleHBlY3QoMSwgdGV4dCwgInN0cmluZyIpCiAgICBleHBlY3QoMiwgYWRkX3NwYWNlLCAiYm9vbGVhbiIsICJuaWwiKQogICAgcmV0dXJuIGNob2ljZV9pbXBsKHRleHQsIHNldHRpbmdzLmdldE5hbWVzKCksIGFkZF9zcGFjZSkKZW5kCgpsb2NhbCBjb21tYW5kX2xpc3QKCi0tLSBDb21wbGV0ZSB0aGUgbmFtZSBvZiBhIE1pbmVjcmFmdCBAe2NvbW1hbmRzfGNvbW1hbmR9LgotLQotLSBAdHBhcmFtIHN0cmluZyB0ZXh0IFRoZSBpbnB1dCBzdHJpbmcgdG8gY29tcGxldGUuCi0tIEB0cGFyYW1bb3B0XSBib29sZWFuIGFkZF9zcGFjZSBXaGV0aGVyIHRvIGFkZCBhIHNwYWNlIGFmdGVyIHRoZSBjb21wbGV0ZWQgY29tbWFuZC4KLS0gQHRyZXR1cm4geyBzdHJpbmcuLi4gfSBBIGxpc3Qgb2Ygc3VmZml4ZXMgb2YgbWF0Y2hpbmcgY29tbWFuZHMuCi0tIEB1c2FnZQotLSAgICAgbG9jYWwgY29tcGxldGlvbiA9IHJlcXVpcmUgImNjLmNvbXBsZXRpb24iCi0tICAgICByZWFkKG5pbCwgbmlsLCBjb21wbGV0aW9uLmNvbW1hbmQpCmxvY2FsIGZ1bmN0aW9uIGNvbW1hbmQodGV4dCwgYWRkX3NwYWNlKQogICAgZXhwZWN0KDEsIHRleHQsICJzdHJpbmciKQogICAgZXhwZWN0KDIsIGFkZF9zcGFjZSwgImJvb2xlYW4iLCAibmlsIikKICAgIGlmIGNvbW1hbmRfbGlzdCA9PSBuaWwgdGhlbgogICAgICAgIGNvbW1hbmRfbGlzdCA9IGNvbW1hbmRzIGFuZCBjb21tYW5kcy5saXN0KCkgb3Ige30KICAgIGVuZAoKICAgIHJldHVybiBjaG9pY2VfaW1wbCh0ZXh0LCBjb21tYW5kX2xpc3QsIGFkZF9zcGFjZSkKZW5kCgpyZXR1cm4gewogICAgY2hvaWNlID0gY2hvaWNlLAogICAgcGVyaXBoZXJhbCA9IHBlcmlwaGVyYWxfLAogICAgc2lkZSA9IHNpZGUsCiAgICBzZXR0aW5nID0gc2V0dGluZywKICAgIGNvbW1hbmQgPSBjb21tYW5kLAp9Cg==";
   Module["FS_createDataFile"]("/craftos/rom/modules/main/cc", "completion.lua", decodeBase64(fileData119), true, true, false);
   var fileData120 = "";
   Module["FS_createDataFile"]("/craftos/rom/modules/main/cc/shell", "completion.lua", decodeBase64(fileData120), true, true, false);
   var fileData121 = "LS0tIFByb3ZpZGVzIHV0aWxpdGllcyBmb3Igd29ya2luZyB3aXRoICJuZnQiIGltYWdlcy4KLS0KLS0gbmZ0ICgiTml0cm9nZW4gRmluZ2VycyBUZXh0IikgaXMgYSBmaWxlIGZvcm1hdCBmb3IgZHJhd2luZyBiYXNpYyBpbWFnZXMuCi0tIFVubGlrZSB0aGUgaW1hZ2VzIHRoYXQgQHtwYWludHV0aWxzLnBhcnNlSW1hZ2V9IHVzZXMsIG5mdCBzdXBwb3J0cyBjb2xvdXJlZAotLSB0ZXh0LgotLQotLSBAbW9kdWxlIGNjLmltYWdlLm5mdAotLSBAc2luY2UgMS45MC4wCi0tIEB1c2FnZSBMb2FkIGFuIGltYWdlIGZyb20gYGV4YW1wbGUubmZ0YCBhbmQgZHJhdyBpdC4KLS0KLS0gICAgIGxvY2FsIG5mdCA9IHJlcXVpcmUgImNjLmltYWdlLm5mdCIKLS0gICAgIGxvY2FsIGltYWdlID0gYXNzZXJ0KG5mdC5sb2FkKCJkYXRhL2V4YW1wbGUubmZ0IikpCi0tICAgICBuZnQuZHJhdyhpbWFnZSwgdGVybS5nZXRDdXJzb3JQb3MoKSkKCmxvY2FsIGV4cGVjdCA9IHJlcXVpcmUgImNjLmV4cGVjdCIuZXhwZWN0CgotLS0gUGFyc2UgYW4gbmZ0IGltYWdlIGZyb20gYSBzdHJpbmcuCi0tCi0tIEB0cGFyYW0gc3RyaW5nIGltYWdlIFRoZSBpbWFnZSBjb250ZW50cy4KLS0gQHJldHVybiB0YWJsZSBUaGUgcGFyc2VkIGltYWdlLgpsb2NhbCBmdW5jdGlvbiBwYXJzZShpbWFnZSkKICAgIGV4cGVjdCgxLCBpbWFnZSwgInN0cmluZyIpCgogICAgbG9jYWwgcmVzdWx0ID0ge30KICAgIGxvY2FsIGxpbmUgPSAxCiAgICBsb2NhbCBmb3JlZ3JvdW5kID0gIjAiCiAgICBsb2NhbCBiYWNrZ3JvdW5kID0gImYiCgogICAgbG9jYWwgaSwgbGVuID0gMSwgI2ltYWdlCiAgICB3aGlsZSBpIDw9IGxlbiBkbwogICAgICAgIGxvY2FsIGMgPSBpbWFnZTpzdWIoaSwgaSkKICAgICAgICBpZiBjID09ICJcMzEiIGFuZCBpIDwgbGVuIHRoZW4KICAgICAgICAgICAgaSA9IGkgKyAxCiAgICAgICAgICAgIGZvcmVncm91bmQgPSBpbWFnZTpzdWIoaSwgaSkKICAgICAgICBlbHNlaWYgYyA9PSAiXDMwIiBhbmQgaSA8IGxlbiB0aGVuCiAgICAgICAgICAgIGkgPSBpICsgMQogICAgICAgICAgICBiYWNrZ3JvdW5kID0gaW1hZ2U6c3ViKGksIGkpCiAgICAgICAgZWxzZWlmIGMgPT0gIlxuIiB0aGVuCiAgICAgICAgICAgIGlmIHJlc3VsdFtsaW5lXSA9PSBuaWwgdGhlbgogICAgICAgICAgICAgICAgcmVzdWx0W2xpbmVdID0geyB0ZXh0ID0gIiIsIGZvcmVncm91bmQgPSAiIiwgYmFja2dyb3VuZCA9ICIiIH0KICAgICAgICAgICAgZW5kCgogICAgICAgICAgICBsaW5lID0gbGluZSArIDEKICAgICAgICAgICAgZm9yZWdyb3VuZCwgYmFja2dyb3VuZCA9ICIwIiwgImYiCiAgICAgICAgZWxzZQogICAgICAgICAgICBsb2NhbCBuZXh0ID0gaW1hZ2U6ZmluZCgiW1xuXDMwXDMxXSIsIGkpIG9yICNpbWFnZSArIDEKICAgICAgICAgICAgbG9jYWwgc2VnX2xlbiA9IG5leHQgLSBpCgogICAgICAgICAgICBsb2NhbCB0aGlzX2xpbmUgPSByZXN1bHRbbGluZV0KICAgICAgICAgICAgaWYgdGhpc19saW5lID09IG5pbCB0aGVuCiAgICAgICAgICAgICAgICB0aGlzX2xpbmUgPSB7IGZvcmVncm91bmQgPSAiIiwgYmFja2dyb3VuZCA9ICIiLCB0ZXh0ID0gIiIgfQogICAgICAgICAgICAgICAgcmVzdWx0W2xpbmVdID0gdGhpc19saW5lCiAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgdGhpc19saW5lLnRleHQgPSB0aGlzX2xpbmUudGV4dCAuLiBpbWFnZTpzdWIoaSwgbmV4dCAtIDEpCiAgICAgICAgICAgIHRoaXNfbGluZS5mb3JlZ3JvdW5kID0gdGhpc19saW5lLmZvcmVncm91bmQgLi4gZm9yZWdyb3VuZDpyZXAoc2VnX2xlbikKICAgICAgICAgICAgdGhpc19saW5lLmJhY2tncm91bmQgPSB0aGlzX2xpbmUuYmFja2dyb3VuZCAuLiBiYWNrZ3JvdW5kOnJlcChzZWdfbGVuKQoKICAgICAgICAgICAgaSA9IG5leHQgLSAxCiAgICAgICAgZW5kCgogICAgICAgIGkgPSBpICsgMQogICAgZW5kCiAgICByZXR1cm4gcmVzdWx0CmVuZAoKLS0tIExvYWQgYW4gbmZ0IGltYWdlIGZyb20gYSBmaWxlLgotLQotLSBAdHBhcmFtIHN0cmluZyBwYXRoIFRoZSBmaWxlIHRvIGxvYWQuCi0tIEB0cmV0dXJuWzFdIHRhYmxlIFRoZSBwYXJzZWQgaW1hZ2UuCi0tIEB0cmV0dXJuWzJdIG5pbCBJZiB0aGUgZmlsZSBkb2VzIG5vdCBleGlzdCBvciBjb3VsZCBub3QgYmUgbG9hZGVkLgotLSBAdHJldHVyblsyXSBzdHJpbmcgQW4gZXJyb3IgbWVzc2FnZSBleHBsYWluaW5nIHdoeSB0aGUgZmlsZSBjb3VsZCBub3QgYmUKLS0gbG9hZGVkLgpsb2NhbCBmdW5jdGlvbiBsb2FkKHBhdGgpCiAgICBleHBlY3QoMSwgcGF0aCwgInN0cmluZyIpCiAgICBsb2NhbCBmaWxlLCBlcnIgPSBpby5vcGVuKHBhdGgsICJyIikKICAgIGlmIG5vdCBmaWxlIHRoZW4gcmV0dXJuIG5pbCwgZXJyIGVuZAoKICAgIGxvY2FsIHJlc3VsdCA9IGZpbGU6cmVhZCgiKmEiKQogICAgZmlsZTpjbG9zZSgpCiAgICByZXR1cm4gcGFyc2UocmVzdWx0KQplbmQKCi0tLSBEcmF3IGFuIG5mdCBpbWFnZSB0byB0aGUgc2NyZWVuLgotLQotLSBAdHBhcmFtIHRhYmxlIGltYWdlIEFuIGltYWdlLCBhcyByZXR1cm5lZCBmcm9tIEB7bG9hZH0gb3IgQHtkcmF3fS4KLS0gQHRwYXJhbSBudW1iZXIgeFBvcyBUaGUgeCBwb3NpdGlvbiB0byBzdGFydCBkcmF3aW5nIGF0LgotLSBAdHBhcmFtIG51bWJlciB4UG9zIFRoZSB5IHBvc2l0aW9uIHRvIHN0YXJ0IGRyYXdpbmcgYXQuCi0tIEB0cGFyYW1bb3B0XSB0ZXJtLlJlZGlyZWN0IHRhcmdldCBUaGUgdGVybWluYWwgcmVkaXJlY3QgdG8gZHJhdyB0by4gRGVmYXVsdHMgdG8gdGhlCi0tIGN1cnJlbnQgdGVybWluYWwuCmxvY2FsIGZ1bmN0aW9uIGRyYXcoaW1hZ2UsIHhQb3MsIHlQb3MsIHRhcmdldCkKICAgIGV4cGVjdCgxLCBpbWFnZSwgInRhYmxlIikKICAgIGV4cGVjdCgyLCB4UG9zLCAibnVtYmVyIikKICAgIGV4cGVjdCgzLCB5UG9zLCAibnVtYmVyIikKICAgIGV4cGVjdCg0LCB0YXJnZXQsICJ0YWJsZSIsICJuaWwiKQoKICAgIGlmIG5vdCB0YXJnZXQgdGhlbiB0YXJnZXQgPSB0ZXJtIGVuZAoKICAgIGZvciB5LCBsaW5lIGluIGlwYWlycyhpbWFnZSkgZG8KICAgICAgICB0YXJnZXQuc2V0Q3Vyc29yUG9zKHhQb3MsIHlQb3MgKyB5IC0gMSkKICAgICAgICB0YXJnZXQuYmxpdChsaW5lLnRleHQsIGxpbmUuZm9yZWdyb3VuZCwgbGluZS5iYWNrZ3JvdW5kKQogICAgZW5kCmVuZAoKcmV0dXJuIHsKICAgIHBhcnNlID0gcGFyc2UsCiAgICBsb2FkID0gbG9hZCwKICAgIGRyYXcgPSBkcmF3LAp9Cg==";
   Module["FS_createDataFile"]("/craftos/rom/modules/main/cc/image", "nft.lua", decodeBase64(fileData121), true, true, false);
   var fileData122 = "";
   Module["FS_createDataFile"]("/craftos/rom/modules/main/cc/http", "gist.lua", decodeBase64(fileData122), true, true, false);
   var fileData123 = "RnVuY3Rpb25zIGluIHRoZSBiaXQgbWFuaXB1bGF0aW9uIEFQSSAoTk9URTogVGhpcyBBUEkgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHZlcnNpb24uIFVzZSBiaXQzMiBpbnN0ZWFkKToKYml0LmJub3QobikgICAgICAgICAgLS0gYml0d2lzZSBub3QgKH5uKQpiaXQuYmFuZChtLCBuKSAgICAgICAtLSBiaXR3aXNlIGFuZCAobSAmIG4pCmJpdC5ib3IobSwgbikgICAgICAgIC0tIGJpdHdpc2Ugb3IgKG0gfCBuKQpiaXQuYnhvcihtLCBuKSAgICAgICAtLSBiaXR3aXNlIHhvciAobSBeIG4pCmJpdC5icnNoaWZ0KG4sIGJpdHMpIC0tIHJpZ2h0IHNoaWZ0IChuID4+IGJpdHMpCmJpdC5ibHNoaWZ0KG4sIGJpdHMpIC0tIGxlZnQgc2hpZnQgKG4gPDwgYml0cykK";
   Module["FS_createDataFile"]("/craftos/rom/help", "bit.txt", decodeBase64(fileData123), true, true, false);
   var fileData124 = "bGFiZWwgZ2V0cyBvciBzZXRzIHRoZSBsYWJlbCBvZiB0aGUgQ29tcHV0ZXIsIG9yIG9mIEZsb3BweSBEaXNrcyBpbiBhdHRhY2hlZCBkaXNrIGRyaXZlcy4KCmV4OgoibGFiZWwgZ2V0IiBwcmludHMgdGhlIGxhYmVsIG9mIHRoZSBjb21wdXRlci4KImxhYmVsIGdldCBsZWZ0IiBwcmludHMgdGhlIGxhYmVsIG9mIHRoZSBkaXNrIGluIHRoZSBsZWZ0IGRyaXZlLgoibGFiZWwgc2V0ICJNeSBDb21wdXRlciIiIHNldCB0aGUgbGFiZWwgb2YgdGhlIGNvbXB1dGVyIHRvICJNeSBDb21wdXRlciIuCiJsYWJlbCBzZXQgbGVmdCAiTXkgUHJvZ3JhbXMiIiAtIHNldHMgdGhlIGxhYmVsIG9mIHRoZSBkaXNrIGluIHRoZSBsZWZ0IGRyaXZlIHRvICJNeSBQcm9ncmFtcyIuCiJsYWJlbCBjbGVhciIgY2xlYXJzIHRoZSBsYWJlbCBvZiB0aGUgY29tcHV0ZXIuCiJsYWJlbCBjbGVhciBsZWZ0IiBjbGVhcnMgdGhlIGxhYmVsIG9mIHRoZSBkaXNrIGluIHRoZSBsZWZ0IGRyaXZlLgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "label.txt", decodeBase64(fileData124), true, true, false);
   var fileData125 = "aW8gaXMgYSBzdGFuZGFyZCBMdWE1LjEgQVBJLCByZWltcGxlbWVudGVkIGZvciBDcmFmdE9TLiBOb3QgYWxsIHRoZSBmZWF0dXJlcyBhcmUgYXZhaWxpYWJsZS4KUmVmZXIgdG8gaHR0cDovL3d3dy5sdWEub3JnL21hbnVhbC81LjEvIGZvciBtb3JlIGluZm9ybWF0aW9uLgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "io.txt", decodeBase64(fileData125), true, true, false);
   var fileData126 = "cGFpbnQgaXMgYSBwcm9ncmFtIGZvciBjcmVhdGluZyBpbWFnZXMgb24gQWR2YW5jZWQgQ29tcHV0ZXJzLiBTZWxlY3QgY29sb3JzIGZyb20gdGhlIGNvbG9yIHBhbGxldHRlIG9uIHRoZSByaWdodCwgYW5kIGNsaWNrIG9uIHRoZSBjYW52YXMgdG8gZHJhdy4gUHJlc3MgQ3RybCB0byBhY2Nlc3MgdGhlIG1lbnUgYW5kIHNhdmUgeW91ciBwaWN0dXJlcy4KCmV4OgoiZWRpdCBtYXJpbyIgb3BlbnMgYW4gaW1hZ2UgY2FsbGVkICJtYXJpbyIgZm9yIGVkaXRpbmcuCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "paint.txt", decodeBase64(fileData126), true, true, false);
   var fileData127 = "ZXhjYXZhdGUgaXMgYSBwcm9ncmFtIGZvciBNaW5pbmcgVHVydGxlcy4gV2hlbiBleGNhdmF0ZSBpcyBydW4sIHRoZSB0dXJ0bGUgd2lsbCBtaW5lIGEgcmVjdGFuZ3VsYXIgc2hhZnQgaW50byB0aGUgZ3JvdW5kLCBjb2xsZWN0aW5nIGJsb2NrcyBhcyBpdCBnb2VzLCBhbmQgcmV0dXJuIHRvIHRoZSBzdXJmYWNlIG9uY2UgYmVkcm9jayBpcyBoaXQuCgpleDoKImV4Y2F2YXRlIDMiIHdpbGwgbWluZSBhIDN4MyBzaGFmdC4K";
   Module["FS_createDataFile"]("/craftos/rom/help", "excavate.txt", decodeBase64(fileData127), true, true, false);
   var fileData128 = "RnVuY3Rpb25zIGluIHRoZSBSZWRzdG9uZSBBUEk6CnJzLmdldFNpZGVzKCApCnJzLmdldElucHV0KCBzaWRlICkKcnMuc2V0T3V0cHV0KCBzaWRlLCBib29sZWFuICkKcnMuZ2V0T3V0cHV0KCBzaWRlICkKcnMuZ2V0QW5hbG9nSW5wdXQoIHNpZGUgKQpycy5zZXRBbmFsb2dPdXRwdXQoIHNpZGUsIG51bWJlciApCnJzLmdldEFuYWxvZ091dHB1dCggc2lkZSApCgpGdW5jdGlvbnMgaW4gdGhlIFJlZHN0b25lIEFQSSBmb3Igd29ya2luZyB3aXRoIFJlZFBvd2VyIGJ1bmRsZWQgY2FibGVzOgpycy5nZXRCdW5kbGVkSW5wdXQoIHNpZGUgKQpycy50ZXN0QnVuZGxlZElucHV0KCBzaWRlLCBjb2xvciApCnJzLnNldEJ1bmRsZWRPdXRwdXQoIHNpZGUsIGNvbG9ycyApCnJzLmdldEJ1bmRsZWRPdXRwdXQoIHNpZGUgKQpUeXBlICJoZWxwIGJ1bmRsZWQiIGZvciB1c2FnZSBleGFtcGxlcy4KCkV2ZW50cyBlbWl0dGVkIGJ5IHRoZSByZWRzdG9uZSBBUEk6CiJyZWRzdG9uZSIsIHdoZW4gdGhlIHN0YXRlIG9mIGFueSByZWRzdG9uZSBpbnB1dCBjaGFuZ2VzLiBVc2UgZ2V0SW5wdXQoKSBvciBnZXRCdW5kbGVkSW5wdXQoKSB0byBpbnNwZWN0IHRoZSBjaGFuZ2VzClR5cGUgImhlbHAgZXZlbnRzIiB0byBsZWFybiBhYm91dCB0aGUgZXZlbnQgc3lzdGVtLgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "rs.txt", decodeBase64(fileData128), true, true, false);
   var fileData129 = "Y2xlYXIgY2xlYXJzIHRoZSBzY3JlZW4gYW5kL29yIHJlc2V0cyB0aGUgcGFsZXR0ZS4KZXg6CiJjbGVhciIgY2xlYXJzIHRoZSBzY3JlZW4sIGJ1dCBrZWVwcyB0aGUgcGFsZXR0ZS4KImNsZWFyIHNjcmVlbiIgZG9lcyB0aGUgc2FtZSBhcyAiY2xlYXIiCiJjbGVhciBncmFwaGljcyIgY2xlYXJzIHRoZSBncmFwaGljcyBtb2RlIHNjcmVlbi4KImNsZWFyIHBhbGV0dGUiIHJlc2V0cyB0aGUgcGFsZXR0ZSwgYnV0IGRvZXNuJ3QgY2xlYXIgdGhlIHNjcmVlbgoiY2xlYXIgYWxsIiBjbGVhcnMgdGhlIHNjcmVlbiBhbmQgcmVzZXRzIHRoZSBwYWxldHRl";
   Module["FS_createDataFile"]("/craftos/rom/help", "clear.txt", decodeBase64(fileData129), true, true, false);
   var fileData130 = "bXYgbW92ZXMgYSBmaWxlIG9yIGRpcmVjdG9yeSBmcm9tIG9uZSBsb2NhdGlvbiB0byBhbm90aGVyLgoKZXg6CiJtdiBmb28gYmFyIiByZW5hbWVzIHRoZSBmaWxlICJmb28iIHRvICJiYXIiLgoibXYgZm9vIGJhci9mb28iIG1vdmVzIHRoZSBmaWxlICJmb28iIHRvIGEgZm9sZGVyIGNhbGxlZCAiYmFyIi4KIm12IGRpc2svKiBkaXNrMiIgbW92ZXMgdGhlIGNvbnRlbnRzIG9mIG9uZSBkaXNrIHRvIGFub3RoZXIK";
   Module["FS_createDataFile"]("/craftos/rom/help", "move.txt", decodeBase64(fileData130), true, true, false);
   var fileData131 = "RnVuY3Rpb25zIGluIHRoZSBUZXJtaW5hbCBBUEk6CnRlcm0ud3JpdGUoIHRleHQgKQp0ZXJtLmJsaXQoIHRleHQsIHRleHRDb2xvciwgYmFja2dyb3VuZENvbG9yICkKdGVybS5jbGVhcigpCnRlcm0uY2xlYXJMaW5lKCkKdGVybS5nZXRDdXJzb3JQb3MoKQp0ZXJtLnNldEN1cnNvclBvcyggeCwgeSApCnRlcm0uc2V0Q3Vyc29yQmxpbmsoIGJsaW5rICkKdGVybS5pc0NvbG9yKCkKdGVybS5zZXRUZXh0Q29sb3IoIGNvbG9yICkKdGVybS5zZXRCYWNrZ3JvdW5kQ29sb3IoIGNvbG9yICkKdGVybS5nZXRUZXh0Q29sb3IoKQp0ZXJtLmdldEJhY2tncm91bmRDb2xvcigpCnRlcm0uZ2V0U2l6ZSgpCnRlcm0uc2Nyb2xsKCBuICkKdGVybS5yZWRpcmVjdCggb2JqZWN0ICkKdGVybS5jdXJyZW50KCkKdGVybS5zZXRQYWxldHRlQ29sb3IoIGNvbG9yLCByLCBnLCBiICkKdGVybS5nZXRQYWxldHRlQ29sb3IoIGNvbG9yICkKdGVybS5uYXRpdmVQYWxldHRlQ29sb3IoIGNvbG9yICkKdGVybS5nZXRHcmFwaGljc01vZGUoKQp0ZXJtLnNldEdyYXBoaWNzTW9kZSggbW9kZSApCnRlcm0uZ2V0UGl4ZWwoIHgsIHkgKQp0ZXJtLnNldFBpeGVsKCB4LCB5LCBjb2xvciApCnRlcm0uZHJhd1BpeGVscyggeCwgeSwgcGl4ZWxzICkKCkV2ZW50cyBlbWl0dGVkIGJ5IHRoZSB0ZXJtaW5hbHM6CiJ0ZXJtX3Jlc2l6ZSIsIHdoZW4gdGhlIHNpemUgb2YgYSB0ZXJtaW5hbCBjaGFuZ2VzLiBUaGlzIGNhbiBoYXBwZW4gaW4gbXVsdGl0YXNraW5nIGVudmlyb25tZW50cywgb3Igd2hlbiB0aGUgdGVybWluYWwgb3V0IGlzIGJlaW5nIHJlZGlyZWN0ZWQgYnkgdGhlICJtb25pdG9yIiBwcm9ncmFtLgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "term.txt", decodeBase64(fileData131), true, true, false);
   var fileData132 = "ZWplY3QgZWplY3RzIHRoZSBjb250ZW50cyBvZiBhbiBhdHRhY2hlZCBkaXNrIGRyaXZlLgoKZXg6CiJlamVjdCBsZWZ0IiBlamVjdHMgdGhlIGNvbnRlbnRzIG9mIHRoZSBkaXNrIGRyaXZlIHRvIHRoZSBsZWZ0IG9mIHRoZSBjb21wdXRlci4K";
   Module["FS_createDataFile"]("/craftos/rom/help", "eject.txt", decodeBase64(fileData132), true, true, false);
   var fileData133 = "RnVuY3Rpb25zIGluIHRoZSBQYWludCBVdGlsaXRpZXMgQVBJOgpwYWludHV0aWxzLmRyYXdQaXhlbCggeCwgeSwgY29sb3VyICkKcGFpbnR1dGlscy5kcmF3TGluZSggc3RhcnRYLCBzdGFydFksIGVuZFgsIGVuZFksIGNvbG91ciApCnBhaW50dXRpbHMuZHJhd0JveCggc3RhcnRYLCBzdGFydFksIGVuZFgsIGVuZFksIGNvbG91ciApCnBhaW50dXRpbHMuZHJhd0ZpbGxlZEJveCggc3RhcnRYLCBzdGFydFksIGVuZFgsIGVuZFksIGNvbG91ciApCnBhaW50dXRpbHMubG9hZEltYWdlKCBwYXRoICkKcGFpbnR1dGlscy5kcmF3SW1hZ2UoIGltYWdlLCB4LCB5ICkK";
   Module["FS_createDataFile"]("/craftos/rom/help", "paintutils.txt", decodeBase64(fileData133), true, true, false);
   var fileData134 = "RnVuY3Rpb25zIGluIHRoZSAzRCBWZWN0b3IgTWF0aCBBUEk6CnZlY3Rvci5uZXcoIHgseSx6ICkKClZlY3RvcnMgcmV0dXJuZWQgYnkgdmVjdG9yLm5ldygpIGhhdmUgdGhlIGZvbGxvd2luZyBmaWVsZHMgYW5kIG1ldGhvZHM6CnZlY3Rvci54CnZlY3Rvci55CnZlY3Rvci56CnZlY3RvcjphZGQoIHZlY3RvciApCnZlY3RvcjpzdWIoIHZlY3RvciApCnZlY3RvcjptdWwoIG51bWJlciApCnZlY3Rvcjpkb3QoIHZlY3RvciApCnZlY3Rvcjpjcm9zcyggdmVjdG9yICkKdmVjdG9yOmxlbmd0aCgpCnZlY3Rvcjpub3JtYWxpemUoKQp2ZWN0b3I6cm91bmQoKQp2ZWN0b3I6dG9zdHJpbmcoKQpUaGUgKywgLSBhbmQgKiBvcGVyYXRvcnMgY2FuIGFsc28gYmUgdXNlZCBvbiB2ZWN0b3JzLgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "vector.txt", decodeBase64(fileData134), true, true, false);
   var fileData135 = "ZGogcGxheXMgTXVzaWMgRGlzY3MgZnJvbSBkaXNrIGRyaXZlcyBhdHRhY2hlZCB0byB0aGUgY29tcHV0ZXIuCgpleDoKImRqIiBvciAiZGogcGxheSIgcGxheXMgYSByYW5kb20gZGlzYy4KImRqIHBsYXkgbGVmdCIgcGxheXMgdGhlIGRpc2MgaW4gdGhlIGRyaXZlIG9uIHRoZSBsZWZ0IG9mIHRoZSBjb21wdXRlci4KImRqIHN0b3AiIHN0b3BzIHRoZSBjdXJyZW50IGRpc2MuCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "dj.txt", decodeBase64(fileData135), true, true, false);
   var fileData136 = "dHVubmVsIGlzIGEgcHJvZ3JhbSBmb3IgTWluaW5nIFR1cnRsZXMuIFR1bm5lbCB3aWxsIG1pbmUgYSAzeDIgdHVubmVsIG9mIHRoZSBkZXB0aCBzcGVjaWZpZWQuCgpleDoKInR1bm5lbCAyMCIgd2lsbCB0dW5uZWwgYSB0dW5uZWwgMjAgYmxvY2tzIGxvbmcuCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "tunnel.txt", decodeBase64(fileData136), true, true, false);
   var fileData137 = "cHJvZ3JhbXMgbGlzdHMgYWxsIHRoZSBwcm9ncmFtcyBvbiB0aGUgcm9tIG9mIHRoZSBjb21wdXRlci4K";
   Module["FS_createDataFile"]("/craftos/rom/help", "programs.txt", decodeBase64(fileData137), true, true, false);
   var fileData138 = "VGhlIFNwZWFrZXIgaXMgYSBwZXJpcGhlcmFsIGRldmljZSBhdmFpbGFibGUgZm9yIENyYWZ0T1MuIFR5cGUgImhlbHAgcGVyaXBoZXJhbCIgdG8gbGVhcm4gYWJvdXQgdXNpbmcgdGhlIFBlcmlwaGVyYWwgQVBJIHRvIGNvbm5lY3Qgd2l0aCBwZXJpcGhlcmFscy4gV2hlbiBhIFNwZWFrZXIgaXMgY29ubmVjdGVkLCBwZXJpcGhlcmFsLmdldFR5cGUoKSB3aWxsIHJldHVybiAic3BlYWtlciIuCgpNZXRob2RzIGV4cG9zZWQgYnkgdGhlIFNwZWFrZXI6CnBsYXlTb3VuZCggc1Jlc291cmNlTmFtZSwgblZvbHVtZSwgblBpdGNoICkKcGxheU5vdGUoIHNJbnN0cnVtZW50TmFtZSwgblZvbHVtZSwgblBpdGNoICkKClJlc291cmNlIG5hbWUgaXMgdGhlIHNhbWUgYXMgdXNlZCBieSB0aGUgL3BsYXlzb3VuZCBjb21tYW5kLCBzdWNoIGFzICJtaW5lY3JhZnQ6ZW50aXR5LmNvdy5hbWJpZW50Ii4KSW5zdHJ1bWVudHMgYXJlIGFzIGZvbGxvd3M6ICJoYXJwIiwgImJhc3MiLCAic25hcmUiLCAiaGF0IiwgYW5kICJiYXNlZHJ1bSIgd2l0aCB0aGUgYWRkaXRpb24gb2YgImZsdXRlIiwgImJlbGwiLCAiY2hpbWUiLCBhbmQgImd1aXRhciIgaW4gTWluZWNyYWZ0IHZlcnNpb25zIDEuMTIgYW5kIGFib3ZlLgpUaWNrcyBpcyB0aGUgYW1vdW50IG9mIHRpbWVzIGEgbm90ZWJsb2NrIGhhcyBiZWVuIHR1bmVkIChyaWdodCBjbGlja2VkKS4K";
   Module["FS_createDataFile"]("/craftos/rom/help", "speakers.txt", decodeBase64(fileData138), true, true, false);
   var fileData139 = "cmVwZWF0IGlzIGEgcHJvZ3JhbSBmb3IgcmVwZWF0aW5nIHJlZG5ldCBtZXNzYWdlcyBhY3Jvc3MgbG9uZyBkaXN0YW5jZXMuIFRvIHVzZSwgY29ubmVjdCAyIG9yIG1vcmUgbW9kZW1zIHRvIGEgY29tcHV0ZXIgYW5kIHJ1biB0aGUgInJlcGVhdCIgcHJvZ3JhbTsgZnJvbSB0aGVuIG9uLCBhbnkgcmVkbmV0IG1lc3NhZ2Ugc2VudCBmcm9tIGFueSBjb21wdXRlciBpbiB3aXJlbGVzcyByYW5nZSBvciBjb25uZWN0ZWQgYnkgbmV0d29ya2luZyBjYWJsZSB0byBlaXRoZXIgb2YgdGhlIG1vZGVtcyB3aWxsIGJlIHJlcGVhdGVkIHRvIHRob3NlIG9uIHRoZSBvdGhlciBzaWRlLgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "repeat.txt", decodeBase64(fileData139), true, true, false);
   var fileData140 = "RnVuY3Rpb25zIGluIHRoZSBIVFRQIEFQSToKaHR0cC5jaGVja1VSTCggdXJsICkKaHR0cC5jaGVja1VSTEFzeW5jKCB1cmwgKQpodHRwLnJlcXVlc3QoIHVybCwgW3Bvc3REYXRhXSwgW2hlYWRlcnNdICkKaHR0cC5nZXQoIHVybCwgW2hlYWRlcnNdICkKaHR0cC5wb3N0KCB1cmwsIHBvc3REYXRhLCBbaGVhZGVyc10gKQoKVGhlIEhUVFAgQVBJIG1heSBiZSBkaXNhYmxlZCBpbiBDb21wdXRlckNyYWZ0LmNmZwpBIHBlcmlvZCBvZiB0aW1lIGFmdGVyIGEgaHR0cC5yZXF1ZXN0KCkgY2FsbCBpcyBtYWRlLCBhICJodHRwX3N1Y2Nlc3MiIG9yICJodHRwX2ZhaWx1cmUiIGV2ZW50IHdpbGwgYmUgcmFpc2VkLiBBcmd1bWVudHMgYXJlIHRoZSB1cmwgYW5kIGEgZmlsZSBoYW5kbGUgaWYgc3VjY2Vzc2Z1bC4gQXJndW1lbnRzIGFyZSBuaWwsIGFuIGVycm9yIG1lc3NhZ2UsIGFuZCAob3B0aW9uYWxseSkgYSBmaWxlIGhhbmRsZSBpZiB0aGUgcmVxdWVzdCBmYWlsZWQuIGh0dHAuZ2V0KCkgYW5kIGh0dHAucG9zdCgpIGJsb2NrIHVudGlsIHRoaXMgZXZlbnQgZmlyZXMgaW5zdGVhZC4K";
   Module["FS_createDataFile"]("/craftos/rom/help", "http.txt", decodeBase64(fileData140), true, true, false);
   var fileData141 = "VG8gc2V0IGJ1bmRsZWQgb3V0cHV0czoKYyA9IGNvbG9ycy5jb21iaW5lKCBjb2xvcnMucmVkLCBjb2xvcnMuYmx1ZSApCnJzLnNldEJ1bmRsZWRPdXRwdXQoICJsZWZ0IiwgYyApCgpjID0gY29sb3JzLmNvbWJpbmUoIGMsIGNvbG9ycy5ncmVlbiApCnJzLnNldEJ1bmRsZWRPdXRwdXQoICJsZWZ0IiwgYyApCgpjID0gY29sb3JzLnN1YnRyYWN0KCBjLCBjb2xvcnMuYmx1ZSApCnJzLnNldEJ1bmRsZWRPdXRwdXQoICJsZWZ0IiwgYyApCgpUbyBnZXQgYnVuZGxlZCBpbnB1dHM6CmMgPSBycy5nZXRCdW5kbGVkSW5wdXQoICJyaWdodCIgKQpyZWQgPSBjb2xvcnMudGVzdCggYywgY29sb3JzLnJlZCApCgpUeXBlICJoZWxwIGNvbG9ycyIgZm9yIHRoZSBsaXN0IG9mIHdpcmUgY29sb3JzLgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "bundled.txt", decodeBase64(fileData141), true, true, false);
   var fileData142 = "ZmcgaXMgYSBwcm9ncmFtIGZvciBBZHZhbmNlZCBDb21wdXRlcnMgd2hpY2ggb3BlbnMgYSBuZXcgdGFiIGluIHRoZSBmb3JlZ3JvdW5kLgoKZXg6CiJmZyIgd2lsbCBvcGVuIGEgZm9yZWdyb3VuZCB0YWIgcnVubmluZyB0aGUgc2hlbGwKImZnIHdvcm0iIHdpbGwgb3BlbiBhIGZvcmVncm91bmQgdGFiIHJ1bm5pbmcgdGhlICJ3b3JtIiBwcm9ncmFtCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "fg.txt", decodeBase64(fileData142), true, true, false);
   var fileData143 = "V2VsY29tZSB0byBDcmFmdE9TLVBDIQpUeXBlICJwcm9ncmFtcyIgdG8gc2VlIHRoZSBwcm9ncmFtcyB5b3UgY2FuIHJ1bi4KVHlwZSAiaGVscCA8cHJvZ3JhbT4iIHRvIHNlZSBoZWxwIGZvciBhIHNwZWNpZmljIHByb2dyYW0uClR5cGUgImhlbHAgcHJvZ3JhbW1pbmciIHRvIGxlYXJuIGFib3V0IHByb2dyYW1taW5nLgpUeXBlICJoZWxwIHdoYXRzbmV3IiB0byBmaW5kIG91dCBhYm91dCBuZXcgZmVhdHVyZXMuClR5cGUgImhlbHAgY3JlZGl0cyIgdG8gbGVhcm4gd2hvIG1hZGUgYWxsIHRoaXMuClR5cGUgImhlbHAgaW5kZXgiIHRvIHNlZSBhbGwgaGVscCB0b3BpY3MuCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "intro.txt", decodeBase64(fileData143), true, true, false);
   var fileData144 = "RnVuY3Rpb25zIGluIHRoZSBTaGVsbCBBUEk6CnNoZWxsLmV4aXQoKQpzaGVsbC5kaXIoKQpzaGVsbC5zZXREaXIoIHBhdGggKQpzaGVsbC5wYXRoKCkKc2hlbGwuc2V0UGF0aCggcGF0aCApCnNoZWxsLnJlc29sdmUoIGxvY2FscGF0aCApCnNoZWxsLnJlc29sdmVQcm9ncmFtKCBuYW1lICkKc2hlbGwuYWxpYXNlcygpCnNoZWxsLnNldEFsaWFzKCBhbGlhcywgY29tbWFuZCApCnNoZWxsLmNsZWFyQWxpYXMoIGFsaWFzICkKc2hlbGwucHJvZ3JhbXMoKQpzaGVsbC5ydW4oIHByb2dyYW0sIGFyZ3VtZW50cyApCnNoZWxsLmdldFJ1bm5pbmdQcm9ncmFtKCkKc2hlbGwuY29tcGxldGUoIGxpbmUgKQpzaGVsbC5jb21wbGV0ZVByb2dyYW0oIHByb2dyYW0gKQpzaGVsbC5zZXRDb21wbGV0aW9uRnVuY3Rpb24oIHByb2dyYW0sIGZuQ29tcGxldGUgKQpzaGVsbC5vcGVuVGFiKCBwcm9ncmFtLCBhcmd1bWVudHMgKSAoQWR2YW5jZWQgQ29tcHV0ZXIgcmVxdWlyZWQpCnNoZWxsLnN3aXRjaFRhYiggbiApIChBZHZhbmNlZCBDb21wdXRlciByZXF1aXJlZCkK";
   Module["FS_createDataFile"]("/craftos/rom/help", "shellapi.txt", decodeBase64(fileData144), true, true, false);
   var fileData145 = "VGhlIHBlcmlwaGVyYWwgQVBJIGlzIGZvciBpbnRlcmFjdGluZyB3aXRoIGV4dGVybmFsIHBlcmlwaGVyYWwgZGV2aWNlcy4gVHlwZSAiaGVscCBwZXJpcGhlcmFscyIgdG8gbGVhcm4gYWJvdXQgdGhlIHBlcmlwaGVyYWxzIGF2YWlsYWJsZS4KCkZ1bmN0aW9ucyBpbiB0aGUgcGVyaXBoZXJhbCBBUEk6CnBlcmlwaGVyYWwuZ2V0TmFtZXMoKQpwZXJpcGhlcmFsLmlzUHJlc2VudCggbmFtZSApCnBlcmlwaGVyYWwuZ2V0VHlwZSggbmFtZSApCnBlcmlwaGVyYWwuZ2V0TmFtZSggcGVyaXBoZXJhbCApCnBlcmlwaGVyYWwuZ2V0TWV0aG9kcyggbmFtZSApCnBlcmlwaGVyYWwuY2FsbCggbmFtZSwgbWV0aG9kTmFtZSwgcGFyYW0xLCBwYXJhbTIsIC4uLiApCnBlcmlwaGVyYWwud3JhcCggbmFtZSApCnBlcmlwaGVyYWwuZmluZCggdHlwZSwgW2ZuRmlsdGVyXSApCnBlcmlwaGVyYWwuYXR0YWNoKCBzaWRlLCB0eXBlLCBwYXJhbTEsIHBhcmFtMiwgLi4uICkKcGVyaXBoZXJhbC5kZXRhY2goIHNpZGUgKQoKRXZlbnRzIGZpcmVkIGJ5IHRoZSBwZXJpcGhlcmFsIEFQSToKInBlcmlwaGVyYWwiIHdoZW4gYSBuZXcgcGVyaXBoZXJhbCBpcyBhdHRhY2hlZC4gQXJndW1lbnQgaXMgdGhlIG5hbWUuCiJwZXJpcGhlcmFsX2RldGFjaCIgd2hlbiBhIHBlcmlwaGVyYWwgaXMgcmVtb3ZlZC4gQXJndW1lbnQgaXMgdGhlIG5hbWUuClR5cGUgImhlbHAgZXZlbnRzIiB0byBsZWFybiBhYm91dCB0aGUgZXZlbnQgc3lzdGVtLgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "peripheral.txt", decodeBase64(fileData145), true, true, false);
   var fileData146 = "Y3JhZnQgaXMgYSBwcm9ncmFtIGZvciBDcmFmdHkgVHVydGxlcy4gQ3JhZnQgd2lsbCBjcmFmdCBhIHN0YWNrIG9mIGl0ZW1zIHVzaW5nIHRoZSBjdXJyZW50IGludmVudG9yeS4KCmV4OgoiY3JhZnQgYWxsIiB3aWxsIGNyYWZ0IGFzIG1hbnkgaXRlbXMgYXMgcG9zc2libGUKImNyYWZ0IDUiIHdpbGwgY3JhZnQgYXQgbW9zdCA1IHRpbWVzCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "craft.txt", decodeBase64(fileData146), true, true, false);
   var fileData147 = "VGhlIGZ1bmN0aW9uIG9zLnB1bGxFdmVudCgpIHdpbGwgeWllbGQgdGhlIHByb2dyYW0gdW50aWwgYSBzeXN0ZW0gZXZlbnQgb2NjdXJzLiBUaGUgZmlyc3QgcmV0dXJuIHZhbHVlIGlzIHRoZSBldmVudCBuYW1lLCBmb2xsb3dlZCBieSBhbnkgYXJndW1lbnRzLgoKU29tZSBldmVudHMgd2hpY2ggY2FuIG9jY3VyIGFyZToKImNoYXIiIHdoZW4gdGV4dCBpcyB0eXBlZCBvbiB0aGUga2V5Ym9hcmQuIEFyZ3VtZW50IGlzIHRoZSBjaGFyYWN0ZXIgdHlwZWQuCiJrZXkiIHdoZW4gYSBrZXkgaXMgcHJlc3NlZCBvbiB0aGUga2V5Ym9hcmQuIEFyZ3VtZW50cyBhcmUgdGhlIGtleWNvZGUgYW5kIHdoZXRoZXIgdGhlIGtleSBpcyBhIHJlcGVhdC4gQ29tcGFyZSB0aGUga2V5Y29kZSB0byB0aGUgdmFsdWVzIGluIGtleXMgQVBJIHRvIHNlZSB3aGljaCBrZXkgd2FzIHByZXNzZWQuCiJrZXlfdXAiIHdoZW4gYSBrZXkgaXMgcmVsZWFzZWQgb24gdGhlIGtleWJvYXJkLiBBcmd1bWVudCBpcyB0aGUgbnVtZXJpY2FsIGtleWNvZGUuIENvbXBhcmUgdG8gdGhlIHZhbHVlcyBpbiBrZXlzIEFQSSB0byBzZWUgd2hpY2gga2V5IHdhcyByZWxlYXNlZC4KInBhc3RlIiB3aGVuIHRleHQgaXMgcGFzdGVkIGZyb20gdGhlIHVzZXJzIGtleWJvYXJkLiBBcmd1bWVudCBpcyB0aGUgbGluZSBvZiB0ZXh0IHBhc3RlZC4KCkV2ZW50cyBvbmx5IG9uIGFkdmFuY2VkIGNvbXB1dGVyczoKIm1vdXNlX2NsaWNrIiB3aGVuIGEgdXNlciBjbGlja3MgdGhlIG1vdXNlLiBBcmd1bWVudHMgYXJlIGJ1dHRvbiwgeFBvcywgeVBvcy4KIm1vdXNlX2RyYWciIHdoZW4gYSB1c2VyIG1vdmVzIHRoZSBtb3VzZSB3aGVuIGhlbGQuIEFyZ3VtZW50cyBhcmUgYnV0dG9uLCB4UG9zLCB5UG9zLgoibW91c2VfdXAiIHdoZW4gYSB1c2VyIHJlbGVhc2VzIHRoZSBtb3VzZSBidXR0b24uIEFyZ3VtZW50cyBhcmUgYnV0dG9uLCB4UG9zLCB5UG9zLgoibW91c2Vfc2Nyb2xsIiB3aGVuIGEgdXNlciB1c2VzIHRoZSBzY3JvbGx3aGVlbCBvbiB0aGUgbW91c2UuIEFyZ3VtZW50cyBhcmUgZGlyZWN0aW9uLCB4UG9zLCB5UG9zLgoKT3RoZXIgQVBJcyBhbmQgcGVyaXBoZXJhbHMgd2lsbCBlbWl0IHRoZWlyIG93biBldmVudHMuIFNlZSB0aGVpciByZXNwZWN0aXZlIGhlbHAgcGFnZXMgZm9yIGRldGFpbHMuCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "events.txt", decodeBase64(fileData147), true, true, false);
   var fileData148 = "bHMgd2lsbCBsaXN0IGFsbCB0aGUgZGlyZWN0b3JpZXMgYW5kIGZpbGVzIGluIHRoZSBjdXJyZW50IGxvY2F0aW9uLiBVc2UgInR5cGUiIHRvIGZpbmQgb3V0IGlmIGFuIGl0ZW0gaXMgYSBmaWxlIG9yIGEgZGlyZWN0b3J5Lgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "list.txt", decodeBase64(fileData148), true, true, false);
   var fileData149 = "TW9zdGx5IGhhcm1sZXNzLgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "earth.txt", decodeBase64(fileData149), true, true, false);
   var fileData150 = "YWR2ZW50dXJlIGlzIGEgdGV4dCBhZHZlbnR1cmUgZ2FtZSBmb3IgQ3JhZnRPUy4gVG8gbmF2aWdhdGUgYXJvdW5kIHRoZSB3b3JsZCBvZiBhZHZlbnR1cmUsIHR5cGUgc2ltcGxlIGluc3RydWN0aW9ucyB0byB0aGUgaW50ZXJwcmV0ZXIsIGZvciBleGFtcGxlOiAiZ28gbm9ydGgiLCAicHVuY2ggdHJlZSIsICJjcmFmdCBwbGFua3MiLCAibWluZSBjb2FsIHdpdGggcGlja2F4ZSIsICJoaXQgY3JlZXBlciB3aXRoIHN3b3JkIgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "adventure.txt", decodeBase64(fileData150), true, true, false);
   var fileData151 = "VGhlIGNvbmZpZyBjb21tYW5kIGFsbG93cyB5b3UgdG8gdmlldyBhbmQgY2hhbmdlIENvbXB1dGVyQ3JhZnQgY29uZmlndXJhdGlvbiBvcHRpb25zIGZyb20gaW5zaWRlIENyYWZ0T1MuClRoZSBsaXN0IHN1YmNvbW1hbmQgbGlzdHMgYWxsIGtleXMgYW5kIHZhbHVlcyBpbiB0aGUgY29uZmlndXJhdGlvbi4KVGhlIGdldCBzdWJjb21tYW5kIHByaW50cyB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgc3BlY2lmaWVkIG9wdGlvbi4KVGhlIHNldCBzdWJjb21tYW5kIHNldHMgdGhlIHZhbHVlIG9mIHRoZSBzcGVjaWZpZWQgb3B0aW9uLg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "config.txt", decodeBase64(fileData151), true, true, false);
   var fileData152 = "IyMgdjIuNi4zIC0gRGVjZW1iZXIgMTEsIDIwMjEKKiBVcGRhdGVkIENDOlQgdmVyc2lvbiB0byAxLjk5LjEKICAqIFBlcmlwaGVyYWxzIGNhbiBub3cgaGF2ZSBtdWx0aXBsZSB0eXBlcy4gYHBlcmlwaGVyYWwuZ2V0VHlwZWAgbm93IHJldHVybnMgbXVsdGlwbGUgdmFsdWVzLCBhbmQgYHBlcmlwaGVyYWwuaGFzVHlwZWAgY2hlY2tzIGlmIGEgcGVyaXBoZXJhbCBoYXMgYSBzcGVjaWZpYyB0eXBlLgogICogQWRkIGZlYXR1cmUgaW50cm9kdWN0aW9uL2NoYW5nZWQgdmVyc2lvbiBpbmZvcm1hdGlvbiB0byB0aGUgZG9jdW1lbnRhdGlvbi4gKE1DSmFjazEyMykKICAqIFJlZG5ldCBjYW4gbm93IGhhbmRsZSBjb21wdXRlciBJRHMgbGFyZ2VyIHRoYW4gNjU1MzUuIChBbGUzMmJpdCkKICAqIE9wdGltaXNlIHBlcmlwaGVyYWwgY2FsbHMgaW4gYHJlZG5ldC5ydW5gLiAoeEFuYXZyaW5zKQogICogQWRkIGBjYy5wcmV0dHkucHJldHR5X3ByaW50YCBoZWxwZXIgZnVuY3Rpb24gKEx1cHVzNTkwKS4KICAqIEZpeCBgdGV4dHV0aWxzLnNlcmlhbGl6ZWAgbm90IHNlcmlhbGlzaW5nIGluZmluaXR5IGFuZCBuYW4gdmFsdWVzLiAoV29qYmllKQogICogQWRkIGBwYWNrYWdlLnNlYXJjaHBhdGhgIHRvIHRoZSBgY2MucmVxdWlyZWAgQVBJLiAoTUNKYWNrMTIzKQoqIEJ1bXBlZCBzdHJ1Y3R1cmUgdmVyc2lvbiB0byA3CiAgKiBOZXcgZmllbGRzIGluIGBDb21wdXRlcmA6CiAgICAqIGBzaG91bGREZWxldGVEZWJ1Z2dlcmAKICAqIE5ldyBmaWVsZHMgaW4gYHBlcmlwaGVyYWxgOgogICAgKiBgZ2V0VHlwZXNgCiogQWRkZWQgYWJpbGl0eSB0byBzZXQgcHJpbnRlciBpbmsgY29sb3IKKiBBZGRlZCBzdXBwb3J0IGZvciBoZXhhZGVjaW1hbCBmbG9hdGluZy1wb2ludCBudW1iZXJzCiogVW53cml0YWJsZSBkYXRhIGRpcmVjdG9yaWVzIG5vdyB0aHJvdyBhbiBlcnJvcgoqIERlZmF1bHQgcGVyaXBoZXJhbHMgbm93IHRocm93IGFuIGVycm9yIHdoZW4gY2FsbGluZyBhIG1ldGhvZCB0aGF0IGRvZXNuJ3QgZXhpc3QKKiBUZXJtaW5hbCBmcm96ZW4gc3RhdHVzIGlzIG5vdyByZXNldCBhZnRlciByZWJvb3RpbmcKKiBYMTEgYW5kIFdheWxhbmQgbGlicmFyaWVzIGFyZSBubyBsb25nZXIgcmVxdWlyZWQgd2hlbiBidWlsZGluZyBmb3IgTGludXgKKiBgXDBgIGNoYXJhY3RlcnMgaW4gYSBzdHJpbmcgYXJlIG5vdyB0cmVhdGVkIGFzIGEgc3BhY2UgYnkgYGxvYWRgCiogRml4ZWQgd2Vic29ja2V0LnJlY2VpdmUgbm90IGZ1bmN0aW9uaW5nIHByb3Blcmx5CiogRml4ZWQgYGZzLmNvcHlgIHN0b3BwaW5nIGF0IEVPRiBieXRlcyBvbiBXaW5kb3dzICgjMjI2KQoqIEZpeGVkIGhhcmR3YXJlIHJlbmRlcmVyIG5vdCBzaG93aW5nIGFueXRoaW5nIG9uIHNjcmVlbiAoIzIyNykKKiBGaXhlZCBjcmFzaCB3aGVuIHVzaW5nIGBkZXRhY2hgIG9uIGEgZGVidWdnZXIKKiBGaXhlZCBjcmFzaCB3aGVuIGFuIGVycm9yIG9jY3VycyBpbiBgZHJpdmUuaW5zZXJ0RGlza2Agb24gV2luZG93cwoqIEZpeGVkIGNvcm91dGluZSBtZXRhdGFibGUgZ2V0dGluZyBvdmVyd3JpdHRlbiBieSBjb3JvdXRpbmUuY3JlYXRlCiogRml4ZWQgYGtlZXBPcGVuT25TaHV0ZG93bmAgdXNpbmcgMTAwJSBDUFUKKiBGaXhlZCBDdHJsK1Igbm90IHdvcmtpbmcgd2l0aCBga2VlcE9wZW5PblNodXRkb3duYCBhZnRlciB0d28gc3VjY2Vzc2l2ZSByZWJvb3RzCiogRml4ZWQgYGdldEN1cnNvckJsaW5rYCBiZWluZyBtaXNzaW5nIGZyb20gbW9uaXRvcnMKKiBGaXhlZCBtb25pdG9yIGV2ZW50cyBub3Qgd29ya2luZyBwcm9wZXJseSBpbiByYXcgbW9kZQoqIEZpeGVkIGEgcG9zc2libGUgcmFjZSBjb25kaXRpb24gd2hlbiBzaHV0dGluZyBkb3duIG9uIGV4aXQKKiBGaXhlZCByYWNlIGNvbmRpdGlvbiBpbiB0aW1lciBlcmFzdXJlCiogRml4ZWQgdmFyaW91cyBvdGhlciBzbWFsbCByYWNlIGNvbmRpdGlvbnMKCiMjIHYyLjYuMiAtIE9jdG9iZXIgMzEsIDIwMjEKKiBCdW1wZWQgc3RydWN0dXJlIHZlcnNpb24gdG8gNgogICogTmV3IGZpZWxkcyBpbiBgQ29tcHV0ZXJgOgogICAgKiBgb3BlbldlYnNvY2tldFNlcnZlcnNgCiAgKiBOZXcgZmllbGRzIGluIGBjb25maWd1cmF0aW9uYDoKICAgICogYGRyb3BGaWxlUGF0aGAKICAqIE5ldyBmaWVsZHMgaW4gYFBsdWdpbkZ1bmN0aW9uc2A6CiAgICAqIGByZWdpc3RlclBlcmlwaGVyYWxGbmAKKiBBZGRlZCBhYmlsaXR5IHRvIGRyb3AgZmlsZXMgdG8gcGFzdGUgdGhlaXIgcGF0aHMgaW5zdGVhZCBvZiBjb3B5aW5nIHRoZSBmaWxlCiAgKiBFbmFibGVkIHVzaW5nIGBkcm9wRmlsZVBhdGhgIGNvbmZpZyBzZXR0aW5nCiogQWRkZWQgc2luZ2xlLXdpbmRvdyBtb2RlCiAgKiBEaXNwbGF5cyBhbGwgY29tcHV0ZXJzIG9uIHRoZSBzYW1lIHdpbmRvdwogICogQWN0aXZhdGVkIHdpdGggYC0tc2luZ2xlYCBmbGFnIG9uIENMSQogICogQ3RybCtBbHQrTGVmdC9SaWdodCAoQ21kK09wdGlvbitML1Igb24gTWFjKSB0byBzd2l0Y2ggd2luZG93cyBpbiBHVUkKKiBBZGRlZCBhYmlsaXR5IHRvIGNvcHkgc2NyZWVuc2hvdHMgb24gTGludXggKFgxMSwgV2F5bGFuZCkKKiBBZGRlZCBgcmVnaXN0ZXJQZXJpcGhlcmFsRm5gIGNhcGFiaWxpdHkgdG8gYWxsb3cgcGFzc2luZyBhIGZ1bmN0aW9uIG9iamVjdAogICogYHJlZ2lzdGVyUGVyaXBoZXJhbGAgaXMgbm93IGRlcHJlY2F0ZWQKKiBBZGRlZCBicmFuZC1uZXcgVUkgb24gbW9iaWxlIGRldmljZXMgKGJldGEgb25seSkKICAqIFJlZGVzaWduZWQgVUkgd2l0aCBuYXZpZ2F0aW9uIGJhciAmIGhvdGtleSB0b29sYmFyIGFib3ZlIGtleWJvYXJkCiAgKiBBZGRlZCBzdXBwb3J0IGZvciBjb21wdXRlciwgZGVidWdnZXIsIGFuZCBtb25pdG9yIHBlcmlwaGVyYWxzCiAgKiBDaGFuZ2Ugd2luZG93cyB1c2luZyB0aGUgYXJyb3dzIGluIHRoZSBuYXZpZ2F0aW9uIGJhcgogICogQXV0b21hdGljIHNoZWxsIHJlc2l6aW5nIG1ha2VzIHN1cmUgeW91IGNhbiBzZWUgd2hhdCB5b3UgdHlwZQogICogQXJyb3cga2V5IGdlc3R1cmVzIG5vdyB3b3JrIG9uIEFuZHJvaWQgYXMgd2VsbCBhcyBpT1MKICAqIEFkZGVkIG5ldyBsYXVuY2ggc2NyZWVuIChpT1MpCiAgKiBUaGUgbmV3IFVJIGlzIG9ubHkgYXZhaWxhYmxlIGluIGJldGEgYnVpbGRzIGF0IHRoZSBtb21lbnQgZHVlIHRvIGJ1Z2dpbmVzcwogICAgKiBpT1M6IGh0dHBzOi8vdGVzdGZsaWdodC5hcHBsZS5jb20vam9pbi9TaXVYbGlqUgogICAgKiBBbmRyb2lkOiBodHRwczovL3d3dy5jcmFmdG9zLXBjLmNjL25pZ2h0bHkvCiogSW1wcm92ZWQgV2ViU29ja2V0IHNlcnZlciBmdW5jdGlvbmFsaXR5CiAgKiBTZXJ2ZXJzIGNhbiBub3cgYmUgcHJvcGVybHkgb3BlbmVkIGJ5IGNhbGxpbmcgYGh0dHAud2Vic29ja2V0YCB3aXRoIGEgcG9ydCBhcmd1bWVudAogICogTXVsdGlwbGUgY2xpZW50cyB0byB0aGUgc2FtZSBzZXJ2ZXIgbm93IGdldCB1bmlxdWUgaWRlbnRpZmllcnMgYXMgdXNlcmRhdGEgdmFsdWVzCiAgKiBBZGRlZCBgd2Vic29ja2V0X3NlcnZlcl9jbG9zZWRgIGV2ZW50IHRvIG5vdGlmeSB3aGVuIGFuIG9wZW5lZCBXZWJTb2NrZXQgc2VydmVyIGlzIG5vIGxvbmdlciBhY2NlcHRpbmcgY29ubmVjdGlvbnMKKiBSZXBsYWNlZCBXaW5kb3dzIG5pZ2h0bHkgYnVpbGRzIHdpdGggQ0kgYnVpbGQgYXJ0aWZhY3RzCiAgKiBXaW5kb3dzIGJ1aWxkcyB3aWxsIGJlIGF2YWlsYWJsZSB3aXRoaW4gbWludXRlcyBvZiB0aGUgbGF0ZXN0IGNvbW1pdCBiZWluZyBwdXNoZWQKICAqIE5pZ2h0bHkgYnVpbGRzIGZvciBXaW5kb3dzIHdpbGwgbm8gbG9uZ2VyIGJlIHBvc3RlZCBvbiB0aGUgd2Vic2l0ZQogICogR28gdG8gaHR0cHM6Ly9naXRodWIuY29tL01DSmFjazEyMy9jcmFmdG9zMi9hY3Rpb25zIGZvciB0aGUgbGF0ZXN0IGJ1aWxkCiogQ0xJIG1vZGUgbm93IHVzZXMgVW5pY29kZSBjaGFyYWN0ZXJzIGZvciBub24tQVNDSUkgY2hhcmFjdGVycwogICogRHJhd2luZyBjaGFyYWN0ZXJzIGFyZSBhcHByb3hpbWF0ZWQgdXNpbmcgQnJhaWxsZSBjaGFyYWN0ZXJzOyB0aGlzIG1heSBub3Qgc2hvdyB1cCB3ZWxsIG9uIGEgcmVhbCB0ZXJtaW5hbAoqIEltcHJvdmVkIHF1YWxpdHkgb2YgQ0NFbXVYIHBsdWdpbgoqIFdlYlNvY2tldCB0ZXh0IG1lc3NhZ2VzIGFyZSBub3cgc2VudCBpbiBVVEYtOAoqIEltcHJvdmVkIFJlZG5ldCBkZWR1cGxpY2F0aW9uIGVmZmljaWVuY3kgKHBhcnQgb2YgQ0M6VCAxLjk5LjApCiogY2FzaCBubyBsb25nZXIgc2F2ZXMgZHVwbGljYXRlIGhpc3RvcnkgZW50cmllcwoqIERlcHJlY2F0ZWQgYHBlcmlwaGVyYWw6OnVwZGF0ZWAgYXMgaXQgd2FzIG5ldmVyIHVzZWQKKiBGaXhlZCBjcmFzaGluZyB3aGVuZXZlciBvcGVuaW5nIGEgZGVidWdnZXIgKGZyb20gY3Jhc2ggcmVwb3J0cykKKiBGaXhlZCBhIGNyYXNoIHdoZW4gY29tcGFyaW5nIHR3byBpZGVudGljYWwgc3Vic3RyaW5ncyAoIzIxOCkKKiBGaXhlZCBhIGNyYXNoIGNhdXNlZCBieSBmb3JjZS1jbG9zaW5nIGEgY29tcHV0ZXIgYWZ0ZXIgaXQncyBhbHJlYWR5IGdvbmUgKGZyb20gY3Jhc2ggcmVwb3J0cykKKiBGaXhlZCBhIGNyYXNoIGluIGB0ZXJtLmRyYXdQaXhlbHNgIHdoZW4gcGFzc2luZyBhIG5lZ2F0aXZlIHZhbHVlICgjMjI0KQoqIEZpeGVkIG9jY2FzaW9uYWwgY3Jhc2hlcyBmcm9tIGBnZXRfY29tcGAgY2FjaGUgZHVwbGljYXRpb24gKGZyb20gY3Jhc2ggcmVwb3J0cykKKiBGaXhlZCBjcmFzaGVzIGFuZCBpbmNvcnJlY3QgYmVoYXZpb3Igd2hlbiB1c2luZyBgc3RyaW5nLmZvcm1hdGAgd2l0aCBzdWJzdHJpbmdzIChmcm9tIGNyYXNoIHJlcG9ydHM6IEBDcmVlcGkpCiogRml4ZWQgc3RyaW5ncyBpbiBtb2RlbSBtZXNzYWdlcyBub3QgYmVpbmcgc2VudCBwcm9wZXJseSBvbiBMaW51eCAoQEJ5dGVjb2RlRWxpKQoqIEZpeGVkIGJpbmFyeSBzdXBwb3J0IGluIFdlYlNvY2tldCBtZXNzYWdlcwoqIEZpeGVkIGFuIGlzc3VlIGNhdXNpbmcgaW5wdXQgdG8gc3RvcCB3b3JraW5nIGluIHJhdyBtb2RlIG9uIExpbnV4CiogRml4ZWQgc3RhY2sgb3ZlcmZsb3cgd2hlbiBhbiBlcnJvciBoYW5kbGVyIGF0dGVtcHRzIHRvIHlpZWxkIChmcm9tIGNyYXNoIHJlcG9ydHMpCiogRml4ZWQgYSBidWcgY2F1c2luZyBvbGQgYG9zYCBmdW5jdGlvbnMgdG8gYmUgZXhwb3NlZCAoISkKKiBGaXhlZCBhbiBpbmNvcnJlY3QgZXJyb3IgbWVzc2FnZSB3aGVuIGNvbmNhdGVuYXRpbmcgYSBjb25jYXRlbmF0ZWQgc3RyaW5nIG9yIHN1YnN0cmluZyB3aXRoIGEgdmFsdWUgb2YgYW4gaW52YWxpZCB0eXBlIChAOTU1MSkKKiBGaXhlZCBhbiBpc3N1ZSB3aXRoIGNvbXBsZXRpb24gZm9yIGJvb2xlYW4gY29uZmlnIHNldHRpbmdzCgojIyB2Mi42LjEgLSBBdWd1c3QgMzEsIDIwMjEKKiBCdW1wZWQgQ0M6VCB2ZXJzaW9uIHRvIDEuOTguMgogICogQWRkIG1vdGQgZm9yIGZpbGUgdXBsb2FkaW5nLgogICogRml4IGBzZXR0aW5ncy5kZWZpbmVgIG5vdCBhY2NlcHRpbmcgYSBuaWwgc2Vjb25kIGFyZ3VtZW50IChTa3lUaGVDb2RlTWFzdGVyKS4KICAqIEFkZCBhIG1pc3NpbmcgdHlwZSBjaGVjayBmb3IgYGh0dHAuY2hlY2tVUkxgLgogICogUHJldmVudCBgcGFyYWxsZWwuKmAgZnJvbSBoYW5naW5nIHdoZW4gbm8gYXJndW1lbnRzIGFyZSBnaXZlbi4KICAqIFByZXZlbnQgaXNzdWUgaW4gcmVkbmV0IHdoZW4gdGhlIG1lc3NhZ2UgSUQgaXMgTmFOLgogICogRml4IGBoZWxwYCBwcm9ncmFtIGNyYXNoaW5nIHdoZW4gdGVybWluYWwgY2hhbmdlcyB3aWR0aC4KICAqIFByZXZlbnQgYHdnZXRgIGNyYXNoaW5nIHdoZW4gZ2l2ZW4gYW4gaW52YWxpZCBVUkwgYW5kIG5vIGZpbGVuYW1lLgogICogQ29ycmVjdGx5IHdyYXAgc3RyaW5nIHdpdGhpbiBgdGV4dHV0aWxzLnNsb3dXcml0ZWAuCiogQnVtcGVkIHN0cnVjdHVyZSB2ZXJzaW9uIHRvIDUKICAqIE5ldyBmaWVsZHMgaW4gYGNvbmZpZ3VyYXRpb25gOgogICAgKiBgdXNlV2ViUGAKICAqIE5ldyBmaWVsZHMgaW4gYENvbXB1dGVyYDoKICAgICogYGh0dHBSZXF1ZXN0UXVldWVgCiAgICAqIGBodHRwUmVxdWVzdFF1ZXVlTXV0ZXhgCiogQWRkZWQgc3VwcG9ydCBmb3Igc2NyZWVuc2hvdHMgYW5kIHJlY29yZGluZ3MgaW4gV2ViUCBmb3JtYXQKICAqIFdlYlAgaXMgYW4gaW1hZ2UgZm9ybWF0IHRoYXQgaXMgbXVjaCBzbWFsbGVyIHRoYW4gUE5HL0dJRiBhbmQgc3VwcG9ydHMgYW5pbWF0aW9uCiAgKiBBbGwgbW9kZXJuIHdlYiBicm93c2VycyBhbmQgT1NlcyBzdXBwb3J0IFdlYlAgaW1hZ2VzCiAgICAqIFVuZm9ydHVuYXRlbHksIERpc2NvcmQgZG9lcyBub3Qgc3VwcG9ydCBXZWJQIHJlY29yZGluZ3MgYXQgdGhlIG1vbWVudC4KICAqIFJlY29yZGluZ3MgY2FuIGJlIHVwIHRvIDIweCBzbWFsbGVyIHRoYW4gdGhlaXIgR0lGIGNvdW50ZXJwYXJ0cwogICogRGlzYWJsZWQgYnkgZGVmYXVsdDsgZW5hYmxlIHRoZSBgdXNlV2ViUGAgY29uZmlnIG9wdGlvbiB0byB1c2UgV2ViUCBpbnN0ZWFkIG9mIFBORy9HSUYKKiBBZGRlZCBzdXBwb3J0IGZvciBkZWx0YSBpbnN0YWxsZXJzIG9uIFdpbmRvd3MKICAqIFRoZXNlIGFyZSBzdHJpcHBlZC1kb3duIHZlcnNpb25zIG9mIHRoZSBpbnN0YWxsZXIgdGhhdCBvbmx5IGNvbnRhaW4gY29yZSBDcmFmdE9TLVBDIGZpbGVzCiAgKiBUaGlzIHJlZHVjZXMgdGhlIHNpemUgb2YgZGF0YSB0byBkb3dubG9hZCB3aGVuIHVwZGF0aW5nCiAgKiBTb21lIHZlcnNpb25zIG1heSBub3QgaGF2ZSBkZWx0YSBpbnN0YWxsZXJzIGlmIGxpYnJhcmllcyBuZWVkIHRvIGJlIHVwZGF0ZWQKKiBBZGRlZCB1cGRhdGUgZG93bmxvYWQgcHJvZ3Jlc3Mgd2luZG93IG9uIFdpbmRvd3M7IG1hZGUgcHJvZ3Jlc3MgYmFyIGRldGVybWluYXRlIG9uIG1hY09TCiogSW1wbGVtZW50ZWQgbGltaXRzIGZvciBIVFRQIG9wdGlvbnMgdGhhdCB3ZXJlIHByZXNlbnQgYnV0IHVuZnVuY3Rpb25hbAoqIFBhcmFtZXRlcnMgdG8gZXZlbnRzIGFyZSBub3cgY29waWVkIHdoZW4gc3RhbmRhcmRzIG1vZGUgaXMgZW5hYmxlZAoqIE9wZW5pbmcgYSBmaWxlIHdoZW4gdGhlIG1heGltdW0gZmlsZSBjb3VudCBpcyByZWFjaGVkIG5vdyBjcmVhdGVzIHRoZSBmaWxlIGFzIGV4cGVjdGVkCiogUmV3cm90ZSBgd2Vic29ja2V0LnJlY2VpdmVgIGZ1bmN0aW9uIGluIEMgdG8gcGVyZm9ybSBiZXR0ZXIKKiBGaXhlZCBXZWJTb2NrZXRzIG5vdCBzZW5kaW5nIFBPTkcgcGFja2V0cywgY2F1c2luZyBzb2NrZXRzIHRvIHJhbmRvbWx5IGNsb3NlIGFmdGVyIGEgd2hpbGUKKiBGaXhlZCBjcmFzaGVzIHdoZW4gdHJ5aW5nIHRvIHVzZSBhIFdlYlNvY2tldCBoYW5kbGUgYWZ0ZXIgY2xvc2luZyBpdAoqIEZpeGVkIGEgcmFjZSBjb25kaXRpb24gaW4gSFRUUCByZXF1ZXN0cyB0aGF0IGNhdXNlZCBhIGNyYXNoCiogRml4ZWQgYSByYWNlIGNvbmRpdGlvbiBjYXVzaW5nIGNyYXNoZXMgd2hlbiBydW5uaW5nIGEgdGFzayBvbiB0aGUgbWFpbiB0aHJlYWQKKiBGaXhlZCBhIHJhY2UgY29uZGl0aW9uIGNhdXNpbmcgZnVuY3Rpb25zIChsaWtlIGB0ZXJtLndyaXRlYCkgdG8gYmUgcnVuIG9uIHRoZSB3cm9uZyBjb21wdXRlcgoqIEZpeGVkIGFuIGlzc3VlIGNhdXNpbmcgdGhlIGZpcnN0IGZyYW1lIG9mIEdJRnMgdG8gYmUgZGFya2VyIHRoYW4gdGhlIHJlc3Qgb2YgdGhlIHJlY29yZGluZwoqIEZpeGVkIHRoZSBjbG9zZSBidXR0b24gbm90IHdvcmtpbmcgaW4gc29tZSBjYXNlcwoqIEZpeGVkIGBmc2AgQVBJIGFsbG93aW5nIGlsbGVnYWwgY2hhcmFjdGVycyBvbiBXaW5kb3dzCiogRml4ZWQgbW9kZW1zIG5vdCBjaGVja2luZyBpZiBjaGFubmVsIG51bWJlcnMgYXJlIGluIHJhbmdlCiogRml4ZWQgYHV0ZjguY2hhcnBhdHRlcm5gIG5vdCBleGlzdGluZwoqIEZpeGVkIGNyYXNoIGVycm9yIG1lc3NhZ2Ugbm90IGFwcGVhcmluZyBpbiBzdGFuZGFyZHMgbW9kZQoqIEZpeGVkIGBvcy5jbG9jaygpYCBub3QgcmVzZXR0aW5nIG9uIHJlYm9vdCAoIzIxNSkKKiBGaXhlZCBjcmFzaCByZXBvcnRlciBmYWlsaW5nIHRvIHVwbG9hZCBmaWxlcyArIHNvbWUgd2Vic2l0ZXMgZmFpbGluZyB0byBjb25uZWN0CiAgKiBUTFMgMS4zIHdhcyBkaXNhYmxlZCAocG9jb3Byb2plY3QvcG9jbyMzMzk1KSwgc28gSFRUUFMgY29ubmVjdGlvbnMgbWF5IGJlIHNsaWdodGx5IGxlc3Mgc2VjdXJlCiogRml4ZWQgZHVwbGljYXRpb24gb2YgZGVmYXVsdCBibGFjay93aGl0ZWxpc3QgZW50cmllcwoqIEZpeGVkIGBwYWlyc2AgcmV0dXJuaW5nIGluY29ycmVjdCB2YWx1ZXMgYWZ0ZXIgYSBjYWxsIGhvb2sKCiMjIHYyLjYgLSBKdWx5IDExLCAyMDIxCiogQ3JhZnRPUy1QQyBpcyBub3cgYXZhaWxhYmxlIG9uIEFuZHJvaWQgYW5kIGlPUwogICogQXBwcyBhcmUgYXZhaWxhYmxlIG9uIHRoZSBpT1MgQXBwIFN0b3JlIChQbGF5IFN0b3JlIGluIHRoZSBmdXR1cmU7IHBsZWFzZSBkb3dubG9hZCB0aGUgQVBLIG1hbnVhbGx5KQogICogU3VwcG9ydHMgc2FtZSBmZWF0dXJlIHNldCBhcyBkZXNrdG9wIENyYWZ0T1MtUEMKICAgICogTW9uaXRvcnMgYW5kIG11bHRpLWNvbXB1dGVyIHN1cHBvcnQgaXMgbWlzc2luZywgYnV0IHdpbGwgYmUgYWRkZWQgaW4gYSBmdXR1cmUgdmVyc2lvbgogICogUGluY2ggaW4gdG8gb3BlbiBrZXlib2FyZCwgb3V0IHRvIGNsb3NlIGtleWJvYXJkCiAgKiBFeHRyYSBtb2JpbGUtY2VudHJpYyBmZWF0dXJlczoKICAgICogYG1vYmlsZWAgQVBJIHdpdGggYG9wZW5LZXlib2FyZChvcGVuOiBib29sZWFuKWAgYW5kIGBpc0tleWJvYXJkT3BlbigpYCBmdW5jdGlvbnMKICAgICogYF9DQ1BDX21vYmlsZV9rZXlib2FyZF9vcGVuIDxoZWlnaHQ+YCBldmVudCB3aGVuIGtleWJvYXJkIGlzIG9wZW5lZCwgd2l0aCBhbiBhcmd1bWVudCBmb3IgdmlzaWJsZSBoZWlnaHQKICAgICogYF9DQ1BDX21vYmlsZV9rZXlib2FyZF9jbG9zZWAgZXZlbnQgd2hlbiBrZXlib2FyZCBpcyBjbG9zZWQKKiBCdW1wZWQgQ0M6VCB2ZXJzaW9uIHRvIDEuOTcuMAogICogMS45Ni4wOgogICAgKiBVc2UgbGlnaHRHcmV5IGZvciBmb2xkZXJzIHdpdGhpbiB0aGUgImxpc3QiIHByb2dyYW0uCiAgICAqIEFkZCBjYy5leHBlY3QucmFuZ2UgKEx1cHVzNTkwKS4KICAgICogQWxsb3cgY2FsbGluZyBjYy5leHBlY3QgZGlyZWN0bHkgKE1DSmFjazEyMykuCiAgICAqIEZpeCBwYWludHV0aWxzLmRyYXdMaW5lIGluY29ycmVjdGx5IHNvcnRpbmcgY29vcmRpbmF0ZXMgKGxpbHl6ZWlzZXQpLgogICAgKiBDb3JyZWN0bHkgaGFuZGxlIHNwYXJzZSBhcnJheXMgaW4gY2MucHJldHR5LgogICogMS45Ny4wOgogICAgKiBBZGQgc2NhbGUgc3ViY29tbWFuZCB0byBgbW9uaXRvcmAgcHJvZ3JhbSAoTUNKYWNrMTIzKS4KICAgICAgKiBUaGlzIGlzIGEgbW9kaWZpY2F0aW9uIG9mIHRoZSBhbHJlYWR5LWV4aXN0aW5nIGByZXNvbHV0aW9uYCBzdWJjb21tYW5kLgogICAgKiBBZGQgb3B0aW9uIHRvIG1ha2UgYHRleHR1dGlscy5zZXJpYWxpemVgIG5vdCB3cml0ZSBhbiBpbmRlbnQgKG1hZ2ljem9ja2VyMTApLgogICAgKiBBbGxvdyBjb21wYXJpbmcgdmVjdG9ycyB1c2luZyBgPT1gIChmYXRib3ljaHVtbXkpLgogICAgKiBBbGxvdyBgY3JhZnRgIHByb2dyYW0gdG8gY3JhZnQgdW5saW1pdGVkIGl0ZW1zIChmYXRib3ljaHVtbXkpLgogICAgKiBBZGQgcHJvZ3JhbSBzdWJjb21wbGV0aW9uIHRvIHNldmVyYWwgcHJvZ3JhbXMgKFdvamJpZSkuCiAgICAqIFVwZGF0ZSB0aGUgYGhlbHBgIHByb2dyYW0gdG8gYWNjZXB0IGFuZCAocGFydGlhbGx5KSBoaWdobGlnaHQgbWFya2Rvd24gZmlsZXMuCiAgICAqIFJlbW92ZSBjb25maWcgb3B0aW9uIGZvciB0aGUgZGVidWcgQVBJLgogICAgICAqIEl0IHN0aWxsIGV4aXN0cyBpbnRlcm5hbGx5LCBidXQgaXMgYWx3YXlzIHNldCB0byBgdHJ1ZWAuCiAgICAqIEFsbG93IHVwbG9hZGluZyBmaWxlcyBieSBkcm9wcGluZyB0aGVtIG9udG8gYSBjb21wdXRlci4KICAgICogVXBkYXRlIHRoZSBgd2dldGAgdG8gYmUgbW9yZSByZXNpbGlhbnQgaW4gdGhlIGZhY2Ugb2YgdXNlci1lcnJvcnMuCiAgICAqIEZpeCBgZXhpdGluZ2AgcGFpbnQgdHlwaW5nICJlIiBpbiB0aGUgc2hlbGwuCiogQnVtcGVkIHN0cnVjdHVyZSB2ZXJzaW9uIHRvIDQKICAqIE5ldyBmaWVsZHMgaW4gYFBsdWdpbkZ1bmN0aW9uc2A6CiAgICAqIGBhZGRFdmVudEhvb2tgCiAgICAqIGBzZXREaXN0YW5jZVByb3ZpZGVyYAogICogTmV3IGZpZWxkcyBpbiBgQ29tcHV0ZXJgOgogICAgKiBgZXZlbnRIb29rc2AKICAgICogRGVwcmVjYXRlZCBmaWVsZHM6CiAgICAgICogYG5leHRNb3VzZU1vdmVgCiAgICAgICogYGxhc3RNb3VzZWAKICAgICAgKiBgbW91c2VNb3ZlRGVib3VuY2VUaW1lcmAKICAqIE5ldyBmaWVsZHMgaW4gYFRlcm1pbmFsYDoKICAgICogYG5leHRNb3VzZU1vdmVgCiAgICAqIGBsYXN0TW91c2VgCiAgICAqIGBtb3VzZU1vdmVEZWJvdW5jZVRpbWVyYAogICogTmV3IHR5cGVzOgogICAgKiBgZXZlbnRfaG9va2AKKiBVcGdyYWRlZCByYXcgbW9kZSBwcm90b2NvbCB0byB2ZXJzaW9uIDEuMQogICogTmV3IGZpbGVzeXN0ZW0gYWNjZXNzIGFiaWxpdHkKICAqIENvbXB1dGVyIHdpbmRvd3Mgbm93IHNlbmQgdGhlIElEIG9mIHRoZSBjb21wdXRlcgogICogQ2hhbmdlZCBtZWFuaW5nIG9mIHJhdyBjdXJzb3IgYmxpbmsgZmllbGQgdG8gaW5kaWNhdGUgYmxpbmtpbmcsIG5vdCBzaG93aW5nCiAgKiBTbWFsbCBpbXByb3ZlbWVudHMgdG8gdGhlIHByb3RvY29sCiAgKiBPZmZpY2lhbCBwcm90b2NvbCBzcGVjaWZpY2F0aW9uIGF0IGh0dHBzOi8vd3d3LmNyYWZ0b3MtcGMuY2MvZG9jcy9yYXdtb2RlCiogSW1wcm92ZWQgcGVyZm9ybWFuY2Ugb2Ygc3RyaW5nIGNvbmNhdGVuYXRpb24gYnkgdXNpbmcgcm9wZXMKICAqIEZpbmFsIGNvbmNhdGVuYXRpb24gb2Ygc3RyaW5ncyBpcyBub3QgY29tcGxldGVkIHVudGlsIHRoZSBzdHJpbmcncyB2YWx1ZSBuZWVkcyB0byBiZSByZWFkCiAgKiBUaGlzIHdhcyBpbXBsZW1lbnRlZCBpbiBDQzpUIDEuOTEuMAogICogRXhwZWN0IHJlcGVhdGVkIGNvbmNhdGVuYXRpb24gb3BlcmF0aW9ucyB0byBiZSBhcm91bmQgMTAweCBmYXN0ZXIKKiBJbXByb3ZlZCBwZXJmb3JtYW5jZSBvZiBgc3RyaW5nLnN1YmAgYnkgdXNpbmcgZWZmaWNpZW50IHN1YnN0cmluZyB2aWV3cwogICogR2V0dGluZyBhIHN1YnN0cmluZyBubyBsb25nZXIgaGFzIHRvIHJlYWxsb2NhdGUgdGhlIHN0cmluZwogICogSW5zdGVhZCwgaXQgcmV1c2VzIHRoZSBvcmlnaW5hbCBzdHJpbmcgd2l0aCB0aGUgb2Zmc2V0IGFuZCBsZW5ndGggcmVxdWlyZWQKKiBBZGRlZCBIVFRQIHdoaXRlbGlzdCAmIGJsYWNrbGlzdAogICogRW11bGF0ZXMgY29uZmlndXJhdGlvbiBvZiBDQzpUIHVwIHVudGlsIDEuODcuMCAoYmVmb3JlIHJ1bGUtYmFzZWQgc3lzdGVtKQoqIEFkZGVkIGNvbW1hbmQtbGluZSBvcHRpb24gdG8gY29ubmVjdCB0byBhIHJlbW90ZSBXZWJTb2NrZXQgc2VydmVyIGluIHJhdyBtb2RlCiogQ2hhbmdlZCBjdXJzb3IgYmxpbmsgc3BlZWQgdG8gMC40cyB0byBtYXRjaCBDQydzIGJlaGF2aW9yCiogUmV3cm90ZSBtYWluIHRocmVhZCB0YXNrIHF1ZXVlciB0byBiZSBtb3JlIGVmZmljaWVudAoqIFNldHRpbmcgYGFib3J0VGltZW91dGAgdG8gMCBub3cgZGlzYWJsZXMgYWJvcnQgdGltZW91dHMKKiBUaGUgY2xvc2UgYnV0dG9uIG5vIGxvbmdlciBuZWVkcyB0byBiZSBjbGlja2VkIHR3aWNlIHRvIGV4aXQgd2hlbiBga2VlcE9wZW5PblNodXRkb3duYCBpcyBlbmFibGVkCiogRml4ZWQgIjQwMCBCYWQgUmVxdWVzdCIgZXJyb3Igb24gSFRUUCByZXF1ZXN0cyB3aGVuIHRoZSBwYXRoIGlzIGVtcHR5CiogRml4ZWQgY3Jhc2ggd2hlbiBhIGJhZCBVUkwgaXMgcGFzc2VkIHRvIEhUVFAgZnVuY3Rpb25zCiogRml4ZWQgYW4gaXNzdWUgY2F1c2luZyBlbmNvZGVkIHNsYXNoZXMgaW4gVVJMcyBiZWluZyBkZWNvZGVkIHByZW1hdHVyZWx5ICgjMTk5KQoqIEZpeGVkIHNvbWUgbWVtb3J5IGxlYWtzIGluIEhUVFAgaGFuZGxlcwoqIEZpeGVkIEhUVFAgbm90IHdvcmtpbmcgcHJvcGVybHkgaW4gQ3JhZnRPUy1QQyBPbmxpbmUKKiBGaXhlZCByYW5kb20gY3Jhc2hlcyB3aGlsZSBzZW5kaW5nIG1lc3NhZ2VzIG92ZXIgYSBtb2RlbSAoIzIwNSkKKiBGaXhlZCBzZW5kaW5nIHJlY3Vyc2l2ZSB0YWJsZXMgb3ZlciBtb2RlbXMKKiBGaXhlZCBvbGQgYWJvcnQgdGltZXIgZmlyaW5nIGFmdGVyIHJlYm9vdCwgY2F1c2luZyBzcHVyaW91cyAiVG9vIGxvbmcgd2l0aG91dCB5aWVsZGluZyIgZXJyb3JzCiogRml4ZWQgY3Jhc2ggd2hlbiBjYW5jZWxpbmcgYSB0aW1lciB0aGF0IGRvZXNuJ3QgZXhpc3QKKiBGaXhlZCBgb3MuZXBvY2ggImxvY2FsImAgbm90IGFjY291bnRpbmcgZm9yIERheWxpZ2h0IFNhdmluZ3MgVGltZQoqIEZpeGVkIGZpbGVzIGJlaW5nIHRydW5jYXRlZCBpbiB0ZXh0IG1vZGUgb24gV2luZG93cyB3aGVuIGEgYFx4MEFgIGNoYXJhY3RlciBpcyBmb3VuZCAoIzIwNCkKKiBTb2Z0d2FyZSByZW5kZXJpbmcgbm93IHJldXNlcyB0aGUgc2FtZSBzdXJmYWNlIHRvIHJlZHVjZSBtZW1vcnkgcHJlc3N1cmUKKiBGaXhlZCBhbiBpc3N1ZSBjYXVzaW5nIGluY29uc2lzdGVudCBzcGVlZHMgd2hlbiByZWNvcmRpbmcgdG8gR0lGCiogRml4ZWQgYmxpdCBvbmx5IGFsbG93aW5nIGdyYXkgY29sb3JzIG9uIGdyYXlzY2FsZSB0ZXJtaW5hbHMKKiBGaXhlZCBtb25pdG9ycyBpbiByYXcgbW9kZSBzZW5kaW5nIGNsb3NlIGV2ZW50cyB0byB0aGUgd3Jvbmcgd2luZG93IElECiogRml4ZWQgc29tZSBpc3N1ZXMgd2l0aCBzZXR0aW5nIG1vbml0b3Igc2NhbGUKKiBGaXhlZCBtb3VzZSBldmVudCBkZWJvdW5jaW5nIG9uIG1vbml0b3JzCiogRml4ZWQgbW9uaXRvcnMgbm90IHJlcG9ydGluZyBhIHNlY29uZCBgbW9uaXRvcl90b3VjaGAgZXZlbnQgd2hlbiBjbGlja2VkIHR3aWNlIGF0IHRoZSBzYW1lIHBvaW50CiogRml4ZWQgYG1vdXNlX21vdmVgIGxlYXZlIGV2ZW50IG9uIG1vbml0b3JzIG5vdCBzZW5kaW5nIHRoZSBzaWRlCiogRml4ZWQgYSBidWcgY2F1c2luZyBgbW91c2VfbW92ZWAgZXZlbnRzIHRvIHN0b3AgYmVpbmcgc2VudCBhZnRlciBhIHdoaWxlCiogRml4ZWQgYmVoYXZpb3Igb2YgYHRlcm0uYmxpdGAgd2hlbiBwYXNzaW5nIGFuIGludmFsaWQgY2hhcmFjdGVyIHRvIGNvbG9yIHN0cmluZ3MKKiBGaXhlZCByYXcgY2xpZW50IG1vdXNlIGV2ZW50cyBub3QgYmVpbmcgc2VudCBwcm9wZXJseQoqIEZpeGVkIGFuIGlzc3VlIGNhdXNpbmcgY3Jhc2hlcyB3aGVuIGNyZWF0aW5nIGNlcnRhaW4gcGVyaXBoZXJhbHMKKiBGaXhlZCBhIHBvc3NpYmxlIGNyYXNoIHdoZW4gdGhlIEJJT1MgY2Fubm90IGJlIGZvdW5kICgjMjA4KQoqIGBfX2x0YCBtZXRhbWV0aG9kcyBjYW4gbm93IHlpZWxkIGZyb20gaW5zaWRlIGB0YWJsZS5zb3J0YAoqIEZpeGVkIGEgcG9zc2libGUgbWVtb3J5IGxlYWsgaW4gYHRhYmxlLnNvcnRgCiogRml4ZWQgYW4gaXNzdWUgY2F1c2luZyBgX19sdGAgbWV0YW1ldGhvZHMgdGhhdCB5aWVsZCB0byByZXR1cm4gdGhlIHdyb25nIHJlc3VsdCBmcm9tIGA8PWAKKiBGaXhlZCB2YXJpb3VzIGVycm9ycyBpbiB5aWVsZGluZyBmcm9tIGRlYnVnIGhvb2tzCiogRml4ZWQgc3RhY2sgbm90IGJlaW5nIHJlc2l6ZWQgd2hlbiA+IDB4MDgwMDAwMDAgZW50cmllcyBhcmUgcmVxdWlyZWQKCiMjIHYyLjUuNSAtIEFwcmlsIDE3LCAyMDIxCiogRGlzYWJsZWQgbG9ja3Mgd2hlbiBtb2RlbXMgYXJlbid0IGF0dGFjaGVkCiAgKiBUaGlzIGNhbiBpbXByb3ZlIHNwZWVkcyBieSB1cCB0byA1MCUKICAqIElmIGFueSBtb2RlbSBpcyBhdHRhY2hlZCwgc3BlZWRzIHdpbGwgZHJvcCBiYWNrIHRvIHByZS12Mi41LjUgbGV2ZWxzCiogUmV3cm90ZSBIVFRQIGhhbmRsZSByZWFkIGZ1bmN0aW9ucyB0byBpbXByb3ZlIHJlbGlhYmlsaXR5CiogUmVtb3ZlZCBPcmlnaW4gaGVhZGVyIGZyb20gV2ViU29ja2V0IHJlcXVlc3RzCiogRml4ZWQgYmVoYXZpb3Igb2YgdGFibGUgbGVuZ3RoIHRvIHdvcmsgbW9yZSBsaWtlIENDOlQKKiBGaXhlZCBwYXN0ZSBjb250ZW50cyBub3QgYmVpbmcgY3V0IGF0IHRoZSBmaXJzdCBuZXdsaW5lCiogRml4ZWQgbWVtb3J5IGxlYWsgaW4gZmlsZS5yZWFkQWxsIGluIGJpbmFyeSBtb2RlCiogRml4ZWQgaW5jb3JyZWN0IG1vZHVsbyByZXN1bHQgd2hlbiB7KGEgPCAwIHwgYiA8IDApICYgfGF8ICUgfGJ8ID0gMH0KKiBGaXhlZCBoYXJkIGNyYXNoIG9uIHN0YXJ0dXAgd2hlbiBhIGN1c3RvbSBmb250IGZpbGUgZG9lc24ndCBleGlzdAoqIEZpeGVkIGNyYXNoIHdoZW4gcGFzc2luZyBub24tc3RyaW5nIGluIGhlYWRlciB0YWJsZQoqIEZpeGVkIGNyYXNoIHdoZW4gaGFsdGluZyBjb21wdXRlciBhZnRlciBpdCBhbHJlYWR5IGNsb3NlZAoqIEZpeGVkIGNyYXNoIHdoZW4gYW4gZXhjZXB0aW9uIG9jY3VycyB3aGlsZSBjbG9zaW5nIFdlYlNvY2tldCBpbiB0aGUgbWlkZGxlIG9mIGNhdGNoaW5nIGFub3RoZXIgZXhjZXB0aW9uCiogUG9zc2libHkgZml4ZWQgYSBjcmFzaCBoYXBwZW5pbmcgd2hlbiBjb25uZWN0aW5nIHRvIGEgV2ViU29ja2V0CiogUmVhZGRlZCBMdWEgZmVhdHVyZXMgdGhhdCB3ZXJlIGFkdmVydGlzZWQgaW4gdjIuNS40IGJ1dCBub3QgYWN0dWFsbHkgcHJlc2VudCBvbiBXaW5kb3dzCiAgKiBBZGRlZCBgZGVidWcudXB2YWx1ZXtpZCxqb2lufWAgZnJvbSBMdWEgNS4zCiAgKiBGaXhlZCBhIHJhY2UgY29uZGl0aW9ucyB3aXRoIG1vZGVtcyBjYXVzaW5nIGEgY3Jhc2gKICAqIEZpeGVkIHNvbWUgcmFuZG9tIGNyYXNoZXMgb24gYW4gb2RkIG1lbW9yeSBlcnJvcgogICogRml4ZWQgY3Jhc2ggd2hlbiBwYXNzaW5nIGJhZCBhcmd1bWVudCAjMSB0byBgdGFibGUuZm9yZWFjaGAKCiMjIHYyLjUuNCAtIE1hcmNoIDI3LCAyMDIxCiogQnVtcGVkIENDOlQgdmVyc2lvbiB0byAxLjk1LjMKICAqIENvcnJlY3RseSBzZXJpYWxpc2Ugc3BhcnNlIGFycmF5cyBpbnRvIEpTT04gKGxpdmVnYW1lcjk5OSkKICAqIFByb2dyYW1zIHJ1biB2aWEgZWRpdCBhcmUgbm93IGEgbGl0dGxlIGJldHRlciBiZWhhdmVkIChXb2piaWUpCiAgKiBBZGQgVXNlci1BZ2VudCBbYW5kIEFjY2VwdC1DaGFyc2V0XSB0byBhIHdlYnNvY2tldCdzIGhlYWRlcnMuCiogQnVtcGVkIHN0cnVjdHVyZSB2ZXJzaW9uIHRvIDMKICAqIE5ldyBmaWVsZHMgaW4gYGNvbmZpZ3VyYXRpb25gOgogICAgKiBga2VlcE9wZW5PblNodXRkb3duYAogICogTmV3IGZpZWxkcyBpbiBgY29tcHV0ZXJfY29uZmlndXJhdGlvbmA6CiAgICAqIGBjb21wdXRlcldpZHRoYAogICAgKiBgY29tcHV0ZXJIZWlnaHRgCiAgKiBOZXcgZmllbGRzIGluIGBQbHVnaW5GdW5jdGlvbnNgOgogICAgKiBgYXR0YWNoUGVyaXBoZXJhbGAKICAgICogYGRldGFjaFBlcmlwaGVyYWxgCiogQWRkZWQgYGtlZXBPcGVuT25TaHV0ZG93bmAgc2V0dGluZyB0byBrZWVwIGNvbXB1dGVycyBvcGVuIGFmdGVyIHNodXRkb3duCiAgKiBVc2UgdGhlIFggYnV0dG9uIHRvIGNsb3NlIHRoZSB3aW5kb3cgKG9yIHlvdXIgT1MncyByZXNwZWN0aXZlIGtleSBjb21ibykKICAqIFVzZSBDdHJsK1IgdG8gc3RhcnQgdGhlIGNvbXB1dGVyIGFnYWluCiogQWRkZWQgcGVyLWNvbXB1dGVyIGRlZmF1bHQgc2l6ZSBvcHRpb25zCiogQWRkZWQgdHdvIGFyZ3VtZW50cyB3aGVuIGF0dGFjaGluZyBtb25pdG9ycyB0byBzcGVjaWZ5IHRoZWlyIHNpemUKKiB+fkFkZGVkIGBkZWJ1Zy51cHZhbHVle2lkLGpvaW59YCBmcm9tIEx1YSA1LjN+fgoqIEFkZGVkIHRoZSBhYmlsaXR5IHRvIHNldCBob3N0IHBvcnRzIGZvciBXZWJTb2NrZXQgc2VydmVycwoqIEFkZGVkIHN1cHBvcnQgZm9yIEtNU0RSTSBiYWNrZW5kcyBvbiBMaW51eAoqIERpc2FibGVkIFdlYlNvY2tldCBzZXJ2ZXJzIGluIHZhbmlsbGEgbW9kZQoqIEFkZGluZyBkdXBsaWNhdGUgdmlydHVhbCBtb3VudHMgbm93IHJldHVybnMgYGZhbHNlYCB3aXRob3V0IGFkZGluZyBpdCBhZ2FpbgoqIE1vdmVkIGByb21SZWFkT25seWAgdG8gaGlkZGVuIG9wdGlvbnMKKiBGaXhlZCBtYWNPUyBpbnN0YWxsYXRpb24gaW5zdHJ1Y3Rpb25zIGZvciBIb21lYnJldwoqIH5+Rml4ZWQgYSByYWNlIGNvbmRpdGlvbnMgd2l0aCBtb2RlbXMgY2F1c2luZyBhIGNyYXNofn4KKiBGaXhlZCBhYm9ydCB0aW1lb3V0IG9jY2FzaW9uYWxseSBmaXJpbmcgd2hlbiBydW5uaW5nIGluIGEgcXVpY2tseSB5aWVsZGluZyBsb29wCiogRml4ZWQgV2ViU29ja2V0cyBub3QgYmVpbmcgY2xvc2VkIHNvb24gYWZ0ZXIgY2xvc2UgaXMgY2FsbGVkCiogRml4ZWQgcmFjZSBjb25kaXRpb24gb24gdGltZXIgYWRkL3JlbW92ZQoqIH5+Rml4ZWQgc29tZSByYW5kb20gY3Jhc2hlcyBvbiBhbiBvZGQgbWVtb3J5IGVycm9yfn4KKiBGaXhlZCBXZWJTb2NrZXQgYmluYXJ5IG1lc3NhZ2VzIG5vdCBiZWluZyBpbXBsZW1lbnRlZCBjb3JyZWN0bHkKKiBGaXhlZCBjdXJzb3Igbm90IGJlaW5nIHJlc2V0IG9uIHNodXRkb3duCiogRml4ZWQgVVJMIGNoZWNrcyBiZWluZyBtaXNzaW5nIGZyb20gYGh0dHAuZ2V0YAoqIEZpeGVkIHJlYWQgcGFzdCBFT0YgaW4gYGZpbGUucmVhZChuKWAgb24gdGV4dCBoYW5kbGVzCiogfn5GaXhlZCBjcmFzaCB3aGVuIHBhc3NpbmcgYmFkIGFyZ3VtZW50ICMxIHRvIGB0YWJsZS5mb3JlYWNoYH5+CiogRml4ZWQgYGFyZ2AgdGFibGUgYmVpbmcgbWlzc2luZyB3aGVuIHJ1bm5pbmcgcHJvZ3JhbXMgd2l0aCBjYXNoCiogRml4ZWQgbWlzc2luZyBgaHR0cC5saXN0ZW5gIGZ1bmN0aW9uCiogRml4ZWQgYHdpbmRvdy5nZXRTaXplYCBub3Qgd29ya2luZyB3aXRoIHRoZSBuZXcgYXJndW1lbnRzCiogRml4ZWQgY2FzaCBiZWluZyBlbmFibGVkIGJ5IGRlZmF1bHQKKiBGaXhlZCBzaGVsbCBmYWlsaW5nIHRvIHJ1biBpbiB2YW5pbGxhIG1vZGUKCiMjIHYyLjUuMyAtIEZlYnJ1YXJ5IDIxLCAyMDIxCiogQWRkZWQgYXV0b21hdGljIGNyYXNoIGxvZyB1cGxvYWRpbmcgYmVoaW5kIGBzbm9vcGVyRW5hYmxlZGAKICAqIEEgcHJvbXB0IHdpbGwgYXBwZWFyIG9uIGZpcnN0IGJvb3QgYXNraW5nIHRvIGFsbG93IHRoaXMKICAqIFNlZSBodHRwczovL3d3dy5jcmFmdG9zLXBjLmNjL2RvY3MvcHJpdmFjeSBmb3IgaW5mbyBhYm91dCBob3cgeW91ciBkYXRhIGlzIGtlcHQgc2VjdXJlCiogQWRkZWQgYHNub29wZXJFbmFibGVkYCBjb25maWcgc2V0dGluZwogICogVGhpcyBpcyBjdXJyZW50bHkgb25seSB1c2VkIGZvciBjcmFzaCB1cGxvYWRpbmcsIGJ1dCBtb3JlICh2ZXJ5IGJhc2ljKSBhbmFseXRpY3MgbWF5IGJlIGFkZGVkIGluIHRoZSBmdXR1cmUKKiBUaGUgYGRlYnVnYCBBUEkgaXMgbm93IGVuYWJsZWQgYnkgZGVmYXVsdAogICogVGhpcyBpcyBwb3NzaWJsZSBkdWUgdG8gdGhlIGBkZWJ1Z2AgQVBJIG5vIGxvbmdlciByZXF1aXJpbmcgaG9va3MKICAqIFRoZSBhdmFpbGFiaWxpdHkgb2YgYGRlYnVnYCByZXNvbHZlcyBhIGxvbmctc3RhbmRpbmcgY29tcGF0aWJpbGl0eSBpc3N1ZSB3aGVuIHJ1biB3aXRoIHRoZSBkZWZhdWx0IGNvbmZpZwoqIEJ1bXBlZCBzdHJ1Y3R1cmUgdmVyc2lvbiB0byAyCiAgKiBOZXcgZmllbGRzIGluIGBjb25maWd1cmF0aW9uYDoKICAgICogYHNub29wZXJFbmFibGVkYAogICogTmV3IGZpZWxkcyBpbiBgUGx1Z2luRnVuY3Rpb25zYDoKICAgICogYHJlZ2lzdGVyQ29uZmlnU2V0dGluZ2AKICAqIE5ldyBmaWVsZHMgaW4gYFRlcm1pbmFsYDoKICAgICogYG1vdXNlQnV0dG9uT3JkZXJgCiogQWRkZWQgbmV3IGByZWdpc3RlckNvbmZpZ1NldHRpbmdgIGNhcGFiaWxpdHkgdG8gYWxsb3cgYWNjZXNzIHRvIHBsdWdpbiBzZXR0aW5ncyBmcm9tIGBjb25maWdgIEFQSQoqIEFkZGVkIGFiaWxpdHkgdG8geWllbGQgZnJvbSBsaW5lIGFuZCBjb3VudCBob29rcwoqIERlYnVnIGhvb2tzIG5vdyB3b3JrIGFzIGV4cGVjdGVkIHdoZW4gbm8gZGVidWdnZXIgaXMgYXR0YWNoZWQKICAqIFRoaXMgYnJlYWtzIGBsb2dFcnJvcnNgIGFuZCBub24tZGVidWdnZXIgYnJlYWtwb2ludHMsIGJ1dCBuZWl0aGVyIGZlYXR1cmUgaXMgdXNlZCBtdWNoCiAgICAqIFRoZXkgbWF5IGJlIGJyb3VnaHQgYmFjayBpbiB0aGUgZnV0dXJlLCBidXQgdGhleSBhcmUgbm90IHdvcmtpbmcgZm9yIG5vdwoqIEZ1bmN0aW9ucyBwYXNzZWQgdG8gYGxvYWRgIGNhbiBub3cgeWllbGQgaW4gc3RhbmRhcmRzIG1vZGUgb25seQogICogVGhpcyBpcyBiZWhpbmQgc3RhbmRhcmRzIG1vZGUgZHVlIHRvIHRoZSBwb3NzaWJsZSBwZXJmb3JtYW5jZSBoaXQgYmVpbmcgaGlnaGVyIHRoYW4gaXRzIHVzZWZ1bG5lc3MKKiBEZWNyZWFzZWQgbWl4ZXIgY2h1bmsgc2l6ZSB0byA1MTIKICAqIFRoaXMgc2hvdWxkIGhlbHAgd2l0aCBsYXRlbmN5IGluIHRoaW5ncyBsaWtlIHRoZSBbc291bmQgcGx1Z2luXShodHRwczovL2dpc3QuZ2l0aHViLmNvbS9NQ0phY2sxMjMvMzRhZTFjYTFhOTYyNTA0ZjMyYjM0ZjI3NzFmOTIzMjYpCiogRml4ZWQgSFRUUCBoYW5kbGVzIG5vdCBiZWluZyBjbG9zZWQgd2hlbiBnb2luZyBvdXQgb2Ygc2NvcGUvYmVpbmcgZGVsZXRlZAoqIEZpeGVkIGRlYWRsb2NrL2hpZ2ggbWVtb3J5IHVzYWdlIHdoZW4gcmVzaXppbmcgd2luZG93IHRvIDB4MAoqIEZpeGVkIERQSSBpc3N1ZXMgaW4gaGFyZHdhcmUgcmVuZGVyZXIgb24gTWFjIHdoZW4gc3dpdGNoaW5nIGJldHdlZW4gUmV0aW5hIGFuZCBub24tUmV0aW5hIGRpc3BsYXlzCiogRml4ZWQgZGVhZGxvY2sgd2hlbiBtYXhpbWl6aW5nIHdpbmRvdyB3aXRoIGBzbmFwVG9TaXplYCBlbmFibGVkCiogRml4ZWQgbW91c2UgYnV0dG9ucyA+IDMgYmVpbmcgcmV0dXJuZWQgYXMgMQoqIE1vdXNlIGJ1dHRvbnMgPiAzIG5vIGxvbmdlciByZXBvcnQgaW4gc3RhbmRhcmRzIG1vZGUKKiBGaXhlZCB0aGUgb3JkZXIgb2YgbW91c2UgYnV0dG9ucyByZXBvcnRlZCB3aXRoIG1vdXNlX2RyYWcgd2hlbiBtdWx0aXBsZSBhcmUgZG93biBhdCB0aGUgc2FtZSB0aW1lCiogRml4ZWQgY3Jhc2ggd2hlbiBsb2FkaW5nIHBsdWdpbiBjb25maWcKKiBGaXhlZCBwbHVnaW4gY29uZmlnIG5vdCBzYXZpbmcgcHJvcGVybHkKKiBGaXhlZCBgXGAgbm90IGJlaW5nIHRyZWF0ZWQgYXMgYSBkaXJlY3Rvcnkgc2VwYXJhdG9yCiogRml4ZWQgYC9cLnszLH0vYCBub3QgYmVpbmcgdHJlYXRlZCB0aGUgc2FtZSBhcyBgLmAKKiBGaXhlZCBgZnMuZ2V0Q2FwYWNpdHlgIGluIHN0YW5kYXJkcyBtb2RlCiogUmV3cm90ZSBhYm9ydCB0aW1lb3V0IGhhbmRsaW5nIHRvIG5vIGxvbmdlciB1c2UgZGVidWcgaG9va3MKKiBDaGFuZ2VkIGBzaXplX3RgIHNpemUgaW4gYmluYXJ5IEx1YSBjaHVua3MgdG8gNCBieXRlcyBmb3IgY29tcGF0aWJpbGl0eQoqIEFkZGVkIGBsdWFfZXh0ZXJuYWxlcnJvcmAgdG8gdGhyb3cgZXJyb3JzIGZyb20gYW5vdGhlciB0aHJlYWQKKiBJbXByb3ZlZCBwZXJmb3JtYW5jZSBvZiBpbnRlcm5hbCBzdHJpbmcgc3BsaXQgZnVuY3Rpb24KCiMjIHYyLjUuMiAtIEphbnVhcnkgMjMsIDIwMjEKKiBCdW1wZWQgQ0M6VCB2ZXJzaW9uIHRvIDEuOTUuMgogICogQWRkIGBpc1JlYWRPbmx5YCB0byBgZnMuYXR0cmlidXRlc2AgKEx1cHVzNTkwKQogICogTWFueSBtb3JlIHByb2dyYW1zIG5vdyBzdXBwb3J0IG51bXBhZCBlbnRlciAoV29qYmllKQogICogSG9wZWZ1bGx5IGltcHJvdmUgZWRpdCdzIGJlaGF2aW91ciB3aXRoIEFsdEdyIG9uIHNvbWUgRXVyb3BlYW4ga2V5Ym9hcmRzLgogICogRml4IHRoZSBpZCBwcm9ncmFtIGNyYXNoaW5nIG9uIG5vbi1kaXNrIGl0ZW1zIChXb2piaWUpLgoqIEJ1bXBlZCBwbHVnaW4gQVBJIHN0cnVjdHVyZSB2ZXJzaW9uIHRvIDEKICAqIE5ldyBmaWVsZHMgaW4gYENvbXB1dGVyYDoKICAgICogYGZvcmNlQ2hlY2tUaW1lb3V0YAogICAgKiBgcmVkc3RvbmVJbnB1dHNgCiAgICAqIGByZWRzdG9uZU91dHB1dHNgCiAgICAqIGBidW5kbGVkUmVkc3RvbmVJbnB1dHNgCiAgICAqIGBidW5kbGVkUmVkc3RvbmVPdXRwdXRzYAogICogTmV3IGZpZWxkcyBpbiBgY29uZmlndXJhdGlvbmA6CiAgICAqIGBodHRwX3Byb3h5X3NlcnZlcmAKICAgICogYGh0dHBfcHJveHlfcG9ydGAKICAgICogYGV4dGVuZE1hcmdpbnNgCiAgICAqIGBzbmFwVG9TaXplYAogICogTmV3IGZpZWxkcyBpbiBgVGVybWluYWxgOgogICAgKiBgZnJvemVuYAoqIEFkZGVkIGEgcHJvcGVyIGltcGxlbWVudGF0aW9uIG9mIHRoZSBgcmVkc3RvbmVgIEFQSQoqIEFkZGVkIGFiaWxpdHkgdG8gbW91bnQgY29tcHV0ZXJzIHdpdGggZGlzayBkcml2ZXMgdXNpbmcgYGNvbXB1dGVyOjxpZD5gCiogQWRkZWQgYXV0b21hdGljIENDRW11WCBtaWdyYXRpb24gb24gZmlyc3QgcnVuLCBkZXByZWNhdGluZyB0aGUgb2xkIEphdmEgYXBwbGV0CiAgKiBUaGlzIGNhbiBiZSB0cmlnZ2VyZWQgbWFudWFsbHkgd2l0aCBgLS1taWdyYXRlYAoqIEFkZGVkIGBleHRlbmRNYXJnaW5zYCBjb25maWcgb3B0aW9uIHRvIGVuYWJsZSBtYXJnaW5zIHdpdGhvdXQgc3RhbmRhcmRzIG1vZGUKKiBBZGRlZCBgc25hcFRvU2l6ZWAgY29uZmlnIG9wdGlvbiB0byBhdXRvbWF0aWNhbGx5IHNuYXAgdGhlIHdpbmRvdyBzaXplIHRvIHRoZSBuZWFyZXN0IGNoYXJhY3RlciBzaXplLCByZW1vdmluZyBleHRyYSBtYXJnaW5zIChvbiBieSBkZWZhdWx0KQoqIEFkZGVkIHByb3BlciB1cGRhdGUgdmVyaWZpY2F0aW9uIHZpYSBgc2hhMjU2LXN1bXMudHh0YAoqIEFkZGVkIEhUVFAgcHJveHkgY29uZmlndXJhdGlvbgoqIFBsdWdpbnMgbm93IGxvYWQgaW4gYWxwaGFiZXRpY2FsIG9yZGVyIGFzIGV4cGVjdGVkCiogUHJlbWF0dXJlIEJJT1MgZXhpdHMgbm93IGVycm9yIGluIHN0YW5kYXJkcyBtb2RlCiogYG1vdXNlX3Njcm9sbGAgbm8gbG9uZ2VyIHJldmVyc2VzIHNjcm9sbCBkaXJlY3Rpb24gaWYgc2Nyb2xsIGRpcmVjdGlvbiBpcyByZXZlcnNlZCBpbiB0aGUgT1MgKCMxODUpCiogRXJyb3JzIG5vdyBhcHBlYXIgaWYgbW91bnRpbmcvdW5tb3VudGluZyBmYWlscwoqIEluY3JlYXNlZCBtYXhpbXVtIGNhbGwgc3RhY2sgaGVpZ2h0IHRvIDIwMDAsIGFsbG93aW5nIG1vcmUgbmVzdGVkIGNvcm91dGluZXMvZnVuY3Rpb24gY2FsbHMKKiBgX19sZW5gIG1ldGFtZXRob2RzIGNhbiBub3cgeWllbGQgYXMgZXhwZWN0ZWQKKiBgZ2V0TmV4dEV2ZW50YCBub3cgY2hlY2tzIHRoZSBwYXJhbWV0ZXIgc3RhY2sncyBzaXplIGJlZm9yZSBjcmVhdGluZyBhIG5ldyBzdGFjawoqIE1hZGUgc29tZSBtaW5vciBpbXByb3ZlbWVudHMgdG8gYGZpeHBhdGhgCiogRml4ZWQgbWVtb3J5IGNvcnJ1cHRpb24gaW4gcmF3IG1vZGUKICAqIFRoaXMgaXMgdGhlIFJFQUwgaXNzdWUgdGhhdCB2Mi41LjEuMSB3YXMgc3VwcG9zZWQgdG8gZml4IC0gdGhlIGZpeCBkaWRuJ3Qgd29yayBvbiBtYWNPUwoqIEZpeGVkIGBrZXlfdXBgIG5vdCBmaXJpbmcgZm9yIHNvbWUga2V5cyBpbiByYXcgbW9kZQoqIEZpeGVkIG1vZHVsbyBvcGVyYXRvciByZXR1cm5pbmcgdW5leHBlY3RlZCByZXN1bHRzCiogRml4ZWQgYG9zLnN0YXJ0VGltZXJgIGZpcmluZyBpbW1lZGlhdGVseSB3aGVuIHRpbWUgPCAwLjA1IGluIHN0YW5kYXJkcyBtb2RlCiogRml4ZWQgYG9zLmVwb2NoKCJsb2NhbCIpYCByZXR1cm5pbmcgVVRDIHRpbWUKKiBGaXhlZCBpbmZpbml0ZSByZWN1cnNpb24gaW4gc29tZSBjYWxscyBvZiBgZnMuZ2V0RnJlZVNwYWNlYC9gZnMuZ2V0Q2FwYWNpdHlgCiogRml4ZWQgcmFjZSBjb25kaXRpb24gd2hlbiBmaXJpbmcgYHRlcm1fcmVzaXplYAoqIEZpeGVkIGR1cGxpY2F0ZSBgdGVybV9yZXNpemVgIGV2ZW50cyBiZWluZyBxdWV1ZWQKKiBGaXhlZCBkZWFkbG9jayB3aGVuIHBhc3NpbmcgaW52YWxpZCBhcmd1bWVudHMgdG8gYHRlcm0uc2V0UGl4ZWxgCiogRml4ZWQgbW91bnRpbmcgdGhlIHNhbWUgcGF0aCB0d2ljZQoqIEZpeGVkIGBtb3VudGVyLnVubW91bnRgIHJldHVybmluZyBmYWlsdXJlIG9uIHN1Y2Nlc3MKKiBGaXhlZCBgc2hvd0ZQU2AgdHlwZSBiZWluZyBzZXQgdG8gaW50ZWdlcgoqIE9ubGluZTogSGFyZHdhcmUgcmVuZGVyaW5nIGlzIG5vdyBlbmFibGVkIGJ5IGRlZmF1bHQgb24gbWFjT1Mgb25seSB0byBtaXRpZ2F0ZSBhIHNjYWxpbmcgYnVnCgojIyB2Mi41LjEuMSAtIEphbnVhcnkgNSwgMjAyMQoqIEZpeGVkIGEgYnVnIGNhdXNpbmcgcmF3IG1vZGUgdG8gY3Jhc2gsIHdoaWNoIGJyZWFrcyB0aGUgZXh0ZW5zaW9uCiogRml4ZWQgYSBtZW1vcnkgY29ycnVwdGlvbiBidWcgdGhhdCBjYW4gaGFwcGVuIHdoZW4gcmVzdW1pbmcgY29yb3V0aW5lcwoqIEFkZGVkIGxpbmsgdG8gbmV3IERpc2NvcmQgc2VydmVyIHRvIE1PVERzCgojIyB2Mi41LjEgLSBKYW51YXJ5IDMsIDIwMjEKKiBBZGRlZCBgdGVybS5zZXRGcm96ZW5gIGFuZCBgdGVybS5nZXRGcm96ZW5gIHRvIHN0b3AgcmVuZGVyaW5nIHRoZSB0ZXJtaW5hbCBkdXJpbmcgY3JpdGljYWwgc2VjdGlvbnMgKCMxNjUsICMxNzcpCiogQWRkZWQgYWJpbGl0eSBmb3IgYHRlcm0uZ2V0UGl4ZWxzYCB0byByZXR1cm4gYSBsaXN0IG9mIHN0cmluZ3MgKCMxNzYpCiogQWRkZWQgb3B0aW9uYWwgbW9kZSBhcmd1bWVudCB0byBgdGVybS5nZXRTaXplYCB0byByZXR1cm4gc2l6ZSBvZiBncmFwaGljcyBtb2RlIHNjcmVlbgoqIEFkZGVkIEN0cmwrRjggKENtZCtGOCBvbiBNYWMpIGhvdGtleSB0byBrZWVwIGN1cnJlbnQgd2luZG93IG9uIHRvcCBvZiBvdGhlciBhcHBsaWNhdGlvbnMgKCMxNzUpCiogQWRkZWQgImF0dGFjaCBsaXN0IiBjb21tYW5kIHRvIGxpc3QgYXZhaWxhYmxlIHBlcmlwaGVyYWwgdHlwZXMKKiBBZGRlZCBleHRyYSBlcnJvciBtZXNzYWdlIGV4cGxhaW5pbmcgd2h5IGEgcGVyaXBoZXJhbCBjb3VsZG4ndCBiZSBhdHRhY2hlZAoqIEFkZGVkIHNvbWUgbmV3IE1PVERzCiogTWFyZ2lucyBpbiBzdGFuZGFyZHMgbW9kZSBub3cgc3RyZXRjaCB0byB0aGUgZWRnZSBvZiB3aW5kb3dzIGlmIHJlc2l6ZWQKKiBJbXByb3ZlZCBwZXJmb3JtYW5jZSBvZiBwaXhlbHMgaW4gdGhlIGhhcmR3YXJlIHJlbmRlcmVyIGJ5IHVzaW5nIGEgc2luZ2xlIHN0cmVhbWluZyB0ZXh0dXJlCiogYGZzLmZpbmRgIG5vIGxvbmdlciB1c2VzIGB0YWJsZS5zb3J0YCBmb3Igc29ydGluZywgaW5zdGVhZCB1c2luZyBDKysgYHN0ZDo6bGlzdDo6c29ydGAKKiBSZXBsYWNlZCBpbnN0YW5jZXMgb2YgYGx1YV9uZXd0YWJsZWAgd2l0aCBgbHVhX2NyZWF0ZXRhYmxlYCB3aGVyZSBwb3NzaWJsZSBmb3IgcGVyZm9ybWFuY2UKKiBTaG93IGxhc3QgQyBmdW5jdGlvbiBmb3IgYHN0ZDo6ZXhjZXB0aW9uYHMgKCMxNzApCiogRml4ZWQgYHdlYnNvY2tldC5yZWNlaXZlKClgIHJldHVybmluZyBhIGJ1bmNoIG9mIGp1bmsgZGF0YSBhdCB0aGUgYmVnaW5uaW5nCiogRml4ZWQgYGZpbGUuY2xvc2VgL2BodHRwX2hhbmRsZS5jbG9zZWAgbm90IGJsb2NraW5nIGFjY2VzcyB0byBvdGhlciBoYW5kbGUgbWV0aG9kcyAoIzE2OCkKKiBGaXhlZCBXZWJTb2NrZXRzIG5vdCBiZWluZyBjbG9zZWQgb24gcmVib290ICgjMTY5KQoqIEZpeGVkIGB0ZXJtLmRyYXdQaXhlbHNgIGNyYXNoaW5nIHdpdGggaW52YWxpZCBhcmd1bWVudHMgKCMxNzEpCiogRml4ZWQgYGZzLmZpbmRgIHNvbWV0aW1lcyByZXR1cm5pbmcgZHVwbGljYXRlIGVudHJpZXMKKiBGaXhlZCBidWcgYWxsb3dpbmcgbW91bnRzIHRvIGJlIG1vdmVkIGFuZCBkZWxldGVkCiogRml4ZWQgY3Vyc29yIGNvbG9yIG5vdCBiZWluZyByZXNldCBvbiByZWJvb3QKKiBGaXhlZCBjcmFzaCB3aGVuIHVuYWJsZSB0byBjb252ZXJ0IHRleHQgaW5wdXQgdG8gQ0MgY2hhcnNldCAoIzE4MSkKKiBGaXhlZCB3cm9uZyBjdXJzb3IgY29vcmRpbmF0ZXMgYmVpbmcgcmVwb3J0ZWQgaW4gdGhlIG1hcmdpbnMKKiBGaXhlZCBXQVNNIGJ1aWxkaW5nCiogUmVtb3ZlZCBsZWdhY3kgM21zIGRlbGF5IG9uIHRpbWVycwoKIyMgdjIuNSAtIERlY2VtYmVyIDI1LCAyMDIwCiogUmVvcmdhbml6ZWQgY29kZSBzdHJ1Y3R1cmUgZm9yIGVhc2llciBtYWludGVuYW5jZSBvZiB0aGUgY29kZWJhc2UKICAqIENvZGUgaGFzIGJlZW4gZGl2aWRlZCBiZXR3ZWVuIEFQSXMsIHBlcmlwaGVyYWxzLCByZW5kZXJlcnMsIGFuZCBnZW5lcmFsIGZ1bmN0aW9ucwogICogUmVzb2x2ZWQgYSBsYXJnZSBudW1iZXIgKD4xMDAwKSBvZiB3YXJuaW5ncwogICogUmVkdWNlZCB1c2FnZSBvZiBgZXh0ZXJuYCB0byBoZWFkZXJzIG9ubHkKICAqIE1hZGUgYWxsIG5vbi1nbG9iYWwgdmFyaWFibGVzIGBzdGF0aWNgCiogUmViYXNlZCBST00gb24gdGhlIENDOiBUd2Vha2VkIFJPTQogICogVGhlIFJPTSBpcyBub3cgZXF1aXZhbGVudCB0byB0aGUgQ0M6IFR3ZWFrZWQgUk9NIHdpdGggYWRkaXRpb25hbCBDcmFmdE9TLVBDIGZlYXR1cmVzIGZyb20gdGhlIG9sZCBST00KICAqIFdpdGggdGhpcywgdGhlIENDOlQgRWRpdGlvbiBoYXMgYmVlbiBkaXNjb250aW51ZWQKICAgICogSXQgd2Fzbid0IHJlYWxseSBuZWNlc3NhcnkgYW55d2F5CiAgKiBUaGlzIHNob3VsZCBoZWxwIGltcHJvdmUgY29tcGF0aWJpbGl0eSBpbiB0aGUgUk9NCiogVXBkYXRlZCBDQzpUIHZlcnNpb24gdG8gMS45NS4wCiAgKiAxLjk0LjAKICAgICogQWRkIGdldHRlciBmb3Igd2luZG93IHZpc2liaWxpdHkgKGRldm9tYWEpCiAgICAqIFVzZSB0ZXJtLmJsaXQgdG8gZHJhdyBib3hlcyBpbiBwYWludHV0aWxzIChMZW1tbXkpLgogICAgKiBGaXggc2V2ZXJhbCBwcm9ncmFtcyB1c2luZyB0aGVpciBvcmlnaW5hbCBuYW1lIGluc3RlYWQgb2YgYWxpYXNlcyBpbiB1c2FnZSBoaW50cyAoTHVwdXM1OTApLgogICogMS45NS4wCiAgICAqIENsZWFyIGdldHMgYW4gb3B0aW9uIHRvIHJlc2V0IHRoZSBwYWxldHRlIChMdWNhMDIwOCkKICAgICogVXNlIHRlcm0uYmxpdCBvbiBpbml0aWFsIHBhaW50IHJlbmRlci4KICAgICogQWRkIG9wdGlvbiB0byBkaXNhYmxlIHNldHRpbmcgZ2xvYmFscyAoTHVwdXM1OTApLgogICAgKiBGaXhlZCBsZW5ndGggY2hlY2sgb24gZnVuY3Rpb24gbmFtZSBpbiBgZXhwZWN0YCAoTUNKYWNrMTIzKQogICAgKiBBbGxvdyBzdHJpbmdzIG9yIG51bWJlcnMgaW4gdGV4dHV0aWxzLip0YWJ1bGF0ZS4KICAgICogTWFrZSBmcy5jb21iaW5lIGFjY2VwdCBtdWx0aXBsZSBhcmd1bWVudHMuCiAgICAqIEFkZGVkIGltcHJvdmVkIGhlbHAgdmlld2VyIChNQ0phY2sxMjMpCiAgICAqIEFkZGVkIG51bXBhZCBlbnRlciBzdXBwb3J0IChUaGVXaXJlTG9yZCkuCiAgICAqIEFkZCBmdW5jdGlvbnMgdG8gd3JhcCB0ZXh0IChMdXB1czU5MCkKKiBBZGRlZCBuZXcgcGx1Z2luIEFQSQogICogQVBJIHZlcnNpb24gaGFzIG5vdyBiZWVuIGJ1bXBlZCB0byAxMAogICogTmV3IHBsdWdpbiBpbml0L2RlaW5pdCBmdW5jdGlvbnM6IGBQbHVnaW5JbmZvICogcGx1Z2luX2luaXQoY29uc3QgUGx1Z2luRnVuY3Rpb25zICogZnVuY3Rpb25zLCBjb25zdCBwYXRoX3QmIHBhdGgpO2AgJiBgdm9pZCBwbHVnaW5fZGVpbml0KFBsdWdpbkluZm8gKiBpbmZvKTtgCiAgKiBDYXBhYmlsaXRpZXMgaW4gdGhlIG9sZCBBUEkgYXJlIG5vdyBwcmVzZW50IGFzIGZ1bmN0aW9uIHBvaW50ZXJzIGluIHRoZSBgUGx1Z2luRnVuY3Rpb25zYCBzdHJ1Y3R1cmUgcGFzc2VkIHRvIGBwbHVnaW5faW5pdGAKICAqIEFkZGl0aW9uYWwgZnVuY3Rpb25zIGFyZSBub3cgYXZhaWxhYmxlIGFzIHdlbGw6CiAgICAqIEFjY2VzcyB0byB0aGUgY29uZmlndXJhdGlvbiwgaW5jbHVkaW5nIGN1c3RvbSBzZXR0aW5ncyBmb3IgcGx1Z2lucwogICAgKiBTREwgZXZlbnQgaG9va3MKICAgICogVmlydHVhbCBtb3VudHMKICAgICogUnVubmluZyB0YXNrcyBvbiB0aGUgbWFpbiB0aHJlYWQKICAqIFNlZSBodHRwczovL3d3dy5jcmFmdG9zLXBjLmNjL2RvY3MvcGx1Z2lucyBmb3IgbW9yZSBpbmZvIG9uIGhvdyB0byB3cml0ZSBwbHVnaW5zCiogQWRkZWQgcmVsZWFzZSBub3RlIHZpZXdlcgoqIEFkZGVkIHN1cHBvcnQgZm9yIENMSSBtb2RlIG9uIFdpbmRvd3MgdGhyb3VnaCBQREN1cnNlcwoqIEFkZGVkIG9wdGlvbmFsIHdpZHRoIGFuZCBoZWlnaHQgb3B0aW9ucyB0byBgdGVybS5kcmF3UGl4ZWxzYAoqIEFkZGVkIGB0ZXJtLmdldFBpeGVsc2AgdG8gcmVhZCBhIHJlZ2lvbiBvZiBwaXhlbHMgKExvZ2FuRGFyaykKKiBBZGRlZCBvcHRpb25hbCBzb2xpZCBjb2xvciBmaWxsIGFyZ3VtZW50IHRvIGB0ZXJtLmRyYXdQaXhlbHNgIChMb2dhbkRhcmspCiogQWRkZWQgc29tZSBtaXNzaW5nIEhUVFAgY29uZmlndXJhdGlvbiBvcHRpb25zIChiZXNpZGVzIGJsYWNrL3doaXRlbGlzdCkKKiBBZGRlZCBhIHBhbmljIGhhbmRsZXIgdGhhdCBpcyBtb3JlIGxpa2UgQ29tcHV0ZXJDcmFmdCdzIGluIHN0YW5kYXJkcyBtb2RlCiogQWRkZWQgZm9yY2Utc2h1dGRvd24gZnVuY3Rpb25hbGl0eSB3aGVuIGEgY29tcHV0ZXIgcmVmdXNlcyB0byBjbG9zZQoqIEFkZGVkIGVycm9yIGhhbmRsZXJzIHdoZW4gYW4gdW5jYXVnaHQgZXhjZXB0aW9uIG9jY3VycwogICogVGhpcyBzaG91bGQgbm90IGhhcHBlbiwgYnV0IGlmIGl0IGRvZXMgQ3JhZnRPUy1QQyB3aWxsIG5vIGxvbmdlciBmdWxseSBjcmFzaAoqIEFkZGVkIHRyYWNpbmcgb2YgdGhlIGxhc3QgQyBMdWEgZnVuY3Rpb24gY2FsbGVkLCBob3BlZnVsbHkgaGVscGluZyBtZW1vcnkgY29ycnVwdGlvbnMgYmUgYWJsZSB0byBiZSBmaXhlZAoqIE9wdGltaXplZCBzY3JvbGwgYW5kIGNsZWFyIHJvdXRpbmVzIHRvIGRpcmVjdGx5IGNvcHkgbWVtb3J5CiogRml4ZWQgYG9zLnNldEFsYXJtYCBpbXBsZW1lbnRhdGlvbiB0byBubyBsb25nZXIgdXNlIDEwMCUgQ1BVCiogRml4ZWQgdW5rbm93biBjb25maWcgb3B0aW9ucyBiZWluZyBkZWxldGVkCiogRml4ZWQgY2xvc2UgYnV0dG9uIGFuZCBob3RrZXlzIG5vdCBmdW5jdGlvbmluZyB3aGVuIHRoZXJlIGFyZSB0b28gbWFueSBldmVudHMgaW4gdGhlIHF1ZXVlICgjMTU0KQoqIEZpeGVkIGBtb25pdG9yLnNldFRleHRTY2FsZWAgbm90IGZ1bmN0aW9uaW5nIHByb3Blcmx5IHdpdGggbm9uLTZ4OSBmb250cyAoIzE1MCkKKiBGaXhlZCBgdGVybS5nZXRQaXhlbGAgcmV0dXJuaW5nIHRoZSB3cm9uZyB2YWx1ZXMgaW4gbW9kZSAxICgjMTU5KQoqIEZpeGVkIGEgcmFjZSBjb25kaXRpb24gd2hpbGUgcmVzaXppbmcgd2hlbiB1c2luZyB0aGUgaGFyZHdhcmUgcmVuZGVyZXIKKiBGaXhlZCBhIHJhY2UgY29uZGl0aW9uIGluIGBvcy5zdGFydFRpbWVyYAoqIEZpeGVkIGEgcG9zc2libGUgcmFjZSBjb25kaXRpb24gd2hlbiBmaXJpbmcgYSB0aW1lcgoqIFJlZHVjZWQgdGhlIG51bWJlciBvZiBldmVudCB0aW1lb3V0IHRpbWVycyBzdGFydGVkIHdoZW4gcHVsbGluZyBldmVudHMgKCMxNTgpCiAgKiBUaGlzIGZpeGVzIGFuIGlzc3VlIGNhdXNpbmcgdGhlIHRpbWVyIHRocmVhZCB0byBsb2NrIHVwIHRyeWluZyB0byBwcm9jZXNzIHN0YXJ0L2NhbmNlbCBldmVudHMKKiBGaXhlZCBzb21lIGxvY2tpbmcgaXNzdWVzIGluIHRlcm1pbmFscwoqIEZpeGVkIG1pc3NpbmcgcmFuZ2UgY2hlY2tzIGluIGB0ZXJtLmRyYXdQaXhlbHNgCiogRml4ZWQgYHRlcm0uZ2V0UGl4ZWxgIGNyYXNoaW5nIHdoZW4gYWNjZXNzaW5nIHBpeGVsIGF0IGVkZ2Ugb2Ygc2NyZWVuIChMb2dhbkRhcmspCiogRml4ZWQgc29tZSBpc3N1ZXMgd2l0aCByZXNpemluZyB0aGUgZGVidWdnZXIKKiBGaXhlZCBjb21wdXRlcnMgaGFuZ2luZyB3aGVuIGNsb3NpbmcgdGhlIGRlYnVnZ2VyIG9uIExpbnV4ICgjMTU3KQoqIEZpeGVkIGRlYnVnZ2VyIGBsb2NhbHNgIHRhYmxlIHNvbWV0aW1lcyBub3QgZnVuY3Rpb25pbmcgcHJvcGVybHkKKiBGaXhlZCBzb21lIENyYWZ0T1MtUEMgdGVybSBmdW5jdGlvbnMgYmVpbmcgcmVkaXJlY3RlZCAoTG9nYW5EYXJrKQoqIFRoZSBjcmFmdG9zMi1sdWEgbGlicmFyeSBjYW4gbm93IGJlIHVzZWQgaW4gcHJvZ3JhbXMgb3RoZXIgdGhhbiBDcmFmdE9TLVBDCgojIyB2Mi40LjUgLSBOb3ZlbWJlciAyOCwgMjAyMAoqIEJ1bXBlZCBDQzpUIHZlcnNpb24gdG8gMS45My4xCiAgKiAxLjk0LjAgc3VwcG9ydCB3aWxsIGJlIGNvbWluZyBpbiB2Mi41CiogQ0M6VCBFZGl0aW9uIGJ1aWxkcyB3aWxsIG5vdyB1cGRhdGUgdG8gdGhlIHN0YW5kYXJkIFJPTSBkdWUgdG8gZGVwcmVjYXRpb24gaW4gdjIuNQogICogdjIuNSBpcyBtZXJnaW5nIHRoZSBDQzpUIFJPTSBpbnRvIHRoZSBtYWluIFJPTSwgc28gQ0M6VCBFZGl0aW9uIGRvd25sb2FkcyB3aWxsIGJlIHJlbW92ZWQKICAqIEZ1cnRoZXIgYXV0by11cGRhdGVzIHdpbGwgZG93bmxvYWQgdGhlIHN0YW5kYXJkIHZlcnNpb24gcmVnYXJkbGVzcyBvZiB3aGV0aGVyIENDOlQgRWRpdGlvbiB3YXMgaW5zdGFsbGVkCiAgKiB2Mi41IHdpbGwgYmUgdGhlIGxhc3QgdmVyc2lvbiB3aXRoIGEgQ0M6VCBFZGl0aW9uIGRvd25sb2FkIGF2YWlsYWJsZSAtIGFmdGVyIHRoYXQsIHVwZGF0aW5nIGZyb20gQ0M6VCBFZGl0aW9uIHdpbGwgZmFpbAoqIEFkZGVkIHNvbWUgcHJldmlvdXNseSBtaXNzaW5nIGNoZWNrcyBmcm9tIGB0ZXJtYCBBUEkgZnVuY3Rpb25zCiogRml4ZWQgYHRlcm0uc2V0R3JhcGhpY3NNb2RlKGZhbHNlKWAgbm90IHdvcmtpbmcgcHJvcGVybHkKKiBGaXhlZCBhIHBvc3NpYmxlIGNyYXNoIGluIGBmaWxlLnJlYWRMaW5lYCBvbiBlbXB0eSBsaW5lcwoqIEZpeGVkIGEgbWVtb3J5IGxlYWsgaW4gYG9zLnN0YXJ0VGltZXJgCiogRml4ZWQgYGNjZW11eC5vcGVuRGF0YURpcmAgbm90IHdvcmtpbmcgb24gV2luZG93cwoqIEZpeGVkIG1vbml0b3JfdG91Y2ggZXZlbnRzIG5vdCBiZWluZyBzZW50IHdoZW4gbW9uaXRvcnNVc2VNb3VzZUV2ZW50cyBpcyBkaXNhYmxlZAoqIEZpeGVkIHVwZGF0ZSBtZXNzYWdlIGFwcGVhcmluZyB3aGVuIHN3aXRjaGluZyBiZXR3ZWVuIHN0YW5kYXJkIGFuZCBBY2NlbGVyYXRlZCB2ZXJzaW9ucwoKIyMgdjIuNC40IC0gT2N0b2JlciAxOCwgMjAyMAoqIEJ1bXBlZCBDQzpUIHZlcnNpb24gdG8gMS45My4wCiogQWRkZWQgY29tcHV0ZXIgc2l6ZSBjb3VudGluZyB0byBgZnMuZ2V0RnJlZVNwYWNlYAogICogVGhpcyBpcyBvbmx5IGVuYWJsZWQgd2l0aCBgc3RhbmRhcmRzTW9kZWAgb24KICAqIFdpdGhvdXQgYHN0YW5kYXJkc01vZGVgLCBvbGQgYmVoYXZpb3IgaXMga2VwdAogICogTWF5IHJlZHVjZSBwZXJmb3JtYW5jZSBvZiBgZnMuZ2V0RnJlZVNwYWNlYAoqIEZpeGVkIHBhdGggcmVzb2x1dGlvbiBvbiBXaW5kb3dzIHN5c3RlbXMgdXNpbmcgbm9uLUFTQ0lJIGNoYXJhY3RlcnMgaW4gcGF0aHMKICAqIFRoaXMgaW52b2x2ZWQgcmV3cml0aW5nIGFsbCBvZiB0aGUgcGF0aC1yZWxhdGVkIGNvZGUgdG8gYWNjZXB0IHdpZGUgc3RyaW5ncyBvbiBXaW5kb3dzCiAgICAqIFdoeSBkaWQgV2luZG93cyBoYXZlIHRvIGtlZXAgdXNpbmcgVVRGLTE2Pz8/ID46KAoqIEZpeGVkIGtleWJvYXJkIGxheW91dHMgbm90IGJlaW5nIHJlc3BlY3RlZCAoIzEzOCkKKiBGaXhlZCBzdHJpbmcgcGF0dGVybiBtYXRjaGluZyB3aXRoIE5VTCBieXRlcyBpbiBwYXR0ZXJucwogICogVGhpcyB3YXMgcHJldmlvdXNseSBkb25lIGluIHRoZSBkZWZhdWx0IFJPTSwgYnV0IG5vdyBMdWEgaXRzZWxmIGhhcyBiZWVuIG1vZGlmaWVkIHRvIGZpeCB0aGUgaXNzdWUKICAqIEFsdGVybmF0ZSBST01zIChzdWNoIGFzIHRoZSBDQzpUIFJPTSkgbm8gbG9uZ2VyIGhhdmUgdGhpcyBpc3N1ZQoqIEZpeGVkIGF1dG9tYXRpYyBkaXJlY3RvcnkgY3JlYXRpb24gcmV2ZXJzaW5nIHRoZSBuZXcgZGlyZWN0b3J5IG5hbWVzICgjMTM3KQoqIEZpeGVkIHNvbWUgY3Jhc2hlcyByZWxhdGVkIHRvIHRoZSBwcmludGVyCiogRml4ZWQgSFRUUCA+PSA0MDAgcmVzcG9uc2UgY29kZXMgbm90IGJlaW5nIHJldHVybmVkIGFzIGZhaWx1cmVzCiogRml4ZWQgYHRlcm1pbmF0ZWAgZXZlbnQgbm90IGJlaW5nIHNlbnQgdW5jb25kaXRpb25hbGx5IHdoZW4gYSBmaWx0ZXIgaXMgc2V0CiogYHRlcm0uc2NyZWVuc2hvdGAgY2FuIG5vdyBiZSBjYWxsZWQgd2l0aCBhIGJvb2xlYW4gdmFsdWUgc3BlY2lmeWluZyB3aGV0aGVyIHRvIGNvcHkgdGhlIGltYWdlIHRvIHRoZSBjbGlwYm9hcmQKKiBBZGRlZCBlcnJvciBtZXNzYWdlIHRvIGBwZXJpcGhlbXUuY3JlYXRlYAoqIEZpeGVkIG5hbWUgb2Ygc2NyaXB0cyBydW4gdGhyb3VnaCBgd2dldGAKKiBBZGRlZCBzb21lIGV4dHJhIGFyZ3VtZW50IGNoZWNrcyB0byBgc2hlbGxgIGZ1bmN0aW9ucyBpbiBgY2FzaGAKKiBGaXhlZCBgX190b3N0cmluZ2AgbWV0YW1ldGhvZCBtaXNzaW5nIGZyb20gYGNjLnByZXR0eWAgb2JqZWN0cwoqIEZpeGVkIHN0YW5kYWxvbmUgQ0kgYnVpbGRzCgojIyB2Mi40LjMgLSBTZXB0ZW1iZXIgMTIsIDIwMjAKKiBVcGRhdGVkIENDOlQgdmVyc2lvbiB0byAxLjkyLjAKICAqIEFkZCBzdXBwb3J0IGZvciB0aGUgYF9fcGFpcnNgIG1ldGFtZXRob2QuCiAgKiBgc3RyaW5nLmZvcm1hdGAgbm93IHVzZXMgdGhlIGBfX3Rvc3RyaW5nYCBtZXRhbWV0aG9kLgogICogQ29ycmVjdGx5IGhhbmRsZSB0YWJzIHdpdGhpbiBgdGV4dHV0aWxzLnVuc2VyaWFsaXplSlNPTmAuCiogRml4ZWQgYSBjcmFzaCB3aGVuIHVzaW5nIHBsdWdpbnMKKiBGaXhlZCBjcmFzaGluZyB3aGVuIGEgTHVhIHBhbmljIG9jY3VycwoqIEZpeGVkIGEgYnVnIGNhdXNpbmcgbGVzc2VyIHBlcmZvcm1hbmNlIGluIEMgQ3JhZnRPUyBmdW5jdGlvbnMKKiBKSVQ6IE5vIGxvbmdlciB1c2luZyBMdWFKSVQgQml0T3AgbGlicmFyeSBhcyBpdCBpcyBpbmNvbXBhdGlibGUgd2l0aCBgYml0MzJgCiAgKiBOb3cgdXNpbmcgUFVDIEx1YSBgYml0MzJgIGltcGxlbWVudGF0aW9uIGluc3RlYWQKCiMjIHYyLjQuMiAtIFNlcHRlbWJlciA4LCAyMDIwCiogVXBkYXRlZCBDQzpUIHZlcnNpb24gdG8gMS45MS4wCiAgKiBBZGQgc3RyaW5nLntwYWNrLHVucGFjayxwYWNrc2l6ZX0gKE1DSmFjazEyMykKICAqIEVzY2FwZSBub24tQVNDSUkgY2hhcmFjdGVycyBpbiBKU09OIHN0cmluZ3MgKG5ldW1vbmQpCiAgKiBNYWtlIGZpZWxkIG5hbWVzIGluIGZzLmF0dHJpYnV0ZXMgbW9yZSBjb25zaXN0ZW50IChhYmJ5KQogICogRml4IHRleHR1dGlscy5mb3JtYXRUaW1lIGNvcnJlY3RseSBoYW5kbGUgMTIgQU0gKFI5Mzk1MFgpCiogU3BlYWtlcnMgYXJlIG5vdyBlbXVsYXRlZCBjbG9zZXIgdG8gaG93IHRoZXkgd29yayBpbiBDb21wdXRlckNyYWZ0CiAgKiBFYWNoIHNwZWFrZXIgaGFzIGl0cyBvd24gY2hhbm5lbCBwb29sCiAgKiBDaGFubmVscyBhcmUgYWxsb2NhdGVkIGFzIG5lZWRlZAogICogVGhlIGBtYXhOb3Rlc1BlclRpY2tgIG9wdGlvbiBub3cgcHJvcGVybHkgY2FwcyBub3RlcyBldmVyeSAxLzIwIHMKICAqIE9ubHkgb25lIHNvdW5kIGNhbiBiZSBwbGF5ZWQgYXQgb25jZQogICogQ2hhbm5lbCBudW1iZXJzIGFyZSBub3cgcmV0dXJuZWQgYXMgYSBzZWNvbmQgYXJndW1lbnQKICAgICogVGhlc2UgY2FuIGJlIHBhc3NlZCB0byBgc3RvcFNvdW5kc2AgdG8gc3RvcCBvbmUgY2hhbm5lbAoqIFJlcGxhY2VkIGN1c3RvbSBiaXQzMiBsaWJyYXJ5IHdpdGggc3RhbmRhcmQgTHVhIDUuMiBpbXBsZW1lbnRhdGlvbgogICogVGhpcyBmaXhlcyBhIGJ1ZyB3aGVyZSBmdW5jdGlvbnMgY2FuJ3QgdGFrZSBtb3JlIHRoYW4gdHdvIGFyZ3VtZW50cwogICogVGhpcyBzaG91bGQgYWxzbyBmaXggYW55IG90aGVyIHBvc3NpYmxlIGJ1Z3MgaW4gdGhlIGJpdDMyIGxpYnJhcnkKKiBGaXhlZCB5aWVsZGluZyBmcm9tIGNhbGxiYWNrcyBvZiBjZXJ0YWluIGZ1bmN0aW9uczoKICAqIGBzdHJpbmcuZ3N1YmAKICAqIGB0YWJsZS5zb3J0YAogICogZGVidWcgaG9va3MKICAqIFRoZSBvbmx5IGZ1bmN0aW9uIHRoYXQgY2FuJ3QgeWllbGQgZnJvbSBhIGNhbGxiYWNrIGlzIGBsb2FkYAoqIEFkZGVkIGAtLW1jLXNhdmVgIGFyZ3VtZW50IHRvIGxvYWQgY29tcHV0ZXJzIGZyb20gYSBNaW5lY3JhZnQgc2F2ZQogICogVGhpcyByZWFkcyBmcm9tIHRoZSBkZWZhdWx0IE1pbmVjcmFmdCBzYXZlIGRpcmVjdG9yeQogICogSWYgdGhlIHNhdmUgaXNuJ3Qgc3RvcmVkIHRoZXJlLCB5b3UgY2FuJ3QgdXNlIHRoaXMgYXJndW1lbnQgKHVzZSBgLS1jb21wdXRlcnMtZGlyYCBpbnN0ZWFkKQoqIEFkZGVkIGRhdGUtc3BlY2lmaWMgTU9URHMKICAqIE9uZSBvZiB0aGVzZSBhcHBlYXJzIHRvZGF5IChTZXB0ZW1iZXIgOCkhCiogQWRkZWQgc3VwcG9ydCBmb3IgaGFyZHdhcmUgcmVuZGVyZXIgaW4gcmF3IGNsaWVudCBtb2RlCiogRnVuY3Rpb25zIGNhbiBub3cgcmV0dXJuIGFuIHVubGltaXRlZCogbnVtYmVyIG9mIHZhbHVlcwoqIFVwZGF0ZWQgY2FzaCB0byB1c2UgYGNjLnJlcXVpcmVgIG1vZHVsZQoqIEZpeGVkIGEgYnVnIGNhdXNpbmcgdGhlIHNhbWUgTU9URCB0byBhcHBlYXIgb24gZWFjaCBib290CiogRml4ZWQgYSBidWcgY2F1c2luZyBhIGZhaWx1cmUgdG8gY29ubmVjdCB0byBgbG9jYWxob3N0YCBvdmVyIEhUVFAKKiBGaXhlZCBhIGJ1ZyB3aXRoIHRoZSBceCBlc2NhcGUgY29kZQoqIE1vZGlmaWVkIGludGVybmFscyBvZiBwbHVnaW4gbG9hZGVyLCBmaXhpbmcgYSBtZW1vcnkgbGVhayBpbiB0aGUgcHJvY2VzcwoqIEpJVDogVXBkYXRlZCBMdWFKSVQgdG8gMi4xLjAtYmV0YTMKKiBKSVQ6IE1vdmVkIHBsdWdpbiBwYXRoIGJhY2sgdG8gYHBsdWdpbnMtbHVhaml0YCBhcyBleHBlY3RlZAoqIEpJVDogQWRkZWQgRkZJIGxpYnJhcnkgKGF2YWlsYWJsZSB3aXRoIGBqaXRfZmZpX2VuYWJsZWAgc2V0IHRvIHRydWUpCiogSklUOiBSZW1vdmVkIGBvcy5zZXRIYWx0T25Mb25nUnVuTW9kZWAsIGNvdW50IGhvb2tzIGFyZSBubyBsb25nZXIgdXNlZAoqIEpJVDogRml4ZWQgYSBidWcgY2F1c2luZyBgaW8ucmVhZGAgdG8gbm90IHdvcmsKKiBXaW5kb3dzOiBBZGRlZCBlcnJvciBkaWFsb2cgd2hlbiB1c2luZyBjb25zb2xlLW9ubHkgb3B0aW9ucyB3aXRoIG5vbi1jb25zb2xlIGJ1aWxkcwoqIE1hYzogQXBwbGljYXRpb24gaXMgbm93IGJ1aWx0IGFzIGEgVW5pdmVyc2FsIGJpbmFyeSAoZXhjbHVkaW5nIENyYWZ0T1MtUEMgQWNjZWxlcmF0ZWQsIGFzIEx1YUpJVCBkb2VzIG5vdCBmdWxseSBzdXBwb3J0IEFSTTY0IHlldCkKCiMjIHYyLjQuMSAtIEF1Z3VzdCAyMiwgMjAyMAoqIEdyYXlzY2FsZSB0ZXJtaW5hbHMgbm93IHJlbmRlciB1c2luZyAxNiBncmF5cyBpbnN0ZWFkIG9mIGZvcmNpbmcgY29sb3JzIHRvIDQgZ3JheXMgKCMxMzIpCiAgKiBGb3IgZXhhbXBsZSwgeW91IGNhbiBub3cgc2V0IHRoZSBjb2xvciB0byBgY29sb3JzLnJlZGAgYW5kIHRoZSBjb2xvciB3aWxsIHJlbmRlciBhcyB0aGUgZ3JheXNjYWxlIHZlcnNpb24gb2YgcmVkCiogRml4ZWQgYSBjcmFzaCB3aGVuIHVzaW5nIHRoZSBwcm9maWxlciAoIzEyOSkKKiBGaXhlZCBpbmNvcnJlY3QgY3Vyc29yIGNvbG9yIGluIGhhcmR3YXJlIHRlcm1pbmFsICgjMTMwKQoqIExhc3QgdmVyc2lvbiBjaGVjayBub3cgc2F2ZXMgcmlnaHQgYWZ0ZXIgYm9vdAoqIEZpeGVkIHVwIGEgd2hvbGUgYnVuY2ggb2Ygc3R1ZmYgZm9yIFdBU00gcG9ydHMKKiBSZS1pbnRyb2R1Y2VkIENyYWZ0T1MtUEMgQWNjZWxlcmF0ZWQgZm9yIHYyLjQuMQoKIyMgdjIuNCAtIEF1Z3VzdCAxNSwgMjAyMAoqIEFkZGVkIG5ldyBHVUkgdGVybWluYWwgdGhhdCB1c2VzIGhhcmR3YXJlIHJlbmRlcmluZyAoZXhwZXJpbWVudGFsKQogICogSXQgdXNlcyB0aGUgR1BVIHRvIGFjY2VsZXJhdGUgZHJhd2luZyBncmFwaGljcwogICogVXNlcyB0aGUgc2FtZSBiYXNlIGNvZGUgdGhhdCB3YXMgdXNlZCBwcmlvciB0byB2Mi4xLCB3aXRoIHVwZGF0ZXMgdGhhdCBoYXZlIGJlZW4gYWRkZWQgc2luY2UKICAqIFN1cHBvcnQgY2FuIGJlIGVuYWJsZWQgd2l0aCB0aGUgYHVzZUhhcmR3YXJlUmVuZGVyZXJgIGNvbmZpZyBvcHRpb24gb3IgdGhlIGAtLWhhcmR3YXJlYCBvciBgLXIgaGFyZHdhcmUtc2RsYCBDTEkgZmxhZwogICogQSB0ZXN0IHNjcmlwdCBpcyBhdmFpbGFibGUgdG8gc2VlIHdoaWNoIGlzIGJldHRlciBmb3IgeW91ciBzeXN0ZW0KICAgICogWW91IGNhbiBydW4gaXQgd2l0aCBgZ2lzdCBydW4gODAyZjY0NTA4YTFmNTFiMzI0NGY1YmNjMDQxNGNhMjJgCiAgKiBWc3luYyBjYW4gYmUgZW5hYmxlZCB3aXRoIHRoZSBgdXNlVnN5bmNgIG9wdGlvbgogICogVGhlIGRyaXZlciB0byB1c2UgY2FuIGJlIHNlbGVjdGVkIHdpdGggdGhlIGBwcmVmZXJyZWRIYXJkd2FyZURyaXZlcmAgY29uZmlnIG9wdGlvbiBvciB0aGUgYC1yYCBDTEkgZmxhZwogICAgKiBUaGVzZSBhcmUgYWxsIG9mIHRoZSBwb3NzaWJsZSBkcml2ZXJzOgogICAgICAqIGBkaXJlY3QzZGAKICAgICAgKiBgZGlyZWN0M2QxMWAKICAgICAgKiBgZGlyZWN0ZmJgCiAgICAgICogYG1ldGFsYAogICAgICAqIGBvcGVuZ2xgCiAgICAgICogYG9wZW5nbGVzYAogICAgICAqIGBvcGVuZ2xlczJgCiAgICAgICogYHNvZnR3YXJlYAogICAgKiBTb21lIGRyaXZlcnMgbWF5IG5vdCBiZSBhdmFpbGFibGUgb24geW91ciBzeXN0ZW0KICAgICogVXNlIGBjcmFmdG9zIC1yYCB0byBsaXN0IGFsbCBhdmFpbGFibGUgZHJpdmVycwoqIFVwZGF0ZWQgQ0M6VCB2ZXJzaW9uIHRvIDEuOTAuMgogICogQWRkIGNjLmltYWdlLm5mdCBtb2R1bGUsIGZvciB3b3JraW5nIHdpdGggbmZ0IGZpbGVzLiAoSmFrb2JEZXYpCiAgKiBBZGQgY29uZmlndXJhdGlvbiB0byBjb250cm9sIHRoZSBzaXplcyBvZiBtb25pdG9ycyBhbmQgdGVybWluYWxzLiAoYGRlZmF1bHRXaWR0aGAvYGRlZmF1bHRIZWlnaHRgKQogICogRml4IHN0cmluZyBzZXJpYWxpemF0aW9uIGVycm9yIGluIHRleHR1dGlscy5zZXJpYWxpemVKU09OLgoqIEJyYW5kLW5ldyBhcHAgaWNvbgogICogRGVzaWduZWQgZXNwZWNpYWxseSBmb3IgQ3JhZnRPUy1QQwogICogSW5zcGlyZWQgYnkgdGhlIGFlc3RoZXRpYyBvZiBtYWNPUyBCaWcgU3VyCiAgKiBIaWdoLXJlc29sdXRpb24sIHRleHR1cmVkLCBtb2Rlcm4KKiBBZGRlZCBwcm9wZXIgZG91YmxlLWJ1ZmZlcmluZyB0byB0aGUgdGVybWluYWwKICAqIFRoaXMgYWxsb3dzIHlvdSB0byB1c2UgdGhlIGB0ZXJtYCBBUEkgd2hpbGUgQ3JhZnRPUy1QQyBpcyByZW5kZXJpbmcKICAqIFRoaXMgc3BlZWRzIHVwIHByb2dyYW1zIHRoYXQgZW5kIHVwIHJ1bm5pbmcgbG93ZXIgdGhhbiB0aGUgcmVuZGVyIEZQUwoqIEFkZGVkIGludHJvZHVjdGlvbiAmIHVwZGF0ZSBNT1REIG1lc3NhZ2VzCiAgKiBXaGVuIHJ1biBmb3IgdGhlIGZpcnN0IHRpbWUgKG9yIGluIGEgbmV3IGRpcmVjdG9yeSksIGFuIGludHJvZHVjdGlvbiBtZXNzYWdlIGlzIGRpc3BsYXllZAogICogV2hlbiBydW4gYWZ0ZXIgYW4gdXBkYXRlLCBhIG5vdGlmaWNhdGlvbiBtZXNzYWdlIGlzIGRpc3BsYXllZCwgYW5kIHN1Z2dlc3RzIHJ1bm5pbmcgYGhlbHAgd2hhdHNuZXdgCiogQWRkZWQgc3VwcG9ydCBmb3IgYG1vbml0b3JfdG91Y2hgIGV2ZW50IGFzIGV4cGVjdGVkICgjMTE5KQogICogVGhpcyByZW1vdmVzIHRoZSBgbW91c2VfKmAgZXZlbnRzIGZvciBtb25pdG9ycwogICogVGhlIHByZXZpb3VzIGJlaGF2aW9yIGNhbiBiZSByZXN0b3JlZCBieSBzZXR0aW5nIHRoZSBgbW9uaXRvcnNVc2VNb3VzZUV2ZW50c2AgY29uZmlnIHNldHRpbmcKICAgICogVGhpcyB3aWxsIGFsc28gYWRkIHRoZSBtb25pdG9yJ3Mgc2lkZSBhcyBhIGZvdXJ0aCBwYXJhbWV0ZXIKKiBBZGRlZCBgc3RhbmRhcmRzTW9kZWAgY29uZmlnIG9wdGlvbiBmb3Igc3RyaWN0IGNvbXBhdGliaWxpdHkgd2l0aCBDQzpUL0NDRW11WAogICogRm9yY2VzIHRpbWUgcmVhZGluZ3MgJiB0aW1lciByZXNvbHV0aW9uIHRvIGJlIHJvdW5kZWQgdG8gNTAgbXMgKDEgdGljaykKICAqIEFkZHMgYmFjayBjb2xvcmVkIG1hcmdpbnMgYXMgc2hvd24gaW4gQ0MKICAqIE1vcmUgY29tcGF0aWJpbGl0eSB0d2Vha3MgbWF5IGJlIGFkZGVkIHVuZGVyIHRoaXMgb3B0aW9uCiogQWRkZWQgYHN0YXJ0RnVsbHNjcmVlbmAgcGVyLWNvbXB1dGVyIGNvbmZpZyBvcHRpb24KKiBEaXNhYmxlZCBhY2Nlc3MgdG8gYHJvbVJlYWRPbmx5YCBmcm9tIENyYWZ0T1MKKiBGaXhlZCBBQkkgY29tcGF0aWJpbGl0eSB3aXRoIHN0YW5kYXJkIEx1YSBsaWJyYXJpZXMKICAqIFRoaXMgbWVhbnMgeW91IGNhbiBub3cgcHJvcGVybHkgdXNlIEx1YSBsaWJyYXJpZXMgKGUuZy4gZnJvbSBMdWFSb2NrcykgYXMgcGx1Z2lucwogICogUHJlZml4IHRoZSBsaWJyYXJ5IG5hbWUgd2l0aCBgbHVhX2AgdG8gdGVsbCBDcmFmdE9TLVBDIHRvIHNraXAgbG9hZGluZyBwbHVnaW4gbWV0YWRhdGEKKiBVcGRhdGVkIHBsdWdpbiBBUEkgdmVyc2lvbiB0byA0CiogQWRkZWQgSUQgdG8gcGVyLWNvbXB1dGVyIGNvbmZpZyBlcnJvciBtZXNzYWdlcwoqIE1vZGVtcyBub3cgYWN0IGFzIHdpcmVkIG1vZGVtcyBhbmQgY2FuIGJlIHVzZWQgdG8gYWNjZXNzIG5vbi1sb2NhbCBwZXJpcGhlcmFscyAoIzEyMikKICAqIE5vbi1sb2NhbCBwZXJpcGhlcmFscyBjYW4gbm93IGJlIGxpc3RlZCB3aXRoIGBwZXJpcGhlcmFsLmdldE5hbWVzKClgIHdoZW4gYSBtb2RlbSBpcyBhdHRhY2hlZAoqIEZpeGVkIGEgY3Jhc2ggd2hlbiBvcGVuaW5nIGEgZGVidWdnZXIgdHdpY2UgKCMxMjApCiogRml4ZWQgYSByYXJlIHJhY2UgY29uZGl0aW9uIHdoaWxlIGdldHRpbmcgYW4gZXZlbnQgKCMxMjMpCiogRml4ZWQgYW4gaXNzdWUgd2l0aCBzYXZpbmcgc2NyZWVuc2hvdHMgdG8gZGlzawoqIEZpeGVkIGEgYnVnIHdoZXJlIGZ1bmN0aW9uIGtleSBob3RrZXlzIGRvbid0IHdvcmsgd2hlbiBDYXBzIG9yIE51bSBsb2NrIGlzIGVuYWJsZWQKKiBGaXhlZCBhIGJ1ZyBjYXVzaW5nIHRoZSBgbG9jYWxzYCB0YWJsZSBpbiB0aGUgZGVidWdnZXIgdG8gYmUgbWlzc2luZwoqIEZpeGVkIGBiaXQzMi5scm90YXRlYCByZXR1cm5pbmcgaW5jb3JyZWN0IHJlc3VsdHMKKiBGaXhlZCBjcmFzaCB3aGVuIGNsb3NpbmcgQ3JhZnRPUy1QQyB3aGlsZSBhIFdlYlNvY2tldCBpcyBzaHV0dGluZyBkb3duCiogRml4ZWQgY3Jhc2ggd2hlbiB1c2luZyB0b28gbWFueSBuZXN0ZWQgY29yb3V0aW5lcyAoIzEyNCkKICAqIFRoaXMgd2FzIGR1ZSB0byBhIGJ1ZyB0aGF0IGRpZG4ndCB1cGRhdGUgdGhlIEMgY2FsbCBjb3VudCBwcm9wZXJseQogICogQ2FsbGluZyB0b28gbWFueSBuZXN0ZWQgY29yb3V0aW5lcyB3aWxsIHJlc3VsdCBpbiBhICJDIHN0YWNrIG92ZXJmbG93IiBlcnJvcgoqIEZpeGVkIGEgcmFjZSBjb25kaXRpb24gaW4gYHBlcmlwaGVtdS5kZXRhY2hgCiogRml4ZWQgaW5jb3JyZWN0IHByZXR0aWZpY2F0aW9uIG9mIG5vbi1jb250aWd1b3VzIHRhYmxlcyAoIzEyNSkKKiBGaXhlZCByYXcgdGVybWluYWxzIGdldHRpbmcgdGhlIHNhbWUgSUQKKiBBZGRlZCBzb21lIG1vcmUgbG9ja3Mgb24gdGltZXJzIHRvIHByZXZlbnQgY3Jhc2hlcwoqIEZpeGVkIGFib3J0IHRpbWVvdXQgbm90IHdvcmtpbmcgYmVmb3JlIGZpcnN0IHlpZWxkCiogRml4ZWQgbWlzc2luZyBVSyBzcGVsbGluZyBvZiB0ZXJtLm5hdGl2ZVBhbGV0dGVDb2xvdXIKKiBGaXhlZCBtb2RlbSBoYW5nIGR1ZSB0byBsb2NrcyBub3Qgd2FpdGluZwoqIEZpeGVkIG1pc3NpbmcgbW9kZW0gZGlzdGFuY2UgZmllbGQgaW4gYG1vZGVtX21lc3NhZ2VgIGV2ZW50CiogRml4ZWQgdXRmOC5jaGFyIHJldHVybmluZyBgJVVgIGZvciBlYWNoIGNoYXJhY3RlcgoqIEZpeGVkIGEgcmFuZG9tIGNyYXNoIHdoZW4gY2FsbGluZyBhIE5VTEwgQyBmdW5jdGlvbiAodGhpcyBzaG91bGRuJ3QgaGFwcGVuKQoqIEZpeGVkIHN0eWxpbmcgb2YgbWVzc2FnZSBkaWFsb2dzIG9uIFdpbmRvd3MKKiBGaXhlZCBldmVudHMgZ29pbmcgdG8gdGhlIHdyb25nIHdpbmRvdyBpbiByYXcgbW9kZQoqIEZpeGVkIEN0cmwtUi9TL1Qgc2hvcnRjdXRzIG5vdCB3b3JraW5nIGluIG5vbi1HVUkgbW9kZXMKKiBEaXNhYmxlZCBmdWxsc2NyZWVuIHN1cHBvcnQgaW4gV0FTTSB0byBhdm9pZCBjcmFzaGVzICgjMTAwKQoqIE1hYzogbWFjT1MgMTAuMTMgb3IgbGF0ZXIgaXMgbm93IHJlcXVpcmVkIGZvciBvZmZpY2lhbCBidWlsZHMKICAqIFVzZXJzIG9uIG9sZGVyIHZlcnNpb25zIGFyZSBzdGlsbCBhYmxlIHRvIGJ1aWxkIGFuZCBydW4gQ3JhZnRPUy1QQyB0aGVtc2VsdmVzCiogV2luZG93czogVGhlIHNvbHV0aW9uIG5vdyB1c2VzIHZjcGtnIGZvciBkZXBlbmRlbmNpZXMsIHNvIE51R2V0IGFuZCBzZXBhcmF0ZSBidWlsZHMgYXJlIG5vIGxvbmdlciByZXF1aXJlZAoqIFdpbmRvd3M6IFBERiBwcmludGluZyBpcyBub3cgc3VwcG9ydGVkIGluIGFsbCBidWlsZHMKKiBXaW5kb3dzOiBDaGFuZ2VkIFZpc3VhbCBDKysgUnVudGltZSBhbmQgb3RoZXIgbGlicmFyaWVzIHRvIGR5bmFtaWMgbGlua2luZwogICogVGhpcyByZWR1Y2VzIGV4ZWN1dGFibGUgc2l6ZSwgYnV0IHRoZSBWQ1JUIHJlZGlzdHJpYnV0YWJsZSBpcyBub3cgc3RyaWN0bHkgcmVxdWlyZWQKICAqIE1vcmUgRExMcyB3aWxsIGJlIHJlcXVpcmVkIGFzIHdlbGwKCiMjIHYyLjMuNCAtIEp1bmUgMjksIDIwMjAKKiBVcGRhdGVkIENDOlQgdmVyc2lvbiB0byAxLjg5LjEKICAqIFRoaXMgaW5jbHVkZXMgZnVsbCB0ZXN0aW5nIG9uIHRoZSBDQzpUIHRlc3Qgc2V0CiAgKiBDcmFmdE9TLVBDIG5vdyBmdWxseSBwYXNzZXMgYWxsIENDOlQgdGVzdHMKKiBBZGRlZCBhbiBlcnJvciBkaWFsb2cgd2hlbiBhbiBlcnJvciBvY2N1cnMgcmVhZGluZyB0aGUgY29uZmlndXJhdGlvbiBmaWxlcwogICogVGhlIGRpYWxvZyBpbmNsdWRlcyBhIG1lc3NhZ2UgZGVzY3JpYmluZyB3aGVyZSB0aGUgSlNPTiBwYXJzaW5nIGVycm9yIG9jY3VycmVkCiAgKiBJZiBhbiBlcnJvciBvY2N1cnMsIHRoZSBkZWZhdWx0cyB3aWxsIGJlIHVzZWQsIGFuZCBubyBjaGFuZ2VzIHdpbGwgYmUgc2F2ZWQKKiBBZGRlZCBwcm9wZXIgYGluZ2FtZWAgbG9jYWxlIGZvciBgb3MuZGF5L3RpbWUvZXBvY2hgCiAgKiBUaGlzIGlzIGJhc2VkIG9uIGEgMjAtbWludXRlIGNsb2NrIHRoYXQgc3RhcnRzIHdoZW4gdGhlIGNvbXB1dGVyIGJvb3RzCiAgKiBUaGlzIGNoYW5nZSBpcyB0byBpbXByb3ZlIGNvbXBhdGliaWxpdHkgd2l0aCBDQ0VtdVgvQ0M6VAoqIEFkZGVkIENDRW11WCBjb21tYW5kLWxpbmUgZmxhZ3MKICAqIGAtLWFzc2V0cy1kaXJgLCBgLS1jb21wdXRlcnMtZGlyYCwgYC0tc3RhcnQtZGlyYCwgYC0tZGF0YS1kaXJgIChhbGlhcyBvZiBgLS1kaXJlY3RvcnlgKSwgYC0tcGx1Z2luYCwgYC0tcmVuZGVyZXJgCiAgKiBUaGUgYC0tc3RhcnQtZGlyYCBmbGFnIG9ubHkgYWZmZWN0cyB0aGUgaW5pdGlhbCBjb21wdXRlciAoc3BlY2lmaWVkIGJ5IGAtLWlkYCkKKiBIZWFkbGVzcyBtb2RlIG5vdyByZXBvcnRzIGEgY29sb3IgdGVybWluYWwgKGZvciBhZHZhbmNlZCB0ZXN0aW5nKQoqIGBvcy50aW1lYCBub3cgcHJvcGVybHkgcGFyc2VzIHRhYmxlcyByZXR1cm5lZCBieSBgb3MuZGF0ZSgiKnQiKWAKKiBDcmFmdE9TLVBDIG5vdyByZXBvcnRzIGl0cyByZWFsIHZlcnNpb24gYW5kIENDIHZlcnNpb24gaW4gSFRUUCBVc2VyLUFnZW50IHN0cmluZ3MKKiBgZnMuZGVsZXRlYCBubyBsb25nZXIgZXJyb3JzIHdoZW4gZGVsZXRpbmcgYSBub24tZXhpc3RlbnQgZmlsZQoqIEZpeGVkIGBpby5vcGVuYCBjcmVhdGluZyBhIGRpcmVjdG9yeSBpbnN0ZWFkIG9mIG9wZW5pbmcgYSBmaWxlIGluIHdyaXRlIG1vZGUgKCMxMTYpCiogRml4ZWQgYGZzLmdldERyaXZlYCByZXR1cm5pbmcgdGhlIHdyb25nIHJlc3VsdHMKKiBGaXhlZCBhIHdob2xlIGJ1bmNoIG9mIHdhcm5pbmdzCiogYGZzLmdldFNpemVgIG5vdyByZXR1cm5zIDAgd2hlbiB1c2VkIG9uIGEgZGlyZWN0b3J5IGluc3RlYWQgb2YgZXJyb3JpbmcKKiBGaXhlZCBhIGJ1ZyBjYXVzaW5nIGF1ZGlvIGdsaXRjaGVzIHdoZW4gcGxheWluZyBsb3cgbm90ZXMgdGhyb3VnaCB0aGUgc3BlYWtlcgoqIEZpeGVkIGFuIGVycm9yIHdoZW4gd3JpdGluZyBgbmlsYCBvciBhIG51bWJlciB0byBhIGZpbGUgKCMxMTgpCiogRml4ZWQgYSBjcmFzaCB3aGVuIGFuIGludmFsaWQgZm9ybWF0IHN0cmluZyBpcyBwYXNzZWQgdG8gYG9zLmRhdGVgCiogRml4ZWQgbWlzc2luZyBjYy5jb21wbGV0aW9uIGFuZCBjYy5zaGVsbC5jb21wbGV0aW9uIG1vZHVsZXMKKiBGaXhlZCBwcm9ncmFtcyBnZXR0aW5nIHRoZSBwYXRoIHRvIHRoZSBwcm9ncmFtIGluIGFyZ1swXSBpbnN0ZWFkIG9mIHRoZSBjb21tYW5kIGFzIGl0IHdhcyBydW4KKiBSYWlzZWQgbWF4aW11bSBMdWEgY2FsbCBkZXB0aCB0byAzMjc2OCAoZnJvbSAyNTYpCiogYGxvYWRzdHJpbmdgIG5vdyBhdXRvbWF0aWNhbGx5IGFkZHMgYW4gYD1gIHNpZ24gdG8gdGhlIGNodW5rIG5hbWUKKiBGaXhlZCBgZGVidWcuZ2V0bG9jYWxgIG5vdCByZXR1cm5pbmcgZnVuY3Rpb24gcGFyYW1ldGVyIG5hbWVzCiAgKiBUaGlzIGZpeGVzIHRoZSBgY2MucHJldHR5YCBtb2R1bGUncyBwYXJhbWV0ZXIgZGV0ZWN0aW9uIGZ1bmN0aW9uCiogRml4ZWQgdnVsbmVyYWJpbGl0eSBpbiBgaW9gIGxpYnJhcnkKKiBGaXhlZCBgaW8ubGluZXMoKWAgd2l0aCBubyBhcmd1bWVudHMKKiBGaXhlZCBtaXNzaW5nIGAqTGAgb3B0aW9uIGZvciBgaW8ucmVhZGAvYGZpbGU6cmVhZGAKKiBGaXhlZCBgaW8ud3JpdGVgL2BmaWxlOndyaXRlYCBub3QgcmV0dXJuaW5nIGZpbGUgaGFuZGxlCiogRml4ZWQgYHN0cmluZy5mb3JtYXRgIGVycm9yaW5nIHdoZW4gdXNpbmcgbmlsIGFzIGEgc3RyaW5nIHBhcmFtZXRlcgoqIGBmcy5jb3B5YCBjYW4gbm93IGNvcHkgZm9sZGVycyBhcyBleHBlY3RlZAoqIEZpeGVkIGBmcy5maW5kKCIvIilgIHJldHVybmluZyBhbiBlbXB0eSB0YWJsZQoqIEZpeGVkIGBmcy5hdHRyaWJ1dGVzYCBoYXZpbmcgdGhlIHdyb25nIG5hbWUKKiBGaXhlZCBgZnMubWFrZURpcmAgbm90IGVycm9yaW5nIHdoZW4gaXQgdHJpZXMgdG8gY3JlYXRlIGEgZGlyZWN0b3J5IHdoZXJlIGEgZmlsZSBpcyBhbHJlYWR5IHByZXNlbnQKKiBGaXhlZCBhIGJvYXRsb2FkIG9mIHN0cmluZyBkaWZmZXJlbmNlcyB0byBjb21wbHkgd2l0aCBDQzogVHdlYWtlZAoqIEZpeGVkIGEgYnVuY2ggbW9yZSBzbWFsbCBpbmNvbnNpc3RlbmNpZXMKKiBGaXhlZCBgaW8ub3BlbmAgbm90IGNyZWF0aW5nIGFsbCBwYXJlbnQgZGlyZWN0b3JpZXMgaWYgdGhleSdyZSBtaXNzaW5nCiogQWRkZWQgc3VwcG9ydCBmb3IgY3VzdG9tIG9wdGlvbnMgdG8gYGlvLmxpbmVzYAoqIEZpeGVkIHN1cHBvcnQgZm9yICcrJyBtb2RlcyBpbiBgaW8ub3BlbmAKKiBGaXhlZCBlcnJvcnMgaW4gTHVhIHByb21wdCBzaG93aW5nIGBbc3RyaW5nICJsdWEiXTpgIGluc3RlYWQgb2YgYGx1YTpgCgojIyB2Mi4zLjMgLSBKdW5lIDYsIDIwMjAKKiBBZGRlZCBhIGByZWNvcmRgIGRvbWFpbiB0byBkcml2ZXMKICAqIEluc2VydGluZyBhIGRpc2sgaW4gdGhlIGZvcm1hdCBgcmVjb3JkOjxuYW1lPmAgd2lsbCBpbnNlcnQgYSBtdXNpYyBkaXNjIGZyb20gYG1pbmVjcmFmdDptdXNpY19kaXNjLipgIGluIHRoZSBzcGVha2VyIHNvdW5kIGRhdGEKICAqIGBkaXNrLmluc2VydERpc2soImxlZnQiLCAicmVjb3JkOmNhdCIpYCB3aWxsIGluc2VydCB0aGUgImNhdCIgbXVzaWMgZGlzYyBmcm9tIHRoZSBzb3VuZCBmaWxlcyBhcyBhIHBsYXlhYmxlIG11c2ljIGRpc2MKKiBVcGRhdGVkIGBnaXN0YCAoYWdhaW4pCiogRml4ZWQgYW4gZXJyb3IgcHJldmVudGluZyB0aGUgZGVidWdnZXIgZnJvbSBzdGFydGluZyB1cAoqIEZpeGVkIGBmcy5yZWFkTGluZWAgcmV0dXJuaW5nIHdlaXJkIHN0cmluZ3Mgb24gZW1wdHkgbGluZXMgKCMxMTMpCiogRml4ZWQgYW4gZXJyb3Igd2hlbiB3cml0aW5nIG51bWJlcnMgdG8gdGhlIHNjcmVlbgoqIEZpeGVkIGEgYnVnIHRoYXQgb3ZlcnJvZGUgVXNlci1BZ2VudCBhbmQgQ29udGVudC1UeXBlIEhUVFAgaGVhZGVycwoqIEZpeGVkIGF1ZGlvIGNsaXBwaW5nIHdoZW4gcGxheWluZyBwaXRjaGVkIHNvdW5kIHRocm91Z2ggdGhlIHNwZWFrZXIKKiBGaXhlZCBhIGNyYXNoIHdoZW4gcGxheWluZyBzb21lIG5vdGVzIG9uIFdpbmRvd3MKKiBGaXhlZCBzdGFjayBjb3JydXB0aW9uIGluIHRoZSBkZWJ1Z2dlcgoqIEZpeGVkIG9yaWdpbiBwb2ludCBvZiBwYWludHV0aWxzIGNhbGxzIGluIGdyYXBoaWNzIG1vZGUKKiBGaXhlZCBhIGJ1ZyB0aGF0IG1heSBsZWFkIHRvIGV2ZW50cyBiZWluZyBzZW50IHdpdGggdGhlIHdyb25nIHBhcmFtZXRlcnMKKiBDb21wdXRlcnMgbm93IHNodXQgZG93biBhdXRvbWF0aWNhbGx5IGlmIHRoZSBCSU9TIGV4aXRzCgojIyB2Mi4zLjIgLSBNYXkgMjMsIDIwMjAKKiBGZWF0dXJlIHBhcml0eSB3aXRoIENDOiBUd2Vha2VkIDEuODguMQogICogQWRkIHBlcmlwaGVyYWwuZ2V0TmFtZSAtIHJldHVybnMgdGhlIG5hbWUgb2YgYSB3cmFwcGVkIHBlcmlwaGVyYWwuCiAgKiBUaGUgTHVhIFJFUEwgd2FybnMgd2hlbiBkZWNsYXJpbmcgbG9jYWxzIChsdXB1czU5MCwgZXhlcnJvKQogICogQWRkIGZzLmlzRHJpdmVSb290IC0gY2hlY2tzIGlmIGEgcGF0aCBpcyB0aGUgcm9vdCBvZiBhIGRyaXZlLgogICogY2MucHJldHR5IGNhbiBub3cgZGlzcGxheSBhIGZ1bmN0aW9uJ3MgYXJndW1lbnRzIGFuZCB3aGVyZSBpdCB3YXMgZGVmaW5lZC4gVGhlIEx1YSBSRVBMIHdpbGwgc2hvdyBhcmd1bWVudHMgYnkgZGVmYXVsdC4KICAqIE1vdmUgdGhlIHNoZWxsJ3MgcmVxdWlyZS9wYWNrYWdlIGltcGxlbWVudGF0aW9uIHRvIGEgc2VwYXJhdGUgY2MucmVxdWlyZSBtb2R1bGUuCiogQ3JhZnRPUy1QQyBidWlsZHMgd2l0aCB0aGUgQ0M6IFR3ZWFrZWQgUk9NIGFyZSBub3cgYXZhaWxhYmxlCiAgKiBUaGVzZSBidWlsZHMgdXNlIHRoZSBzdG9jayBST00sIHdpdGggQ3JhZnRPUy1QQy1zcGVjaWZpYyBwcm9ncmFtcyBpbmNsdWRlZAogICogU29tZSBST00gZmVhdHVyZXMgKG5vdGFibHksIGF1dG9jb21wbGV0ZSBmb3IgQ0NQQyBwcm9ncmFtcykgbWF5IG5vdCBiZSBhdmFpbGFibGUKICAqIENDOlQgRWRpdGlvbiB3aWxsIHJlcGxhY2UgdGhlIHN0YW5kYXJkIENyYWZ0T1MtUEMgUk9NLCBzbyB0aGV5IGNhbid0IGJlIHVzZWQgYWxvbmdzaWRlIGVhY2ggb3RoZXIKICAgICogVGhpcyBkb2VzIG5vdCBhcHBseSB0byBNYWMgYnVpbGRzLCB3aGljaCBhcmUgZGlzdHJpYnV0ZWQgYXMgc2luZ2xlIGFwcHMKICAqIFVidW50dTogSW5zdGFsbCB0aGUgYGNyYWZ0b3MtcGMtY2N0LWRhdGFgIHBhY2thZ2UgdG8gdXNlIHRoZSBDQzpUIFJPTQoqIGBiaXQzMmAgaXMgbm93IHRoZSBkZWZhdWx0IGJpdCBBUEkKICAqIFRoZSBCSU9TIHdpbGwgc2V0IHVwIGEgd3JhcHBlciB0byBhbGxvdyBwcm9ncmFtcyB0byBjb250aW51ZSB1c2luZyBgYml0YAoqIEFkZGVkIGBmaWxlLnJlYWRMaW5lYCB0byBmaWxlIGhhbmRsZXMgb3BlbmVkIGluIGJpbmFyeSBtb2RlCiogQWRkZWQgYGdldExhYmVsYCBtZXRob2QgdG8gY29tcHV0ZXIgcGVyaXBoZXJhbHMKKiBSZXdyb3RlIEdpc3QgcHJvZ3JhbSBhZ2FpbgogICogVGhpcyB3aWxsIGJlIGNoYW5naW5nIG9uY2UgYWdhaW4gaW4gdGhlIG5leHQgdmVyc2lvbgoqIEFkZGVkIG5ldyBwbHVnaW4gY2FwYWJpbGl0aWVzCiAgKiBgcmVnaXN0ZXJfcXVldWVUYXNrYDogUmV0dXJucyBhIGZ1bmN0aW9uIG9mIHRoZSBmb3JtIGB2b2lkKiBxdWV1ZVRhc2soc3RkOjpmdW5jdGlvbjx2b2lkKih2b2lkKik+IGZ1bmMsIHZvaWQqIHVzZXJkYXRhLCBib29sIGFzeW5jKWAKICAqIGByZWdpc3Rlcl9nZXRDb21wdXRlckJ5SWRgOiBSZXR1cm5zIGEgZnVuY3Rpb24gb2YgdGhlIGZvcm0gYENvbXB1dGVyICogZ2V0Q29tcHV0ZXJCeUlkKGludCBpZClgCiAgKiBgZ2V0X3NlbGVjdGVkUmVuZGVyZXJgOiBSZXR1cm5zIGEgbnVtYmVyIHJlcHJlc2VudGluZyB0aGUgY3VycmVudGx5IHNlbGVjdGVkIHJlbmRlcmVyCiogQ2FwYWJpbGl0eSBjYWxsYmFja3Mgbm93IHJlY2VpdmUgdGhlIG5hbWUgb2YgdGhlIGZ1bmN0aW9uIGl0J3MgY2FsbGVkIGZvcgoqIGBwbHVnaW5faW5mb2AgY2FuIG5vdyBzYWZlbHkgdGhyb3cgZXJyb3JzCiAgKiBJZiBhIHBsdWdpbiB0aHJvd3MgYW4gZXJyb3IgaGVyZSwgaXRzIEFQSSB3aWxsIG5vdCBiZSBsb2FkZWQgYW5kIHRoZSBlcnJvciB3aWxsIGJlIHJlcG9ydGVkIHRvIHRoZSB1c2VyIG9uIGJvb3QKKiBBZGRlZCBTRExUZXJtaW5hbDo6cmVzaXplV2hvbGVXaW5kb3csIHdoaWNoIHJlc2l6ZXMgYSB0ZXJtaW5hbCBhbmQgaXRzIHdpbmRvdwoqIEZpeGVkIGBmaWxlLnJlYWRMaW5lYCBvbmx5IHJldHVybmluZyB1cCB0byAyNTUgY2hhcmFjdGVycwoqIEZpeGVkIGEgcG9zc2libGUgcmFjZSBjb25kaXRpb24KCiMjIHYyLjMuMSAtIE1heSA5LCAyMDIwCiogQ3JhZnRPUy1QQyBpcyBub3cgYXZhaWxhYmxlIGFzIGEgbm90YXJpemVkIGJ1aWxkIG9uIE1hYwogICogVGhpcyBtZWFucyBpdCBpcyBubyBsb25nZXIgbmVjZXNzYXJ5IHRvIHJpZ2h0LWNsaWNrIHRoZSBhcHAgdG8gb3BlbiBpdCBmb3IgdGhlIGZpcnN0IHRpbWUKKiBBZGRlZCBuZXcgY3Jhc2ggaGFuZGxlciB0aGF0IG91dHB1dHMgYSBzdGFjayB0cmFjZSBmb3IgZGVidWdnaW5nCiAgKiBNYWMgJiBMaW51eCBidWlsZHMgd2lsbCBvdXRwdXQgdGhlIHN0YWNrIHRyYWNlIHRvIHRoZSBjb25zb2xlCiAgKiBXaW5kb3dzIGJ1aWxkcyB3aWxsIG9ubHkgc2hvdyBhIGRpYWxvZyBzaG93aW5nIGEgY3Jhc2ggb2NjdXJyZWQ7IHRoZSBhY3R1YWwgc3RhY2sgdHJhY2Ugd2lsbCBiZSBzYXZlZCBpbiBhIG1pbmlkdW1wCiAgKiBNYWMgYXBwIGJ1aWxkcyB3aWxsIHNob3cgYSBjcmFzaCByZXBvcnQgZGlhbG9nIGFzIHVzdWFsCiogQWRkZWQgbW91c2VfbW92ZSBldmVudCAoZGlzYWJsZWQgYnkgZGVmYXVsdCkKICAqIFRoZSBgbW91c2VfbW92ZV90aHJvdHRsZWAgY29uZmlnIG9wdGlvbiBzZXRzIHRoZSBhbW91bnQgb2YgdGltZSBiZXR3ZWVuIGV2ZW50cyBzZW50CiAgKiBJdCBpcyBkaXNhYmxlZCBieSBkZWZhdWx0IGJlY2F1c2UgU3F1aWREZXYtQ0MvQ0MtVHdlYWtlZCM0MzQgaXMgc3RpbGwgaW4gcHJvZ3Jlc3MKICAgICogU2V0IGBtb3VzZV9tb3ZlX3Rocm90dGxlYCB0byBhIHdob2xlIG51bWJlciAoNTAgaXMgcmVjb21tZW5kZWQpIHRvIGVuYWJsZQoqIEFkZGVkIGZpbGUucmVhZEFsbCBmb3IgYmluYXJ5IGZpbGUgaGFuZGxlcwoqIEFkZGVkIG1heE9wZW5Qb3J0cyBjb25maWcgb3B0aW9uIHRvIGNhcCBtYXhpbXVtIG51bWJlciBvZiBvcGVuIHBvcnRzCiogQWRkZWQgYSBjb3VwbGUgb2YgdXBjb21pbmcgQ3JhZnRPUyBmZWF0dXJlcyBmcm9tIENDOiBUd2Vha2VkIHVwc3RyZWFtCiogQWRkZWQgYHRlcm0uc2hvd01vdXNlYCB0byB0b2dnbGUgd2hldGhlciB0aGUgcmVhbCBtb3VzZSBjdXJzb3Igc2hvdWxkIGFwcGVhcgoqIEFkZGVkIHN0YXJ0Q29tcHV0ZXIgY2FwYWJpbGl0eSB0byBwbHVnaW5zCiogQWRkZWQgcmV0dXJuIHZhbHVlIGZyb20gYGNvbmZpZy5zZXRgIHNwZWNpZnlpbmcgd2hlbiB0aGUgY2hhbmdlIHdpbGwgdGFrZSBlZmZlY3QKKiBJbXByb3ZlZCBlcnJvciBtZXNzYWdlIHJlcG9ydGluZyBhY3Jvc3MgdGhlIGJvYXJkCiogVXNpbmcgbm9uLXZhbmlsbGEgcHJvZ3JhbXMgaW4gdmFuaWxsYSBtb2RlIG5vdyBzaG93cyBhIGRlc2NyaXB0aXZlIGVycm9yCiogRml4ZWQgY3Jhc2ggd2hlbiBjcmVhdGluZyBkaXJlY3RvcmllcwoqIEZpeGVkIHRlcm0uZHJhd1BpeGVscyBub3Qgd29ya2luZyBwcm9wZXJseSBmb3IgdGFibGUgYXJndW1lbnRzIHdoZW4gaW4gbW9kZSAxCiogRml4ZWQgd3JpdGluZyB0ZXh0IGZpbGVzIHdpdGggYmluYXJ5IGJ5IHdyaXRpbmcgaW4gVVRGLTgKKiBGaXhlZCBjcmFzaCB3aGVuIGFuIEhUVFAgcmVxdWVzdCB0aW1lcyBvdXQKKiBGaXhlZCBhIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdHkgaW52b2x2aW5nIHRoZSBkcml2ZSBwZXJpcGhlcmFsCiogRml4ZWQgbXVsdGlwbGUgbW91c2VfZHJhZyBldmVudHMgYmVpbmcgc2VudCBmb3IgdGhlIHNhbWUgcG9zaXRpb24gKCMxMDcpCiogRml4ZWQgY29tcHV0ZXIgbm90IHVucGF1c2luZyB3aGVuIGNsb3NpbmcgZGVidWdnZXIKKiBGaXhlZCBtb3VudCBkaWFsb2cgc2hvd2luZyBpbmNvcnJlY3QgdGV4dCByZWxhdGluZyB0byByZWFkLXdyaXRlIG1vdW50CiogRml4ZWQgc29tZSBidWdzIHdpdGggdGhlIG1vZGVtCiogRml4ZWQgYSBidW5jaCBvZiBzbWFsbCBtZW1vcnkgbGVha3MgJiBpc3N1ZXMKKiBGaXhlZCBhIHJhY2UgY29uZGl0aW9uIHdoZW4gdGFraW5nIGEgc2NyZWVuc2hvdAoqIEZpeGVkIGEgYnVnIHdoZXJlIHRoZSBzaXplIG9wZXJhdG9yIG9mIGEgdGFibGUgbWF5IG5vdCByZXByZXNlbnQgaXRzIGFjdHVhbCBzaXplCiogRml4ZWQgYSBjcmFzaCB3aGVuIHVzaW5nIGEgbW9kZW0gb3IgZGVidWdnZXIgYWZ0ZXIgcmVib290aW5nCiAgKiBUaGlzIHdhcyBkb25lIGJ5IGFkZGluZyBhIGByZWluaXRpYWxpemVgIG1ldGhvZCB0byBwZXJpcGhlcmFscwogICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgYWZ0ZXIgcmVzdGFydGluZyBhIGNvbXB1dGVyIHdoaWxlIGhhdmluZyB0aGUgcGVyaXBoZXJhbCBhdHRhY2hlZAogICAgKiBVc2UgdGhpcyBpZiB5b3VyIHBlcmlwaGVyYWwgaG9sZHMgYW55IHJlZmVyZW5jZXMgdG8gdGhlIGNvbXB1dGVyJ3MgTHVhIHN0YXRlIG9yIGEgc3ViLXRocmVhZAoqIEZpeGVkIGEgYnVnIHdoZXJlIGNvcm91dGluZXMgY3JlYXRlZCBiZWZvcmUgYXR0YWNoaW5nIGEgZGVidWdnZXIgd29uJ3QgYmUgYWJsZSB0byBiZSBwYXVzZWQgZnJvbSB0aGUgZGVidWdnZXIgd2hlbiByZXN1bWVkCiogRml4ZWQgYGh0dHAuZ2V0YCBhbmQgYGh0dHAucmVxdWVzdGAgbm90IGFsbG93aW5nIHVzaW5nIGEgdGFibGUgYXMgYSBwYXJhbWV0ZXIKKiBGaXhlZCBhIGJ1ZyB3aGVyZSB0aGUgY29tcHV0ZXIgd291bGRuJ3QgYm9vdCB3aGVuIGBkaXNhYmxlX2x1YTUxX2ZlYXR1cmVzYCBpcyBlbmFibGVkICgjMTEwKQoKIyMgdjIuMyAtIEFwcmlsIDI2LCAyMDIwCiogTWFzc2l2ZWx5IGltcHJvdmVkIHBlcmZvcm1hbmNlIG9mIGVtdWxhdGlvbgogICogU3BlZWQgaXNzdWVzIGFyZSBjYXVzZWQgYnkgdGhlIGRlYnVnZ2VyJ3MgaG9va3MgKHNwZWNpZmljYWxseSBsaW5lIGhvb2tzKQogICogVGhpcyB2ZXJzaW9uIG9ubHkgZW5hYmxlcyB0aGUgcmVxdWlyZWQgaG9va3MgZGVwZW5kaW5nIG9uIHdoYXQgZmVhdHVyZXMgYXJlIHJlcXVpcmVkCiAgKiBJbiBnZW5lcmFsLCBtb3JlIGRlYnVnZ2luZyBmZWF0dXJlcyAtPiBsb3dlciBwZXJmb3JtYW5jZQogICogRGVwZW5kaW5nIG9uIHRoZSBtYWNoaW5lLCBleHBlY3QgYmV0d2VlbiA0LTIweCBmYXN0ZXIgZW11bGF0aW9uCiogQWRkZWQgb2ZmaWNpYWwgc3VwcG9ydCBmb3IgV0FTTSwgaW5jbHVkaW5nIGFuIG9ubGluZSBjbGllbnQgKENyYWZ0T1MtUEMgT25saW5lKQogICogQ3JhZnRPUy1QQyBPbmxpbmUgaXMgYXZhaWxhYmxlIGF0IGh0dHBzOi8vd3d3LmNyYWZ0b3MtcGMuY2Mvb25saW5lLwogICogU3VwcG9ydHMgQ2hyb21lL0Nocm9tZS1iYXNlZCBicm93c2VycywgYW5kIG5ldyB2ZXJzaW9ucyBvZiBGaXJlZm94IHdpdGggdGhlIGZvbGxvd2luZyBvcHRpb25zIGVuYWJsZWQgaW4gYGFib3V0OmNvbmZpZ2A6CiAgICAqIGBqYXZhc2NyaXB0Lm9wdGlvbnMuc2hhcmVkX21lbW9yeWAKICAgICogYGRvbS5wb3N0TWVzc2FnZS5zaGFyZWRBcnJheUJ1ZmZlci53aXRoQ09PUF9DT0VQYAogICAgKiBgYnJvd3Nlci50YWJzLnJlbW90ZS51c2VDcm9zc09yaWdpbkVtYmVkZGVyUG9saWN5YAogICAgKiBgYnJvd3Nlci50YWJzLnJlbW90ZS51c2VDcm9zc09yaWdpbk9wZW5lclBvbGljeWAKKiBBZGRlZCBzcGVha2VyIHBlcmlwaGVyYWwKICAqIEluY2x1ZGVzIG9wZW4tc291cmNlIHNvdW5kcyBmb3Igbm90ZXMKICAqIFVzZXJzIGNhbiBtYW51YWxseSBhZGQgaW4gY3VzdG9tIHNvdW5kcyAoaW5jbHVkaW5nIG9mZmljYWwgTWluZWNyYWZ0IG9uZXMpCiAgICAqIFNlZSBodHRwczovL3d3dy5jcmFmdG9zLXBjLmNjL2RvY3MvcGVyaXBoZW11I3NwZWFrZXItc291bmRzIGZvciBtb3JlIGluZm8KKiBVcGRhdGVkIENDOlQgY29tcGF0aWJpbGl0eSB0byAxLjg3LjEKICAqIEFkZGVkIGBmcy5nZXRBdHRyaWJ1dGVzYCBhbmQgYGZzLmdldENhcGFjaXR5YCBmdW5jdGlvbnMKICAqIEFkZGVkIG9wdGlvbmFsIHRpbWVvdXQgYXJndW1lbnQgdG8gYHdlYnNvY2tldC5yZWNlaXZlYAogICogUG9ydGVkIHByZXR0eSBwcmludGVyIHRvIGBsdWEubHVhYAogICogQWRkZWQgYF9fbGVuYCBtZXRhbWV0aG9kIGZvciB0YWJsZXMKICAqIFN0cmluZ3Mgbm93IGFjY2VwdCBgXHhOTmAsIGBcdXtOTk59YCwgYW5kIGBcemAgZXNjYXBlIGNvZGVzCiAgKiBBZGRlZCBgdXRmOGAgbGlicmFyeQogICogQWRkZWQgYmFzZSBhcmd1bWVudCB0byBgbWF0aC5sb2dgCiAgKiBNb3ZlZCBgdGFibGUucGFja2AgYW5kIGB0YWJsZS51bnBhY2tgIG91dCBvZiB0aGUgUk9NIGFuZCBpbnRvIEMKICAqIEFkZGVkIGB0ZXh0dXRpbHMudW5zZXJpYWxpemVKU09OYAogICogUmV3cm90ZSBgc2V0dGluZ3NgIEFQSQogICogRW5hYmxlZCBNT1REIGJ5IGRlZmF1bHQKICAqIGBodHRwLnBvc3RgIG5vdyBhY2NlcHRzIGEgdGFibGUgYXMgYW4gYXJndW1lbnQgYXMgZXhwZWN0ZWQKKiBBZGRlZCByYXcgdGVybWluYWwgcmVuZGVyZXIKICAqIFNlZSB0aGUgZG9jdW1lbnRhdGlvbiAoaHR0cHM6Ly93d3cuY3JhZnRvcy1wYy5jYy9kb2NzL3Jhd21vZGUuaHRtbCkgZm9yIG1vcmUgaW5mbwoqIEFkZGVkIFRSb1IgKFRlcm1pbmFsIFJlZGlyZWN0IG92ZXIgUmVkbmV0KSB0ZXJtaW5hbCByZW5kZXJlcgoqIEFkZGVkIHRoZSBhYmlsaXR5IHRvIHBsYWNlIG1vZGVtcyBvbiBtdWx0aXBsZSBzZXBhcmF0ZSBuZXR3b3JrcwogICogVGhpcyBjYW4gYmUgZG9uZSBieSBhZGRpbmcgYSB0aGlyZCBhcmd1bWVudCB3aGVuIGF0dGFjaGluZyB0aGUgcGVyaXBoZXJhbCwgc3BlY2lmeWluZyB0aGUgbmV0d29yayBJRAogICogTW9kZW1zIHdpdGggZGlmZmVyZW50IG5ldHdvcmsgSURzIHdvbid0IGJlIGFibGUgdG8gY29tbXVuaWNhdGUgd2l0aCBlYWNoIG90aGVyCiogQWRkZWQgcHJvbXB0IHdoZW4gbW91bnRpbmcgYSByZWFsIGRpcmVjdG9yeSwgZm9yIHNlY3VyaXR5CiAgKiBUaGlzIGlzIHRvIG1pdGlnYXRlIHRoZSBwb3NzaWJpbGl0eSB0aGF0IGEgbWFsaWNpb3VzIHNjcmlwdCBkZWxldGVzIGFyYml0cmFyeSBmaWxlcwogICogQSBwcm9tcHQgYWxzbyBhcHBlYXJzIHdoZW4gY2hhbmdpbmcgdGhlIGBtb3VudF9tb2RlYCBvcHRpb24KICAqIFRvIGRpc2FibGUgdGhpcyAobm90IHJlY29tbWVuZGVkKSwgc2V0IGBzaG93TW91bnRQcm9tcHRgIHRvIGZhbHNlIGluIGdsb2JhbC5qc29uCiAgICAqIFRoaXMgb3B0aW9uIGNhbm5vdCBiZSBjaGFuZ2VkIGluc2lkZSBDcmFmdE9TLVBDCiogQWRkZWQgZmlsZXN5c3RlbSBtZXJnZSBtb3VudCBzdXBwb3J0CiogQWRkZWQgc3RhbmRhbG9uZSBleGVjdXRhYmxlIG9wdGlvbiBmb3IgV2luZG93cyAmIExpbnV4CiogQWRkZWQgc2Nyb2xsYmFjayB0byBkZWJ1Z2dlciBjb25zb2xlCiogQWRkZWQgcG9wLXVwIHdoZW4gYSBjb21wdXRlciBpcyBodW5nIGFuZCBpZ25vcmVzIHRlcm1pbmF0ZSBldmVudHMKKiBSZXZhbXBlZCBgZ2lzdGAgcHJvZ3JhbSB3aXRoIG5ldyBjb21tYW5kcwogICogQWRkZWQgYGVkaXRgLCBgZGVsZXRlYCwgYW5kIGBpbmZvYCBjb21tYW5kcwogICogR2lzdCBsb2dpbnMgbm93IHVzZSBQZXJzb25hbCBBY2Nlc3MgVG9rZW5zIGluc3RlYWQgb2YgYSBwcml2YXRlIHNlcnZlciB3aXRoIE9BdXRoMgoqIEltcHJvdmVkIGNvbW1hbmQtbGluZSB1c2FnZQoqIEN1cnNvciBjb2xvciBjYW4gbm93IGJlIGNoYW5nZWQgYXMgZXhwZWN0ZWQKKiBGaXhlZCAyNTYtY29sb3IgZ3JhcGhpY3MgbW9kZSBvbiBtb25pdG9ycwoqIEZpeGVkIGNyYXNoIHdoZW4gcmVjZWl2aW5nIHRhYmxlcyBvdmVyIGEgbW9kZW0gY29ubmVjdGlvbgoqIEZpeGVkIGEgY3Jhc2ggcmVsYXRpbmcgdG8gdGltZXJzCiogRml4ZWQgbWVtb3J5IGxlYWsgd2hlbiB0YWtpbmcgYSBzY3JlZW5zaG90IG9uIE1hYwoqIEZpeGVkIG1pc3NpbmcgQ29udGVudC1UeXBlIGFuZCBDb250ZW50LUxlbmd0aCBoZWFkZXJzIGluIEhUVFAgcmVxdWVzdHMKKiBGaXhlZCBtb3VzZSBldmVudCBsb2NhdGlvbiBpbiBncmFwaGljcyBtb2RlIHdoZW4gdXNpbmcgYW4gSEQgZm9udAoqIEZpeGVkIGEgY3Jhc2ggd2hlbiBhbiBlcnJvciBvY2N1cnMgd2hpbGUgY3JlYXRpbmcgYSBwZXJpcGhlcmFsCiogRml4ZWQgbWlzc2luZyBlcnJvciBtZXNzYWdlcyB3aGVuIGFuIEhUVFAgY29ubmVjdGlvbiBmYWlscwoqIEFjY2Vzc2luZyB0aGUgc3RyaW5nIG1ldGF0YWJsZSBpcyBubyBsb25nZXIgYmxvY2tlZAoqIFJlbW92ZWQgcGF0aCBhcmd1bWVudCB0byBgdGVybS5zY3JlZW5zaG90KClgCiogQWRkZWQgYSByYXRlIGxpbWl0IHRvIGB0ZXJtLnNjcmVlbnNob3QoKWAKCiMjIHYyLjIuNiAtIE1hcmNoIDE1LCAyMDIwCiogQWRkZWQgZ2lzdC5sdWEgdG8gdGhlIGRlZmF1bHQgUk9NCiogUmVib290IG5vdyByZXNldHMgZ3JhcGhpY3MgbW9kZQoqIEFkZGVkIGAtLXJvbWAgZmxhZyB0byBhbGxvdyBjaGFuZ2luZyBST00gZGlyZWN0b3J5ICgjODQpCiogRml4ZWQgZXh0ZW5kZWQgQVNDSUkgY2hhcmFjdGVyIGlucHV0IGNvbnZlcnNpb24gKCM4NSkKKiBGaXhlZCBrZXkgZXZlbnRzIG5vdCBiZWluZyBzZW50IHdoZW4gQ3RybCtbVFNSXSBhcmUgcHJlc3NlZCAoIzg2KQoqIEZpeGVkIGJ1ZyBpbiBmcy5nZXRGcmVlU3BhY2UKKiBGaXhlZCB0ZXJtLmRyYXdQaXhlbHMgY3V0dGluZyBvZmYgYm90dG9tCiogRml4ZWQgY3Jhc2ggd2hlbiByZWJvb3Rpbmcgd2l0aCBldmVudHMgaW4gcXVldWUKKiBGaXhlZCBkaXNrIG1vdW50IHBhdGhzCiogRml4ZWQgZGVhZGxvY2sgd2hlbiBhIHBlcmlwaGVyYWwgbWV0aG9kIGNhdXNlcyBhbiBlcnJvcgoqIEZpeGVkIGdldFBpeGVsIGJvdW5kYXJpZXMgYmVpbmcgdG9vIHNtYWxsCiogRml4ZWQgcGFzdGUgZXZlbnRzIHNlbmRpbmcgXHIgY2hhcmFjdGVycyBvbiBXaW5kb3dzICgjOTUpCgojIyB2Mi4yLjUgLSBGZWJydWFyeSAyNCwgMjAyMAoqIEFkZGVkIGAtLWRpcmVjdG9yeWAgYXJndW1lbnQgdG8gc3BlY2lmeSBjdXN0b20gZGF0YSBkaXJlY3RvcnkKKiBBZGRlZCBgLS1pZGAgYXJndW1lbnQgdG8gc3BlY2lmeSBsYXVuY2ggY29tcHV0ZXIsIG92ZXJyaWRpbmcgYGluaXRpYWxDb21wdXRlcmAgY29uZmlnIG9wdGlvbgoqIFJld3JvdGUgYC0tc2NyaXB0YCBhcmd1bWVudCB0byBubyBsb25nZXIgc2hhZG93IHJlYWwgYHN0YXJ0dXAubHVhYCAoIzgzKQoqIEFkZGVkIGhlYWRlciBvcHRpb24gdG8gYGh0dHAud2Vic29ja2V0YCB0byBtYXRjaCBDQzogVHdlYWtlZCBiZWhhdmlvciAoIzgyKQoqIEZpeGVkIGNyYXNoIHdoZW4gd3JpdGluZyBiZWxvdyBzY3JlZW4KKiBGaXhlZCBjcmFzaCB3aGVuIGNsb3NpbmcgV2ViU29ja2V0CiogRml4ZWQgdGVybWluYWwgYmFja2dyb3VuZCBub3QgYmVpbmcgYWZmZWN0ZWQgYnkgcGFsZXR0ZSBjaGFuZ2VzCgojIyB2Mi4yLjQgLSBGZWJydWFyeSAxNCwgMjAyMAoqIENvbXB1dGVyIGxhYmVsIG5vdyBkaXNwbGF5cyBpbiB0aXRsZSBiYXIgKGluY2x1ZGluZyB0aGUgdGVybWluYWwgZW11bGF0b3IncyB0aXRsZSBpbiBDTEkgbW9kZSkKKiBBZGRlZCBjbGlDb250cm9sS2V5TW9kZSBjb25maWcgb3B0aW9uICgjNzgsICM3OSkKKiBBZGRlZCAtLWFyZ3MgYXJndW1lbnQgdG8gY29tbWFuZCBsaW5lIHRvIHBhc3MgYXJndW1lbnRzIHRvIC0tc2NyaXB0ICgjNzgpCiogQWRkZWQgVVRGLTggc3VwcG9ydCBvdmVyIEhUVFAKKiBVbmljb2RlIGNoYXJhY3RlcnMgYXJlIG5vdyByZXBsYWNlZCB3aXRoICc/JyAocmF0aGVyIHRoYW4gYmVpbmcgZHJvcHBlZCkKKiBmaWxlLnJlYWQoKSBub3cgYWNjZXB0cyBhIGxlbmd0aCBpbiB0ZXh0IG1vZGUKKiBJbnNlY3VyZSBXZWJTb2NrZXRzICgnd3M6Ly8nKSBubyBsb25nZXIgYXR0ZW1wdCB0byB1c2Ugc2VjdXJlIFdlYlNvY2tldHMKKiBGaXhlZCBXZWJTb2NrZXQgY29ubmVjdGlvbiBmYWlsdXJlIHdoZW4gbm8gcGF0aCBpcyBwcm92aWRlZAoqIEZpeGVkIGNyYXNoIHdoZW4gY2xvc2luZyBjb21wdXRlciB3aXRoIG9wZW4gV2ViU29ja2V0cwoqIEZpeGVkIGNyYXNoIGluIGZzLmxpc3QoKSB3aGVuIGEgbm9uLXN0cmluZyBhcmd1bWVudCBpcyBwYXNzZWQgKCM3NykKKiBGaXhlZCBjcmFzaCB3aGVuIGNsb3NpbmcgY29tcHV0ZXIgd2l0aCBydW5uaW5nIHRpbWVycwoqIEZpeGVkIGNyYXNoIHdoZW4gcmVhZGluZyBhIHN0cmluZyB3aXRoIGFuIGludmFsaWQgVVRGLTggY29kZXBvaW50CiogRml4ZWQgY3Jhc2ggd2hlbiB0b28gbWFueSBldmVudHMgYXJlIHF1ZXVlZAogICogVGhpcyBhbHNvIGZpeGVzIGEgY3Jhc2ggd2hlbiBwYXN0aW5nIGxvbmcgdGV4dCBpbiBDTEkgbW9kZQoqIEZpeGVkIGdsaXRjaC9jcmFzaCB3aGVuIHJlc2l6aW5nIENMSSB3aW5kb3cgKCM3OCwgIzgwKQoqIEZpeGVkIGlzc3VlIHdpdGggY2xpY2tpbmcgdGhlIG1vdXNlIGluIENMSSBtb2RlICgjNzgpCiogRml4ZWQgMTAwJSBDUFUgdXNhZ2Ugd2hlbiB1c2luZyBDTEkgbW9kZQoqIEZpeGVkIHRlcm0uc2V0Q3Vyc29yUG9zIGNsYW1waW5nIHRoZSBjdXJzb3IgdG8gWzAsIHdpZHRoKQoqIEZpeGVkIHRlcm0uY2xlYXIgZmlsbGluZyB3aXRoIGJsYWNrL3doaXRlIGluc3RlYWQgb2Ygc2VsZWN0ZWQgQkcvRkcgY29tYm8KKiBGaXhlZCBmaWxlLnJlYWRBbGwoKSBvbiBXaW5kb3dzIHdoZW4gdGhlIGZpbGUgaGFzIG5vIGVuZCBuZXdsaW5lCiogRml4ZWQgaXNzdWUgd2hlbiByZWFkaW5nIHNpbmdsZSBjaGFyYWN0ZXIgYXQgYSB0aW1lIGZyb20gdGV4dCBmaWxlcwoqIEZpeGVkIFBPU1QgZGF0YSBzdG9wcGluZyBhdCBOVUwgY2hhcmFjdGVycwoqIE1hZGUgc29tZSBIVFRQIGVycm9yIG1lc3NhZ2VzIG1vcmUgZGVzY3JpcHRpdmUKKiBGaXhlZCBIVFRQIGltcGxlbWVudGF0aW9uIGluIFdBU00gcG9ydAoqIEFkZGVkIC0tZW5hYmxlLXdhc20gZmxhZyB0byAuL2NvbmZpZ3VyZSB0byBhbGxvdyBidWlsZGluZyBmb3IgV0FTTQoqIEFkZGVkIHdpbmRvdyBzd2l0Y2hlciBmb3IgV0FTTSBidWlsZHMKKiBGaXhlZCBkZWJ1Z2dlciBsb2NhbHMgb25jZSBhZ2FpbgoqIHRhYmxlLmNvbmNhdCgpIG5vdyB3b3JrcyB3aXRoIG5vbi1jb250aWd1b3VzIHRhYmxlcwoqIEZpeGVkIGNyYXNoIHdoZW4gYSBjb21wdXRlcidzIGNvbmZpZyBmaWxlIHdhcyBjb3JydXB0IG9yIGVtcHR5CgojIyB2Mi4yLjMgLSBKYW51YXJ5IDEzLCAyMDIwCiogQWRkZWQgYHVzZUhERm9udGAgdmlydHVhbCBjb25maWcgb3B0aW9uCiogQWRkZWQgc3VwcG9ydCBmb3IgcmVhZGluZyBVVEYtOCBmaWxlcwoqIFByZXNzaW5nIGVudGVyIGluIHRoZSBkZWJ1Z2dlcidzIENhbGwgU3RhY2sgdGFiIG5vdyBrZWVwcyBmaWxlIG9wZW4KKiBTdGVwcGluZyBtdWx0aXBsZSBsaW5lcyBpbiB0aGUgZGVidWdnZXIgbm93IHdvcmtzIGFzIGV4cGVjdGVkCiogRml4ZWQgYWNjZXNzaW5nIGxvY2FscyBpbiB0aGUgZGVidWdnZXIKKiBVcGRhdGVkIGNhc2ggdG8gbGF0ZXN0IHZlcnNpb24KKiBOVUwgYnl0ZXMgaW4gc3RyaW5nIHBhdHRlcm5zIG5vIGxvbmdlciBtYXJrIHRoZSBlbmQgb2YgdGhlIHBhdHRlcm4KKiBgaW8uaW5wdXQoKWAvYGlvLm91dHB1dCgpYCBubyBsb25nZXIgZmFpbCB3aGVuIGNhbGxlZCB3aXRoIGBpby5zdGRpbmAvYGlvLnN0ZG91dGAsIGBpby5zdGRlcnJgICgjNzUpCiogRml4ZWQgYnVnIHRoYXQgY2F1c2VkIGBmaWxlLnJlYWQoeClgIG9uIGJpbmFyeSBmaWxlcyB0byBhbHdheXMgcmV0dXJuIG9uZSBieXRlCiogRml4ZWQgc2VnbWVudGF0aW9uIGZhdWx0IHdoZW4gTHVhIGNyYXNoZXMKKiBGaXhlZCBzb21lIGJ1Z3MgcmVsYXRpbmcgdG8gdmFuaWxsYSBtb2RlICgjNzYpCiogQWRkZWQgcHJlbGltaW5hcnkgRW1zY3JpcHRlbi9XQVNNIHN1cHBvcnQgKCM3MykKCiMjIHYyLjIuMiAtIEphbnVhcnkgMiwgMjAyMAoqIEZlYXR1cmUgcGFyaXR5IHdpdGggQ0M6IFR3ZWFrZWQgMS44Ni4wCiogQWRkZWQgTU9URCAoZGlzYWJsZWQgYnkgZGVmYXVsdCkKKiBBZGRlZCBDdHJsK1MgYW5kIEN0cmwrUiBob3RrZXlzICgjNzApCiogQWRkZWQgY29uZmlndXJhYmxlIHJlY29yZGluZyBsZW5ndGggYW5kIGZyYW1lcmF0ZQoqIEZpeGVkIGNyYXNoIHdoZW4gcmVzaXppbmcgd2luZG93IHRvIGEgc21hbGxlciBzaXplICgjNzEpCiogZnMubWFrZURpciBubyBsb25nZXIgZXJyb3JzIHdoZW4gY3JlYXRpbmcgYSBkaXJlY3RvcnkgdGhhdCBhbHJlYWR5IGV4aXN0cwoqIGlvLndyaXRlIG5vIGxvbmdlciBhZGRzIGEgbmV3bGluZSB0byB0aGUgZW5kIG9mIHRoZSBzdHJpbmcgKCM2OCkKKiBvcy5zZXRDb21wdXRlckxhYmVsIG5vIGxvbmdlciBlcnJvcnMgd2hlbiBubyBsYWJlbCBpcyBwcm92aWRlZCAoIzY5KQoqIEZpeGVkIHN0cmluZyBsZW5ndGggYnVnIGluIGRlYnVnZ2VyLnByaW50CgojIyB2Mi4yLjEgLSBEZWNlbWJlciAyMSwgMjAxOQoqIEFkZGVkIGNhc2ggMC4zIGFzIGFuIG9wdGlvbmFsIHNoZWxsIChzZXQgYmlvcy51c2VfY2FzaCBpbiB0aGUgc2V0dGluZ3MpCiogQWRkZWQgaGVscCBmaWxlcyBmb3IgQ3JhZnRPUy1QQyBmZWF0dXJlcwoqIEltcHJvdmVkIHNwZWVkIG9mIHRlcm1pbmFsIHdyaXRpbmcKKiBSZWR1Y2VkIHByb2Nlc3NpbmcgdGltZSB1c2VkIGJ5IHRlcm1pbmFsIGhvb2sKKiBWZXJpZmllZCBjb21wYXRpYmlsaXR5IHdpdGggQ0M6IFR3ZWFrZWQgdXNpbmcgb2ZmaWNpYWwgdGVzdHMKKiBGaXhlZCBhIHNlY3VyaXR5IGZsYXcgdGhhdCBhbGxvd2VkIG1vZGlmaWNhdGlvbiBvZiByZWFkLW9ubHkgbW91bnRzCiogUmVzb2x2ZWQgYW4gaXNzdWUgdGhhdCBwcmV2ZW50ZWQgbW9uaXRvcnMgZnJvbSBkcmF3aW5nCiogRml4ZWQgYSBidWcgd2hlcmUgc2VjdXJlIFdlYlNvY2tldHMgZmFpbGVkIHRvIGNvbm5lY3Qgd2l0aCAiV2ViU29ja2V0IEV4Y2VwdGlvbiIKKiBGaXhlZCBhIHBvc3NpYmxlIGRlYWRsb2NrIHdoZW4gc3RlcHBpbmcgdGhlIGRlYnVnZ2VyCiogUmVtb3ZlZCB0dXJ0bGUsIHBvY2tldCwgY29tbWFuZCBwcm9ncmFtczsgcmVtb3ZlZCBibXB2aWV3CiogQWRkZWQgLS1zbWFsbCBmbGFnIHRvIHNjcmVlbmZldGNoCgojIyB2Mi4yIC0gRGVjZW1iZXIgMTUsIDIwMTkKKiBBZGRlZCBGMTIgaG90a2V5IHRvIGNvcHkgc2NyZWVuc2hvdCB0byBjbGlwYm9hcmQgKFdpbmRvd3MgJiBNYWMgb25seSkKICAqIENhbGxpbmcgYHRlcm0uc2NyZWVuc2hvdCgiY2xpcGJvYXJkIilgIHdpbGwgaGF2ZSB0aGUgc2FtZSBlZmZlY3QKKiBGaXhlZCBkZWZhdWx0IElPIGhhbmRsZXMgKHN0ZGluL291dC9lcnIpCiogQ2hhbmdlZCBgX0hPU1RgIHZhcmlhYmxlIHRvIG1vcmUgYWNjdXJhdGVseSByZXByZXNlbnQgQ29tcHV0ZXJDcmFmdAoqIEZpeGVkIGBkZWxldGUubHVhYAoqIEFkZGVkIGByZWdpc3Rlcl90ZXJtUXVldWVQcm92aWRlcmAgY2FwYWJpbGl0eSwgd2hpY2ggcmVjaWV2ZXMgdGhlIGFkZHJlc3Mgb2YgdGhlIGB2b2lkIHRlcm1RdWV1ZVByb3ZpZGVyKENvbXB1dGVyICpjb21wLCBjb25zdCBjaGFyICooKmNhbGxiYWNrKShsdWFfU3RhdGUqLCB2b2lkKiksIHZvaWQqIGRhdGEpYCBmdW5jdGlvbgojIyB2Mi4ycDEgLSBEZWNlbWJlciAxLCAyMDE5CiogQWRkZWQgbmV3IGRlYnVnZ2VyIHBlcmlwaGVyYWwKICAqIE9wZW5zIGluIHNlcGFyYXRlIHdpbmRvdwogICogRm91ciB0YWJzIGF2YWlsYWJsZQogICAgKiBEZWJ1Z2dlcjogR0RCLXN0eWxlIGRlYnVnZ2luZyB0ZXJtaW5hbAogICAgKiBDYWxsIFN0YWNrOiBWaXN1YWwgYmFja3RyYWNlIHZpZXdlciwgc2hvd3MgZmlsZXMKICAgICogUHJvZmlsZXI6IE1lYXN1cmVzIGZ1bmN0aW9uIGNhbGwgY291bnQgJiB0aW1lCiAgICAqIENvbnNvbGU6IEFsbG93cyBwcmludGluZyBkZWJ1ZyBtZXNzYWdlcyBvdXRzaWRlIG9mIHRoZSBtYWluIHRlcm1pbmFsCiAgKiBDb21wdXRlciBjYW4gYmUgcGF1c2VkIHdpdGggYGRlYnVnZ2VyLmJyZWFrKClgLCBgZGVidWcuZGVidWcoKWAsIG9yIEN0cmwtVCBpbiBkZWJ1Z2dlcgogICogU2VlIFt0aGUgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly93d3cuY3JhZnRvcy1wYy5jYy9kb2NzL2RlYnVnZ2VyLmh0bWwpIGZvciBtb3JlIGluZm9ybWF0aW9uCiogQWRkZWQgYnJlYWtwb2ludHMKICAqIENhbiBiZSBzZXQgd2l0aCBgZGVidWdnZXIuc2V0QnJlYWtwb2ludChmaWxlLCBsaW5lKWAgb3IgYGRlYnVnLnNldGJyZWFrcG9pbnQoZmlsZSwgbGluZSlgCiAgKiBEb2VzIG5vdCByZXF1aXJlIGRlYnVnZ2VyIHRvIGJlIGF0dGFjaGVkCiAgICAqIFdoZW4gbm8gZGVidWdnZXIgaXMgYXZhaWxhYmxlLCBgbHVhLmx1YWAgaXMgZXhlY3V0ZWQKKiBGaXhlZCAjMSAoImF0dGVtcHQgdG8geWllbGQgYWNyb3NzIG1ldGFtZXRob2QvQy1jYWxsIGJvdW5kYXJ5IiB3aGVuIHVzaW5nIHBjYWxsKQogICogVHJhY2ViYWNrcy9lcnJvcnMgbm93IGZ1bmN0aW9uIG5vcm1hbGx5CiAgKiBUaGlzIHdhcyBhY2NvbXBsaXNoZWQgd2l0aCBhIHBhdGNoIHRoYXQgYWxsb3dzIHlpZWxkaW5nIGFjcm9zcyBwY2FsbCdzIGluIEx1YSA1LjEuMAogICAgKiBUaGFua3MgdG8gW0V2ZXJ5T1NdKGh0dHBzOi8vZ2l0aHViLmNvbS9KYXNvblRoZUtpdHRlbikgZm9yIHNoYXJpbmcgdGhlIHBhdGNoIGFuZCBmb3Igc2VuZGluZyBtZSBhIGZpeGVkIHZlcnNpb24gZm9yIDUuMS41CiogTW92ZWQgcGVyLXVzZXIgc2F2ZSBkaXJlY3RvcnkgdG8gbW9yZSBwbGF0Zm9ybS1hcHByb3ByaWF0ZSBsb2NhdGlvbnMKICAqIFdpbmRvd3M6IGAlYXBwZGF0YVxDcmFmdE9TLVBDYAogICogTWFjOiBgfi9MaWJyYXJ5L0FwcGxpY2F0aW9uIFN1cHBvcnQvQ3JhZnRPUy1QQ2AKICAqIExpbnV4OiBgJFhER19EQVRBX0hPTUUvY3JhZnRvcy1wY2AgKHVzdWFsbHkgYH4vLmxvY2FsL3NoYXJlL2NyYWZ0b3MtcGNgKQogICogRGF0YSB3aWxsIGJlIG1pZ3JhdGVkIHdoZW4gcnVubmluZyBDcmFmdE9TLVBDIHYyLjIgZm9yIHRoZSBmaXJzdCB0aW1lCiogQWRkZWQgYnJhbmQtbmV3IHBsdWdpbiBBUEkKICAqIFBsdWdpbnMgc2hvdWxkIG5vdyBwcm92aWRlIGEgYHBsdWdpbl9pbmZvYCBmdW5jdGlvbgogICogVGhpcyBmdW5jdGlvbiBwdXNoZXMgYSB0YWJsZSB3aXRoIHRoZSBBUEkgdmVyc2lvbiBhbmQgcmVxdWVzdGVkIGNhcGFiaWxpdGllcyBvbnRvIHRoZSBMdWEgc3RhY2sKICAqIENhcGFiaWxpdGllcyBhcmUgcmVxdWVzdGVkIGJ5IGFkZGluZyBhIGNhbGxiYWNrIGZ1bmN0aW9uIGZvciBhIGZ1bmN0aW9uIGluIENyYWZ0T1MtUEMKICAqIFRoZXNlIGNhbGxiYWNrcyB3aWxsIHJlY2lldmUgdGhlIHJlcXVlc3RlZCBmdW5jdGlvbiBhcyBMdWEgdXNlcmRhdGEgYXMgdGhlIGZpcnN0IHZhbHVlIG9uIHRoZSBzdGFjawogICogQXZhaWxhYmxlIGNhcGFiaWxpdGllcyBpbiB2Mi4yOgogICAgKiBgcmVnaXN0ZXJfZ2V0TGlicmFyeWA6IFJlY2lldmVzIHRoZSBhZGRyZXNzIG9mIHRoZSBgbGlicmFyeV90ICogZ2V0TGlicmFyeShzdGQ6OnN0cmluZyBuYW1lKWAgZnVuY3Rpb24KICAgICogYHJlZ2lzdGVyX3JlZ2lzdGVyUGVyaXBoZXJhbGA6IFJlY2lldmVzIHRoZSBhZGRyZXNzIG9mIHRoZSBgdm9pZCByZWdpc3RlclBlcmlwaGVyYWwoc3RkOjpzdHJpbmcgbmFtZSwgcGVyaXBoZXJhbF9pbml0IGluaXRpYWxpemVyKWAgZnVuY3Rpb24KICAgICogYHJlZ2lzdGVyX2FkZE1vdW50YDogUmVjaWV2ZXMgdGhlIGFkZHJlc3Mgb2YgdGhlIGBib29sIGFkZE1vdW50KENvbXB1dGVyICogY29tcCwgY29uc3QgY2hhciAqIHJlYWxfcGF0aCwgY29uc3QgY2hhciAqIGNvbXBfcGF0aCwgYm9vbCByZWFkX29ubHkpYCBmdW5jdGlvbgoqIEFkZGVkIG5ldyBjb25maWcgb3B0aW9ucwogICogYHZhbmlsbGFgOiBTZXQgdG8gYHRydWVgIHRvIGRpc2FibGUgYWxsIENyYWZ0T1MtUEMgZmVhdHVyZXMKICAqIGBpbml0aWFsQ29tcHV0ZXJgOiBUaGUgZmlyc3QgY29tcHV0ZXIgdGhhdCBzdGFydHMgd2hlbiBvcGVuaW5nIENyYWZ0T1MtUEMKKiBBZGRlZCBgcGVyaXBoZW11Lm5hbWVzKClgIHdoaWNoIHJldHVybnMgYSBsaXN0IG9mIGFsbCBhdmFpbGFibGUgcGVyaXBoZXJhbHMgKHVuc29ydGVkKQoqIEFkZGVkIGB0ZXJtLmRyYXdQaXhlbHMoeCwgeSwgbGluZXMpYCB3aGljaCBkcmF3cyBhIHRhYmxlIG9mIGxpbmVzIGF0IGEgcG9zaXRpb24KICAqIEVhY2ggbGluZSBjYW4gZWl0aGVyIGJlIGEgc3RyaW5nIG9yIGEgdGFibGUgb2YgaW5kaXZpZHVhbCBwaXhlbHMKKiBGaXhlZCBgZGVidWcuc2V0aG9va2AsIGBkZWJ1Zy5nZXRob29rYAoqIGBkZWJ1Zy5kZWJ1ZygpYCBub3cgZnVuY3Rpb25zIHRoZSBzYW1lIGFzIGhpdHRpbmcgYSBicmVha3BvaW50CiogQWRkZWQgaG9va3MgZm9yIGVycm9ycywgY29yb3V0aW5lIHJlc3VtcHRpb25zIGFuZCB5aWVsZHMKICAqIFJ1bm5pbmcgYGNhdGNoIGVycm9yYCBpbiB0aGUgZGVidWdnZXIgd2lsbCBwYXVzZSBleGVjdXRpb24gd2hlbiBhbiBlcnJvciBvY2N1cnMKICAqIEVycm9ycyBhcmUgbG9nZ2VkIHRvIHN0ZG91dCBpZiB0aGUgYGxvZ0Vycm9yc2AgY29uZmlnIG9wdGlvbiBpcyBlbmFibGVkCiogRml4ZWQgYSBidWcgd2hlbiBjcmVhdGluZyBkaXJlY3RvcmllcwoqIEZpeGVkIHRpbWVycyB3aXRoIDw9IDAgbGVuZ3RoCiogRml4ZWQgcHJpbnRpbmcgZXh0ZW5kZWQgY2hhcmFjdGVycyBpbiB0aGUgY29uc29sZQoqIFJld3JvdGUgaW1wbGVtZW50YXRpb24gb2YgdGhlIG1vZGVtIHBlcmlwaGVyYWwKICAqIFRhYmxlcyBhbmQgc3RyaW5ncyBhcmUgbm93IHByb3Blcmx5IGNvcGllZAogICogRml4ZWQgYHJlZG5ldGAgQVBJCiogUmVwbGFjZWQgTHVhIHBsdWdpbiBsb2FkZXIgd2l0aCBjdXN0b20gbG9hZGVyCiogTWFkZSBTRExfbWl4ZXIgYW4gb3B0aW9uYWwgZGVwZW5kZW5jeQoqIEZpeGVkIG1hbnkgbW9yZSBidWdzCgojIyB2Mi4xLjMgLSBOb3ZlbWJlciAzLCAyMDE5CiogQWRkZWQgdHdvIG5ldyBjb25maWd1cmF0aW9uIHZhcmlhYmxlcwogICogYG1vdW50X21vZGVgIGFsbG93cyByZXN0cmljdGluZyBtb3VudGluZyB0byByZWFkLW9ubHkgb3IgZGlzYWJsZWQKICAgICogYG5vbmVgICgwKSBkaXNhYmxlcyBtb3VudGluZyBhbHRvZ2V0aGVyCiAgICAqIGBybyBzdHJpY3RgIG9yIGByb19zdHJpY3RgICgxKSBmb3JjZXMgbW91bnRzIHRvIGJlIHJlYWQtb25seQogICAgKiBgcm9gICgyKSBzZXRzIG1vdW50cyB0byByZWFkLW9ubHkgYnkgZGVmYXVsdCAoZGVmYXVsdCBvcHRpb24pCiAgICAqIGByd2AgKDMpIHNldHMgbW91bnRzIHRvIHJlYWQtd3JpdGUgYnkgZGVmYXVsdCAodjIuMS4yIGJlaGF2aW9yKQogICogYGNvbmZpZ1JlYWRPbmx5YCBkaXNhYmxlcyBgY29uZmlnLnNldCgpYAoqIEJ1Z2ZpeGVzCiAgKiAjNTc6IGNvbmZpZy5nZXQoInJlYWRGYWlsIikgcmV0dXJucyBub3QgcmVhbCBuaWwKICAqICM1ODogQ3Jhc2ggb24gbWFjT1Mgb24gcmVib290aW5nCiAgKiAjNjA6IGBlZGl0YCBjYXVzZXMgc2VnZmF1bHQgd2hlbiBhIGxpbmUgZ29lcyBvZmYgdGhlIHNjcmVlbiBpZiB0aGVyZSBhcmUgbW9yZSB0aGFuIH4xMDAgbGluZXMgaW4gYSBmaWxlCiAgKiBGaXhlZCBjcmFzaCB3aGVuIG5vbi1BU0NJSSBjaGFyYWN0ZXJzIGFyZSBwcmVzZW50IGluIGNvbXB1dGVyIGxhYmVsCiAgICAqIENvbXB1dGVyIGxhYmVscyBhcmUgbm93IHN0b3JlZCBpbiBCYXNlNjQgYnkgZGVmYXVsdDsgaWYgeW91IHdhbnQgdG8gY2hhbmdlIHRoZSBsYWJlbCBpbiB0aGUgSlNPTiBmaWxlLCBzaW1wbHkgc2V0IGBjb21wdXRlckxhYmVsYCB0byB0aGUgQVNDSUkgbGFiZWwgYW5kIHJlbW92ZSB0aGUgYGJhc2U2NGAga2V5LgoKIyMgdjIuMS4yIC0gT2N0b2JlciAyMywgMjAxOQoqIEZpeGVkIHNvbWUgY3Jhc2hlcyBvbiByZWJvb3QvcXVpdAoqIEZpeGVkIGxpc3Qgc3ViY29tbWFuZCBvZiBjb25maWcKKiBDaGFuZ2VkIHJldHVybiB2YWx1ZSBvZiBgY29uZmlnLmdldFR5cGUoKWAgdG8gdHlwZS1zdHJpbmcKKiBBZGRlZCBQTkcgc2NyZWVuc2hvdCBzdXBwb3J0IGZvciBXaW5kb3dzIGJ1aWxkcwoqIEZpeGVkICJub3Qgc3VwcG9ydGVkIiBpY29uIG9uIG1hY09TIHZlcnNpb25zIGJlbG93IENhdGFsaW5hCiogQWRkZWQgbGF1bmNoZXIgaWNvbiBvbiBMaW51eAoKIyMgdjIuMS4xIC0gT2N0b2JlciAxNiwgMjAxOQoqIEZpeGVkIGh0dHAgaGFuZGxlIG1ldGhvZHMgd2hlbiB1c2luZyBiaW5hcnkgbW9kZQogICogYHdnZXRgIG5vdyB3b3JrcyBhcyBleHBlY3RlZAoqIEZpeGVkIGBvcy5jbG9jaygpYCBpbXBsZW1lbnRhdGlvbgoqIEZpeGVkIGEgYnVnIHJlZ2FyZGluZyBlbWJlZGRlZCBgXDBgIGNoYXJhY3RlcnMKICAqIGB0ZXJtLndyaXRlKClgIGNhbiBub3cgcHJpbnQgc3RyaW5ncyB3aXRoIE5VTCBjaGFyYWN0ZXJzCiAgKiBTdHJpbmcgcGF0dGVybnMgZG8gbm90IHdvcmsgd2l0aCBOVUwgY2hhcmFjdGVycyBpbiB0aGUgcXVlcnkgc3RyaW5nCiogUmVtb3ZlZCBhdXRvLXVwZGF0ZXIgb24gcGxhdGZvcm1zIG90aGVyIHRoYW4gV2luZG93cyAmIE1hYwogICogVGhlc2Ugc3lzdGVtcyBjYW4gZWl0aGVyIHVwZGF0ZSB0aHJvdWdoIGEgcGFja2FnZSBtYW5hZ2VyIG9yIHJlYnVpbGQgZnJvbSB0aGUgcmVsZWFzZSBzb3VyY2UKKiBVYnVudHUgUFBBOiBGaXhlZCBDTEkgc3VwcG9ydAoqIE1hYzogTW92ZWQgbGljZW5zZSB0byBgTElDRU5TRS50eHRgIGluIGRpc2sgaW1hZ2UKICAqIFJlcXVpcmluZyB0aGUgbGljZW5zZSB0byBiZSBhZ3JlZWQgdG8gYnJlYWtzIHRoZSBhdXRvLXVwZGF0ZXIKCiMjIHYyLjEgLSBPY3RvYmVyIDEzLCAyMDE5CiogQWRkZWQgMjU2IGNvbG9yIG1vZGUKICAqIFRoaXMgY2FuIGJlIGFjdGl2YXRlZCB3aXRoIGB0ZXJtLnNldEdyYXBoaWNzTW9kZSgyKWAKICAqIFVzZSBudW1iZXJzIDAtMjU1IHRvIGNob29zZSBjb2xvciBpbnN0ZWFkIG9mIGBjb2xvKHUpcnNgIEFQSQogICogQ29sb3JzIDAtMTUgYXJlIHNldCB0byBkZWZhdWx0IGNvbG9ycywgdXNlIGB0ZXJtLnNldFBhbGV0dGVDb2xvcihbMC0yNTVdLCByLCBnLCBiKWAgdG8gc2V0IGNvbG9yIHBhbGV0dGUKKiBBZGRlZCBhdXRvLXVwZGF0ZXIsIGFsbG93aW5nIG9uZS1jbGljayBpbnN0YWxsYXRpb24gb2YgbmV3IHVwZGF0ZXMgKFdpbmRvd3MvTWFjIG9ubHkpCiogQWRkZWQgY3VzdG9tIGZvbnRzCiAgKiBTZXQgYGN1c3RvbUZvbnRQYXRoYCB0byB0aGUgKHJlYWwpIHBhdGggdG8gdGhlIGZvbnQgKEJNUCBmb3JtYXQgb25seSkKICAqIFNldCBgY3VzdG9tRm9udFNjYWxlYCB0byB0aGUgZm9udCBzY2FsZQogICAgKiAxID0gSEQgZm9udCAoMTJ4MTgpLCAyID0gbm9ybWFsIGZvbnQgKDZ4OSksIDMgPSAyLzMgc2l6ZSBmb250ICg0eDYpCiogRml4ZWQgZ3JhcGhpY3MgaXNzdWVzIG9uIExpbnV4IHdpdGggTlZJRElBIGdyYXBoaWNzCiAgKiBSZW5kZXJlciBoYXMgYmVlbiByZXdyaXR0ZW4gdG8gZml4IHRoaXMKICAqIFNob3VsZCBpbXByb3ZlIHBlcmZvcm1hbmNlIHdoZW4gdXNpbmcgYSByZWFzb25hYmxlIG51bWJlciBvZiB3aW5kb3dzCiAgICAqIE1heSBkZWdyYWRlIHBlcmZvcm1hbmNlIHdoZW4gdXNpbmcgPjEwMDAgd2luZG93cyBhdCBvbmNlIG9uIGEgc2xvdyBzeXN0ZW0KKiBBZGRlZCBDTEkgbW9kZQogICogVGhpcyBjYW4gYmUgYWN0aXZhdGVkIHdpdGggdGhlIGAtLWNsaWAgb3B0aW9uCiAgKiBOb3QgYXZhaWxhYmxlIG9uIFdpbmRvd3MgKHVzZSBXU0wgaWYgbmVjZXNzYXJ5KQoqIEFkZGVkIG1vcmUgSFRUUCBtZXRob2RzCiogQWRkZWQgZnVsbHNjcmVlbiBob3RrZXkgKEYxMSkKKiBBZGRlZCBgcm9tUmVhZE9ubHlgIGNvbmZpZyBvcHRpb24KKiBBZGRlZCBVYnVudHUgMTkuMTAgJiBBcmNoIHBhY2thZ2VzCiogQWRkZWQgYXV0b2NvbmYgc2NyaXB0IHRvIGNvbXBpbGUKKiBNYW55IGJ1Z2ZpeGVzCiAgKiBGaXhlZCBjb21wb3NpdG9yIGRpc2FibGluZyBvbiBLREUKICAqIEZpeGVkIGBtb25pdG9yLnNldFRleHRTY2FsZWAKICAqIEZpeGVkIGB0ZXJtLnNjcmVlbnNob3RgCiAgKiBGaXhlZCBgZnMuZ2V0RHJpdmVgCiAgKiBGaXhlZCB3aW5kb3cgcmVzaXppbmcgb24gTGludXgKICAqIEZpeGVkIG1hbnkgY29tcGlsYXRpb24gd2FybmluZ3MKICAqIENsZWFuZWQgdXAgY29kZSB0byBiZSBtb3JlIEMrKy1saWtlCgojIyB2Mi4wLjEgLSBTZXB0ZW1iZXIgMTMsIDIwMTkKKiBBZGRlZCBhdXRvbWF0aWMgdXBkYXRlIGNoZWNraW5nCiAgKiBQb3BzIHVwIGEgd2luZG93IGFsZXJ0aW5nIHRoZSB1c2VyIGFib3V0IHRoZSBuZXcgdmVyc2lvbgogICogQ2FuIGJlIGRpc2FibGVkIHdpdGggdGhlIGBjaGVja1VwZGF0ZXNgIGNvbmZpZyBvcHRpb24KICAqIFdpbGwgYmUgZXhwYW5kZWQgaW50byBhbiBhdXRvLXVwZGF0ZXIgaW4gdjIuMQoqIEFkZGVkIGB0ZXJtLnNldFBhbGV0dGVDb2xvcihjb2xvciwgaGV4KWAgc3ludGF4CiogRml4ZWQgcGx1Zy1pbiBsb2FkaW5nIG9uIE1hYwoqIEZpeGVkIGNvbXB1dGVyIGxhYmVsIGFsd2F5cyBnZXR0aW5nIHJlc2V0IHRvIGB0cnVlYAoqIEZpeGVkIGBpZ25vcmVIb3RrZXlzYCBub3QgYmVpbmcgc2F2ZWQKCiMjIHYyLjAgLSBTZXB0ZW1iZXIgOCwgMjAxOQoqIEZpeGVkIGhpZ2ggQ1BVIHVzYWdlLCBub3cgdXNlcyB+NSUgQ1BVIGF0IGlkbGUKKiBNb3ZlZCBwbHVnaW4gZGlyZWN0b3J5IG9uIE1hYyB0byBgQ3JhZnRPUy1QQy5hcHAvQ29udGVudHMvUGx1Z0luc2AgCiogRml4ZWQgSFRUUCByZXF1ZXN0cwoKIyMgdjIuMHAxIC0gQXVndXN0IDI1LCAyMDE5CiogQWRkZWQgV2ViU29ja2V0IHN1cHBvcnQKICAqIGBodHRwLndlYnNvY2tldCh1cmwpYCB3aWxsIG9wZW4gYSBjbGllbnQgV2ViU29ja2V0IGNvbm5lY3RpbmcgdG8gYHVybGAKICAqIGBodHRwLndlYnNvY2tldCgpYCB3aWxsIG9wZW4gYSBzZXJ2ZXIgV2ViU29ja2V0IHRoYXQgY2FuIGJlIGNvbm5lY3RlZCB0bwoqIEFkZGVkIHBsdWdpbi9tb2R1bGUgc3lzdGVtCiAgKiBBZGQgcGx1Z2lucyBpbiB0aGUgYDxpbnN0YWxsYXRpb24gZGlyZWN0b3J5Pi9wbHVnaW5zYCBmb2xkZXIKICAqIFNlZSBbYERPQ1VNRU5UQVRJT04ubWRgXShodHRwczovL2dpdGh1Yi5jb20vTUNKYWNrMTIzL2NyYWZ0b3MyL2Jsb2IvbWFzdGVyL0RPQ1VNRU5UQVRJT04ubWQpIGZvciBtb3JlIGRldGFpbHMKKiBBZGRlZCBgZmlsZS5zZWVrYCBtZXRob2QKKiBBZGRlZCBgaW9gIGxpYnJhcnkgd2l0aCBwcm9wZXIgZmlsZW5hbWUgcmVkaXJlY3RzCiogQWRkZWQgYGRyaXZlYCBwZXJpcGhlcmFsCiAgKiBVc2UgYGRpc2suaW5zZXJ0RGlzayhwYXRoKWAgdG8gbW91bnQgYSBmb2xkZXIgb3IgYXVkaW8gZmlsZQogICogVXNlIGBkaXNrLmluc2VydERpc2soaWQpYCB0byBtb3VudCBhIGZsb3BweSBkaXNrIGZyb20gYH4vLmNyYWZ0b3MvY29tcHV0ZXIvZGlzay88aWQ+YAoqIEFkZGVkIGEgd2hvbGUgYnVuY2ggb2YgZmVhdHVyZXMgZnJvbSBDQzogVHdlYWtlZCwgbWFraW5nIENyYWZ0T1MtUEMgbW9zdGx5IGNvbXBhdGlibGUgd2l0aCBDQzpUCiogQWRkZWQgbmV3IFJPTSBmZWF0dXJlcwoqIE1vdmVkIGZvbnQgaW50byBleGVjdXRhYmxlIChubyBsb25nZXIgcmVxdWlyZXMgYGNyYWZ0b3MuYm1wYCkKKiBSZWRpZCBIVFRQIGNsaWVudC9zZXJ2ZXIgY29kZSwgcmVtb3Zpbmcgc29tZSBkZXBlbmRlbmNpZXMgKGV4cGVjdCBidWdzKQoKIyMgdjIuMGIzIC0gQXVndXN0IDIwLCAyMDE5CiogUmV3cm90ZSBjb2RlYmFzZSB0byBwdXJlIEMrKwoqIEFkZGVkIG11bHRpLWNvbXB1dGVyIHN1cHBvcnQKICAqIENvbXB1dGVycyBjYW4gYmUgYWRkZWQgd2l0aCBgcGVyaXBoZW11LmNyZWF0ZSg8aWQ+LCAiY29tcHV0ZXIiKWAKICAqIENhbiBiZSBhZGRlZCBmcm9tIHRoZSBzaGVsbCB3aXRoIGBhdHRhY2ggPGlkPiBjb21wdXRlcmAKICAqIEJvdGggZm9ybXMgYXR0YWNoIHRoZSBjb21wdXRlciBwZXJpcGhlcmFsIHRvIHRoZSBjdXJyZW50IGNvbXB1dGVyCiogQWRkZWQgbW9kZW0gcGVyaXBoZXJhbAogICogU3RpbGwgV0lQLCBleHBlY3Qgc29tZSBidWdzCiogQWRkZWQgR0lGIHJlY29yZGluZyBzdXBwb3J0CiAgKiBQcmVzcyBGMyB0byB0b2dnbGUgcmVjb3JkaW5nCiAgKiBTaG93cyByZWQgY2lyY2xlIGluIGNvcm5lciB3aGlsZSByZWNvcmRpbmcKICAqIExpbWl0ZWQgdG8gMTUgc2Vjb25kcyBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucwogICogU2F2ZXMgdG8gYH4vLmNyYWZ0b3Mvc2NyZWVuc2hvdHMvPHRpbWU+LmdpZmAKKiBBZGRlZCBjb3JvdXRpbmUgb3ZlcnJpZGUgdG8gcGFydGlhbGx5IHNvbHZlIHNvbWUgcHJvYmxlbXMgaW4gIzEgCiogTW92ZWQgV2luZG93cyBpbnN0YWxsIGRpcmVjdG9yeSB0byA2NC1iaXQgUHJvZ3JhbSBGaWxlcwoqIGAuY3JhZnRvc2AgZGlyZWN0b3J5IGlzIG5vdyBjcmVhdGVkIG9uIGJvb3QKKiBSZWltcGxlbWVudGVkIGZzLmZpbmQsIGZpeGluZyAjNCAoZnMuZmluZCByZXR1cm5zIHt9IG9uIFdpbmRvd3MpCiogQWRkZWQgc29tZSBDQzogVHdlYWtlZCBmZWF0dXJlcwogICogIzE2IChBZGQgbW9uaXRvci5nZXRUZXh0U2NhbGUoKSkKICAqICMyNCAoQWRkIGF1dG9tYXRpYyBIVFRQUyByZXF1ZXN0cykKICAqICMyNSAoQWRkIHRlcm0ubmF0aXZlUGFsZXR0ZUNvbG9yKCkpCiAgKiAjMjkgKE1ha2Ugb3MudGltZSgpIGFuZCBvcy5kYXRlKCkgY2FzZS1pbnNlbnNpdGl2ZSkKKiBNb3ZlZCBhbGwgZHluYW1pYyBsaWJyYXJpZXMgaW50byBNYWMgYXBwIChmaXhlcyBkeWxkIGVycm9ycykKKiBBZGRlZCBzd2l0Y2ggdG8gYXV0by1ydW4gc2NyaXB0IChgLS1zY3JpcHQgPGZpbGUgcGF0aD5gKQoqIEFkZGVkIHN3aXRjaCB0byBydW4gaGVhZGxlc3MgZnJvbSB0aGUgY29uc29sZSAoLS1oZWFkbGVzcykgKGRvZXMgbm90IHdvcmsgb24gV2luZG93cyBidWlsZCwgcmVjb21waWxlIGZvciB0aGUgY29uc29sZSBzdWJzeXN0ZW0gdG8gdXNlKQoKIyMgdjIuMGIyIC0gQXVndXN0IDEzLCAyMDE5CiogYG1vdW50ZXJgIEFQSQoqIEhUVFAgc2VydmVyIGxpc3RlbmVycwoqIFRlcm1pbmFsICYgbW9uaXRvciByZXNpemluZwoqIFdpbmRvdyBpY29ucwoqIEhvbGRpbmcgQ3RybC1UIHNlbmRzIGB0ZXJtaW5hdGVgIGV2ZW50CiogQWRkZWQgYnVpbHQtaW4gc2NyZWVuc2hvdHMKICAqIFRha2UgYSBzY3JlZW5zaG90IHdpdGggRjIgb3IgY2FsbCBgdGVybS5zY3JlZW5zaG90KHBhdGgpYAogICAgKiBgcGF0aGAgaXMgYSBnbG9iYWwgcGF0aCBvdXRzaWRlIG9mIENyYWZ0T1MgYW5kIGlzIG9wdGlvbmFsCiAgKiBTYXZlZCB0byBgfi8uY3JhZnRvcy9zY3JlZW5zaG90c2AgYnkgZGVmYXVsdAoqIEFkZGVkIHNvbWUgY29uZmlndXJhdGlvbiB2YXJpYWJsZXMKICAqIGBkZWJ1Z19lbmFibGUgKGZhbHNlKWA6IFNldCB0byB0cnVlIGFuZCByZWJvb3QgdG8gZW5hYmxlIGRlYnVnIEFQSSAob3IgZGlzYWJsZSByZW1vdmFsKQogICogYGlnbm9yZUhvdGtleXMgKGZhbHNlKWA6IFNldCB0byB0cnVlIHRvIGRpc2FibGUgaG90a2V5cyAoRjIpCiAgKiBgaXNDb2xvciAodHJ1ZSlgOiBUb2dnbGVzIHdoZXRoZXIgdGhlIGNvbXB1dGVyIGlzIGFuIEFkdmFuY2VkIENvbXB1dGVyIG9yIFN0YW5kYXJkIENvbXB1dGVyCiogRGlzdHJpYnV0ZWQgYnVpbGRzIG5vdyB1c2UgdGhlIENyYWZ0T1MtUEMgUk9NIGluc3RlYWQgb2YgdGhlIENvbXB1dGVyQ3JhZnQgUk9NCiogTW92ZWQgYH4vLmNyYWZ0b3MvY29uZmlnLmpzb25gIHRvIGB+Ly5jcmFmdG9zL2NvbmZpZy9nbG9iYWwuanNvbmAKKiBCaWcgY2hhbmdlcyB1bmRlciB0aGUgaG9vZAogICogU3dpdGNoZWQgdG8gc29mdHdhcmUgcmVuZGVyaW5nIGZyb20gaGFyZHdhcmUgcmVuZGVyaW5nIChzZWUgIzUpCiAgKiBSZWFycmFuZ2VkIGEgYnVuY2ggb2YgdGhlIGNvZGUgaW4gcHJlcGFyYXRpb24gZm9yIG11bHRpcGxlIGNvbXB1dGVycwogICogQ2hhbmdlZCBldmVudCBxdWV1aW5nIHN5c3RlbSB0byBwdXQgcGFyYW1ldGVyIHRocmVhZHMgdW5kZXIgYSBzZXBhcmF0ZSBzdGF0ZSByYXRoZXIgdGhhbiB0aGUgbWFpbiBzdGF0ZQogICAgKiBUaGlzIHNob3VsZCBhKSByZWR1Y2UgbWVtb3J5IGxlYWthZ2Ugb3IgYikgaW1wcm92ZSBldmVudCBzdGFiaWxpdHkKCiMjIHYyLjBiMSAtIEF1Z3VzdCA3LCAyMDE5CiogTmVhciBmdWxsIGNvbXBhdGliaWxpdHkgd2l0aCBDb21wdXRlckNyYWZ0IDEuOAoqIGBjb25maWdgIEFQSSAtIGFkanVzdCBDb21wdXRlckNyYWZ0IGNvbmZpZ3VyYXRpb24KKiBgcGVyaXBoZW11YCBBUEkgLSBhdHRhY2ggcGVyaXBoZXJhbHMgdG8gdGhlIGNvbXB1dGVyCiAgKiBtb25pdG9yCiAgKiBwcmludGVyCiogVGVybWluYWwgZ3JhcGhpY3MgbW9kZQoqIGRlYnVnIEFQSSBhY2Nlc3MKCiMgQ29tcHV0ZXJDcmFmdCBIaXN0b3J5CgpOZXcgRmVhdHVyZXMgaW4gQ29tcHV0ZXJDcmFmdCAxLjgwOgoKKiBBZGRlZCAuZ2V0UmVzcG9uc2VIZWFkZXJzKCkgdG8gSFRUUCByZXNwb25zZXMuCiogUmV0dXJuIGEgSFRUUCByZXNwb25zZSB3aGVuIGEgSFRUUCBlcnJvciBvY2N1cnMuCiogQWRkZWQgYSBHVUkgdG8gY2hhbmdlIENvbXB1dGVyQ3JhZnQgY29uZmlnIG9wdGlvbnMuCiogb3MudGltZSgpIGFuZCBvcy5kYXkoKSBub3cgYWNjZXB0IHBhcmFtZXRlcnMgdG8gZ2l2ZSB0aGUgcmVhbCB3b3JsZCB0aW1lLgoqIEFkZGVkIG9zLmVwb2NoKCkKKiBNb25pdG9yIHRleHQgbm93IGdsb3dzIGluIHRoZSBkYXJrLgoqIEFkZGVkIGEgIlBvY2tldCBDb21wdXRlciB1cGdyYWRlIEFQSSIgc28gbW9kIGRldmVsb3BlcnMgY2FuIGFkZCB0aGVpciBvd24gcG9ja2V0IHVwZ3JhZGVzLgoqIEFkZGVkIHBvY2tldC5lcXVpcEJhY2soKS9wb2NrZXQudW5lcXVpcEJhY2soKSB0byBhZGQvcmVtb3ZlIHBvY2tldCB1cGdyYWRlcy4KKiBBZGRlZCB0ZXJtLnNldFBhbGV0dGVDb2xvcigpL3Rlcm0uZ2V0UGFsZXR0ZUNvbG9yKCkgdG8gY2hhbmdlL2NoZWNrIGNvbG9ycwoqIEFkZGVkIGNvbG9ycy5yZ2I4KCkvY29sb3Vycy5yZ2I4KCkgCiogUGVyZm9ybWFuY2UgaW1wcm92ZW1lbnRzIHRvIGZzLmZpbmQKKiBSZXF1aXJlcyB0aGUgcGxheWVyIHRvIGJlIGludGVyYWN0aW5nIHdpdGggdGhlIGNvbXB1dGVyIHdoZW4gdHlwaW5nCiogRGlzayBsYWJlbHMgYXJlIGxpbWl0ZWQgdG8gMzIgY2hhcmFjdGVycwoqIExhYmVscyBjYW4gbm93IG9ubHkgaW5jbHVkZSBjaGFyYWN0ZXJzIHdpdGhpbiB0aGUgcHJpbnRhYmxlIHJhbmdlICggdG8gfikKKiBWYXJpb3VzIG1vZGVsIGltcHJvdmVtZW50cwoqIFRoZXJlIGlzIG5vdyBhIGNvbmZpZ3VyYWJsZSBmaWxlIGRlc2NyaXB0b3IgbGltaXQKKiBUaHJlYWRzIGFyZSBub3cgZGFlbW9uIHRocmVhZHMKKiBUZXJtaW5hdGlvbiBzaWduYWxzIGFyZSBub3cgc2VudCB1bmxlc3MgdGhlIGNvbXB1dGVyIGlzIG9mZgoqIEZpeGVkIGNvbXBpbGF0aW9uIGVycm9ycwoqIE5vdyBoYW5kbGVzIHRpbGUgZW50aXR5IGNoYW5nZXMKKiBHUFMgY29vcmRpbmF0ZXMgbm93IGhhdmUgdG8gYmUgbnVtYmVycwoqIFR1cnRsZSB1cGdyYWRlcyBub3cgYWN0IGFzIHRvb2xzIGFuZCBwZXJpcGhlcmFscwoqIFRoZSBGaWxlc3lzdGVtLmxpc3QgcmVzdWx0IGlzIG5vdyBzb3J0ZWQKKiBUaGUgbnVtYmVyIG9mIHZhbHVlcyB0byB1bnBhY2sgY2FuIG5vdyBiZSBtYW51YWxseSBzcGVjaWZpZWQKKiBTbWFsbCB0ZXJtaW5hbCAmIG1vbml0b3IgcmVuZGVyaW5nIGltcHJvdmVtZW50cwoqIEdlbmVyYWwgaW1wcm92ZW1lbnRzIHRvIHRoZSBkb2N1bWVudGF0aW9uCiogUmVkc3RvbmUgaW5wdXRzIGFyZSBubyBsb25nZXIgcmVzZXQgd2hlbiBhZGRpbmcgcGVyaXBoZXJhbHMKKiBUdXJ0bGVzIG5vdyB1c2UgdGludGluZwoqIHNoZWxsLnJlc29sdmVQcm9ncmFtIG5vdyBwaWNrcyB1cCBvbiAqLmx1YSBmaWxlcwoqIEZpeGVkIGEgaGFuZGZ1bCBvZiBidWdzIGluIENvbXB1dGVyQ3JhZnQKKiBBZGRlZCBzcGVha2VyIGJsb2NrLCB0dXJ0bGUgdXBncmFkZSwgcG9ja2V0IHVwZ3JhZGUsIGFuZCBwZXJpcGhlcmFsIGFwaQoqIFN0YXJ0dXAgY2FuIG5vdyBiZSBhIGRpcmVjdG9yeSBjb250YWluaW5nIG11bHRpcGxlIHN0YXJ0dXAgZmlsZXMKKiBBZGRlZCAuZ2V0TGFiZWwgdG8gdGhlIGNvbXB1dGVyIHBlcmlwaGVyYWwKCk5ldyBGZWF0dXJlcyBpbiBDb21wdXRlckNyYWZ0IDEuNzk6CgoqIFBvcnRlZCBDb21wdXRlckNyYWZ0RWR1IHRvIE1pbmVjcmFmdCAxLjguOQoqIEZpeGVkIGEgaGFuZGZ1bCBvZiBidWdzIGluIENvbXB1dGVyQ3JhZnQKCk5ldyBGZWF0dXJlcyBpbiBDb21wdXRlckNyYWZ0IDEuNzc6CgoqIFBvcnRlZCB0byBNaW5lY3JhZnQgMS44LjkKKiBBZGRlZCAic2V0dGluZ3MiIEFQSQoqIEFkZGVkICJzZXQiIGFuZCAid2dldCIgcHJvZ3JhbXMKKiBBZGRlZCBzZXR0aW5ncyB0byBkaXNhYmxlIG11bHRpc2hlbGwsIHN0YXJ0dXAgc2NyaXB0cywgYW5kIHRhYiBjb21wbGV0aW9uIG9uIGEgcGVyLWNvbXB1dGVyIGJhc2lzLiBUaGUgZGVmYXVsdCB2YWx1ZXMgZm9yIHRoZXNlIHNldHRpbmdzIGNhbiBiZSBjdXN0b21pc2VkIGluIENvbXB1dGVyQ3JhZnQuY2ZnCiogQWxsIENvbXB1dGVyIGFuZCBUdXJ0bGUgaXRlbXMgZXhjZXB0IENvbW1hbmQgQ29tcHV0ZXJzIGNhbiBub3cgYmUgbW91bnRlZCBpbiBEaXNrIERyaXZlcwoKTmV3IEZlYXR1cmVzIGluIENvbXB1dGVyQ3JhZnQgMS43NjoKCiogUG9ydGVkIHRvIE1pbmVjcmFmdCAxLjgKKiBBZGRlZCBFbmRlciBNb2RlbXMgZm9yIGNyb3NzLWRpbWVuc2lvbmFsIGNvbW11bmljYXRpb24KKiBGaXhlZCBoYW5kbGluZyBvZiA4LWJpdCBjaGFyYWN0ZXJzLiBBbGwgdGhlIGNoYXJhY3RlcnMgaW4gdGhlIElTTyA4ODU5LTEgY29kZXBhZ2UgY2FuIG5vdyBiZSBkaXNwbGF5ZWQKKiBBZGRlZCBzb21lIGV4dHJhIGdyYXBoaWNhbCBjaGFyYWN0ZXJzIGluIHRoZSB1bnVzZWQgY2hhcmFjdGVyIHBvc2l0aW9ucywgaW5jbHVkaW5nIGEgc3VpdGUgb2YgY2hhcmFjdGVycyBmb3IgVGVsZXRleHQgc3R5bGUgZHJhd2luZwoqIEFkZGVkIHN1cHBvcnQgZm9yIHRoZSBuZXcgY29tbWFuZHMgaW4gTWluZWNyYWZ0IDEuOCB0byB0aGUgQ29tbWFuZCBDb21wdXRlcgoqIFRoZSByZXR1cm4gdmFsdWVzIG9mIHR1cnRsZS5pbnNwZWN0KCkgYW5kIGNvbW1hbmRzLmdldEJsb2NrSW5mbygpIG5vdyBpbmNsdWRlIGJsb2Nrc3RhdGUgaW5mb3JtYXRpb24KKiBBZGRlZCBjb21tYW5kcy5nZXRCbG9ja0luZm9zKCkgZnVuY3Rpb24gZm9yIENvbW1hbmQgQ29tcHV0ZXJzCiogQWRkZWQgbmV3ICJwZXJpcGhlcmFscyIgcHJvZ3JhbQoqIFJlcGxhY2VkIHRoZSAiX0NDX1ZFUlNJT04iIGFuZCAiX01DX1ZFUlNJT04iIGNvbnN0YW50cyB3aXRoIGEgbmV3ICJfSE9TVCIgY29uc3RhbnQKKiBTaG9ydGVuZWQgdGhlIGxlbmd0aCBvZiB0aW1lIHRoYXQgIkN0cmwrVCIsICJDdHJsK1MiIGFuZCAiQ3RybCtSIiBtdXN0IGJlIGhlbGQgZG93biBmb3IgdG8gdGVybWluYXRlLCBzaHV0ZG93biBhbmQgcmVib290IHRoZSBjb21wdXRlcgoqIHRleHR1dGlscy5zZXJpYWxpc2VKU09OKCkgbm93IHRha2VzIGFuIG9wdGlvbmFsIHBhcmFtZXRlciBhbGxvd2luZyBpdCB0byBwcm9kdWNlIEpTT04gdGV4dCB3aXRoIHVucXVvdGVkIG9iamVjdCBrZXlzLiBUaGlzIGlzIHVzZWQgYnkgYWxsIGF1dG9nZW5lcmF0ZWQgbWV0aG9kcyBpbiB0aGUgImNvbW1hbmRzIiBhcGkgZXhjZXB0IGZvciAidGl0bGUiIGFuZCAidGVsbHJhdyIKKiBGaXhlZCBtYW55IGJ1Z3MKCk5ldyBGZWF0dXJlcyBpbiBDb21wdXRlckNyYWZ0IDEuNzU6CgoqIEZpeGVkIG1vbml0b3JzIHNvbWV0aW1lcyByZW5kZXJpbmcgd2l0aG91dCBwYXJ0IG9mIHRoZWlyIHRleHQuCiogRml4ZWQgYSByZWdyZXNzaW9uIGluIHRoZSAiYml0IiBBUEkuCgpOZXcgRmVhdHVyZXMgaW4gQ29tcHV0ZXJDcmFmdCAxLjc0OgoKKiBBZGRlZCB0YWIgY29tcGxldGlvbiB0byAiZWRpdCIsICJsdWEiIGFuZCB0aGUgc2hlbGwuCiogQWRkZWQgdGV4dHV0aWxzLmNvbXBsZXRlKCksIGZzLmNvbXBsZXRlKCksIHNoZWxsLmNvbXBsZXRlKCksIHNoZWxsLnNldENvbXBsZXRpb25GdW5jdGlvbigpIGFuZCBoZWxwLmNvbXBsZXRlKCkuCiogQWRkZWQgdGFiIGNvbXBsZXRpb24gb3B0aW9ucyB0byByZWFkKCkuCiogQWRkZWQgImtleV91cCIgYW5kICJtb3VzZV91cCIgZXZlbnRzLgoqIE5vbi1hZHZhbmNlZCB0ZXJtaW5hbHMgbm93IGFjY2VwdCBib3RoIGdyZXkgY29sb3Vycy4KKiBBZGRlZCB0ZXJtLmdldFRleHRDb2xvdXIoKSwgdGVybS5nZXRCYWNrZ3JvdW5kQ29sb3VyKCkgYW5kIHRlcm0uYmxpdCgpLgoqIEltcHJvdmVkIHRoZSBwZXJmb3JtYW5jZSBvZiB0ZXh0IHJlbmRlcmluZyBvbiBBZHZhbmNlZCBDb21wdXRlcnMuCiogQWRkZWQgYSAiUnVuIiBidXR0b24gdG8gdGhlIGVkaXQgcHJvZ3JhbSBvbiBBZHZhbmNlZCBDb21wdXRlcnMuCiogVHVydGxlcyBjYW4gbm93IHB1c2ggcGxheWVycyBhbmQgZW50aXRpZXMgKGNvbmZpZ3VyYWJsZSkuCiogVHVydGxlcyBub3cgcmVzcGVjdCBzZXJ2ZXIgc3Bhd24gcHJvdGVjdGlvbiAoY29uZmlndXJhYmxlKS4KKiBBZGRlZCBhIHR1cnRsZSBwZXJtaXNzaW9ucyBBUEkgZm9yIG1vZCBhdXRob3JzLgoqIEltcGxlbWVudGVkIGEgc3Vic2V0IG9mIHRoZSBMdWEgNS4yIEFQSSBzbyBwcm9ncmFtcyBjYW4gYmUgd3JpdHRlbiBhZ2FpbnN0IGl0IG5vdywgYWhlYWQgb2YgYSBmdXR1cmUgTHVhIHZlcnNpb24gdXBncmFkZS4KKiBBZGRlZCBhIGNvbmZpZyBvcHRpb24gdG8gZGlzYWJsZSBwYXJ0cyBvZiB0aGUgTHVhIDUuMSBBUEkgd2hpY2ggd2lsbCBiZSByZW1vdmVkIHdoZW4gYSBmdXR1cmUgTHVhIHZlcnNpb24gdXBncmFkZSBoYXBwZW5zLgoqIENvbW1hbmQgQ29tcHV0ZXJzIGNhbiBubyBsb25nZXIgYmUgYnJva2VuIGJ5IHN1cnZpdmFsIHBsYXllcnMuCiogRml4ZWQgdGhlICJwaWNrIGJsb2NrIiBrZXkgbm90IHdvcmtpbmcgb24gQ29tcHV0ZXJDcmFmdCBpdGVtcyBpbiBjcmVhdGl2ZSBtb2RlLgoqIEZpeGVkIHRoZSAiZWRpdCIgcHJvZ3JhbSBiZWluZyBoYXJkIHRvIHVzZSBvbiBjZXJ0YWluIEV1cm9wZWFuIGtleWJvYXJkcy4KKiBBZGRlZCAiX0NDX1ZFUlNJT04iIGFuZCAiX01DX1ZFUlNJT04iIGNvbnN0YW50cy4KCk5ldyBGZWF0dXJlcyBpbiBDb21wdXRlckNyYWZ0IDEuNzM6CgoqIFRoZSAiZXhlYyIgcHJvZ3JhbSwgY29tbWFuZHMuZXhlYygpIGFuZCBhbGwgcmVsYXRlZCBDb21tYW5kIENvbXB1dGVyIGZ1bmN0aW9ucyBub3cgcmV0dXJuIHRoZSBjb25zb2xlIG91dHB1dCBvZiB0aGUgY29tbWFuZC4KKiBGaXhlZCB0d28gbXVsdGlwbGF5ZXIgY3Jhc2ggYnVncy4KCk5ldyBGZWF0dXJlcyBpbiBDb21wdXRlckNyYWZ0IDEuNzoKCiogQWRkZWQgQ29tbWFuZCBDb21wdXRlcnMKKiBBZGRlZCBuZXcgQVBJOiBjb21tYW5kcwoqIEFkZGVkIG5ldyBwcm9ncmFtczogY29tbWFuZHMsIGV4ZWMKKiBBZGRlZCB0ZXh0dXRpbHMuc2VyaWFsaXplSlNPTigpCiogQWRkZWQgSUx1YUNvbnRleHQuZXhlY3V0ZU1haW5UaHJlYWRUYXNrKCkgZm9yIHBlcmlwaGVyYWwgZGV2ZWxvcGVycwoqIERpc2sgRHJpdmVzIGFuZCBQcmludGVycyBjYW4gbm93IGJlIHJlbmFtZWQgd2l0aCBBbnZpbHMKKiBGaXhlZCB2YXJpb3VzIGJ1Z3MsIGNyYXNoZXMgYW5kIGV4cGxvaXRzCiogRml4ZWQgcHJvYmxlbXMgd2l0aCBIRCB0ZXh0dXJlIHBhY2tzCiogRG9jdW1lbnRlZCB0aGUgbmV3IGZlYXR1cmVzIGluIHRoZSBpbi1nYW1lIGhlbHAKCk5ldyBGZWF0dXJlcyBpbiBDb21wdXRlckNyYWZ0IDEuNjU6CgoqIEZpeGVkIGEgbXVsdGlwbGF5ZXItb25seSBjcmFzaCB3aXRoIHR1cnRsZS5wbGFjZSgpCiogRml4ZWQgc29tZSBwcm9ibGVtcyB3aXRoIGh0dHAucG9zdCgpCiogRml4ZWQgZnMuZ2V0RHJpdmUoKSByZXR1cm5pbmcgaW5jb3JyZWN0IHJlc3VsdHMgb24gcmVtb3RlIHBlcmlwaGVyYWxzCgpOZXcgRmVhdHVyZXMgaW4gQ29tcHV0ZXJDcmFmdCAxLjY0OgoKKiBQb3J0ZWQgdG8gTWluZWNyYWZ0IDEuNy4xMAoqIE5ldyB0dXJ0bGUgZnVuY3Rpb25zOiB0dXJ0bGUuaW5zcGVjdCgpLCB0dXJ0bGUuaW5zcGVjdFVwKCksIHR1cnRsZS5pbnNwZWN0RG93bigpLCB0dXJ0bGUuZ2V0SXRlbURldGFpbCgpCiogTG90cyBvZiBidWcgYW5kIGNyYXNoIGZpeGVzLCBhIGh1Z2Ugc3RhYmlsaXR5IGltcHJvdmVtZW50IG92ZXIgcHJldmlvdXMgdmVyc2lvbnMKCk5ldyBGZWF0dXJlcyBpbiBDb21wdXRlckNyYWZ0IDEuNjM6CgoqIFR1cnRsZXMgY2FuIG5vdyBiZSBwYWludGVkIHdpdGggZHllcywgYW5kIGNsZWFuZWQgd2l0aCB3YXRlciBidWNrZXRzCiogQWRkZWQgYSBuZXcgZ2FtZTogUmVkaXJlY3Rpb24gLSBDb21wdXRlckNyYWZ0IEVkaXRpb24KKiBUdXJ0bGUgbGFiZWwgbmFtZXBsYXRlcyBub3cgb25seSBzaG93IHdoZW4gdGhlIFR1cnRsZSBpcyBtb3VzZWQtb3ZlcgoqIFRoZSBIVFRQIEFQSSBpcyBub3cgZW5hYmxlZCBieSBkZWZhdWx0LCBhbmQgY2FuIGJlIGNvbmZpZ3VyZWQgd2l0aCBhIHdoaXRlbGlzdCBvZiBwZXJtaXR0ZWQgZG9tYWlucwoqIGh0dHAuZ2V0KCkgYW5kIGh0dHAucG9zdCgpIG5vdyBhY2NlcHQgcGFyYW1ldGVycyB0byBjb250cm9sIHRoZSByZXF1ZXN0IGhlYWRlcnMKKiBOZXcgZnMgZnVuY3Rpb246IGZzLmdldERpciggcGF0aCApCiogRml4ZWQgc29tZSBidWdzCgpOZXcgRmVhdHVyZXMgaW4gQ29tcHV0ZXJDcmFmdCAxLjYyOgoKKiBBZGRlZCBJUkMtc3R5bGUgY29tbWFuZHMgdG8gdGhlICJjaGF0IiBwcm9ncmFtCiogRml4ZWQgc29tZSBidWdzIGFuZCBjcmFzaGVzCgpOZXcgRmVhdHVyZXMgaW4gQ29tcHV0ZXJDcmFmdCAxLjY6CgoqIEFkZGVkIFBvY2tldCBDb21wdXRlcnMKKiBBZGRlZCBhIG11bHRpLXRhc2tpbmcgc3lzdGVtIGZvciBBZHZhbmNlZCBDb21wdXRlcnMgYW5kIFR1cnRsZXMKKiBUdXJ0bGVzIGNhbiBub3cgc3dhcCBvdXQgdGhlaXIgdG9vbHMgYW5kIHBlcmlwaGVyYWxzIGF0IHJ1bnRpbWUKKiBUdXJ0bGVzIGNhbiBub3cgY2FycnkgdHdvIHRvb2xzIG9yIHBlcmlwaGVyYWxzIGF0IG9uY2UgaW4gYW55IGNvbWJpbmF0aW9uCiogVHVydGxlcyBhbmQgQ29tcHV0ZXJzIGNhbiBub3cgYmUgbGFiZWxsZWQgdXNpbmcgTmFtZSBUYWdzIGFuZCBBbnZpbHMKKiBBZGRlZCBhIGNvbmZpZ3VyYWJsZSBmdWVsIGxpbWl0IGZvciBUdXJ0bGVzCiogQWRkZWQgaG9zdG5hbWVzLCBwcm90b2NvbHMgYW5kIGxvbmcgZGlzdGFuY2Ugcm91dGluZyB0byB0aGUgcmVkbmV0IEFQSQoqIEFkZGVkIGEgcGVlci10by1wZWVyIGNoYXQgcHJvZ3JhbSB0byBkZW1vbnN0cmF0ZSBuZXcgcmVkbmV0IGNhcGFiaWxpdGllcwoqIEFkZGVkIGEgbmV3IGdhbWUsIG9ubHkgb24gUG9ja2V0IENvbXB1dGVyczogImZhbGxpbmciIGJ5IEdvcGhlckFUTAoqIEZpbGUgc3lzdGVtIGNvbW1hbmRzIGluIHRoZSBzaGVsbCBub3cgYWNjZXB0IHdpbGRjYXJkIGFyZ3VtZW50cwoqIFRoZSBzaGVsbCBub3cgYWNjZXB0cyBsb25nIGFyZ3VtZW50cyBpbiBxdW90ZXMKKiBUZXJtaW5hbCByZWRpcmVjdGlvbiBub3cgbm8gbG9uZ2VyIHVzZXMgYSBzdGFjay1iYXNlZCBzeXN0ZW0uIEluc3RlYWQ6IHRlcm0uY3VycmVudCgpIGdldHMgdGhlIGN1cnJlbnQgdGVybWluYWwgb2JqZWN0IGFuZCB0ZXJtLnJlZGlyZWN0KCkgcmVwbGFjZXMgaXQuIHRlcm0ucmVzdG9yZSgpIGhhcyBiZWVuIHJlbW92ZWQuCiogQWRkZWQgYSBuZXcgV2luZG93aW5nIEFQSSBmb3IgYWRkcmVzc2luZyBzdWItYXJlYXMgb2YgdGhlIHRlcm1pbmFsCiogTmV3IHByb2dyYW1zOiBmZywgYmcsIG11bHRpc2hlbGwsIGNoYXQsIHJlcGVhdCwgcmVkc3RvbmUsIGVxdWlwLCB1bmVxdWlwCiogSW1wcm92ZWQgcHJvZ3JhbXM6IGNvcHksIG1vdmUsIGRlbGV0ZSwgcmVuYW1lLCBwYWludCwgc2hlbGwKKiBSZW1vdmVkIHByb2dyYW1zOiByZWRzZXQsIHJlZHByb2JlLCByZWRwdWxzZQoqIE5ldyBBUElzOiB3aW5kb3csIG11bHRpc2hlbGwKKiBOZXcgdHVydGxlIGZ1bmN0aW9uczogdHVydGxlLmVxdWlwTGVmdCgpIGFuZCB0dXJ0bGUuZXF1aXBSaWdodCgpCiogTmV3IHBlcmlwaGVyYWwgZnVuY3Rpb25zOiBwZXJpcGhlcmFsLmZpbmQoIFt0eXBlXSApCiogTmV3IHJlZG5ldCBmdW5jdGlvbnM6IHJlZG5ldC5ob3N0KCBwcm90b2NvbCwgaG9zdG5hbWUgKSwgcmVkbmV0LnVuaG9zdCggcHJvdG9jb2wgKSwgcmVkbmV0LmxvY2F0ZSggcHJvdG9jb2wsIFtob3N0bmFtZV0gKQoqIE5ldyBmcyBmdW5jdGlvbjogZnMuZmluZCggd2lsZGNhcmQgKQoqIE5ldyBzaGVsbCBmdW5jdGlvbnM6IHNoZWxsLm9wZW5UYWIoKSwgc2hlbGwuc3dpdGNoVGFiKCBbbnVtYmVyXSApCiogTmV3IGV2ZW50ICJ0ZXJtX3Jlc2l6ZSIgZmlyZWQgd2hlbiB0aGUgc2l6ZSBvZiBhIHRlcm1pbmFsIGNoYW5nZXMKKiBJbXByb3ZlZCByZWRuZXQgZnVuY3Rpb25zOiByZWRuZXQuc2VuZCgpLCByZWRuZXQuYnJvYWRjYXN0KCkgYW5kIHJlZG5ldC5yZWNlaXZlKCkgbm93IHRha2Ugb3B0aW9uYWwgcHJvdG9jb2wgcGFyYW1ldGVycwoqIHR1cnRsZS5jcmFmdCgwKSBhbmQgdHVydGxlLnJlZnVlbCgwKSBub3cgcmV0dXJuIHRydWUgaWYgdGhlcmUgaXMgYSB2YWxpZCByZWNpcGUgb3IgZnVlbCBpdGVtLCBidXQgZG8gbm90IGNyYWZ0IG9mIHJlZnVlbCBhbnl0aGluZwoqIHR1cnRsZS5zdWNrKCBbbGltaXRdICkgY2FuIG5vdyBiZSB1c2VkIHRvIGxpbWl0IHRoZSBudW1iZXIgb2YgaXRlbXMgcGlja2VkIHVwCiogVXNlcnMgb2YgdHVydGxlLmRpZygpIGFuZCB0dXJ0bGUuYXR0YWNrKCkgY2FuIG5vdyBzcGVjaWZ5IHdoaWNoIHNpZGUgb2YgdGhlIHR1cnRsZSB0byBsb29rIGZvciBhIHRvb2wgdG8gdXNlIChieSBkZWZhdWx0LCBib3RoIHdpbGwgYmUgY29uc2lkZXJlZCkKKiB0ZXh0dXRpbHMuc2VyaWFsaXNlKCB0ZXh0ICkgbm93IHByb2R1Y2VzIGh1bWFuLXJlYWRhYmxlIG91dHB1dAoqIFJlZmFjdG9yZWQgbW9zdCBvZiB0aGUgY29kZWJhc2UgYW5kIGZpeGVkIG1hbnkgb2xkIGJ1Z3MgYW5kIGluc3RhYmlsaXRpZXMsIHR1cnRsZXMgc2hvdWxkIG5ldmVyIGV2ZXIgbG9zZSB0aGVpciBjb250ZW50IG5vdwoqIEZpeGVkIHRoZSAidHVydGxlX2ludmVudG9yeSIgZXZlbnQgZmlyaW5nIHdoZW4gaXQgc2hvdWxkbid0IGhhdmUKKiBBZGRlZCBlcnJvciBtZXNzYWdlcyB0byBtYW55IG1vcmUgdHVydGxlIGZ1bmN0aW9ucyBhZnRlciB0aGV5IHJldHVybiBmYWxzZQoqIERvY3VtZW50ZWQgYWxsIG5ldyBwcm9ncmFtcyBhbmQgQVBJIGNoYW5nZXMgaW4gdGhlICJoZWxwIiBzeXN0ZW0KCk5ldyBGZWF0dXJlcyBpbiBDb21wdXRlckNyYWZ0IDEuNTg6CgoqIEZpeGVkIGEgbG9uZyBzdGFuZGluZyBidWcgd2hlcmUgdHVydGxlcyBjb3VsZCBsb3NlIHRoZWlyIGlkZW50aWZ5IGlmIHRoZXkgdHJhdmVsIHRvbyBmYXIgYXdheQoqIEZpeGVkIHVzZSBvZiBkZXByZWNhdGVkIGNvZGUsIGVuc3VyaW5nIG1vZCBjb21wYXRpYmlsaXR5IHdpdGggdGhlIGxhdGVzdCB2ZXJzaW9ucyBvZiBNaW5lY3JhZnQgRm9yZ2UsIGFuZCB3b3JsZCBjb21wYXRpYmlsaXR5IHdpdGggZnV0dXJlIHZlcnNpb25zIG9mIE1pbmVjcmFmdAoKTmV3IEZlYXR1cmVzIGluIENvbXB1dGVyQ3JhZnQgMS41NzoKCiogUG9ydGVkIHRvIE1pbmVjcmFmdCAxLjYuNAoqIEFkZGVkIHR3byBuZXcgVHJlYXN1cmUgRGlza3M6IENvbndheSdzIEdhbWUgb2YgTGlmZSBieSB2aWxzb2wgYW5kIFByb3RlY3RvciBieSBmcmVkdGhlYWQKKiBGaXhlZCBhIHZlcnkgbmFzdHkgaXRlbSBkdXBsaWNhdGlvbiBidWcKCk5ldyBGZWF0dXJlcyBpbiBDb21wdXRlckNyYWZ0IDEuNTY6CgoqIEFkZGVkIFRyZWFzdXJlIERpc2tzOiBGbG9wcHkgRGlza3MgaW4gZHVuZ2VvbnMgd2hpY2ggY29udGFpbiBpbnRlcmVzdGluZyBjb21tdW5pdHkgbWFkZSBwcm9ncmFtcy4gRmluZCB0aGVtIGFsbCEKKiBBbGwgdHVydGxlIGZ1bmN0aW9ucyBub3cgcmV0dXJuIGFkZGl0aW9uYWwgZXJyb3IgbWVzc2FnZXMgd2hlbiB0aGV5IGZhaWwuCiogUmVzb3VyY2UgUGFja3Mgd2l0aCBMdWEgUHJvZ3JhbXMgY2FuIG5vdyBiZSBlZGl0ZWQgd2hlbiBleHRyYWN0ZWQgdG8gYSBmb2xkZXIsIGZvciBlYXNpZXIgZWRpdGluZy4KCk5ldyBGZWF0dXJlcyBpbiBDb21wdXRlckNyYWZ0IDEuNTU6CgoqIFBvcnRlZCB0byBNaW5lY3JhZnQgMS42LjIKKiBBZGRlZCBBZHZhbmNlZCBUdXJ0bGVzCiogQWRkZWQgInR1cnRsZV9pbnZlbnRvcnkiIGV2ZW50LiBGaXJlcyB3aGVuIGFueSBjaGFuZ2UgaXMgbWFkZSB0byB0aGUgaW52ZW50b3J5IG9mIGEgdHVydGxlCiogQWRkZWQgbWlzc2luZyBmdW5jdGlvbnMgaW8uY2xvc2UsIGlvLmZsdXNoLCBpby5pbnB1dCwgaW8ubGluZXMsIGlvLm91dHB1dAoqIFR3ZWFrZWQgdGhlIHNjcmVlbiBjb2xvdXJzIHVzZWQgYnkgQWR2YW5jZWQgQ29tcHV0ZXJzLCBNb25pdG9ycyBhbmQgVHVydGxlcwoqIEFkZGVkIG5ldyBmZWF0dXJlcyBmb3IgUGVyaXBoZXJhbCBhdXRob3JzCiogTHVhIHByb2dyYW1zIGNhbiBub3cgYmUgaW5jbHVkZWQgaW4gUmVzb3VyY2UgUGFja3MKCk5ldyBGZWF0dXJlcyBpbiBDb21wdXRlckNyYWZ0IDEuNTI6CgoqIFBvcnRlZCB0byBNaW5lY3JhZnQgMS41LjEKCk5ldyBGZWF0dXJlcyBpbiBDb21wdXRlckNyYWZ0IDEuNTE6CgoqIFBvcnRlZCB0byBNaW5lY3JhZnQgMS41CiogQWRkZWQgV2lyZWQgTW9kZW1zCiogQWRkZWQgTmV0d29ya2luZyBDYWJsZXMKKiBNYWRlIFdpcmVsZXNzIE1vZGVtcyBtb3JlIGV4cGVuc2l2ZSB0byBjcmFmdAoqIE5ldyByZWRzdG9uZSBBUEkgZnVuY3Rpb25zOiBnZXRBbmFsb2dJbnB1dCgpLCBzZXRBbmFsb2dPdXRwdXQoKSwgZ2V0QW5hbG9nT3V0cHV0KCkKKiBQZXJpcGhlcmFscyBjYW4gbm93IGJlIGNvbnRyb2xsZWQgcmVtb3RlbHkgb3ZlciB3aXJlZCBuZXR3b3Jrcy4gTmV3IHBlcmlwaGVyYWwgQVBJIGZ1bmN0aW9uOiBnZXROYW1lcygpCiogTmV3IGV2ZW50OiAibW9uaXRvcl9yZXNpemUiIHdoZW4gdGhlIHNpemUgb2YgYSBtb25pdG9yIGNoYW5nZXMKKiBFeGNlcHQgZm9yIGxhYmVsbGVkIGNvbXB1dGVycyBhbmQgdHVydGxlcywgQ29tcHV0ZXJDcmFmdCBibG9ja3Mgbm8gbG9uZ2VyIGRyb3AgaXRlbXMgaW4gY3JlYXRpdmUgbW9kZQoqIFRoZSBwaWNrIGJsb2NrIGZ1bmN0aW9uIHdvcmtzIGluIGNyZWF0aXZlIG1vZGUgbm93IHdvcmtzIGZvciBhbGwgQ29tcHV0ZXJDcmFmdCBibG9ja3MKKiBBbGwgYmxvY2tzIGFuZCBpdGVtcyBub3cgdXNlIHRoZSBJRHMgbnVtYmVycyBhc3NpZ25lZCBieSBGVEIgYnkgZGVmYXVsdAoqIEZpeGVkIHR1cnRsZXMgc29tZXRpbWVzIHBsYWNpbmcgYmxvY2tzIHdpdGggaW5jb3JyZWN0IG9yaWVudGF0aW9ucwoqIEZpeGVkIFdpcmVsZXNzIG1vZGVtcyBiZWluZyBhYmxlIHRvIHNlbmQgbWVzc2FnZXMgdG8gdGhlbXNlbHZlcwoqIEZpeGVkIHR1cnRsZS5hdHRhY2soKSBoYXZpbmcgYSB2ZXJ5IHNob3J0IHJhbmdlCiogVmFyaW91cyBidWdmaXhlcwoKTmV3IEZlYXR1cmVzIGluIENvbXB1dGVyQ3JhZnQgMS41OgoKKiBSZWRlc2lnbmVkIFdpcmVsZXNzIE1vZGVtczsgdGhleSBjYW4gbm93IHNlbmQgYW5kIHJlY2VpdmUgb24gbXVsdGlwbGUgY2hhbm5lbHMsIGluZGVwZW5kZW50IG9mIHRoZSBjb21wdXRlciBJRC4gVG8gdXNlIHRoZXNlIGZlYXR1cmVzLCBpbnRlcmZhY2Ugd2l0aCBtb2RlbSBwZXJpcGhlcmFscyBkaXJlY3RseS4gVGhlIHJlZG5ldCBBUEkgc3RpbGwgZnVuY3Rpb25zIGFzIGJlZm9yZQoqIEZsb3BweSBEaXNrcyBjYW4gbm93IGJlIGR5ZWQgd2l0aCBtdWx0aXBsZSBkeWVzLCBqdXN0IGxpa2UgYXJtb3VyCiogVGhlICJleGNhdmF0ZSIgcHJvZ3JhbSBub3cgcmV0YWlucyBmdWVsIGluIGl0J3MgaW52ZW50b3J5LCBzbyBjYW4gcnVuIHVuYXR0ZW5kZWQKKiB0dXJ0bGUucGxhY2UoKSBub3cgdHJpZXMgYWxsIHBvc3NpYmxlIGJsb2NrIG9yaWVudGF0aW9ucyBiZWZvcmUgZmFpbGluZwoqIHR1cnRsZS5yZWZ1ZWwoMCkgcmV0dXJucyB0cnVlIGlmIGEgZnVlbCBpdGVtIGlzIHNlbGVjdGVkCiogdHVydGxlLmNyYWZ0KDApIHJldHVybnMgdHJ1ZSBpZiB0aGUgaW52ZW50b3J5IGlzIGEgdmFsaWQgcmVjaXBlCiogVGhlIGluLWdhbWUgaGVscCBzeXN0ZW0gbm93IGhhcyBkb2N1bWVudGF0aW9uIGZvciBhbGwgdGhlIHBlcmlwaGVyYWxzIGFuZCB0aGVpciBtZXRob2RzLCBpbmNsdWRpbmcgdGhlIG5ldyBtb2RlbSBmdW5jdGlvbmFsaXR5CiogQSByb21hbnRpYyBzdXJwcmlzZQoKTmV3IEZlYXR1cmVzIGluIENvbXB1dGVyQ3JhZnQgMS40ODoKCiogUG9ydGVkIHRvIE1pbmVjcmFmdCAxLjQuNgoqIEFkdmFuY2VkIE1vbml0b3JzIG5vdyBlbWl0IGEgIm1vbml0b3JfdG91Y2giIGV2ZW50IHdoZW4gcmlnaHQgY2xpY2tlZAoqIEFkdmFuY2VkIE1vbml0b3JzIGFyZSBub3cgY2hlYXBlciB0byBjcmFmdAoqIFR1cnRsZXMgbm93IGdldCBzbGlnaHRseSBsZXNzIGZ1ZWwgZnJvbSBpdGVtcwoqIENvbXB1dGVycyBjYW4gbm93IGludGVyYWN0IHdpdGggQ29tbWFuZCBCbG9ja3MgKGlmIGVuYWJsZWQgaW4gQ29tcHV0ZXJDcmFmdC5jZmcpCiogTmV3IEFQSSBmdW5jdGlvbjogb3MuZGF5KCkKKiBBIGNocmlzdG1hcyBzdXJwcmlzZQoKTmV3IEZlYXR1cmVzIGluIENvbXB1dGVyQ3JhZnQgMS40NToKCiogQWRkZWQgQWR2YW5jZWQgQ29tcHV0ZXJzCiogQWRkZWQgQWR2YW5jZWQgTW9uaXRvcnMKKiBOZXcgcHJvZ3JhbTogcGFpbnQgYnkgbml0cm9nZW5maW5nZXJzCiogTmV3IEFQSTogcGFpbnR1dGlscwoqIE5ldyB0ZXJtIGZ1bmN0aW9uczogdGVybS5zZXRCYWNrZ3JvdW5kQ29sb3IsIHRlcm0uc2V0VGV4dENvbG9yLCB0ZXJtLmlzQ29sb3IKKiBOZXcgdHVydGxlIGZ1bmN0aW9uOiB0dXJ0bGUudHJhbnNmZXJUbwoKTmV3IEZlYXR1cmVzIGluIENvbXB1dGVyQ3JhZnQgMS40MzoKCiogQWRkZWQgUHJpbnRlZCBQYWdlcwoqIEFkZGVkIFByaW50ZWQgQm9va3MKKiBGaXhlZCBpbmNvbXBhdGliaWxpdHkgd2l0aCBGb3JnZSAyNzUgYW5kIGFib3ZlCiogTGFiZWxsZWQgVHVydGxlcyBub3cga2VlcCB0aGVpciBmdWVsIHdoZW4gYnJva2VuCgpOZXcgRmVhdHVyZXMgaW4gQ29tcHV0ZXJDcmFmdCAxLjQyOgoKKiBQb3J0ZWQgdG8gTWluZWNyYWZ0IDEuMy4yCiogQWRkZWQgUHJpbnRlcnMKKiBGbG9wcHkgRGlza3MgY2FuIGJlIGR5ZWQgZGlmZmVyZW50IGNvbG91cnMKKiBXaXJlbGVzcyBDcmFmdHkgVHVydGxlcyBjYW4gbm93IGJlIGNyYWZ0ZWQKKiBOZXcgdGV4dHVyZXMKKiBOZXcgZm9yZ2UgY29uZmlnIGZpbGUKKiBCdWcgZml4ZXMKCk5ldyBGZWF0dXJlcyBpbiBDb21wdXRlckNyYWZ0IDEuNDoKCiogUG9ydGVkIHRvIEZvcmdlIE1vZCBMb2FkZXIuIENvbXB1dGVyQ3JhZnQgY2FuIG5vdyBiZSByYW4gZGlyZWN0bHkgZnJvbSB0aGUgLnppcCB3aXRob3V0IGV4dHJhY3Rpb24KKiBBZGRlZCBGYXJtaW5nIFR1cnRsZXMKKiBBZGRlZCBGZWxsaW5nIFR1cnRsZXMKKiBBZGRlZCBEaWdnaW5nIFR1cnRsZXMKKiBBZGRlZCBNZWxlZSBUdXJ0bGVzCiogQWRkZWQgQ3JhZnR5IFR1cnRsZXMKKiBBZGRlZCAxNCBuZXcgVHVydGxlIENvbWJpbmF0aW9ucyBhY2Nlc3NpYmxlIGJ5IGNvbWJpbmluZyB0aGUgdHVydGxlIHVwZ3JhZGVzIGFib3ZlCiogTGFiZWxsZWQgY29tcHV0ZXJzIGFuZCB0dXJ0bGVzIGNhbiBub3cgYmUgY3JhZnRlZCBpbnRvIHR1cnRsZXMgb3Igb3RoZXIgdHVydGxlIHR5cGVzIHdpdGhvdXQgbG9zaW5nIHRoZWlyIElELCBsYWJlbCBhbmQgZGF0YQoqIEFkZGVkIGEgIlR1cnRsZSBVcGdyYWRlIEFQSSIgZm9yIG1vZCBkZXZlbG9wZXJzIHRvIGNyZWF0ZSB0aGVpciBvd24gdG9vbHMgYW5kIHBlcmlwaGVyYWxzIGZvciB0dXJ0bGVzCiogVHVydGxlcyBjYW4gbm93IGF0dGFjayBlbnRpdGllcyB3aXRoIHR1cnRsZS5hdHRhY2soKSwgYW5kIGNvbGxlY3QgdGhlaXIgZHJvcHBlZCBpdGVtcwoqIFR1cnRsZXMgY2FuIG5vdyB1c2UgdHVydGxlLnBsYWNlKCkgd2l0aCBhbnkgaXRlbSB0aGUgcGxheWVyIGNhbiwgYW5kIGNhbiBpbnRlcmFjdCB3aXRoIGVudGl0aWVzCiogVHVydGxlcyBjYW4gbm93IGNyYWZ0IGl0ZW1zIHdpdGggdHVydGxlLmNyYWZ0KCkKKiBUdXJ0bGVzIGNhbiBub3cgcGxhY2UgaXRlbXMgaW50byBpbnZlbnRvcmllcyB3aXRoIHR1cnRsZS5kcm9wKCkKKiBDaGFuZ2VkIHRoZSBiZWhhdmlvdXIgb2YgdHVydGxlLnBsYWNlKCkgYW5kIHR1cnRsZS5kcm9wKCkgdG8gb25seSBjb25zaWRlciB0aGUgY3VycmVudGx5IHNlbGVjdGVkIHNsb3QKKiBUdXJ0bGVzIGNhbiBub3cgcGljayB1cCBpdGVtcyBmcm9tIHRoZSBncm91bmQsIG9yIGZyb20gaW52ZW50b3JpZXMsIHdpdGggdHVydGxlLnN1Y2soKQoqIFR1cnRsZXMgY2FuIG5vdyBjb21wYXJlIGl0ZW1zIGluIHRoZWlyIGludmVudG9yaWVzCiogVHVydGxlcyBjYW4gcGxhY2Ugc2lnbnMgd2l0aCB0ZXh0IG9uIHRoZW0gd2l0aCB0dXJ0bGUucGxhY2UoIFtzaWduVGV4dF0gKQoqIFR1cnRsZXMgbm93IG9wdGlvbmFsbHkgcmVxdWlyZSBmdWVsIGl0ZW1zIHRvIG1vdmUsIGFuZCBjYW4gcmVmdWVsIHRoZW1zZWx2ZXMKKiBUaGUgc2l6ZSBvZiB0aGUgdGhlIHR1cnRsZSBpbnZlbnRvcnkgaGFzIGJlZW4gaW5jcmVhc2VkIHRvIDE2CiogVGhlIHNpemUgb2YgdGhlIHR1cnRsZSBzY3JlZW4gaGFzIGJlZW4gaW5jcmVhc2VkCiogTmV3IHR1cnRsZSBmdW5jdGlvbnM6IHR1cnRsZS5jb21wYXJlVG8oIFtzbG90TnVtXSApLCB0dXJ0bGUuY3JhZnQoKSwgdHVydGxlLmF0dGFjaygpLCB0dXJ0bGUuYXR0YWNrVXAoKSwgdHVydGxlLmF0dGFja0Rvd24oKSwgdHVydGxlLmRyb3BVcCgpLCB0dXJ0bGUuZHJvcERvd24oKSwgdHVydGxlLmdldEZ1ZWxMZXZlbCgpLCB0dXJ0bGUucmVmdWVsKCkKKiBOZXcgZGlzayBmdW5jdGlvbjogZGlzay5nZXRJRCgpCiogTmV3IHR1cnRsZSBwcm9ncmFtczogY3JhZnQsIHJlZnVlbAoqICJleGNhdmF0ZSIgcHJvZ3JhbSBub3cgbXVjaCBzbWFydGVyOiBXaWxsIHJldHVybiBpdGVtcyB0byBhIGNoZXN0IHdoZW4gZnVsbCwgYXR0YWNrIG1vYnMsIGFuZCByZWZ1ZWwgaXRzZWxmIGF1dG9tYXRpY2FsbHkKKiBOZXcgQVBJOiBrZXlzCiogQWRkZWQgb3B0aW9uYWwgRmxvcHB5IERpc2sgYW5kIEhhcmQgRHJpdmUgc3BhY2UgbGltaXRzIGZvciBjb21wdXRlcnMgYW5kIHR1cnRsZXMKKiBOZXcgZnMgZnVuY3Rpb246IGZzLmdldEZyZWVTcGFjZSggcGF0aCApLCBhbHNvIGZzLmdldERyaXZlKCkgd29ya3MgYWdhaW4KKiBUaGUgc2VuZCBhbmQgcmVjZWl2ZSByYW5nZSBvZiB3aXJlbGVzcyBtb2RlbXMgbm93IGluY3JlYXNlcyB3aXRoIGFsdGl0dWRlLCBhbGxvd2luZyBsb25nIHJhbmdlIG5ldHdvcmtpbmcgZnJvbSBoaWdoLWFsdGl0dWRlIGNvbXB1dGVycyAoZ3JlYXQgZm9yIEdQUyBuZXR3b3JrcykKKiBodHRwLnJlcXVlc3QoKSBub3cgc3VwcG9ydHMgaHR0cHM6Ly8gVVJMcwoqIFJpZ2h0IGNsaWNraW5nIGEgRGlzayBEcml2ZSB3aXRoIGEgRmxvcHB5IERpc2sgb3IgYSBSZWNvcmQgd2hlbiBzbmVha2luZyB3aWxsIGluc2VydCB0aGUgaXRlbSBpbnRvIHRoZSBEaXNrIERyaXZlIGF1dG9tYXRpY2FsbHkKKiBUaGUgZGVmYXVsdCBzaXplIG9mIHRoZSBjb21wdXRlciBzY3JlZW4gaGFzIGJlZW4gaW5jcmVhc2VkCiogU2V2ZXJhbCBzdGFiaWxpdHkgYW5kIHNlY3VyaXR5IGZpeGVzLiBMdWFKIGNhbiBub3cgbm8gbG9uZ2VyIGxlYXZlIGRhbmdsaW5nIHRocmVhZHMgd2hlbiBhIGNvbXB1dGVyIGlzIHVubG9hZGVkLCB0dXJ0bGVzIGNhbiBubyBsb25nZXIgYmUgZGVzdHJveWVkIGJ5IHRyZWUgbGVhdmVzIG9yIHdhbGtpbmcgb2ZmIHRoZSBlZGdlIG9mIHRoZSBsb2FkZWQgbWFwLiBDb21wdXRlcnMgbm8gbG9uZ2VyIGNyYXNoIHdoZW4gdXNlZCB3aXRoIFJlZFBvd2VyIGZyYW1lcy4KCk5ldyBGZWF0dXJlcyBpbiBDb21wdXRlckNyYWZ0IDEuMzE6CgoqIFBvcnRlZCB0byBNaW5lY3JhZnQgMS4yLjMKKiBBZGRlZCBNb25pdG9ycyAodGhhbmtzIHRvIENsb3VkeSkKKiBVcGRhdGVkIEx1YUogdG8gYSBuZXdlciwgbGVzcyBtZW1vcnkgaHVuZ3J5IHZlcnNpb24KKiByZWRuZXRfbWVzc2FnZSBldmVudCBub3cgaGFzIGEgdGhpcmQgcGFyYW1ldGVyLCAiZGlzdGFuY2UiLCB0byBzdXBwb3J0IHBvc2l0aW9uIHRyaWFuZ3VsYXRpb24uCiogTmV3IHByb2dyYW1zOiBncHMsIG1vbml0b3IsIHBhc3RlYmluLgoqIEFkZGVkIGEgc2VjcmV0IHByb2dyYW0uIFVzZSB3aXRoIGxhcmdlIG1vbml0b3JzIQoqIE5ldyBhcGlzOiBncHMsIHZlY3RvcgoqIE5ldyB0dXJ0bGUgZnVuY3Rpb25zOiB0dXJ0bGUuY29tcGFyZSgpLCB0dXJ0bGUuY29tcGFyZVVwKCksIHR1cnRsZS5jb21wYXJlRG93bigpLCB0dXJ0bGUuZHJvcCggcXVhbnRpdHkgKQoqIE5ldyBodHRwIGZ1bmN0aW9uczogaHR0cC5wb3N0KCkuCiogTmV3IHRlcm0gZnVuY3Rpb25zOiB0ZXJtLnJlZGlyZWN0KCksIHRlcm0ucmVzdG9yZSgpCiogTmV3IHRleHR1dGlscyBmdW5jdGlvbnM6IHRleHR1dGlscy51cmxFbmNvZGUoKQoqIE5ldyByZWRuZXQgZnVuY3Rpb25zOiByZWRuZXQuaXNPcGVuKCkKKiBOZXcgY29uZmlnIG9wdGlvbnM6IG1vZGVtX3JhbmdlLCBtb2RlbV9yYW5nZUR1cmluZ1N0b3JtCiogQnVnIGZpeGVzLCBwcm9ncmFtIHR3ZWFrcywgYW5kIGhlbHAgdXBkYXRlcwoKTmV3IEZlYXR1cmVzIGluIENvbXB1dGVyQ3JhZnQgMS4zOgoKKiBQb3J0ZWQgdG8gTWluZWNyYWZ0IEZvcmdlCiogQWRkZWQgVHVydGxlcwoqIEFkZGVkIFdpcmVsZXNzIE1vZGVtcwoqIEFkZGVkIE1pbmluZyBUdXJ0bGVzCiogQWRkZWQgV2lyZWxlc3MgVHVydGxlcwoqIEFkZGVkIFdpcmVsZXNzIE1pbmluZyBUdXJ0bGVzCiogQ29tcHV0ZXJzIGFuZCBEaXNrIERyaXZlcyBubyBsb25nZXIgZ2V0IGRlc3Ryb3llZCBieSB3YXRlci4KKiBDb21wdXRlcnMgYW5kIFR1cnRsZXMgY2FuIG5vdyBiZSBsYWJlbGxlZCB3aXRoIHRoZSBsYWJlbCBwcm9ncmFtLCBhbmQgbGFiZWxsZWQgZGV2aWNlcyBrZWVwIHRoZWlyIHN0YXRlIHdoZW4gZGVzdHJveWVkLgoqIENvbXB1dGVycy9UdXJ0bGVzIGNhbiBjb25uZWN0IHRvIGFkamFjZW50IGRldmljZXMsIGFuZCB0dXJuIHRoZW0gb24gYW5kIG9mZgoqIFVzZXIgcHJvZ3JhbXMgbm93IGdpdmUgbGluZSBudW1iZXJzIGluIHRoZWlyIGVycm9yIG1lc3NhZ2VzCiogTmV3IEFQSXM6IHR1cnRsZSwgcGVyaXBoZXJhbAoqIE5ldyBwcm9ncmFtcyBmb3IgdHVydGxlczogdHVubmVsLCBleGNhdmF0ZSwgZ28sIHR1cm4sIGRhbmNlCiogTmV3IG9zIGZ1bmN0aW9uczogb3MuZ2V0Q29tcHV0ZXJMYWJlbCgpLCBvcy5zZXRDb21wdXRlckxhYmVsKCkKKiBBZGRlZCAiZmlsdGVyIiBwYXJhbWV0ZXIgdG8gb3MucHVsbEV2ZW50KCkKKiBOZXcgc2hlbGwgZnVuY3Rpb246IHNoZWxsLmdldEN1cnJlbnRQcm9ncmFtKCkKKiBOZXcgdGV4dHV0aWxzIGZ1bmN0aW9uczogdGV4dHV0aWxzLnNlcmlhbGl6ZSgpLCB0ZXh0dXRpbHMudW5zZXJpYWxpemUoKSwgdGV4dHV0aWxzLnRhYnVsYXRlKCksIHRleHR1dGlscy5wYWdlZFRhYnVsYXRlKCksIHRleHR1dGlscy5zbG93V3JpdGUoKQoqIE5ldyBpbyBmaWxlIGZ1bmN0aW9uOiBmaWxlOmxpbmVzKCkKKiBOZXcgZnMgZnVuY3Rpb246IGZzLmdldFNpemUoKQoqIERpc2sgRHJpdmVzIGNhbiBub3cgcGxheSByZWNvcmRzIGZyb20gb3RoZXIgbW9kcwoqIEJ1ZyBmaXhlcywgcHJvZ3JhbSB0d2Vha3MsIGFuZCBoZWxwIHVwZGF0ZXMKCk5ldyBGZWF0dXJlcyBpbiBDb21wdXRlckNyYWZ0IDEuMjoKCiogQWRkZWQgRGlzayBEcml2ZXMgYW5kIEZsb3BweSBEaXNrcwoqIEFkZGVkIEN0cmwrVCBzaG9ydGN1dCB0byB0ZXJtaW5hdGUgdGhlIGN1cnJlbnQgcHJvZ3JhbSAoaG9sZCkKKiBBZGRlZCBDdHJsK1Mgc2hvcnRjdXQgdG8gc2h1dGRvd24gdGhlIGNvbXB1dGVyIChob2xkKQoqIEFkZGVkIEN0cmwrUiBzaG9ydGN1dCB0byByZWJvb3QgdGhlIGNvbXB1dGVyIChob2xkKQoqIE5ldyBQcm9ncmFtczogYWxpYXMsIGFwaXMsIGNvcHksIGRlbGV0ZSwgZGosIGRyaXZlLCBlamVjdCwgaWQsIGxhYmVsLCBsaXN0LCBtb3ZlLCByZWJvb3QsIHJlZHNldCwgcmVuYW1lLCB0aW1lLCB3b3JtLgoqIE5ldyBBUElzOiBiaXQsIGNvbG91cnMsIGRpc2ssIGhlbHAsIHJlZG5ldCwgcGFyYWxsZWwsIHRleHR1dGlscy4KKiBOZXcgY29sb3IgZnVuY3Rpb25zOiBjb2xvcnMuY29tYmluZSgpLCBjb2xvcnMuc3VidHJhY3QoKSwgY29sb3JzLnRlc3QoKQoqIE5ldyBmcyBmdW5jdGlvbnM6IGZzLmdldE5hbWUoKSwgbmV3IG1vZGVzIGZvciBmcy5vcGVuKCkKKiBOZXcgb3MgZnVuY3Rpb25zOiBvcy5sb2FkQVBJKCksIG9zLnVubG9hZEFQSSgpLApvcy5jbG9jaygpLCBvcy50aW1lKCksIG9zLnNldEFsYXJtKCksCm9zLnJlYm9vdCgpLCBvcy5xdWV1ZUV2ZW50KCkKKiBOZXcgcmVkc3RvbmUgZnVuY3Rpb246IHJlZHN0b25lLmdldFNpZGVzKCkKKiBOZXcgc2hlbGwgZnVuY3Rpb25zOiBzaGVsbC5zZXRQYXRoKCksIHNoZWxsLnByb2dyYW1zKCksIHNoZWxsLnJlc29sdmVQcm9ncmFtKCksIHNoZWxsLnNldEFsaWFzKCkKKiBMb3RzIG9mIHVwZGF0ZXMgdG8gdGhlIGhlbHAgcGFnZXMKKiBCdWcgZml4ZXMKCk5ldyBGZWF0dXJlcyBpbiBDb21wdXRlckNyYWZ0IDEuMToKCiogQWRkZWQgTXVsdGlwbGF5ZXIgc3VwcG9ydCB0aHJvdWdob3V0LgoqIEFkZGVkIGNvbm5lY3Rpdml0eSB3aXRoIFJlZFBvd2VyIGJ1bmRsZWQgY2FibGVzCiogQWRkZWQgSFRUUCBhcGksIGVuYWJsZWQgdmlhIHRoZSBtb2QgY29uZmlnLCB0byBhbGxvdyBjb21wdXRlcnMgdG8gYWNjZXNzIHRoZSByZWFsIHdvcmxkIGludGVybmV0CiogQWRkZWQgY29tbWFuZCBoaXN0b3J5IHRvIHRoZSBzaGVsbC4KKiBQcm9ncmFtcyB3aGljaCBzcGluIGluIGFuIGluZmluaXRlIGxvb3Agd2l0aG91dCB5aWVsZGluZyB3aWxsIG5vIGxvbmdlciBmcmVlemUgbWluZWNyYWZ0CiogSGVscCB1cGRhdGVzIGFuZCBidWcgZml4ZXMKCk5ldyBGZWF0dXJlcyBpbiBDb21wdXRlckNyYWZ0IDEuMDoKCiogRmlyc3QgUmVsZWFzZSEK";
   Module["FS_createDataFile"]("/craftos/rom/help", "changelog.md", decodeBase64(fileData152), true, true, false);
   var fileData153 = "VGhlIERpc2sgRHJpdmUgaXMgYSBwZXJpcGhlcmFsIGRldmljZSBhdmFpbGFibGUgZm9yIENyYWZ0T1MuIFR5cGUgImhlbHAgcGVyaXBoZXJhbCIgdG8gbGVhcm4gYWJvdXQgdXNpbmcgdGhlIFBlcmlwaGVyYWwgQVBJIHRvIGNvbm5lY3Qgd2l0aCBwZXJpcGhlcmFscy4gV2hlbiBhIERpc2sgRHJpdmUgaXMgY29ubmVjdGVkLCBwZXJpcGhlcmFsLmdldFR5cGUoKSB3aWxsIHJldHVybiAiZHJpdmUiLgoKTWV0aG9kcyBleHBvc2VkIGJ5IHRoZSBEaXNrIERyaXZlOgppc0Rpc2tQcmVzZW50KCkKZ2V0RGlza0xhYmVsKCkKc2V0RGlza0xhYmVsKCBsYWJlbCApCmhhc0RhdGEoKQpnZXRNb3VudFBhdGgoKQpoYXNBdWRpbygpCmdldEF1ZGlvVGl0bGUoKQpwbGF5QXVkaW8oKQpzdG9wQXVkaW8oKQplamVjdERpc2soKQpnZXREaXNrSUQoKQppbnNlcnREaXNrKCBwYXRoICkKCkV2ZW50cyBmaXJlZCBieSB0aGUgRGlzayBEcml2ZToKImRpc2siIHdoZW4gYSBkaXNrIG9yIG90aGVyIGl0ZW0gaXMgaW5zZXJ0ZWQgaW50byB0aGUgZHJpdmUuIEFyZ3VtZW50IGlzIHRoZSBuYW1lIG9mIHRoZSBkcml2ZS4KImRpc2tfZWplY3QiIHdoZW4gYSBkaXNrIGlzIHJlbW92ZWQgZnJvbSBhICBkcml2ZS4gQXJndW1lbnQgaXMgdGhlIG5hbWUgb2YgdGhlIGRyaXZlLgpUeXBlICJoZWxwIGV2ZW50cyIgdG8gbGVhcm4gYWJvdXQgdGhlIGV2ZW50IHN5c3RlbS4K";
   Module["FS_createDataFile"]("/craftos/rom/help", "drives.txt", decodeBase64(fileData153), true, true, false);
   var fileData154 = "RnVuY3Rpb25zIGluIHRoZSBGaWxlc3lzdGVtIEFQSToKZnMubGlzdCggcGF0aCApCmZzLmZpbmQoIHdpbGRjYXJkICkKZnMuZXhpc3RzKCBwYXRoICkKZnMuaXNEaXIoIHBhdGggKQpmcy5pc1JlYWRPbmx5KCBwYXRoICkKZnMuZ2V0RGlyKCBwYXRoICkKZnMuZ2V0TmFtZSggcGF0aCApCmZzLmdldFNpemUoIHBhdGggKQpmcy5nZXREcml2ZSggcGF0aCApCmZzLmdldEZyZWVTcGFjZSggcGF0aCApCmZzLm1ha2VEaXIoIHBhdGggKQpmcy5tb3ZlKCBwYXRoLCBwYXRoICkKZnMuY29weSggcGF0aCwgcGF0aCApCmZzLmRlbGV0ZSggcGF0aCApCmZzLmNvbWJpbmUoIHBhdGgsIGxvY2FscGF0aCApCmZzLm9wZW4oIHBhdGgsIG1vZGUgKQpmcy5jb21wbGV0ZSggcGF0aCwgbG9jYXRpb24gKQpBdmFpbGFibGUgZnMub3BlbigpIG1vZGVzIGFyZSAiciIsICJ3IiwgImEiLCAicmIiLCAid2IiIGFuZCAiYWIiLgoKRnVuY3Rpb25zIG9uIGZpbGVzIG9wZW5lZCB3aXRoIG1vZGUgInIiOgpyZWFkTGluZSgpCnJlYWRBbGwoKQpjbG9zZSgpCnJlYWQoIG51bWJlciApCgpGdW5jdGlvbnMgb24gZmlsZXMgb3BlbmVkIHdpdGggbW9kZSAidyIgb3IgImEiOgp3cml0ZSggc3RyaW5nICkKd3JpdGVMaW5lKCBzdHJpbmcgKQpmbHVzaCgpCmNsb3NlKCkKCkZ1bmN0aW9ucyBvbiBmaWxlcyBvcGVuZWQgd2l0aCBtb2RlICJyYiI6CnJlYWQoKQpjbG9zZSgpCgpGdW5jdGlvbnMgb24gZmlsZXMgb3BlbmVkIHdpdGggbW9kZSAid2IiIG9yICJhYiI6CndyaXRlKCBieXRlICkKZmx1c2goKQpjbG9zZSgpCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "fs.txt", decodeBase64(fileData154), true, true, false);
   var fileData155 = "VGhlIHJlZG5ldCBBUEkgcHJvdmlkZXMgYSBzaW1wbGUgY29tcHV0ZXIgbmV0d29ya2luZyBtb2RlbCB1c2luZyBtb2RlbXMuCgpGdW5jdGlvbnMgaW4gdGhlIHJlZG5ldCBBUEk6CnJlZG5ldC5vcGVuKCBzaWRlICkKcmVkbmV0LmNsb3NlKCBbc2lkZV0gKQpyZWRuZXQuaXNPcGVuKCBbc2lkZV0gKQpyZWRuZXQuc2VuZCggcmVjZWl2ZXJJRCwgbWVzc2FnZSwgW3Byb3RvY29sXSApIC0tIFNlbmQgdG8gYSBzcGVjaWZpYyBjb21wdXRlcgpyZWRuZXQuYnJvYWRjYXN0KCBtZXNzYWdlLCBbcHJvdG9jb2xdICkgLS0gU2VuZCB0byBhbGwgY29tcHV0ZXJzCnJlZG5ldC5yZWNlaXZlKCBbcHJvdG9jb2xdLCBbdGltZW91dF0gKSAtLSBSZXR1cm5zOiBzZW5kZXJJRCwgbWVzc2FnZSwgcHJvdG9jb2wKcmVkbmV0Lmhvc3QoIHByb3RvY29sLCBob3N0bmFtZSApCnJlZG5ldC51bmhvc3QoIHByb3RvY29sICkKcmVkbmV0Lmxvb2t1cCggcHJvdG9jb2wsIFtob3N0bmFtZV0gKSAtLSBSZXR1cm5zOiBJRAoKRXZlbnRzIGZpcmVkIGJ5IHRoZSByZWRuZXQgQVBJOgoicmVkbmV0X21lc3NhZ2UiIHdoZW4gYSBtZXNzYWdlIGlzIHJlY2VpdmVkLiBBcmd1bWVudHMgYXJlIHNlbmRlcklELCBtZXNzYWdlLCBwcm90b2NvbApUeXBlICJoZWxwIGV2ZW50cyIgdG8gbGVhcm4gYWJvdXQgdGhlIGV2ZW50IHN5c3RlbS4KClJlZG5ldCBpcyBub3QgdGhlIG9ubHkgd2F5IHRvIHVzZSBtb2RlbXMgZm9yIG5ldHdvcmtpbmcuIEludGVyZmFjaW5nIHdpdGggdGhlIG1vZGVtIGRpcmVjdGx5IHVzaW5nIHRoZSBwZXJpcGhlcmFsIEFQSSBhbmQgbGlzdGVuaW5nIGZvciB0aGUgIm1vZGVtX21lc3NhZ2UiIGV2ZW50IGFsbG93cyBmb3IgbG93ZXIgbGV2ZWwgY29udHJvbCwgYXQgdGhlIGV4cGVuc2Ugb2YgcG93ZXJmdWwgaGlnaCBsZXZlbCBuZXR3b3JraW5nIGZlYXR1cmVzLgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "rednet.txt", decodeBase64(fileData155), true, true, false);
   var fileData156 = "bHVhIGlzIGFuIGludGVyYWN0aXZlIHByb21wdCBmb3IgdGhlIGx1YSBwcm9ncmFtbWluZyBsYW5ndWFnZS4gSXQncyBhIHVzZWZ1bCB0b29sIGZvciBsZWFybmluZyB0aGUgbGFuZ3VhZ2UuCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "lua.txt", decodeBase64(fileData156), true, true, false);
   var fileData157 = "VGhlIFByaW50ZXIgaXMgYSBwZXJpcGhlcmFsIGRldmljZSBhdmFpbGFibGUgZm9yIENyYWZ0T1MuIFR5cGUgImhlbHAgcGVyaXBoZXJhbCIgdG8gbGVhcm4gYWJvdXQgdXNpbmcgdGhlIFBlcmlwaGVyYWwgQVBJIHRvIGNvbm5lY3Qgd2l0aCBwZXJpcGhlcmFscy4gV2hlbiBhIFByaW50ZXIgaXMgY29ubmVjdGVkLCBwZXJpcGhlcmFsLmdldFR5cGUoKSB3aWxsIHJldHVybiAicHJpbnRlciIuCgpNZXRob2RzIGV4cG9zZWQgYnkgdGhlIFByaW50ZXI6CmdldElua0xldmVsKCkKZ2V0UGFwZXJMZXZlbCgpCm5ld1BhZ2UoKQpzZXRQYWdlVGl0bGUoIHRpdGxlICkKZ2V0UGFnZVNpemUoKQpzZXRDdXJzb3JQb3MoIHgsIHkgKQpnZXRDdXJzb3JQb3MoKQp3cml0ZSggdGV4dCApCmVuZFBhZ2UoKQo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "printers.txt", decodeBase64(fileData157), true, true, false);
   var fileData158 = "ZXF1aXAgaXMgYSBwcm9ncmFtIGZvciBUdXJ0bGVzIGFuZCBQb2NrZXQgQ29tcHV0ZXIuIGVxdWlwIHdpbGwgZXF1aXAgYW4gaXRlbSBmcm9tIHRoZSBUdXJ0bGUncyBpbnZlbnRvcnkgZm9yIHVzZSBhcyBhIHRvb2wgb2YgcGVyaXBoZXJhbC4gT24gYSBQb2NrZXQgQ29tcHV0ZXIgeW91IGRvbid0IG5lZWQgdG8gd3JpdGUgYSBzaWRlLgoKZXg6CiJlcXVpcCA1IGxlZnQiIHdpbGwgZXF1aXAgdGhlIGl0ZW0gZnJvbSBzbG90IDUgb2YgdGhlIHR1cnRsZSBvbnRvIHRoZSBsZWZ0IHNpZGUgb2YgdGhlIHR1cnRsZQoiZXF1aXAiIG9uIGEgUG9ja2V0IENvbXB1dGVyIHdpbGwgZXF1aXAgdGhlIGZpcnN0IGl0ZW0gZnJvbSB5b3VyIGludmVudG9yeS4K";
   Module["FS_createDataFile"]("/craftos/rom/help", "equip.txt", decodeBase64(fileData158), true, true, false);
   var fileData159 = "ZGFuY2UgaXMgYSBwcm9ncmFtIGZvciBUdXJ0bGVzLiBUdXJ0bGVzIGxvdmUgdG8gZ2V0IGZ1bmt5Lgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "dance.txt", decodeBase64(fileData159), true, true, false);
   var fileData160 = "RnVuY3Rpb25zIGluIHRoZSBjb2xvcnMgYXBpCih1c2VkIGZvciByZWRzdG9uZS5zZXRCdW5kbGVkT3V0cHV0KToKY29sb3JzLmNvbWJpbmUoIGNvbG9yMSwgY29sb3IyLCBjb2xvcjMsIC4uLiApCmNvbG9ycy5zdWJ0cmFjdCggY29sb3JzLCBjb2xvcjEsIGNvbG9yMiwgLi4uICkKY29sb3JzLnRlc3QoIGNvbG9ycywgY29sb3IgKQpjb2xvcnMucmdiOCggciwgZywgYiApCgpDb2xvciBjb25zdGFudHMgaW4gdGhlIGNvbG9ycyBhcGksIGluIGFzY2VuZGluZyBiaXQgb3JkZXI6CmNvbG9ycy53aGl0ZSwgY29sb3JzLm9yYW5nZSwgY29sb3JzLm1hZ2VudGEsIGNvbG9ycy5saWdodEJsdWUsIGNvbG9ycy55ZWxsb3csIGNvbG9ycy5saW1lLCBjb2xvcnMucGluaywgY29sb3JzLmdyYXksIGNvbG9ycy5saWdodEdyYXksIGNvbG9ycy5jeWFuLCBjb2xvcnMucHVycGxlLCBjb2xvcnMuYmx1ZSwgY29sb3JzLmJyb3duLCBjb2xvcnMuZ3JlZW4sIGNvbG9ycy5yZWQsIGNvbG9ycy5ibGFjay4K";
   Module["FS_createDataFile"]("/craftos/rom/help", "colors.txt", decodeBase64(fileData160), true, true, false);
   var fileData161 = "RnVuY3Rpb25zIGluIHRoZSBUZXh0IFV0aWxpdGllcyBBUEk6CnRleHR1dGlscy5zbG93UHJpbnQoIHRleHQgKQp0ZXh0dXRpbHMudGFidWxhdGUoIHRhYmxlLCB0YWJsZTIsIC4uLiApCnRleHR1dGlscy5wYWdlZFRhYnVsYXRlKCB0YWJsZSwgdGFibGUyLCAuLi4gKQp0ZXh0dXRpbHMuZm9ybWF0VGltZSggdGltZSwgYlR3ZW50eUZvdXJIb3VyICkKdGV4dHV0aWxzLnNlcmlhbGl6ZSggdGFibGUgKQp0ZXh0dXRpbHMudW5zZXJpYWxpemUoIHN0cmluZyApCnRleHR1dGlscy5zZXJpYWxpemVKU09OKCB0YWJsZSwgW3VzZU5CVFN0eWxlXSApCnRleHR1dGlscy51cmxFbmNvZGUoIHN0cmluZyApCnRleHR1dGlscy5jb21wbGV0ZSggc3RyaW5nLCB0YWJsZSApCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "textutils.txt", decodeBase64(fileData161), true, true, false);
   var fileData162 = "dHVydGxlIGlzIGFuIGFwaSBhdmFpbGlhYmxlIG9uIFR1cnRsZXMsIHdoaWNoIGNvbnRyb2xzIHRoZWlyIG1vdmVtZW50LgpGdW5jdGlvbnMgaW4gdGhlIFR1cnRsZSBBUEk6CnR1cnRsZS5mb3J3YXJkKCkKdHVydGxlLmJhY2soKQp0dXJ0bGUudXAoKQp0dXJ0bGUuZG93bigpCnR1cnRsZS50dXJuTGVmdCgpCnR1cnRsZS50dXJuUmlnaHQoKQp0dXJ0bGUuc2VsZWN0KCBzbG90TnVtICkKdHVydGxlLmdldFNlbGVjdGVkU2xvdCgpCnR1cnRsZS5nZXRJdGVtQ291bnQoIFtzbG90TnVtXSApCnR1cnRsZS5nZXRJdGVtU3BhY2UoIFtzbG90TnVtXSApCnR1cnRsZS5nZXRJdGVtRGV0YWlsKCBbc2xvdE51bV0gKQp0dXJ0bGUuZXF1aXBMZWZ0KCkKdHVydGxlLmVxdWlwUmlnaHQoKQp0dXJ0bGUuZGlnKCBbdG9vbFNpZGVdICkKdHVydGxlLmRpZ1VwKCBbdG9vbFNpZGVdICkKdHVydGxlLmRpZ0Rvd24oIFt0b29sU2lkZV0gKQp0dXJ0bGUucGxhY2UoKQp0dXJ0bGUucGxhY2VVcCgpCnR1cnRsZS5wbGFjZURvd24oKQp0dXJ0bGUuYXR0YWNrKCBbdG9vbFNpZGVdICkKdHVydGxlLmF0dGFja1VwKCBbdG9vbFNpZGVdICkKdHVydGxlLmF0dGFja0Rvd24oIFt0b29sU2lkZV0gKQp0dXJ0bGUuZGV0ZWN0KCkKdHVydGxlLmRldGVjdFVwKCkKdHVydGxlLmRldGVjdERvd24oKQp0dXJ0bGUuY29tcGFyZSgpCnR1cnRsZS5jb21wYXJlVXAoKQp0dXJ0bGUuY29tcGFyZURvd24oKQp0dXJ0bGUuaW5zcGVjdCgpCnR1cnRsZS5pbnNwZWN0VXAoKQp0dXJ0bGUuaW5zcGVjdERvd24oKQp0dXJ0bGUuY29tcGFyZVRvKCBzbG90TnVtICkKdHVydGxlLnRyYW5zZmVyVG8oIHNsb3ROdW0sIFtxdWFudGl0eV0gKQp0dXJ0bGUuZHJvcCggW3F1YW50aXR5XSApCnR1cnRsZS5kcm9wVXAoIFtxdWFudGl0eV0gKQp0dXJ0bGUuZHJvcERvd24oIFtxdWFudGl0eV0gKQp0dXJ0bGUuc3VjayggW3F1YW50aXR5XSApCnR1cnRsZS5zdWNrVXAoIFtxdWFudGl0eV0gKQp0dXJ0bGUuc3Vja0Rvd24oIFtxdWFudGl0eV0gKQp0dXJ0bGUuZ2V0RnVlbExldmVsKCkKdHVydGxlLmdldEZ1ZWxMaW1pdCgpCnR1cnRsZS5yZWZ1ZWwoIFtxdWFudGl0eV0gKQp0dXJ0bGUuY3JhZnQoIFtxdWFudGl0eV0gKSAocmVxdWlyZXMgQ3JhZnR5IFR1cnRsZSkKCkV2ZW50cyBmaXJlZCBieSB0aGUgVHVydGxlIEFQSToKInR1cnRsZV9pbnZlbnRvcnkiIHdoZW4gYW55IG9mIHRoZSBpdGVtcyBpbiB0aGUgaW52ZW50b3J5IGFyZSBjaGFuZ2VkLiBVc2UgY29tcGFyaXNvbiBvcGVyYXRpb25zIHRvIGluc3BlY3QgdGhlIGNoYW5nZXMuCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "turtle.txt", decodeBase64(fileData162), true, true, false);
   var fileData163 = "Z3BzIGNhbiBiZSB1c2VkIHRvIGhvc3QgYSBHUFMgc2VydmVyLCBvciB0byBkZXRlcm1pbmUgYSBwb3NpdGlvbiB1c2luZyB0cmlsYXRlcmF0aW9uLgpUeXBlICJoZWxwIGdwc2FwaSIgZm9yIGhlbHAgdXNpbmcgR1BTIGZ1bmN0aW9ucyBpbiBsdWEgcHJvZ3JhbXMuCgpleDoKImdwcyBsb2NhdGUiIHdpbGwgY29ubmVjdCB0byBuZWFyYnkgR1BTIHNlcnZlcnMsIGFuZCB0cnkgdG8gZGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiB0aGUgY29tcHV0ZXIgb3IgdHVydGxlLgoiZ3BzIGhvc3QiIHdpbGwgdHJ5IHRvIGRldGVybWluZSB0aGUgcG9zaXRpb24sIGFuZCBob3N0IGEgR1BTIHNlcnZlciBpZiBzdWNjZXNzZnVsLgoiZ3BzIGhvc3QgMTAgMjAgMzAiIHdpbGwgaG9zdCBhIEdQUyBzZXJ2ZXIsIHVzaW5nIHRoZSBtYW51YWxseSBlbnRlcmVkIHBvc2l0aW9uIDEwLDIwLDMwLgoKVGFrZSBjYXJlIHdoZW4gbWFudWFsbHkgZW50ZXJpbmcgaG9zdCBwb3NpdGlvbnMuIElmIHRoZSBwb3NpdGlvbnMgZW50ZXJlZCBpbnRvIG11bHRpcGxlIEdQUyBob3N0cwphcmUgbm90IGNvbnNpc3RlbnQsIHRoZSByZXN1bHRzIG9mIGxvY2F0ZSBjYWxscyB3aWxsIGJlIGluY29ycmVjdC4K";
   Module["FS_createDataFile"]("/craftos/rom/help", "gps.txt", decodeBase64(fileData163), true, true, false);
   var fileData164 = "VGhlIGtleXMgQVBJIGNvbnRhaW5zIGNvbnN0YW50cyBmb3IgYWxsIHRoZSBrZXkgY29kZXMgdGhhdCBjYW4gYmUgcmV0dXJuZWQgYnkgdGhlICJrZXkiIGV2ZW50OgoKRXhhbXBsZSB1c2FnZToKbG9jYWwgc0V2ZW50LCBuS2V5ID0gb3MucHVsbEV2ZW50KCkKaWYgc0V2ZW50ID09ICJrZXkiIGFuZCBuS2V5ID09IGtleXMuZW50ZXIgdGhlbgogICAtLSBEbyBzb21ldGhpbmcKZW5kCgpTZWUgaHR0cDovL3d3dy5taW5lY3JhZnR3aWtpLm5ldC93aWtpL0tleV9jb2Rlcywgb3IgdGhlIHNvdXJjZSBjb2RlLCBmb3IgYSBjb21wbGV0ZSByZWZlcmVuY2UuCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "keys.txt", decodeBase64(fileData164), true, true, false);
   var fileData165 = "dHlwZSBkZXRlcm1pbmVzIHRoZSB0eXBlIG9mIGEgZmlsZSBvciBkaXJlY3RvcnkuIFByaW50cyAiZmlsZSIsICJkaXJlY3RvcnkiIG9yICJkb2VzIG5vdCBleGlzdCIuCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "type.txt", decodeBase64(fileData165), true, true, false);
   var fileData166 = "cG9ja2V0IGlzIGFuIEFQSSBhdmFpbGFibGUgb24gcG9ja2V0IGNvbXB1dGVycywgd2hpY2ggYWxsb3dzIG1vZGlmeWluZyBpdHMgdXBncmFkZXMuCkZ1bmN0aW9ucyBpbiB0aGUgcG9ja2V0IEFQSToKcG9ja2V0LmVxdWlwQmFjaygpCnBvY2tldC51bmVxdWlwQmFjaygpCgpXaGVuIGVxdWlwcGluZyB1cGdyYWRlcywgaXQgd2lsbCBzZWFyY2ggeW91ciBpbnZlbnRvcnkgZm9yIGEgc3VpdGFibGUgdXBncmFkZSwgc3RhcnRpbmcgaW4gdGhlIHNlbGVjdGVkIHNsb3QuIElmIG9uZSBjYW5ub3QgYmUgZm91bmQgdGhlbiBpdCB3aWxsIGNoZWNrIHlvdXIgb2ZmaGFuZC4K";
   Module["FS_createDataFile"]("/craftos/rom/help", "pocket.txt", decodeBase64(fileData166), true, true, false);
   var fileData167 = "WW91J3ZlIHBsYXllZCBpdCBpbiB0aGUgYXJjYWRlcywgbm93IGV4cGVyaWVuY2UgdGhlIGhpZ2gtb2N0YW5lIHRocmlsbHMgb2YgdGhlIGhpdCBnYW1lICJXT1JNISIgb24geW91ciBob21lIGNvbXB1dGVyISBPbmx5IG9uIENyYWZ0T1MhCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "worm.txt", decodeBase64(fileData167), true, true, false);
   var fileData168 = "VGhlIG1vdW50IGNvbW1hbmQgYWxsb3dzIG1vdW50aW5nIGV4dGVybmFsIGRpcmVjdG9yaWVzIGluc2lkZSB0aGUgQ3JhZnRPUyBlbnZpcm9ubWVudC4KVG8gbW91bnQgYSBkaXJlY3RvcnksIHNwZWNpZnkgdGhlIGRpcmVjdG9yeSB0byBtb3VudCBhdCBpbnNpZGUgQ3JhZnRPUywgYW5kIHRoZSBwYXRoIHRvIHRoZSBkaXJlY3RvcnkgdG8gbW91bnQuCllvdSBjYW4gYWxzbyBzcGVjaWZ5IHdoZXRoZXIgdGhlIG1vdW50IHNob3VsZCBiZSByZWFkLW9ubHkgYnkgYWRkaW5nICJyZWFkT25seSIsICJ0cnVlIiwgb3IgImZhbHNlIiB0byB0aGUgZW5kIG9mIHRoZSBjb21tYW5kLgooVGhlIHJlYWQtb25seSBzdGF0dXMgbWF5IGJlIGFmZmVjdGVkIGJ5IHRoZSBgbW91bnRfbW9kZWAgY29uZmlnIG9wdGlvbi4p";
   Module["FS_createDataFile"]("/craftos/rom/help", "mount.txt", decodeBase64(fileData168), true, true, false);
   var fileData169 = "RnVuY3Rpb25zIGluIHRoZSBTZXR0aW5ncyBBUEk6CnNldHRpbmdzLmdldCggbmFtZSwgW2RlZmF1bHRdICkKc2V0dGluZ3Muc2V0KCBuYW1lLCB2YWx1ZSApCnNldHRpbmdzLnVuc2V0KCBuYW1lICkKc2V0dGluZ3MubG9hZCggcGF0aCApCnNldHRpbmdzLnNhdmUoIHBhdGggKQpzZXR0aW5ncy5jbGVhcigpCnNldHRpbmdzLmdldE5hbWVzKCkKCkRlZmF1bHQgU2V0dGluZ3M6CnNoZWxsLmF1dG9jb21wbGV0ZSAtIGVuYWJsZXMgYXV0by1jb21wbGV0aW9uIGluIHRoZSBTaGVsbC4KbHVhLmF1dG9jb21wbGV0ZSAtIGVuYWJsZXMgYXV0by1jb21wbGV0aW9uIGluIHRoZSBMdWEgcHJvZ3JhbS4KZWRpdC5hdXRvY29tcGxldGUgLSBlbmFibGVzIGF1dG8tY29tcGxldGlvbiBpbiB0aGUgRWRpdCBwcm9ncmFtLgplZGl0LmRlZmF1bHRfZXh0ZW5zaW9uIC0gc2V0cyB0aGUgZGVmYXVsdCBmaWxlIGV4dGVuc2lvbiBmb3IgZmlsZXMgY3JlYXRlZCB3aXRoIHRoZSBFZGl0IHByb2dyYW0KcGFpbnQuZGVmYXVsdF9leHRlbnNpb24gLSBzZXRzIHRoZSBkZWZhdWx0IGZpbGUgZXh0ZW5zaW9uIGZvciBmaWxlcyBjcmVhdGVkIHdpdGggdGhlIFBhaW50IHByb2dyYW0KYmlvcy51c2VfbXVsdGlzaGVsbCAtIGVuYWJsZXMgTXVsdGlzaGVsbCBvbiBBZHZhbmNlZCBDb21wdXRlcnMsIFR1cnRsZXMsIFBvY2tldCBDb21wdXRlcnMgYW5kIENvbW1hbmQgQ29tcHV0ZXJzLgpzaGVsbC5hbGxvd19kaXNrX3N0YXJ0dXAgLSBpZiBhIERpc2sgRHJpdmUgd2l0aCBhIERpc2sgaW5zaWRlIHRoYXQgaGFzIGEgJ3N0YXJ0dXAnIHNjcmlwdCBpcyBhdHRhY2hlZCB0byBhIGNvbXB1dGVyLCB0aGlzIHNldHRpbmcgYWxsb3dzIHRvIGF1dG9tYXRpY2FsbHkgcnVuIHRoYXQgc2NyaXB0IHdoZW4gdGhlIGNvbXB1dGVyIHN0YXJ0cy4Kc2hlbGwuYWxsb3dfc3RhcnR1cCAtIGlmIHRoZXJlIGlzIGEgJ3N0YXJ0dXAnIHNjcmlwdCBpbiBhIGNvbXB1dGVyJ3Mgcm9vdCwgdGhpcyBzZXR0aW5nIGFsbG93IHRvIGF1dG9tYXRpY2FsbHkgcnVuIHRoYXQgc2NyaXB0IHdoZW4gdGhlIGNvbXB1dGVyIHJ1bnMuCmxpc3Quc2hvd19oaWRkZW4gLSBkZXRlcm1pbmVzLCB3aGV0aGVyIHRoZSBMaXN0IHByb2dyYW0gd2lsbCBsaXN0IGhpZGRlbiBmaWxlcyBvciBub3QuCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "settings.txt", decodeBase64(fileData169), true, true, false);
   var fileData170 = "V2lyZWQgYW5kIFdpcmVsZXNzIE1vZGVtcyBhcmUgcGVyaXBoZXJhbCBkZXZpY2VzIGF2YWlsYWJsZSBmb3IgQ3JhZnRPUy4gVHlwZSAiaGVscCBwZXJpcGhlcmFsIiB0byBsZWFybiBhYm91dCB1c2luZyB0aGUgUGVyaXBoZXJhbCBBUEkgdG8gY29ubmVjdCB3aXRoIHBlcmlwaGVyYWxzLiBXaGVuIGEgTW9kZW0gaXMgY29ubmVjdGVkLCBwZXJpcGhlcmFsLmdldFR5cGUoKSB3aWxsIHJldHVybiAibW9kZW0iLgoKTWV0aG9kcyBleHBvc2VkIGJ5IE1vZGVtczoKb3BlbiggY2hhbm5lbCApCmlzT3BlbiggY2hhbm5lbCApCmNsb3NlKCBjaGFubmVsICkKY2xvc2VBbGwoKQp0cmFuc21pdCggY2hhbm5lbCwgcmVwbHlDaGFubmVsLCBtZXNzYWdlICkKaXNXaXJlbGVzcygpCgpFdmVudHMgZmlyZWQgYnkgTW9kZW1zOgoibW9kZW1fbWVzc2FnZSIgd2hlbiBhIG1lc3NhZ2UgaXMgcmVjZWl2ZWQgb24gYW4gb3BlbiBjaGFubmVsLiBBcmd1bWVudHMgYXJlIG5hbWUsIGNoYW5uZWwsIHJlcGx5Q2hhbm5lbCwgbWVzc2FnZSwgZGlzdGFuY2UK";
   Module["FS_createDataFile"]("/craftos/rom/help", "modems.txt", decodeBase64(fileData170), true, true, false);
   var fileData171 = "dGltZSBwcmludHMgdGhlIGN1cnJlbnQgdGltZSBvZiBkYXkuCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "time.txt", decodeBase64(fileData171), true, true, false);
   var fileData172 = "cmVib290IHdpbGwgdHVybiB0aGUgY29tcHV0ZXIgb2ZmIGFuZCBvbiBhZ2Fpbi4KWW91IGNhbiBhbHNvIGhvbGQgQ3RybCtSIGF0IGFueSB0aW1lIHRvIHF1aWNrbHkgcmVib290Lgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "reboot.txt", decodeBase64(fileData172), true, true, false);
   var fileData173 = "YXBpcyBsaXN0cyB0aGUgY3VycmVudGx5IGxvYWRlZCBBUElzIGF2YWlsYWJsZSB0byBwcm9ncmFtcyBpbiBDcmFmdE9TLgoKVHlwZSAiaGVscCA8YXBpPiIgdG8gc2VlIGhlbHAgZm9yIGEgc3BlY2lmaWMgYXBpLgpDYWxsIG9zLmxvYWRBUEkoIHBhdGggKSB0byBsb2FkIGV4dHJhIGFwaXMuCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "apis.txt", decodeBase64(fileData173), true, true, false);
   var fileData174 = "c2hlbGwgaXMgdGhlIHRvcGxldmVsIHByb2dyYW0gd2hpY2ggaW50ZXJwcmV0cyBjb21tYW5kcyBhbmQgcnVucyBwcm9ncmFtLgpUeXBlICJoZWxwIHNoZWxsYXBpIiBmb3IgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHNoZWxsIGx1YSBhcGkuCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "shell.txt", decodeBase64(fileData174), true, true, false);
   var fileData175 = "Q3JhZnRPUy1QQyBpbmNsdWRlcyBhIGZldyBkZW1vIHByb2dyYW1zIHRvIHNob3cgb2ZmIHRoZSBuZXcgZmVhdHVyZXMgaW4gQ3JhZnRPUy1QQy4KKiBnZnhwYWludCBpcyBhIHNpbXBsZSBkcmF3aW5nIHByb2dyYW0gdGhhdCB1c2VzIGdyYXBoaWNzIG1vZGUgZm9yIGhpZ2hlciByZXNvbHV0aW9uIHBpY3R1cmVzLiAoSXQgZG9lcyBub3Qgc3VwcG9ydCBzYXZpbmcgYXQgdGhlIG1vbWVudC4pCiogcG5ndmlldyBhbGxvd3Mgdmlld2luZyBQTkcgZmlsZXMgdGhhdCBoYXZlIDI1NiBjb2xvcnMgb3IgZmV3ZXIuCiogcmF5Y2FzdCBkZW1vbnN0cmF0ZXMgM0QgcmVuZGVyaW5nIHVzaW5nIHJheS1jYXN0aW5nIHRvIGRyYXcgYW4gaW1hZ2UuIChUaGUgY29kZSB3YXMgYWRhcHRlZCBmcm9tIGEgcHJvZ3JhbSBmb3IgVEkgY2FsY3VsYXRvcnMuKQoqIHNjcmVlbmZldGNoIGRpc3BsYXlzIGluZm8gYWJvdXQgdGhlIGN1cnJlbnQgc3lzdGVtIGFuZCB0YWtlcyBhIHNjcmVlbnNob3Qu";
   Module["FS_createDataFile"]("/craftos/rom/help", "demos.txt", decodeBase64(fileData175), true, true, false);
   var fileData176 = "cmVuYW1lIHJlbmFtZXMgYSBmaWxlIG9yIGRpcmVjdG9yeS4KCmV4OgoicmVuYW1lIGZvbyBiYXIiIHJlbmFtZXMgdGhlIGZpbGUgImZvbyIgdG8gImJhciIuCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "rename.txt", decodeBase64(fileData176), true, true, false);
   var fileData177 = "VGhlIE1vbml0b3IgaXMgYSBwZXJpcGhlcmFsIGRldmljZSBhdmFpbGFibGUgZm9yIENyYWZ0T1MuIFR5cGUgImhlbHAgcGVyaXBoZXJhbCIgdG8gbGVhcm4gYWJvdXQgdXNpbmcgdGhlIFBlcmlwaGVyYWwgQVBJIHRvIGNvbm5lY3Qgd2l0aCBwZXJpcGhlcmFscy4gV2hlbiBhIE1vbml0b3IgaXMgY29ubmVjdGVkLCBwZXJpcGhlcmFsLmdldFR5cGUoKSB3aWxsIHJldHVybiAibW9uaXRvciIuIEEgd3JhcHBlZCBtb25pdG9yIGNhbiBiZSB1c2VkIHdpdGggdGVybS5yZWRpcmVjdCgpIHRvIHNlbmQgYWxsIHRlcm1pbmFsIG91dHB1dCB0byB0aGUgbW9uaXRvci4KCk1ldGhvZHMgZXhwb3NlZCBieSB0aGUgTW9uaXRvcjoKd3JpdGUoIHRleHQgKQpibGl0KCB0ZXh0LCB0ZXh0Q29sb3IsIGJhY2tncm91bmRDb2xvciApCmNsZWFyKCkKY2xlYXJMaW5lKCkKZ2V0Q3Vyc29yUG9zKCkKc2V0Q3Vyc29yUG9zKCB4LCB5ICkKc2V0Q3Vyc29yQmxpbmsoIGJsaW5rICkKaXNDb2xvcigpCnNldFRleHRDb2xvciggY29sb3IgKQpzZXRCYWNrZ3JvdW5kQ29sb3IoIGNvbG9yICkKZ2V0VGV4dENvbG9yKCkKZ2V0QmFja2dyb3VuZENvbG9yKCkKZ2V0U2l6ZSgpCnNjcm9sbCggbiApCnNldFBhbGV0dGVDb2xvciggY29sb3IsIHIsIGcsIGIgKQpnZXRQYWxldHRlQ29sb3IoIGNvbG9yICkKCkV2ZW50cyBmaXJlZCBieSB0aGUgTW9uaXRvcjoKIm1vbml0b3JfdG91Y2giIHdoZW4gYW4gQWR2YW5jZWQgTW9uaXRvciBpcyB0b3VjaGVkIGJ5IHRoZSBwbGF5ZXIuIEFyZ3VtZW50cyBhcmUgbmFtZSwgeCwgeQoibW9uaXRvcl9yZXNpemUiIHdoZW4gdGhlIHNpemUgb2YgYSBNb25pdG9yIGNoYW5nZXMuIEFyZ3VtZW50IGlzIHRoZSBuYW1lIG9mIHRoZSBtb25pdG9yLgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "monitors.txt", decodeBase64(fileData177), true, true, false);
   var fileData178 = "Y2FzaCBpcyBhbiBhbHRlcm5hdGUgc2hlbGwgZm9yIENvbXB1dGVyQ3JhZnQgdGhhdCB1c2VzIGEgQm91cm5lLWxpa2UgaW50ZXJmYWNlLgpUbyBydW4gaW5zdGVhZCBvZiBzaGVsbC5sdWEsIHNldCB0aGUgYmlvcy51c2VfY2FzaCBzZXR0aW5nIGFuZCBkaXNhYmxlIHRoZSBiaW9zLnVzZV9tdWx0aXNoZWxsIHNldHRpbmcuCiMjIEZlYXR1cmVzCiogQmFzaC9zaC1zdHlsZSBjb21tYW5kIGxpbmUKKiBUYWIgY29tcGxldGlvbiAoZGVmYXVsdGluZyB0byBmaWxlIG5hbWVzIHdoZXJlIG5vdCBzdXBwb3J0ZWQpCiogQ3VzdG9taXphYmxlIHByb21wdHMgKGluY2x1ZGluZyBBTlNJIHN1cHBvcnQpCiogTG9jYWwgJiBlbnZpcm9ubWVudCB2YXJpYWJsZXMKKiBBcmd1bWVudCBxdW90aW5nCiogTXVsdGlwbGUgY29tbWFuZHMgb24gb25lIGxpbmUgd2l0aCBzZW1pY29sb25zCiogTWFueSBidWlsdC1pbiBmdW5jdGlvbnMgKGluY2x1ZGluZyBpbi1saW5lIEx1YSBjb21tYW5kcykKKiBBcml0aG1ldGljIGV4cGFuc2lvbgoqIElmLCB3aGlsZSwgZm9yIHN0YXRlbWVudHMKKiBGdW5jdGlvbiBzdXBwb3J0CiogU2hlbGwgc2NyaXB0aW5nL3NoZWJhbmdzCiogQmFja2dyb3VuZCBqb2JzCiogcmMgZmlsZXMKKiBSZXN0b3JhYmxlIGhpc3RvcnkKKiBKb2IgY29udHJvbCwgcGF1c2luZwoqIFBhcnRpYWwgQ0NLZXJuZWwyIHN1cHBvcnQKKiBGdWxsIGNvbXBhdGliaWxpdHkgd2l0aCBDcmFmdE9TIHNoZWxsLmx1YQojIyMgTWlzc2luZyBmZWF0dXJlcwoqIEJhY2t0aWNrL2NvbW1hbmQgc3Vic3RpdHV0aW9uCiogUGlwZXMvY29uc29sZSByZWRpcmVjdGlvbi9oZXJlIGRvY3VtZW50cw==";
   Module["FS_createDataFile"]("/craftos/rom/help", "cash.txt", decodeBase64(fileData178), true, true, false);
   var fileData179 = "Q3JhZnRPUy1QQyB3YXMgY3JlYXRlZCBieSBKYWNrTWFjV2luZG93cy4KQ29tcHV0ZXJDcmFmdCB3YXMgY3JlYXRlZCBieSBEYW5pZWwgImRhbjIwMCIgUmF0Y2xpZmZlLCB3aXRoIGFkZGl0aW9uYWwgY29kZSBieSBBYXJvbiAiQ2xvdWR5IiBNaWxscy4KQ0M6IFR3ZWFrZWQgd2FzIGNyZWF0ZWQgYnkgU3F1aWREZXYgYXMgYSBmb3JrIG9mIENvbXB1dGVyQ3JhZnQuClRoYW5rcyB0byBuaXRyb2dlbmZpbmdlcnMsIEdvcGhlckFUTCBhbmQgUmFtaUxlZ28gZm9yIHByb2dyYW0gY29udHJpYnV0aW9ucy4KVGhhbmtzIHRvIEV2ZXJ5T1MgZm9yIHNlbmRpbmcgbWUgYSBwYXRjaGVkIHZlcnNpb24gb2YgTHVhIHRoYXQgZmluYWxseSBmaXhlZCBpc3N1ZSAjMS4KCkpvaW4gdGhlIENvbXB1dGVyQ3JhZnQgY29tbXVuaXR5IG9ubGluZSBhdCBodHRwOi8vd3d3LmNvbXB1dGVyY3JhZnQuY2MuCgpUbyBoZWxwIGNvbnRyaWJ1dGUgdG8gQ3JhZnRPUy1QQywgYnJvd3NlIHRoZSBzb3VyY2UgY29kZSBhdCBodHRwczovL2dpdGh1Yi5jb20vTUNKYWNrMTIzL2NyYWZ0b3MyLgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "credits.txt", decodeBase64(fileData179), true, true, false);
   var fileData180 = "ZWRpdCBpcyBhIHRleHQgZWRpdG9yIGZvciBjcmVhdGluZyBvciBtb2RpZnlpbmcgcHJvZ3JhbXMgb3IgdGV4dCBmaWxlcy4gQWZ0ZXIgY3JlYXRpbmcgYSBwcm9ncmFtIHdpdGggZWRpdCwgdHlwZSBpdHMgZmlsZW5hbWUgaW4gdGhlIHNoZWxsIHRvIHJ1biBpdC4gWW91IGNhbiBvcGVuIGFueSBvZiB0aGUgYnVpbHRpbiBwcm9ncmFtcyB3aXRoIGVkaXQgdG8gbGVhcm4gaG93IHRvIHByb2dyYW0uCgpleDoKImVkaXQgaGVsbG8iIG9wZW5zIGEgZmlsZSBjYWxsZWQgImhlbGxvIiBmb3IgZWRpdGluZy4K";
   Module["FS_createDataFile"]("/craftos/rom/help", "edit.txt", decodeBase64(fileData180), true, true, false);
   var fileData181 = "RnVuY3Rpb25zIGluIHRoZSBvcyAoT3BlcmF0aW5nIFN5c3RlbSkgQVBJOgpvcy52ZXJzaW9uKCkKb3MuZ2V0Q29tcHV0ZXJJRCgpCm9zLmdldENvbXB1dGVyTGFiZWwoKQpvcy5zZXRDb21wdXRlckxhYmVsKCkKb3MucnVuKCBlbnZpcm9ubWVudCwgcHJvZ3JhbXBhdGgsIGFyZ3VtZW50cyApCm9zLmxvYWRBUEkoIHBhdGggKQpvcy51bmxvYWRBUEkoIG5hbWUgKQpvcy5wdWxsRXZlbnQoIFtmaWx0ZXJdICkKb3MucXVldWVFdmVudCggZXZlbnQsIGFyZ3VtZW50cyApCm9zLmNsb2NrKCkKb3Muc3RhcnRUaW1lciggdGltZW91dCApCm9zLmNhbmNlbFRpbWVyKCB0b2tlbiApCm9zLnNsZWVwKCB0aW1lb3V0ICkKb3MudGltZSggW3NvdXJjZV0gKQpvcy5kYXkoIFtzb3VyY2VdICkKb3MuZXBvY2goIFtzb3VyY2VdICkKb3Muc2V0QWxhcm0oIHRpbWUgKQpvcy5jYW5jZWxBbGFybSggdG9rZW4gKQpvcy5zaHV0ZG93bigpCm9zLnJlYm9vdCgpCm9zLmFib3V0KCkKCkV2ZW50cyBlbWl0dGVkIGJ5IHRoZSBvcyBBUEk6CiJ0aW1lciIgd2hlbiBhIHRpbWVvdXQgc3RhcnRlZCBieSBvcy5zdGFydFRpbWVyKCkgY29tcGxldGVzLiBBcmd1bWVudCBpcyB0aGUgdG9rZW4gcmV0dXJuZWQgYnkgb3Muc3RhcnRUaW1lcigpLgoiYWxhcm0iIHdoZW4gYSB0aW1lIHBhc3NlZCB0byBvcy5zZXRBbGFybSgpIGlzIHJlYWNoZWQuIEFyZ3VtZW50IGlzIHRoZSB0b2tlbiByZXR1cm5lZCBieSBvcy5zZXRBbGFybSgpLgpUeXBlICJoZWxwIGV2ZW50cyIgdG8gbGVhcm4gYWJvdXQgdGhlIGV2ZW50IHN5c3RlbS4K";
   Module["FS_createDataFile"]("/craftos/rom/help", "os.txt", decodeBase64(fileData181), true, true, false);
   var fileData182 = "dHVybiBpcyBhIHByb2dyYW0gZm9yIFR1cnRsZXMsIHVzZWQgdG8gdHVybiB0aGUgdHVydGxlIGFyb3VuZCB3aXRob3V0IHByb2dyYW1taW5nLiBJdCBhY2NlcHRzIG9uZSBvciBtb3JlIGNvbW1hbmRzIGFzIGEgZGlyZWN0aW9uIGFuZCBhIG51bWJlciBvZiB0dXJucy4gVGhlICJnbyIgcHJvZ3JhbSBjYW4gYWxzbyBiZSB1c2VkIGZvciB0dXJuaW5nLgoKZXg6CiJ0dXJuIGxlZnQiIHR1cm5zIHRoZSB0dXJ0bGUgOTAgZGVncmVlcyBsZWZ0LgoidHVybiByaWdodCAyIiB0dXJucyB0aGUgdHVydGxlIDE4MCBkZWdyZWVzIHJpZ2h0LgoidHVybiBsZWZ0IDIgcmlnaHQiIHR1cm5zIGxlZnQgMTgwIGRlZ3JlZXMsIHRoZW4gcmlnaHQgOTAgZGVncmVlcy4K";
   Module["FS_createDataFile"]("/craftos/rom/help", "turn.txt", decodeBase64(fileData182), true, true, false);
   var fileData183 = "d2dldCBpcyBhIHByb2dyYW0gZm9yIGRvd25sb2FkaW5nIGZpbGVzIGZyb20gdGhlIGludGVybmV0LiBUaGlzIGlzIHVzZWZ1bCBmb3IgZG93bmxvYWRpbmcgcHJvZ3JhbXMgY3JlYXRlZCBieSBvdGhlciBwbGF5ZXJzLgpJZiBubyBmaWxlbmFtZSBpcyBzcGVjaWZpZWQgd2dldCB3aWxsIHRyeSB0byBkZXRlcm1pbmUgdGhlIGZpbGVuYW1lIGZyb20gdGhlIFVSTCBieSBzdHJpcHBpbmcgYW55IGFuY2hvcnMsIHBhcmFtZXRlcnMgYW5kIHRyYWlsaW5nIHNsYXNoZXMgYW5kIHRoZW4gdGFraW5nIGV2ZXJ5dGhpbmcgcmVtYWluaW5nIGFmdGVyIHRoZSBsYXN0IHNsYXNoLgpUaGUgSFRUUCBBUEkgbXVzdCBiZSBlbmFibGVkIGluIENvbXB1dGVyQ3JhZnQuY2ZnIHRvIHVzZSB0aGlzIHByb2dyYW0uCmV4Ogoid2dldCBodHRwOi8vcGFzdGViaW4uY29tL3Jhdy9DeGFXbVByWCB0ZXN0IiB3aWxsIGRvd25sb2FkIHRoZSBmaWxlIGZyb20gdGhlIFVSTCBodHRwOi8vcGFzdGViaW4uY29tL3Jhdy9DeGFXbVByWCwgYW5kIHNhdmUgaXQgYXMgInRlc3QiLgoid2dldCBodHRwOi8vZXhhbXBsZS5vcmcvdGVzdC5sdWEvP2Zvbz1iYXIjcXp1IiB3aWxsIGRvd25sb2FkIHRoZSBmaWxlIGZyb20gdGhlIFVSTCBodHRwOi8vZXhhbXBsZS5vcmcvdGVzdC5sdWEvP2Zvbz1iYXIjcXp1IGFuZCBzYXZlIGl0IGFzICJ0ZXN0Lmx1YSIKIndnZXQgaHR0cDovL2V4YW1wbGUub3JnLyIgd2lsbCBkb3dubG9hZCB0aGUgZmlsZSBmcm9tIHRoZSBVUkwgaHR0cDovL2V4YW1wbGUub3JnIGFuZCBzYXZlIGl0IGFzICJleGFtcGxlLm9yZyIKIndnZXQgcnVuIGh0dHA6Ly9wYXN0ZWJpbi5jb20vcmF3L0N4YVdtUHJYIiB3aWxsIGRvd25sb2FkIHRoZSBmaWxlIGZyb20gdGhlIFVSTCBodHRwOi8vcGFzdGViaW4uY29tL3Jhdy9DeGFXbVByWCBhbmQgcnVuIGl0IGltbWVkaWF0ZWx5Lgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "wget.txt", decodeBase64(fileData183), true, true, false);
   var fileData184 = "TmV3IEZlYXR1cmVzIGluIENyYWZ0T1MtUEMgdjIuNi4zOgoKKiBVcGRhdGVkIENDOlQgdmVyc2lvbiB0byAxLjk5LjEKICAqIFBlcmlwaGVyYWxzIGNhbiBub3cgaGF2ZSBtdWx0aXBsZSB0eXBlcy4gYHBlcmlwaGVyYWwuZ2V0VHlwZWAgbm93IHJldHVybnMgbXVsdGlwbGUgdmFsdWVzLCBhbmQgYHBlcmlwaGVyYWwuaGFzVHlwZWAgY2hlY2tzIGlmIGEgcGVyaXBoZXJhbCBoYXMgYSBzcGVjaWZpYyB0eXBlLgogICogQWRkIGZlYXR1cmUgaW50cm9kdWN0aW9uL2NoYW5nZWQgdmVyc2lvbiBpbmZvcm1hdGlvbiB0byB0aGUgZG9jdW1lbnRhdGlvbi4gKE1DSmFjazEyMykKICAqIFJlZG5ldCBjYW4gbm93IGhhbmRsZSBjb21wdXRlciBJRHMgbGFyZ2VyIHRoYW4gNjU1MzUuIChBbGUzMmJpdCkKICAqIE9wdGltaXNlIHBlcmlwaGVyYWwgY2FsbHMgaW4gYHJlZG5ldC5ydW5gLiAoeEFuYXZyaW5zKQogICogQWRkIGBjYy5wcmV0dHkucHJldHR5X3ByaW50YCBoZWxwZXIgZnVuY3Rpb24gKEx1cHVzNTkwKS4KICAqIEZpeCBgdGV4dHV0aWxzLnNlcmlhbGl6ZWAgbm90IHNlcmlhbGlzaW5nIGluZmluaXR5IGFuZCBuYW4gdmFsdWVzLiAoV29qYmllKQogICogQWRkIGBwYWNrYWdlLnNlYXJjaHBhdGhgIHRvIHRoZSBgY2MucmVxdWlyZWAgQVBJLiAoTUNKYWNrMTIzKQoqIEJ1bXBlZCBzdHJ1Y3R1cmUgdmVyc2lvbiB0byA3CiAgKiBOZXcgZmllbGRzIGluIGBDb21wdXRlcmA6CiAgICAqIGBzaG91bGREZWxldGVEZWJ1Z2dlcmAKICAqIE5ldyBmaWVsZHMgaW4gYHBlcmlwaGVyYWxgOgogICAgKiBgZ2V0VHlwZXNgCiogQWRkZWQgYWJpbGl0eSB0byBzZXQgcHJpbnRlciBpbmsgY29sb3IKKiBBZGRlZCBzdXBwb3J0IGZvciBoZXhhZGVjaW1hbCBmbG9hdGluZy1wb2ludCBudW1iZXJzCiogVW53cml0YWJsZSBkYXRhIGRpcmVjdG9yaWVzIG5vdyB0aHJvdyBhbiBlcnJvcgoqIERlZmF1bHQgcGVyaXBoZXJhbHMgbm93IHRocm93IGFuIGVycm9yIHdoZW4gY2FsbGluZyBhIG1ldGhvZCB0aGF0IGRvZXNuJ3QgZXhpc3QKKiBUZXJtaW5hbCBmcm96ZW4gc3RhdHVzIGlzIG5vdyByZXNldCBhZnRlciByZWJvb3RpbmcKKiBYMTEgYW5kIFdheWxhbmQgbGlicmFyaWVzIGFyZSBubyBsb25nZXIgcmVxdWlyZWQgd2hlbiBidWlsZGluZyBmb3IgTGludXgKKiBgXDBgIGNoYXJhY3RlcnMgaW4gYSBzdHJpbmcgYXJlIG5vdyB0cmVhdGVkIGFzIGEgc3BhY2UgYnkgYGxvYWRgCiogRml4ZWQgd2Vic29ja2V0LnJlY2VpdmUgbm90IGZ1bmN0aW9uaW5nIHByb3Blcmx5CiogRml4ZWQgYGZzLmNvcHlgIHN0b3BwaW5nIGF0IEVPRiBieXRlcyBvbiBXaW5kb3dzICgjMjI2KQoqIEZpeGVkIGhhcmR3YXJlIHJlbmRlcmVyIG5vdCBzaG93aW5nIGFueXRoaW5nIG9uIHNjcmVlbiAoIzIyNykKKiBGaXhlZCBjcmFzaCB3aGVuIHVzaW5nIGBkZXRhY2hgIG9uIGEgZGVidWdnZXIKKiBGaXhlZCBjcmFzaCB3aGVuIGFuIGVycm9yIG9jY3VycyBpbiBgZHJpdmUuaW5zZXJ0RGlza2Agb24gV2luZG93cwoqIEZpeGVkIGNvcm91dGluZSBtZXRhdGFibGUgZ2V0dGluZyBvdmVyd3JpdHRlbiBieSBjb3JvdXRpbmUuY3JlYXRlCiogRml4ZWQgYGtlZXBPcGVuT25TaHV0ZG93bmAgdXNpbmcgMTAwJSBDUFUKKiBGaXhlZCBDdHJsK1Igbm90IHdvcmtpbmcgd2l0aCBga2VlcE9wZW5PblNodXRkb3duYCBhZnRlciB0d28gc3VjY2Vzc2l2ZSByZWJvb3RzCiogRml4ZWQgYGdldEN1cnNvckJsaW5rYCBiZWluZyBtaXNzaW5nIGZyb20gbW9uaXRvcnMKKiBGaXhlZCBtb25pdG9yIGV2ZW50cyBub3Qgd29ya2luZyBwcm9wZXJseSBpbiByYXcgbW9kZQoqIEZpeGVkIGEgcG9zc2libGUgcmFjZSBjb25kaXRpb24gd2hlbiBzaHV0dGluZyBkb3duIG9uIGV4aXQKKiBGaXhlZCByYWNlIGNvbmRpdGlvbiBpbiB0aW1lciBlcmFzdXJlCiogRml4ZWQgdmFyaW91cyBvdGhlciBzbWFsbCByYWNlIGNvbmRpdGlvbnMKClR5cGUgImhlbHAgY2hhbmdlbG9nIiB0byBzZWUgdGhlIGZ1bGwgdmVyc2lvbiBoaXN0b3J5Lgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "whatsnew.md", decodeBase64(fileData184), true, true, false);
   var fileData185 = "VG8gbGVhcm4gdGhlIGx1YSBwcm9ncmFtbWluZyBsYW5ndWFnZSwgdmlzaXQgaHR0cDovL2x1YS11c2Vycy5vcmcvd2lraS9UdXRvcmlhbERpcmVjdG9yeS4KClRvIGV4cGVyaW1lbnQgd2l0aCBsdWEgaW4gQ3JhZnRPUywgcnVuIHRoZSAibHVhIiBwcm9ncmFtIGFuZCBzdGFydCB0eXBpbmcgY29kZS4KVG8gY3JlYXRlIHByb2dyYW1zLCB1c2UgImVkaXQiIHRvIGNyZWF0ZSBmaWxlcywgdGhlbiB0eXBlIHRoZWlyIG5hbWVzIGluIHRoZSBzaGVsbCB0byBydW4gdGhlbS4gSWYgeW91IG5hbWUgYSBwcm9ncmFtICJzdGFydHVwIiBhbmQgcGxhY2UgaXQgaW4gdGhlIHJvb3Qgb3Igb24gYSBkaXNrIGRyaXZlLCBpdCB3aWxsIHJ1biBhdXRvbWF0aWNhbGx5IHdoZW4gdGhlIGNvbXB1dGVyIHN0YXJ0cy4KClRvIHRlcm1pbmF0ZSBhIHByb2dyYW0gc3R1Y2sgaW4gYSBsb29wLCBob2xkIEN0cmwrVCBmb3IgMSBzZWNvbmQuClRvIHF1aWNrbHkgc2h1dGRvd24gYSBjb21wdXRlciwgaG9sZCBDdHJsK1MgZm9yIDEgc2Vjb25kLgpUbyBxdWlja2x5IHJlYm9vdCBhIGNvbXB1dGVyLCBob2xkIEN0cmwrUiBmb3IgMSBzZWNvbmQuCgpUbyBsZWFybiBhYm91dCB0aGUgcHJvZ3JhbW1pbmcgQVBJcyBhdmFpbGlhYmxlLCB0eXBlICJhcGlzIiBvciAiaGVscCBhcGlzIi4KSWYgeW91IGdldCBzdHVjaywgdmlzaXQgdGhlIGZvcnVtcyBhdCBodHRwOi8vd3d3LmNvbXB1dGVyY3JhZnQuaW5mby8gZm9yIGFkdmljZSBhbmQgdHV0b3JpYWxzLgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "programming.txt", decodeBase64(fileData185), true, true, false);
   var fileData186 = "RnVuY3Rpb25zIGluIHRoZSBkaXNrIEFQSS4gVGhlc2UgZnVuY3Rpb25zIGFyZSBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBkaXNrIGRyaXZlczoKZGlzay5pc1ByZXNlbnQoIGRyaXZlICkKZGlzay5zZXRMYWJlbCggZHJpdmUsIGxhYmVsICkKZGlzay5nZXRMYWJlbCggZHJpdmUgKQpkaXNrLmhhc0RhdGEoIGRyaXZlICkKZGlzay5nZXRNb3VudFBhdGgoIGRyaXZlICkKZGlzay5oYXNBdWRpbyggZHJpdmUgKQpkaXNrLmdldEF1ZGlvVGl0bGUoIGRyaXZlICkKZGlzay5wbGF5QXVkaW8oIGRyaXZlICkKZGlzay5zdG9wQXVkaW8oICkKZGlzay5lamVjdCggZHJpdmUgKQpkaXNrLmdldElEKCBkcml2ZSApCmRpc2suaW5zZXJ0RGlzayggZHJpdmUsIHBhdGggKQoKRXZlbnRzIGZpcmVkIGJ5IHRoZSBkaXNrIEFQSToKImRpc2siIHdoZW4gYSBkaXNrIG9yIG90aGVyIGl0ZW0gaXMgaW5zZXJ0ZWQgaW50byBhIGRpc2sgZHJpdmUuIEFyZ3VtZW50IGlzIHRoZSBuYW1lIG9mIHRoZSBkcml2ZQoiZGlza19lamVjdCIgd2hlbiBhIGRpc2sgaXMgcmVtb3ZlZCBmcm9tIGEgZGlzayBkcml2ZS4gQXJndW1lbnQgaXMgdGhlIG5hbWUgb2YgdGhlIGRyaXZlClR5cGUgImhlbHAgZXZlbnRzIiB0byBsZWFybiBhYm91dCB0aGUgZXZlbnQgc3lzdGVtLgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "disk.txt", decodeBase64(fileData186), true, true, false);
   var fileData187 = "YWxpYXMgYXNzaWducyBzaGVsbCBjb21tYW5kcyB0byBydW4gb3RoZXIgcHJvZ3JhbXMuCgpleDoKImFsaWFzIGRpciBscyIgd2lsbCBtYWtlIHRoZSAiZGlyIiBjb21tYW5kIHJ1biB0aGUgImxzIiBwcm9ncmFtCiJhbGlhcyBkaXIiIHdpbGwgcmVtb3ZlIHRoZSBhbGlhcyBzZXQgb24gImRpciIKImFsaWFzIiB3aWxsIGxpc3QgYWxsIGN1cnJlbnQgYWxpYXNlcy4K";
   Module["FS_createDataFile"]("/craftos/rom/help", "alias.txt", decodeBase64(fileData187), true, true, false);
   var fileData188 = "Y2QgY2hhbmdlcyB0aGUgZGlyZWN0b3J5IHlvdSdyZSBpbi4KCmV4OgoiY2Qgcm9tIiB3aWxsIG1vdmUgdG8gInJvbSIgZm9sZGVyLgoiY2QgLi4iIHdpbGwgbW92ZSB1cCBvbmUgZm9sZGVyLgoiY2QgLyIgd2lsbCBtb3ZlIHRvIHRoZSByb290Lgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "cd.txt", decodeBase64(fileData188), true, true, false);
   var fileData189 = "bWtkaXIgY3JlYXRlcyBhIGRpcmVjdG9yeSBpbiB0aGUgY3VycmVudCBsb2NhdGlvbi4KCmV4OgoibWtkaXIgZm9vIiBjcmVhdGVzIGEgZGlyZWN0b3J5IG5hbWVkICJmb28iLgoibWtkaXIgLi4vZm9vIiBjcmVhdGVzIGEgZGlyZWN0b3J5IG5hbWVkICJmb28iIGluIHRoZSBkaXJlY3RvcnkgYWJvdmUgdGhlIGN1cnJlbnQgZGlyZWN0b3J5Lgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "mkdir.txt", decodeBase64(fileData189), true, true, false);
   var fileData190 = "VGhlIHVubW91bnQgY29tbWFuZCB1bm1vdW50cyBhIHByZXZpb3VzbHkgbW91bnRlZCBkaXJlY3RvcnkuIFRvIHVubW91bnQsIHNwZWNpZnkgdGhlIG1vdW50IHBhdGggaW5zaWRlIENyYWZ0T1MsIGFuZCBpdCB3aWxsIGJlIHVubW91bnRlZC4=";
   Module["FS_createDataFile"]("/craftos/rom/help", "unmount.txt", decodeBase64(fileData190), true, true, false);
   var fileData191 = "RnVuY3Rpb25zIGluIHRoZSBoZWxwIEFQSToKaGVscC5zZXRQYXRoKCBwYXRoICkKaGVscC5sb29rdXAoIHRvcGljICkKaGVscC50b3BpY3MoKQpoZWxwLmNvbXBsZXRlVG9waWMoIHRvcGljICkK";
   Module["FS_createDataFile"]("/craftos/rom/help", "helpapi.txt", decodeBase64(fileData191), true, true, false);
   var fileData192 = "RnVuY3Rpb25zIGluIHRoZSBQYXJhbGxlbCBBUEk6CnBhcmFsbGVsLndhaXRGb3JBbnkoIGZ1bmN0aW9uMSwgZnVuY3Rpb24yLCAuLi4gKQpwYXJhbGxlbC53YWl0Rm9yQWxsKCBmdW5jdGlvbjEsIGZ1bmN0aW9uMiwgLi4uICkKVGhlc2UgbWV0aG9kcyBwcm92aWRlIGFuIGVhc3kgd2F5IHRvIHJ1biBtdWx0aXBsZSBsdWEgZnVuY3Rpb25zIHNpbXVsdGFuZW91c2x5Lgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "parallel.txt", decodeBase64(fileData192), true, true, false);
   var fileData193 = "IkZyb20gUnVzc2lhIHdpdGggRnVuIiBjb21lcyBhIGZ1biwgbmV3LCBzdXNwaWNpb3VzbHktZmFtaWxpYXIgZmFsbGluZyBibG9jayBnYW1lIGZvciBDcmFmdE9TLiBPbmx5IG9uIFBvY2tldCBDb21wdXRlcnMhCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "falling.txt", decodeBase64(fileData193), true, true, false);
   var fileData194 = "U3VyZiB0aGUgcmVkbmV0IHN1cGVyaGlnaHdheSB3aXRoICJjaGF0IiwgdGhlIG5ldHdvcmtlZCBjaGF0IHByb2dyYW0gZm9yIENyYWZ0T1MhIEhvc3QgY2hhdHJvb21zIGFuZCBpbnZpdGUgeW91ciBmcmllbmRzISBSZXF1aXJlcyBhIFdpcmVkIG9yIFdpcmVsZXNzIE1vZGVtIG9uIGVhY2ggY29tcHV0ZXIuIFdoZW4gcnVubmluZyBjaGF0LCB0eXBlICIvaGVscCIgdG8gc2VlIGEgbGlzdCBvZiBhdmFpbGFibGUgY29tbWFuZHMuCgpleDoKImNoYXQgaG9zdCBmb3JnZWNyYWZ0IiB3aWxsIGNyZWF0ZSBhIGNoYXRyb29tIHdpdGggdGhlIG5hbWUgImZvcmdlY3JhZnQiCiJjaGF0IGpvaW4gZm9yZ2VjcmFmdCBkaXJld29sZjIwIiB3aWxsIGNvbm5lY3QgdG8gdGhlIGNoYXRyb29tIHdpdGggdGhlIG5hbWUgImZvcmdlY3JhZnQiLCB1c2luZyB0aGUgbmlja25hbWUgImRpcmV3b2xmMjAiCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "chat.txt", decodeBase64(fileData194), true, true, false);
   var fileData195 = "dGFibGUgaXMgYSBzdGFuZGFyZCBMdWE1LjEgQVBJLgpSZWZlciB0byBodHRwOi8vd3d3Lmx1YS5vcmcvbWFudWFsLzUuMS8gZm9yIG1vcmUgaW5mb3JtYXRpb24uCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "table.txt", decodeBase64(fileData195), true, true, false);
   var fileData196 = "Y3AgY29waWVzIGEgZmlsZSBvciBkaXJlY3RvcnkgZnJvbSBvbmUgbG9jYXRpb24gdG8gYW5vdGhlci4KCmV4OgoiY3Agcm9tIG15cm9tIiBjb3BpZXMgInJvbSIgdG8gIm15cm9tIi4KImNwIHJvbSBteXN0dWZmL3JvbSIgY29waWVzICJyb20iIHRvICJteXN0dWZmL3JvbSIuCiJjcCBkaXNrLyogZGlzazIiIGNvcGllcyB0aGUgY29udGVudHMgb2Ygb25lIGRpc2sgdG8gYW5vdGhlcgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "copy.txt", decodeBase64(fileData196), true, true, false);
   var fileData197 = "VGhlIHJlZHN0b25lIHByb2dyYW0gY2FuIGJlIHVzZWQgdG8gZ2V0LCBzZXQgb3IgcHVsc2UgcmVkc3RvbmUgaW5wdXRzIGFuZCBvdXRwdXRzIGZyb20gdGhlIGNvbXB1dGVyLgoKZXg6CiJyZWRzdG9uZSBwcm9iZSIgd2lsbCBsaXN0IGFsbCB0aGUgcmVkc3RvbmUgaW5wdXRzIHRvIHRoZSBjb21wdXRlcgoicmVkc3RvbmUgc2V0IGxlZnQgdHJ1ZSIgdHVybnMgb24gdGhlIGxlZnQgcmVkc3RvbmUgb3V0cHV0LgoicmVkc3RvbmUgc2V0IHJpZ2h0IGJsdWUgZmFsc2UiIHR1cm5zIG9mZiB0aGUgYmx1ZSB3aXJlIGluIHRoZSBidW5kbGVkIGNhYmxlIG9uIHRoZSByaWdodCByZWRzdG9uZSBvdXRwdXQuCiJyZWRzdG9uZSBwdWxzZSBmcm9udCAxMCAxIiBlbWl0cyAxMCBvbmUgc2Vjb25kIHJlZHN0b25lIHB1bHNlcyBvbiB0aGUgZnJvbnQgcmVkc3RvbmUgb3V0cHV0LgoKVHlwZSAiaGVscCByZWRzdG9uZWFwaSIgb3IgImhlbHAgcnMiIGZvciBpbmZvcm1hdGlvbiBvbiB0aGUgcmVkc3RvbmUgTHVhIEFQSS4K";
   Module["FS_createDataFile"]("/craftos/rom/help", "redstone.txt", decodeBase64(fileData197), true, true, false);
   var fileData198 = "YmcgaXMgYSBwcm9ncmFtIGZvciBBZHZhbmNlZCBDb21wdXRlcnMgd2hpY2ggb3BlbnMgYSBuZXcgdGFiIGluIHRoZSBiYWNrZ3JvdW5kLgoKZXg6CiJiZyIgd2lsbCBvcGVuIGEgYmFja2dyb3VuZCB0YWIgcnVubmluZyB0aGUgc2hlbGwKImJnIHdvcm0iIHdpbGwgb3BlbiBhIGJhY2tncm91bmQgdGFiIHJ1bm5pbmcgdGhlICJ3b3JtIiBwcm9ncmFtCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "bg.txt", decodeBase64(fileData198), true, true, false);
   var fileData199 = "dW5lcXVpcCBpcyBhIHByb2dyYW0gZm9yIFR1cnRsZXMgYW5kIFBvY2tldCBDb21wdXRlcnMuIHVuZXF1aXAgd2lsbCByZW1vdmUgdG9vbHMgb2YgcGVyaXBoZXJhbHMgZnJvbSB0aGUgc3BlY2lmaWVkIHNpZGUgb2YgdGhlIHR1cnRsZS4gT24gYSBQb2NrZXQgQ29tcHV0ZXIgeW91IGRvbid0IG5lZWQgdG8gd3JpdGUgYSBzaWRlLgoKZXg6CiJ1bmVxdWlwIGxlZnQiIHdpbGwgcmVtb3ZlIHRoZSBpdGVtIG9uIHRoZSBsZWZ0IHNpZGUgb2YgdGhlIHR1cnRsZQoidW5lcXVpcCIgb24gYSBQb2NrZXQgQ29tcHV0ZXIgd2lsbCByZW1vdmUgdGhlIGl0ZW0gZnJvbSB0aGUgUG9ja2V0IENvbXB1dGVyCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "unequip.txt", decodeBase64(fileData199), true, true, false);
   var fileData200 = "cGFzdGViaW4gaXMgYSBwcm9ncmFtIGZvciB1cGxvYWRpbmcgZmlsZXMgdG8gYW5kIGRvd25sb2FkaW5nIGZpbGVzIGZyb20gcGFzdGViaW4uY29tLiBUaGlzIGlzIHVzZWZ1bCBmb3Igc2hhcmluZyBwcm9ncmFtcyB3aXRoIG90aGVyIHBsYXllcnMuClRoZSBIVFRQIEFQSSBtdXN0IGJlIGVuYWJsZWQgaW4gQ29tcHV0ZXJDcmFmdC5jZmcgdG8gdXNlIHRoaXMgcHJvZ3JhbS4KCmV4OgoicGFzdGViaW4gcHV0IGZvbyIgd2lsbCB1cGxvYWQgdGhlIGZpbGUgImZvbyIgdG8gcGFzdGViaW4uY29tLCBhbmQgcHJpbnQgdGhlIFVSTC4KInBhc3RlYmluIGdldCB4cTVnYzdMQiBmb28iIHdpbGwgZG93bmxvYWQgdGhlIGZpbGUgZnJvbSB0aGUgVVJMIGh0dHA6Ly9wYXN0ZWJpbi5jb20veHE1Z2M3TEIsIGFuZCBzYXZlIGl0IGFzICJmb28iLgoicGFzdGViaW4gcnVuIEN4YVdtUHJYIiB3aWxsIGRvd25sb2FkIHRoZSBmaWxlIGZyb20gdGhlIFVSTCBodHRwOi8vcGFzdGViaW4uY29tL0N4YVdtUHJYLCBhbmQgaW1tZWRpYXRlbHkgcnVuIGl0Lgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "pastebin.txt", decodeBase64(fileData200), true, true, false);
   var fileData201 = "c2h1dGRvd24gd2lsbCB0dXJuIG9mZiB0aGUgY29tcHV0ZXIuCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "shutdown.txt", decodeBase64(fileData201), true, true, false);
   var fileData202 = "bW9uaXRvciB3aWxsIGNvbm5lY3QgdG8gYW4gYXR0YWNoZWQgTW9uaXRvciBwZXJpcGhlcmFsLCBhbmQgcnVuIGEgcHJvZ3JhbSBvbiBpdHMgZGlzcGxheS4KVHlwZSAiaGVscCBtb25pdG9ycyIgZm9yIGhlbHAgdXNpbmcgbW9uaXRvcnMgYXMgcGVyaXBoZXJhbHMgaW4gbHVhIHByb2dyYW1zLgoKZXg6CiJtb25pdG9yIGxlZnQgaGVsbG8iIHdpbGwgcnVuIHRoZSAiaGVsbG8iIHByb2dyYW0gb24gdGhlIG1vbml0b3IgdG8gdGhlIGxlZnQgb2YgdGhlIGNvbXB1dGVyLgoibW9uaXRvciB0b3AgZWRpdCBmb28iIHdpbGwgcnVuIHRoZSBlZGl0IHByb2dyYW0gb24gdGhlIHRvcCBtb25pdG9yLCBlZGl0aW5nIHRoZSBmaWxlICJmb28iLgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "monitor.txt", decodeBase64(fileData202), true, true, false);
   var fileData203 = "T24gYSBDb21tYW5kIENvbXB1dGVyLCAiY29tbWFuZHMiIHdpbGwgbGlzdCBhbGwgdGhlIGNvbW1hbmRzIGF2YWlsYWJsZSBmb3IgdXNlLiBVc2UgImV4ZWMiIHRvIGV4ZWN1dGUgdGhlbS4KVHlwZSAiaGVscCBjb21tYW5kc2FwaSIgZm9yIGhlbHAgdXNpbmcgY29tbWFuZHMgaW4gbHVhIHByb2dyYW1zLgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "commands.txt", decodeBase64(fileData203), true, true, false);
   var fileData204 = "VGhlIHNldCBwcm9ncmFtIGNhbiBiZSB1c2VkIHRvIGluc3BlY3QgYW5kIGNoYW5nZSBzeXN0ZW0gc2V0dGluZ3MuCgpVc2FnZToKInNldCIgd2lsbCBwcmludCBhbGwgdGhlIHN5c3RlbSBzZXR0aW5ncyBhbmQgdGhlaXIgdmFsdWVzCiJzZXQgZm9vIiB3aWxsIHByaW50IHRoZSB2YWx1ZSBvZiB0aGUgc3lzdGVtIHNldHRpbmcgImZvbyIKInNldCBmb28gYmFyIiB3aWxsIHNldCB0aGUgdmFsdWUgb2YgdGhlIHN5c3RlbSBzZXR0aW5nICJmb28iIHRvICJiYXIiCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "set.txt", decodeBase64(fileData204), true, true, false);
   var fileData205 = "Y29yb3V0aW5lIGlzIGEgc3RhbmRhcmQgTHVhNS4xIEFQSS4KUmVmZXIgdG8gaHR0cDovL3d3dy5sdWEub3JnL21hbnVhbC81LjEvIGZvciBtb3JlIGluZm9ybWF0aW9uLgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "coroutine.txt", decodeBase64(fileData205), true, true, false);
   var fileData206 = "aGVscCBpcyB0aGUgaGVscCB0b29sIHlvdSdyZSBjdXJyZW50bHkgdXNpbmcuClR5cGUgImhlbHAgaW5kZXgiIHRvIHNlZSBhbGwgaGVscCB0b3BpY3MuClR5cGUgImhlbHAiIHRvIHNlZSB0aGUgaGVscCBpbnRyby4KVHlwZSAiaGVscCBoZWxwYXBpIiBmb3IgaW5mb3JtYXRpb24gb24gdGhlIGhlbHAgTHVhIEFQSS4K";
   Module["FS_createDataFile"]("/craftos/rom/help", "help.txt", decodeBase64(fileData206), true, true, false);
   var fileData207 = "RnVuY3Rpb25zIGluIHRoZSB3aW5kb3cgQVBJOgp3aW5kb3cuY3JlYXRlKCBwYXJlbnQsIHgsIHksIHdpZHRoLCBoZWlnaHQsIHZpc2libGUgKQoKV2luZG93cyBjcmVhdGVkIHdpdGggdGhlIHdpbmRvdyBBUEkgaGF2ZSB0aGUgZm9sbG93aW5nIG1ldGhvZHM6CndyaXRlKCB0ZXh0ICkKYmxpdCggdGV4dCwgdGV4dENvbG9yLCBiYWNrZ3JvdW5kQ29sb3IgKQpjbGVhcigpCmNsZWFyTGluZSgpCmdldEN1cnNvclBvcygpCnNldEN1cnNvclBvcyggeCwgeSApCnNldEN1cnNvckJsaW5rKCBibGluayApCmlzQ29sb3IoKQpzZXRUZXh0Q29sb3IoIGNvbG9yICkKc2V0QmFja2dyb3VuZENvbG9yKCBjb2xvciApCmdldFRleHRDb2xvcigpCmdldEJhY2tncm91bmRDb2xvcigpCmdldFNpemUoKQpzY3JvbGwoIG4gKQpzZXRWaXNpYmxlKCBiVmlzaWJsZSApCnJlZHJhdygpCnJlc3RvcmVDdXJzb3IoKQpnZXRQb3NpdGlvbigpCnJlcG9zaXRpb24oIHgsIHksIHdpZHRoLCBoZWlnaHQgKQpnZXRQYWxldHRlQ29sb3IoIGNvbG9yICkKc2V0UGFsZXR0ZUNvbG9yKCBjb2xvciwgciwgZywgYiApCmdldExpbmUoKQo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "window.txt", decodeBase64(fileData207), true, true, false);
   var fileData208 = "aWQgcHJpbnRzIHRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGlzIGNvbXB1dGVyLCBvciBhIERpc2sgaW4gYW4gYXR0YWNoZWQgRGlzayBEcml2ZS4KCmV4OgoiaWQiIHdpbGwgcHJpbnQgdGhpcyBDb21wdXRlcnMgSUQgYW5kIGxhYmVsCiJpZCBsZWZ0IiB3aWxsIHByaW50IHRoZSBJRCBhbmQgbGFiZWwgb2YgdGhlIGRpc2sgaW4gdGhlIERpc2sgRHJpdmUgb24gdGhlIGxlZnQK";
   Module["FS_createDataFile"]("/craftos/rom/help", "id.txt", decodeBase64(fileData208), true, true, false);
   var fileData209 = "Z28gaXMgYSBwcm9ncmFtIGZvciBUdXJ0bGVzLCB1c2VkIHRvIGNvbnRyb2wgdGhlIHR1cnRsZSB3aXRob3V0IHByb2dyYW1taW5nLiBJdCBhY2NlcHRzIG9uZSBvciBtb3JlIGNvbW1hbmRzIGFzIGEgZGlyZWN0aW9uIGZvbGxvd2VkIGJ5IGEgZGlzdGFuY2UuCgpleDoKImdvIGZvcndhcmQiIG1vdmVzIHRoZSB0dXJ0bGUgMSBzcGFjZSBmb3J3YXJkLgoiZ28gZm9yd2FyZCAzIiBtb3ZlcyB0aGUgdHVydGxlIDMgc3BhY2VzIGZvcndhcmQuCiJnbyBmb3J3YXJkIDMgdXAgbGVmdCAyIiBtb3ZlcyB0aGUgdHVydGxlIDMgc3BhY2VzIGZvcndhcmQsIDEgc3BhY2VzIHVwLCB0aGVuIGxlZnQgMTgwIGRlZ3JlZXMuCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "go.txt", decodeBase64(fileData209), true, true, false);
   var fileData210 = "RnVuY3Rpb25zIGluIHRoZSBHUFMgQVBJOgpncHMubG9jYXRlKCB0aW1lb3V0ICkKClRoZSBsb2NhdGUgZnVuY3Rpb24gd2lsbCBzZW5kIGEgc2lnbmFsIHRvIG5lYXJieSBncHMgc2VydmVycywgYW5kIHdhaXQgZm9yIHJlc3BvbnNlcyBiZWZvcmUgdGhlIHRpbWVvdXQuIElmIGl0IHJlY2VpdmVzIGVub3VnaCByZXNwb25zZXMgdG8gZGV0ZXJtaW5lIHRoaXMgY29tcHV0ZXJzIHBvc2l0aW9uIHRoZW4geCwgeSBhbmQgeiBjby1vcmRpbmF0ZXMgd2lsbCBiZSByZXR1cm5lZCwgb3RoZXJ3aXNlIGl0IHdpbGwgcmV0dXJuIG5pbC4gSWYgR1BTIGhvc3RzIGRvIG5vdCBoYXZlIHRoZWlyIHBvc2l0aW9ucyBjb25maWd1cmVkIGNvcnJlY3RseSwgcmVzdWx0cyB3aWxsIGJlIGluYWNjdXJhdGUuCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "gpsapi.txt", decodeBase64(fileData210), true, true, false);
   var fileData211 = "UmVkaXJlY3Rpb24gQ29tcHV0ZXJDcmFmdCBFZGl0aW9uIGlzIHRoZSBDcmFmdE9TIHZlcnNpb24gb2YgYSBmdW4gbmV3IHB1enpsZSBnYW1lIGJ5IERhbjIwMCwgdGhlIGF1dGhvciBvZiBDb21wdXRlckNyYWZ0LgpQbGF5IGl0IG9uIGFueSBBZHZhbmNlZCBDb21wdXRlciwgdGhlbiB2aXNpdCBodHRwOi8vd3d3LnJlZGlyZWN0aW9uZ2FtZS5jb20gdG8gcGxheSB0aGUgZnVsbCBnYW1lIQo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "redirection.txt", decodeBase64(fileData211), true, true, false);
   var fileData212 = "bWF0aCBpcyBhIHN0YW5kYXJkIEx1YTUuMSBBUEkuClJlZmVyIHRvIGh0dHA6Ly93d3cubHVhLm9yZy9tYW51YWwvNS4xLyBmb3IgbW9yZSBpbmZvcm1hdGlvbi4K";
   Module["FS_createDataFile"]("/craftos/rom/help", "math.txt", decodeBase64(fileData212), true, true, false);
   var fileData213 = "VGhlIGF0dGFjaCBjb21tYW5kIGF0dGFjaGVzIHBlcmlwaGVyYWxzIHRvIHRoZSBjdXJyZW50IGNvbXB1dGVyLiAKVG8gdXNlLCB0eXBlIGluIHRoZSBzaWRlIHRvIGF0dGFjaCBpdCBvbiBhbmQgdGhlIHR5cGUgb2YgcGVyaXBoZXJhbCB0byBhdHRhY2guClRoZXNlIGFyZSB0aGUgZGVmYXVsdCBwZXJpcGhlcmFscyBhdmFpbGFibGU6CiogY29tcHV0ZXIgKHVzZSBpZCBpbnN0ZWFkIG9mIHNpZGUpCiogZGVidWdnZXIKKiBkcml2ZQoqIG1vZGVtCiogbW9uaXRvcgoqIHByaW50ZXIKKiBzcGVha2Vy";
   Module["FS_createDataFile"]("/craftos/rom/help", "attach.txt", decodeBase64(fileData213), true, true, false);
   var fileData214 = "aGVsbG8gcHJpbnRzIHRoZSB0ZXh0ICJIZWxsbyBXb3JsZCEiIHRvIHRoZSBzY3JlZW4uCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "hello.txt", decodeBase64(fileData214), true, true, false);
   var fileData215 = "T24gYSBDb21tYW5kIENvbXB1dGVyLCAiZXhlYyIgd2lsbCBleGVjdXRlIGEgY29tbWFuZCBhcyBpZiBlbnRlcmVkIG9uIGEgY29tbWFuZCBibG9jay4gVXNlICJjb21tYW5kcyIgdG8gbGlzdCBhbGwgdGhlIGF2YWlsYWJsZSBjb21tYW5kcy4KCmV4OgoiZXhlYyBzYXkgSGVsbG8gV29ybGQiCiJleGVjIHNldGJsb2NrIH4wIH4xIH4wIG1pbmVjcmFmdDpkaXJ0IgoKVHlwZSAiaGVscCBjb21tYW5kc2FwaSIgZm9yIGhlbHAgdXNpbmcgY29tbWFuZHMgaW4gbHVhIHByb2dyYW1zLgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "exec.txt", decodeBase64(fileData215), true, true, false);
   var fileData216 = "bXVsdGlzaGVsbCBpcyB0aGUgdG9wbGV2ZWwgcHJvZ3JhbSBvbiBBZHZhbmNlZCBDb21wdXRlcnMgd2hpY2ggbWFuYWdlcyBiYWNrZ3JvdW5kIHRhYnMuClR5cGUgImhlbHAgc2hlbGxhcGkiIGZvciBpbmZvcm1hdGlvbiBhYm91dCB0aGUgc2hlbGwgbHVhIGFwaS4K";
   Module["FS_createDataFile"]("/craftos/rom/help", "multishell.txt", decodeBase64(fileData216), true, true, false);
   var fileData217 = "cmVmdWVsIGlzIGEgcHJvZ3JhbSBmb3IgVHVydGxlcy4gUmVmdWVsIHdpbGwgY29uc3VtZSBpdGVtcyBmcm9tIHRoZSBpbnZlbnRvcnkgYXMgZnVlbCBmb3IgdHVydGxlLgoKZXg6CiJyZWZ1ZWwiIHdpbGwgcmVmdWVsIHdpdGggYXQgbW9zdCBvbmUgZnVlbCBpdGVtCiJyZWZ1ZWwgMTAiIHdpbGwgcmVmdWVsIHdpdGggYXQgbW9zdCAxMCBmdWVsIGl0ZW1zCiJyZWZ1ZWwgYWxsIiB3aWxsIHJlZnVlbCB3aXRoIGFzIG1hbnkgZnVlbCBpdGVtcyBhcyBwb3NzaWJsZQo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "refuel.txt", decodeBase64(fileData217), true, true, false);
   var fileData218 = "R2lzdCBpcyBhIHNlcnZpY2UgcHJvdmlkZWQgYnkgR2l0SHViIHRoYXQgYWxsb3dzIHVwbG9hZGluZyBzbWFsbCBzZXRzIG9mIHRleHQgZmlsZXMsIHNpbWlsYXIgdG8gUGFzdGViaW4uClRoZSBnaXN0IHByb2dyYW0gbGV0cyB5b3UgdXBsb2FkIGFuZCBkb3dubG9hZCBmaWxlcyB0aHJvdWdoIHRoaXMgc2VydmljZS4KVGhlIEhUVFAgQVBJIG11c3QgYmUgZW5hYmxlZCBpbiB0aGUgQ3JhZnRPUy1QQyBjb25maWd1cmF0aW9uIHRvIHVzZSB0aGlzIHByb2dyYW0uClRoZSBmaXJzdCB0aW1lIHlvdSB1cGxvYWQgYSBmaWxlIHRvIEdpc3QsIHlvdSB3aWxsIGJlIHByb21wdGVkIHRvIGVudGVyIGEgUGVyc29uYWwgQWNjZXNzIEtleSAoUEFLKS4KRm9sbG93IHRoZSBpbnN0cnVjdGlvbnMgYXQgaHR0cHM6Ly90aW55dXJsLmNvbS9HaXRIdWJQQUsgdG8gZ2VuZXJhdGUgb25lLiBNYWtlIHN1cmUgdG8gY2hlY2sgdGhlICdnaXN0JyBjaGVja2JveCBvbiBzdGVwIDcgKGJlbG93ICdTZWxlY3Qgc2NvcGVzJykuClRoaXMgUEFLIHdpbGwgYmUgc3RvcmVkIGluIHlvdXIgc2V0dGluZ3MgYXMgImdpc3QuaWQiIGZvciBmdXR1cmUgdXNlLgoKQWR2YW50YWdlcyBvZiBHaXN0IG92ZXIgUGFzdGViaW46CiogSG9zdGVkIGJ5IEdpdEh1YiwgbWVhbmluZyBtb3JlIHJlbGlhYmxlIHNlcnZpY2UKKiBNdWx0aXBsZSBmaWxlcyBjYW4gYmUgdXBsb2FkZWQgYXQgb25jZQoqIERlc2NyaXB0aW9ucyBjYW4gdGVsbCBwZW9wbGUgd2hhdCB5b3VyIGZpbGVzIGRvCiogTWFya2Rvd24gJiBhdXRvbWF0aWMgc3ludGF4IGhpZ2h0bGlnaHRpbmcgb25saW5lCiogRmlsZXMgY2FuIGJlIGVkaXRlZCBhZnRlciB1cGxvYWRpbmcKKiBUaWVkIHRvIHlvdXIgR2l0SHViIGFjY291bnQKCkRpc2FkdmFudGFnZXMgb2YgR2lzdDoKKiBSZXF1aXJlcyB5b3UgdG8gbG9nIGluIHRvIHVwbG9hZCBmaWxlcwoqIExvbmdlciBJRHMgbWVhbiBtb3JlIHR5cGluZyBvciBwYXN0aW5nCgpVc2FnZXM6Cmdpc3QgcHV0IDxmaWxlbmFtZXMuLi4+IFstLSBkZXNjcmlwdGlvbi4uLl0KZ2lzdCBlZGl0IDxpZD4gPGZpbGVuYW1lcy4uLj4gWy0tIGRlc2NyaXB0aW9uLi4uXQpnaXN0IGRlbGV0ZSA8aWQ+Cmdpc3QgZ2V0IDxpZD4gPGZpbGVuYW1lPgpnaXN0IHJ1biA8aWQ+IFthcmd1bWVudHMuLi5dCmdpc3QgaW5mbyA8aWQ+CgpBbiBJRCBjb25zaXN0cyBvZiBhIDMyLWNoYXJhY3RlciBoYXNoIChsYXN0IHBhcnQgb2YgYSBnaXN0LmdpdGh1Yi5jb20gVVJMKSwgYW5kIG9wdGlvbmFsbHkgYSBzbGFzaCAoJy8nKSBmb2xsb3dlZCBieSBhIGZpbGUgbmFtZS4KQSBzcGVjaWZpYyByZXZpc2lvbiBjYW4gYmUgc2VsZWN0ZWQgYnkgZm9sbG93aW5nIHRoZSBoYXNoIHdpdGggYSBjb2xvbiAoJzonKSBhbmQgdGhlIHJldmlzaW9uIFNIQSBoYXNoLiAoQWR2YW5jZWQgdXNlcnMgb25seSkKSWYgbm8gZmlsZSBuYW1lIGlzIHByb3ZpZGVkLCBpdCB3aWxsIHRyeSB0byBmaW5kIHRoZSBtb3N0IHN1aXRhYmxlIGZpbGUgdG8gZG93bmxvYWQgd2l0aCB0aGlzIGFsZ29yaXRobToKKiBJZiBhIGZpbGUgbmFtZSBpcyBzcGVjaWZpZWQsIHJldHJpZXZlcyB0aGF0IGZpbGUKKiBPdGhlcndpc2UsIGlmIHRoZXJlJ3Mgb25seSBvbmUgZmlsZSwgcmV0cmlldmVzIHRoYXQgZmlsZQoqIE90aGVyd2lzZSwgaWYgdGhlcmUncyBhIGZpbGUgbmFtZWQgJ2luaXQubHVhJywgcmV0cmlldmVzICdpbml0Lmx1YScKKiBPdGhlcndpc2UsIGlmIHRoZXJlJ3MgbW9yZSB0aGFuIG9uZSBmaWxlIGJ1dCBvbmx5IG9uZSAqLmx1YSBmaWxlLCByZXRyaWV2ZXMgdGhlIEx1YSBmaWxlCiogT3RoZXJ3aXNlLCByZXRyaWV2ZXMgdGhlIGZpcnN0IEx1YSBmaWxlIGFscGhhYmV0aWNhbGx5ICh3aXRoIGEgd2FybmluZykKKiBPdGhlcndpc2UsIHlvdSdsbCBuZWVkIHRvIG1hbnVhbGx5IGdpdmUgaXQgYSBmaWxlIG5hbWUKCldoZW4gdXNpbmcgdGhlIGVkaXQgc3ViY29tbWFuZCwgeW91IGNhbiBkZWxldGUgZmlsZXMgYnkgZGVsZXRpbmcgdGhlbSBvbiBkaXNrLCB0aGVuIHVwbG9hZGluZyB0aGUgbm9uLWV4aXN0ZW50IGZpbGUuCkZvciBleGFtcGxlLCBpZiB5b3Ugd2FudCB0byBkZWxldGUgImJhci5sdWEiIGZyb20geW91ciBHaXN0LCBmaXJzdCBkZWxldGUgImJhci5sdWEiIG9uIHRoZSBjb21wdXRlciwgdGhlbiBydW4gImdpc3QgZWRpdCA8aWQ+IGJhci5sdWEiLgpZb3UgY2FuIGFsc28gYWRkIG9yIHJlcGxhY2UgZmlsZXMgYnkgbGlzdGluZyB0aG9zZSBmaWxlcyBhcyB3ZWxsLgpPbmx5IGZpbGVzIHlvdSBzcGVjaWZ5IHdpbGwgYmUgY2hhbmdlZDogZmlsZXMgeW91IGRvbid0IGxpc3Qgd29uJ3QgYmUgZWRpdGVkIG9yIGRlbGV0ZWQuCkFsc28sIGRvIG5vdCBzcGVjaWZ5IGEgZmlsZSBuYW1lIGluIHRoZSBJRCB3aGVuIHVzaW5nIGVkaXQuCgpEbyBub3Qgc3BlY2lmeSBhIGZpbGUgbmFtZSBvciByZXZpc2lvbiBoYXNoIHdoZW4gdXNpbmcgdGhlIGRlbGV0ZSBzdWJjb21tYW5kLgoKRXhhbXBsZXM6CiJnaXN0IHB1dCBmb28ubHVhIiB3aWxsIHVwbG9hZCB0aGUgZmlsZSAiZm9vLmx1YSIgdG8gZ2lzdC5naXRodWIuY29tLCBhbmQgcHJpbnRzIHRoZSBVUkwuCiJnaXN0IHB1dCBmb28ubHVhIGJhci5sdWEgLS0gTXkgY29vbCBwcm9ncmFtIiB3aWxsIHVwbG9hZCB0aGUgZmlsZXMgImZvby5sdWEiIGFuZCAiYmFyLmx1YSIgdG8gZ2lzdC5naXRodWIuY29tIHdpdGggdGhlIGRlc2NyaXB0aW9uICJNeSBjb29sIHByb2dyYW0iLCBhbmQgcHJpbnRzIHRoZSBVUkwuCiJnaXN0IGVkaXQgMDEyMzQ1Njc4OWFiY2RlZjAxMjM0NTY3ODlhYmNkZWYgZm9vLmx1YSAtLSBNeSBjb29sIHByb2dyYW0gLSBVcGRhdGVkISIgd2lsbCB1cGRhdGUgImZvby5sdWEiIGF0IGh0dHBzOi8vZ2lzdC5naXRodWIuY29tLzAxMjM0NTY3ODlhYmNkZWYwMTIzNDU2Nzg5YWJjZGVmIHRvIGhhdmUgdGhlIGNvbnRlbnRzIG9mICJmb28ubHVhIiwgY2hhbmdpbmcgdGhlIGRlc2NyaXB0aW9uIHRvICJNeSBjb29sIHByb2dyYW0gLSBVcGRhdGVkISIuIElmICJmb28ubHVhIiBkb2Vzbid0IGV4aXN0LCBpdCB3aWxsIGJlIGRlbGV0ZWQgZnJvbSB0aGUgR2lzdC4KImdpc3QgZGVsZXRlIDAxMjM0NTY3ODlhYmNkZWYwMTIzNDU2Nzg5YWJjZGVmIiB3aWxsIGRlbGV0ZSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS8wMTIzNDU2Nzg5YWJjZGVmMDEyMzQ1Njc4OWFiY2RlZi4KImdpc3QgZ2V0IDQyYmM2OWQzNzU3MjI2Yzk2NmRhNzUyZGY4MDQzN2RjIGZvby5sdWEiIHdpbGwgZG93bmxvYWQgdGhlIGZpcnN0IEx1YSBmaWxlIGZyb20gdGhlIFVSTCBodHRwczovL2dpc3QuZ2l0aHViLmNvbS80MmJjNjlkMzc1NzIyNmM5NjZkYTc1MmRmODA0MzdkYywgYW5kIHNhdmVzIGl0IGFzICJmb28ubHVhIi4KImdpc3QgZ2V0IGI3ZGVkNWE0YjJhMjIxZTEzZGQzNDkyZjI5NzFhZTM0L2lwc3dfa2V5cy5weSBpcHN3X2tleXMucHkiIHdpbGwgZG93bmxvYWQgdGhlIGZpbGUgImlwc3dfa2V5cy5weSIgZnJvbSB0aGUgVVJMIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2I3ZGVkNWE0YjJhMjIxZTEzZGQzNDkyZjI5NzFhZTM0LCBhbmQgc2F2ZXMgaXQgYXMgImlwc3dfa2V5cy5weSIuCiJnaXN0IHJ1biBiNWUwNjljZGY2NWMxMTc0ZjI0ZmMxMTNjMGUxMjkyYiIgd2lsbCBkb3dubG9hZCB0aGUgZmlyc3QgTHVhIGZpbGUgZnJvbSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9iNWUwNjljZGY2NWMxMTc0ZjI0ZmMxMTNjMGUxMjkyYiwgYW5kIGltbWVkaWF0ZWx5IHJ1bnMgaXQuCiJnaXN0IGluZm8gNDk3YTU2NThjMjRlMDJhZmY0ZTRmYWI3NDNmOGFkYzciIHdpbGwgc2hvdyBhIGRlc2NyaXB0aW9uIGFuZCBmaWxlIGxpc3QgZnJvbSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS80OTdhNTY1OGMyNGUwMmFmZjRlNGZhYjc0M2Y4YWRjNy4=";
   Module["FS_createDataFile"]("/craftos/rom/help", "gist.txt", decodeBase64(fileData218), true, true, false);
   var fileData219 = "cm0gZGVsZXRlcyBhIGZpbGUgb3IgYSBkaXJlY3RvcnkgYW5kIGl0cyBjb250ZW50cy4KCmV4Ogoicm0gZm9vIiB3aWxsIGRlbGV0ZSB0aGUgZmlsZSBmb28uCiJybSBkaXNrLyoiIHdpbGwgZGVsZXRlIHRoZSBjb250ZW50cyBvZiBhIGRpc2suCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "delete.txt", decodeBase64(fileData219), true, true, false);
   var fileData220 = "ZXhpdCB3aWxsIGV4aXQgdGhlIGN1cnJlbnQgc2hlbGwuCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "exit.txt", decodeBase64(fileData220), true, true, false);
   var fileData221 = "VGhlICJwZXJpcGhlcmFscyIgcHJvZ3JhbSB3aWxsIGxpc3QgYWxsIG9mIHRoZSBwZXJpcGhlcmFsIGRldmljZXMgYWNjZXNzaWJsZSBmcm9tIHRoaXMgY29tcHV0ZXIuClBlcmlwaGVyYWxzIGFyZSBleHRlcm5hbCBkZXZpY2VzIHdoaWNoIENyYWZ0T1MgQ29tcHV0ZXJzIGFuZCBUdXJ0bGVzIGNhbiBpbnRlcmFjdCB3aXRoIHVzaW5nIHRoZSBwZXJpcGhlcmFsIEFQSS4KVHlwZSAiaGVscCBwZXJpcGhlcmFsIiB0byBsZWFybiBhYm91dCB1c2luZyB0aGUgcGVyaXBoZXJhbCBBUEkuClR5cGUgImhlbHAgZHJpdmVzIiB0byBsZWFybiBhYm91dCB1c2luZyBEaXNrIERyaXZlcy4KVHlwZSAiaGVscCBtb2RlbXMiIHRvIGxlYXJuIGFib3V0IHVzaW5nIE1vZGVtcy4KVHlwZSAiaGVscCBtb25pdG9ycyIgdG8gbGVhcm4gYWJvdXQgdXNpbmcgTW9uaXRvcnMuClR5cGUgImhlbHAgcHJpbnRlcnMiIHRvIGxlYXJuIGFib3V0IHVzaW5nIFByaW50ZXJzLgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "peripherals.txt", decodeBase64(fileData221), true, true, false);
   var fileData222 = "RnVuY3Rpb25zIGluIHRoZSBSZWRzdG9uZSBBUEk6CnJlZHN0b25lLmdldFNpZGVzKCApCnJlZHN0b25lLmdldElucHV0KCBzaWRlICkKcmVkc3RvbmUuc2V0T3V0cHV0KCBzaWRlLCBib29sZWFuICkKcmVkc3RvbmUuZ2V0T3V0cHV0KCBzaWRlICkKcmVkc3RvbmUuZ2V0QW5hbG9nSW5wdXQoIHNpZGUgKQpyZWRzdG9uZS5zZXRBbmFsb2dPdXRwdXQoIHNpZGUsIG51bWJlciApCnJlZHN0b25lLmdldEFuYWxvZ091dHB1dCggc2lkZSApCgpGdW5jdGlvbnMgaW4gdGhlIFJlZHN0b25lIEFQSSBmb3Igd29ya2luZyB3aXRoIGJ1bmRsZWQgY2FibGVzOgpyZWRzdG9uZS5nZXRCdW5kbGVkSW5wdXQoIHNpZGUgKQpyZWRzdG9uZS50ZXN0QnVuZGxlZElucHV0KCBzaWRlLCBjb2xvciApCnJlZHN0b25lLnNldEJ1bmRsZWRPdXRwdXQoIHNpZGUsIGNvbG9ycyApCnJlZHN0b25lLmdldEJ1bmRsZWRPdXRwdXQoIHNpZGUgKQpUeXBlICJoZWxwIGJ1bmRsZWQiIGZvciB1c2FnZSBleGFtcGxlcy4KCkV2ZW50cyBlbWl0dGVkIGJ5IHRoZSByZWRzdG9uZSBBUEk6CiJyZWRzdG9uZSIsIHdoZW4gdGhlIHN0YXRlIG9mIGFueSByZWRzdG9uZSBpbnB1dCBjaGFuZ2VzLiBVc2UgZ2V0SW5wdXQoKSBvciBnZXRCdW5kbGVkSW5wdXQoKSB0byBpbnNwZWN0IHRoZSBjaGFuZ2VzClR5cGUgImhlbHAgZXZlbnRzIiB0byBsZWFybiBhYm91dCB0aGUgZXZlbnQgc3lzdGVtLgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "redstoneapi.txt", decodeBase64(fileData222), true, true, false);
   var fileData223 = "ZHJpdmUgdGVsbHMgeW91IHdoaWNoIGRpc2sgZHJpdmUgdGhlIGN1cnJlbnQgb3Igc3BlY2lmaWVkIGRpcmVjdG9yeSBpcyBsb2NhdGVkIGluLgoKZXg6CiJkcml2ZSIgdGVsbCB5b3UgdGhlIGRpc2sgZHJpdmUgb2YgdGhlIGN1cnJlbnQgZGlyZWN0b3J5LgoiZHJpdmUgZm9vIiB0ZWxscyB5b3UgdGhlIGRpc2sgZHJpdmUgb2YgdGhlIHN1YmRpcmVjdG9yeSAiZm9vIgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "drive.txt", decodeBase64(fileData223), true, true, false);
   var fileData224 = "V29ya2JlbmNoZXMgYXJlIHBlcmlwaGVyYWwgZGV2aWNlcyBmb3VuZCBvbiBDcmFmdHkgVHVydGxlcyBydW5uaW5nIENyYWZ0T1MuIFR5cGUgImhlbHAgcGVyaXBoZXJhbCIgdG8gbGVhcm4gYWJvdXQgdXNpbmcgdGhlIFBlcmlwaGVyYWwgQVBJIHRvIGNvbm5lY3Qgd2l0aCBwZXJpcGhlcmFscy4gV2hlbiBhIHdvcmtiZW5jaCBpcyBhdHRhY2hlZCB0byBhIHR1cnRsZSwgcGVyaXBoZXJhbC5nZXRUeXBlKCkgd2lsbCByZXR1cm4gIndvcmtiZW5jaCIuCgpNZXRob2RzIGV4cG9zZWQgYnkgV29ya2JlbmNoZXM6CmNyYWZ0KCBjaGFubmVsICkK";
   Module["FS_createDataFile"]("/craftos/rom/help", "workbench.txt", decodeBase64(fileData224), true, true, false);
   var fileData225 = "RnVuY3Rpb25zIGluIHRoZSBjb21tYW5kcyBBUEk6CmNvbW1hbmRzLmV4ZWMoIGNvbW1hbmQgKQpjb21tYW5kcy5leGVjQXN5bmMoIGNvbW1hbmQgKQpjb21tYW5kcy5saXN0KCkKY29tbWFuZHMuZ2V0QmxvY2tQb3NpdGlvbigpCmNvbW1hbmRzLmdldEJsb2NrSW5mbyggeCwgeSwgeiApCmNvbW1hbmRzLmdldEJsb2NrSW5mb3MoIG1pbngsIG1pbnksIG1pbnosIG1heHgsIG1heHksIG1heHogKQoKVGhlIGNvbW1hbmRzIEFQSSBjYW4gYWxzbyBiZSB1c2VkIHRvIGludm9rZSBjb21tYW5kcyBkaXJlY3RseSwgbGlrZSBzbzoKY29tbWFuZHMuc2F5KCAiSGVsbG8gV29ybGQiICkKY29tbWFuZHMuZ2l2ZSggImRhbjIwMCIsICJtaW5lY3JhZnQ6ZGlhbW9uZCIsIDY0ICkKVGhpcyB3b3JrcyB3aXRoIGFueSBjb21tYW5kLiBVc2UgImNvbW1hbmRzLmFzeW5jIiBpbnN0ZWFkIG9mICJjb21tYW5kcyIgdG8gZXhlY3V0ZSBhc3luY2hyb25vdXNseS4KClRoZSBjb21tYW5kcyBBUEkgaXMgb25seSBhdmFpbGFibGUgb24gQ29tbWFuZCBDb21wdXRlcnMuClZpc2l0IGh0dHA6Ly9taW5lY3JhZnQuZ2FtZXBlZGlhLmNvbS9Db21tYW5kcyBmb3IgZG9jdW1lbnRhdGlvbiBvbiBhbGwgY29tbWFuZHMuCg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "commandsapi.txt", decodeBase64(fileData225), true, true, false);
   var fileData226 = "RnVuY3Rpb25zIGluIHRoZSBjb2xvdXJzIGFwaQoodXNlZCBmb3IgcmVkc3RvbmUuc2V0QnVuZGxlZE91dHB1dCk6CmNvbG91cnMuY29tYmluZSggY29sb3VyMSwgY29sb3VyMiwgY29sb3VyMywgLi4uKQpjb2xvdXJzLnN1YnRyYWN0KCBjb2xvdXJzLCBjb2xvdXIxLCBjb2xvdXIyLCAuLi4pCmNvbG91cnMudGVzdCggY29sb3VycywgY29sb3VyICkKY29sb3Vycy5yZ2I4KCByLCBnLCBiICkKCkNvbG91ciBjb25zdGFudHMgaW4gdGhlIGNvbG91cnMgYXBpLCBpbiBhc2NlbmRpbmcgYml0IG9yZGVyOgpjb2xvdXJzLndoaXRlLCBjb2xvdXJzLm9yYW5nZSwgY29sb3Vycy5tYWdlbnRhLCBjb2xvdXJzLmxpZ2h0Qmx1ZSwgY29sb3Vycy55ZWxsb3csIGNvbG91cnMubGltZSwgY29sb3Vycy5waW5rLCBjb2xvdXJzLmdyZXksIGNvbG91cnMubGlnaHRHcmV5LCBjb2xvdXJzLmN5YW4sIGNvbG91cnMucHVycGxlLCBjb2xvdXJzLmJsdWUsIGNvbG91cnMuYnJvd24sIGNvbG91cnMuZ3JlZW4sIGNvbG91cnMucmVkLCBjb2xvdXJzLmJsYWNrLgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "colours.txt", decodeBase64(fileData226), true, true, false);
   var fileData227 = "VGhlIGRldGFjaCBjb21tYW5kIHJlbW92ZXMgYSBwZXJpcGhlcmFsIGZyb20gdGhlIHNwZWNpZmllZCBzaWRlLg==";
   Module["FS_createDataFile"]("/craftos/rom/help", "detach.txt", decodeBase64(fileData227), true, true, false);
   var fileData228 = "c3RyaW5nIGlzIGEgc3RhbmRhcmQgTHVhNS4xIEFQSS4KUmVmZXIgdG8gaHR0cDovL3d3dy5sdWEub3JnL21hbnVhbC81LjEvIGZvciBtb3JlIGluZm9ybWF0aW9uLgo=";
   Module["FS_createDataFile"]("/craftos/rom/help", "string.txt", decodeBase64(fileData228), true, true, false);
   var fileData229 = "";
   Module["FS_createDataFile"]("/craftos/debug", "showfile.lua", decodeBase64(fileData229), true, true, false);
   var fileData230 = "";
   Module["FS_createDataFile"]("/craftos/debug", "debugger.lua", decodeBase64(fileData230), true, true, false);
   var fileData231 = "bG9jYWwgaGFuZGxlLCBlcnIgPSBodHRwLmdldCgiaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy9NQ0phY2sxMjMvY3JhZnRvczIvcmVsZWFzZXMvbGF0ZXN0IikKaWYgbm90IGhhbmRsZSB0aGVuIGVycm9yKGVycikgZW5kCmxvY2FsIG9iaiA9IHRleHR1dGlscy51bnNlcmlhbGl6ZUpTT04oaGFuZGxlLnJlYWRBbGwoKSkKaGFuZGxlLmNsb3NlKCkKbG9jYWwgdywgaCA9IHRlcm0uZ2V0U2l6ZSgpCmxvY2FsIG9sZHRlcm0gPSB0ZXJtLnJlZGlyZWN0KHdpbmRvdy5jcmVhdGUodGVybS5jdXJyZW50KCksIDEsIDEsIHcsIGgsIGZhbHNlKSkKbG9jYWwgbGVuID0gcHJpbnQob2JqLmJvZHkpCnRlcm0ucmVkaXJlY3Qob2xkdGVybSkKbG9jYWwgd2luID0gd2luZG93LmNyZWF0ZSh0ZXJtLmN1cnJlbnQoKSwgMSwgMSwgdywgbGVuKQpsb2NhbCBpbmZvd2luID0gd2luZG93LmNyZWF0ZSh0ZXJtLmN1cnJlbnQoKSwgMSwgaCwgdywgMSkKLS1pbmZvd2luLnNldEJhY2tncm91bmRDb2xvcihjb2xvcnMuZ3JheSkKaWYgdGVybS5pc0NvbG9yKCkgdGhlbiBpbmZvd2luLnNldFRleHRDb2xvcihjb2xvcnMueWVsbG93KQplbHNlIGluZm93aW4uc2V0VGV4dENvbG9yKGNvbG9ycy5saWdodEdyYXkpIGVuZAppbmZvd2luLmNsZWFyKCkKaW5mb3dpbi53cml0ZSgiUmVsZWFzZSBOb3RlcyIpCmluZm93aW4uc2V0Q3Vyc29yUG9zKHcgLSAxNCwgMSkKaW5mb3dpbi53cml0ZSgiUHJlc3MgUSB0byBleGl0IikKb2xkdGVybSA9IHRlcm0ucmVkaXJlY3Qod2luKQp3cml0ZShvYmouYm9keTpnc3ViKCIoXG4gKilbLSpdKCArKSIsICIlMVw3JTIiKSkKaW5mb3dpbi5yZWRyYXcoKQpsb2NhbCB5UG9zID0gMQp3aGlsZSB0cnVlIGRvCiAgICBsb2NhbCBldiA9IHtvcy5wdWxsRXZlbnQoKX0KICAgIGlmIGV2WzFdID09ICJrZXkiIHRoZW4KICAgICAgICBpZiBsZW4gPiBoIHRoZW4KICAgICAgICAgICAgaWYgZXZbMl0gPT0ga2V5cy51cCBhbmQgeVBvcyA8IDEgdGhlbgogICAgICAgICAgICAgICAgeVBvcyA9IHlQb3MgKyAxCiAgICAgICAgICAgICAgICB3aW4ucmVwb3NpdGlvbigxLCB5UG9zKQogICAgICAgICAgICAgICAgaW5mb3dpbi5yZWRyYXcoKQogICAgICAgICAgICBlbHNlaWYgZXZbMl0gPT0ga2V5cy5kb3duIGFuZCB5UG9zID4gLWxlbiArIGggdGhlbgogICAgICAgICAgICAgICAgeVBvcyA9IHlQb3MgLSAxCiAgICAgICAgICAgICAgICB3aW4ucmVwb3NpdGlvbigxLCB5UG9zKQogICAgICAgICAgICAgICAgaW5mb3dpbi5yZWRyYXcoKQogICAgICAgICAgICBlbHNlaWYgZXZbMl0gPT0ga2V5cy5wYWdlVXAgYW5kIHlQb3MgPCAxIHRoZW4KICAgICAgICAgICAgICAgIHlQb3MgPSBtYXRoLm1pbih5UG9zICsgaCwgMSkKICAgICAgICAgICAgICAgIHdpbi5yZXBvc2l0aW9uKDEsIHlQb3MpCiAgICAgICAgICAgICAgICBpbmZvd2luLnJlZHJhdygpCiAgICAgICAgICAgIGVsc2VpZiBldlsyXSA9PSBrZXlzLnBhZ2VEb3duIGFuZCB5UG9zID4gLWxlbiArIGggdGhlbgogICAgICAgICAgICAgICAgeVBvcyA9IG1hdGgubWF4KHlQb3MgLSBoLCAtbGVuICsgaCkKICAgICAgICAgICAgICAgIHdpbi5yZXBvc2l0aW9uKDEsIHlQb3MpCiAgICAgICAgICAgICAgICBpbmZvd2luLnJlZHJhdygpCiAgICAgICAgICAgIGVsc2VpZiBldlsyXSA9PSBrZXlzLmhvbWUgdGhlbgogICAgICAgICAgICAgICAgeVBvcyA9IDEKICAgICAgICAgICAgICAgIHdpbi5yZXBvc2l0aW9uKDEsIHlQb3MpCiAgICAgICAgICAgICAgICBpbmZvd2luLnJlZHJhdygpCiAgICAgICAgICAgIGVsc2VpZiBldlsyXSA9PSBrZXlzWyJlbmQiXSB0aGVuCiAgICAgICAgICAgICAgICB5UG9zID0gLWxlbiArIGgKICAgICAgICAgICAgICAgIHdpbi5yZXBvc2l0aW9uKDEsIHlQb3MpCiAgICAgICAgICAgICAgICBpbmZvd2luLnJlZHJhdygpCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgICAgIGlmIGV2WzJdID09IGtleXMucSB0aGVuIGJyZWFrIGVuZAogICAgZWxzZWlmIGV2WzFdID09ICJtb3VzZV9zY3JvbGwiIGFuZCBsZW4gPiBoIHRoZW4KICAgICAgICBpZiBldlsyXSA9PSAtMSBhbmQgeVBvcyA8IDEgdGhlbgogICAgICAgICAgICB5UG9zID0geVBvcyArIDEKICAgICAgICAgICAgd2luLnJlcG9zaXRpb24oMSwgeVBvcykKICAgICAgICAgICAgaW5mb3dpbi5yZWRyYXcoKQogICAgICAgIGVsc2VpZiBldlsyXSA9PSAxIGFuZCB5UG9zID4gLWxlbiArIGggdGhlbgogICAgICAgICAgICB5UG9zID0geVBvcyAtIDEKICAgICAgICAgICAgd2luLnJlcG9zaXRpb24oMSwgeVBvcykKICAgICAgICAgICAgaW5mb3dpbi5yZWRyYXcoKQogICAgICAgIGVuZAogICAgZW5kCmVuZAp0ZXJtLnJlZGlyZWN0KG9sZHRlcm0pCnRlcm0uc2V0Q3Vyc29yUG9zKDEsIDEpCnRlcm0uY2xlYXIoKQ==";
   Module["FS_createDataFile"]("/craftos/debug", "releasenotes.lua", decodeBase64(fileData231), true, true, false);
   var fileData232 = "bXVsdGlzaGVsbC5zZXRUaXRsZShtdWx0aXNoZWxsLmdldEN1cnJlbnQoKSwgIkNvbnNvbGUiKQpsb2NhbCB3LCBoID0gdGVybS5nZXRTaXplKCkKbG9jYWwgd2luID0gd2luZG93LmNyZWF0ZSh0ZXJtLmN1cnJlbnQoKSwgMSwgMSwgdywgOTAwMCkKbG9jYWwgdG9wID0gMQpsb2NhbCBib3R0b20gPSAxCmxvY2FsIHNjcm9sbGluZyA9IGZhbHNlCnRlcm0ucmVkaXJlY3Qod2luKQp3aGlsZSB0cnVlIGRvCiAgICBsb2NhbCBldiwgcDEgPSBvcy5wdWxsRXZlbnRSYXcoKQogICAgaWYgZXYgPT0gImRlYnVnZ2VyX3ByaW50IiB0aGVuIAogICAgICAgIGxvY2FsIGxpbmVzID0gcHJpbnQocDEpCiAgICAgICAgYm90dG9tID0gbWF0aC5taW4oYm90dG9tICsgbGluZXMsIDkwMDApCiAgICAgICAgaWYgbm90IHNjcm9sbGluZyBhbmQgYm90dG9tID4gaCArIDEgYW5kIHRvcCA8IDkwMDAgLSBoIHRoZW4KICAgICAgICAgICAgdG9wID0gYm90dG9tIC0gaAogICAgICAgICAgICB3aW4ucmVwb3NpdGlvbigxLCAyLXRvcCkKICAgICAgICBlbmQKICAgIGVsc2VpZiBldiA9PSAibW91c2Vfc2Nyb2xsIiB0aGVuCiAgICAgICAgaWYgKHAxID09IC0xIGFuZCB0b3AgPiAxKSBvciAocDEgPT0gMSBhbmQgdG9wIDwgOTAwMCAtIGgpIHRoZW4KICAgICAgICAgICAgc2Nyb2xsaW5nID0gdG9wICsgaCAtIDEgfj0gYm90dG9tCiAgICAgICAgICAgIHRvcCA9IG1hdGgubWluKHRvcCArIHAxLCA5MDAwKQogICAgICAgICAgICB3aW4ucmVwb3NpdGlvbigxLCAyLXRvcCkKICAgICAgICBlbmQKICAgIGVsc2VpZiBldiA9PSAidGVybV9yZXNpemUiIHRoZW4KICAgICAgICB3LCBoID0gdGVybS5nZXRTaXplKCkKICAgICAgICB3aW4ucmVwb3NpdGlvbigxLCAyLXRvcCwgdGVybS5nZXRTaXplKCksIDkwMDApCiAgICBlbmQKZW5k";
   Module["FS_createDataFile"]("/craftos/debug", "console.lua", decodeBase64(fileData232), true, true, false);
   var fileData233 = "c2hlbGwub3BlblRhYigiZGVidWcvc2hvd2ZpbGUubHVhIikKc2hlbGwub3BlblRhYigiZGVidWcvcHJvZmlsZXIubHVhIikKc2hlbGwub3BlblRhYigiZGVidWcvY29uc29sZS5sdWEiKQpzaGVsbC5ydW4oImRlYnVnL2RlYnVnZ2VyLmx1YSIpCnNoZWxsLmV4aXQoKQ==";
   Module["FS_createDataFile"]("/craftos/debug", "startup.lua", decodeBase64(fileData233), true, true, false);
   var fileData234 = "";
   Module["FS_createDataFile"]("/craftos/debug", "bios.lua", decodeBase64(fileData234), true, true, false);
   var fileData235 = "bXVsdGlzaGVsbC5zZXRUaXRsZShtdWx0aXNoZWxsLmdldEN1cnJlbnQoKSwgIlByb2ZpbGVyIikKbG9jYWwgb2ssIGVyciA9IHBjYWxsKGZ1bmN0aW9uKCkKbG9jYWwgdywgaCA9IHRlcm0uZ2V0U2l6ZSgpCmxvY2FsIGhlYWRlciA9IHdpbmRvdy5jcmVhdGUodGVybS5jdXJyZW50KCksIDEsIDEsIHcsIDIpCmxvY2FsIHZpZXdwb3J0ID0gd2luZG93LmNyZWF0ZSh0ZXJtLmN1cnJlbnQoKSwgMSwgMywgdywgaCAtIDIpCmxvY2FsIGJvZHkKbG9jYWwgd2lkdGhzID0ge3siIyIsIDUsICJjb3VudCJ9LCB7IlNvdXJjZSIsIG1hdGguY2VpbCgodyAtIDExKSAvIDIpLCAic291cmNlIn0sIHsiRnVuY3Rpb24iLCBtYXRoLmZsb29yKCh3IC0gMTEpIC8gMiksICJmdW5jIn0sIHsiVGltZSIsIDYsICJ0aW1lIn19CmxvY2FsIHByb2ZpbGluZ1RpbWUsIHRtCmxvY2FsIHNjcm9sbFBvcywgc2Nyb2xsU2l6ZSA9IDEsIDEKCmxvY2FsIGZ1bmN0aW9uIGZvcm1hdFRpbWUobikgcmV0dXJuIHN0cmluZy5mb3JtYXQoIiVpOiUwMmk6JTAyaSIsIG1hdGguZmxvb3IobiAvIDM2MDApLCBtYXRoLmZsb29yKG4gLyA2MCkgJSA2MCwgbiAlIDYwKSBlbmQKCmxvY2FsIGZ1bmN0aW9uIHVwZGF0ZUhlYWRlcigpCiAgICBoZWFkZXIuc2V0QmFja2dyb3VuZENvbG9yKGNvbG9ycy5ncmF5KQogICAgaGVhZGVyLmNsZWFyKCkKICAgIGhlYWRlci5zZXRDdXJzb3JQb3MoMiwgMSkKICAgIGhlYWRlci5ibGl0KCIgIiAuLiBzdHJpbmcuY2hhcig3KSAuLiAiICIsIHByb2ZpbGluZ1RpbWUgPT0gbmlsIGFuZCAiZWVlIiBvciAiMDAwIiwgcHJvZmlsaW5nVGltZSA9PSBuaWwgYW5kICIwMDAiIG9yICJlZWUiKQogICAgbG9jYWwgdGltZXN0ciA9ICIwOjAwOjAwIgogICAgaWYgcHJvZmlsaW5nVGltZSB+PSBuaWwgdGhlbiB0aW1lc3RyID0gZm9ybWF0VGltZSgob3MuZXBvY2goKSAtIHByb2ZpbGluZ1RpbWUpIC8gMTAwMCkgZW5kCiAgICBoZWFkZXIuc2V0QmFja2dyb3VuZENvbG9yKGNvbG9ycy5ncmF5KQogICAgaGVhZGVyLnNldFRleHRDb2xvcihjb2xvcnMud2hpdGUpCiAgICBoZWFkZXIuc2V0Q3Vyc29yUG9zKHcgLSAjdGltZXN0ciwgMSkKICAgIGhlYWRlci53cml0ZSh0aW1lc3RyKQogICAgbG9jYWwgaSA9IDEKICAgIGZvciBrLHYgaW4gaXBhaXJzKHdpZHRocykgZG8KICAgICAgICBoZWFkZXIuc2V0Q3Vyc29yUG9zKGksIDIpCiAgICAgICAgaGVhZGVyLndyaXRlKHZbMV0pCiAgICAgICAgaSA9IGkgKyB2WzJdCiAgICBlbmQKZW5kCgpsb2NhbCBzb3J0RnVuY3Rpb25zID0gewogICAgWzBdID0gZnVuY3Rpb24oYSwgYikgcmV0dXJuIGEuY291bnQgPiBiLmNvdW50IGVuZCwKICAgIGZ1bmN0aW9uKGEsIGIpIHJldHVybiBhLnNvdXJjZSA+IGIuc291cmNlIGVuZCwKICAgIGZ1bmN0aW9uKGEsIGIpIHJldHVybiBhLmZ1bmMgPiBiLmZ1bmMgZW5kLAogICAgZnVuY3Rpb24oYSwgYikgcmV0dXJuIGEudGltZSA+IGIudGltZSBlbmQsCiAgICBmdW5jdGlvbihhLCBiKSByZXR1cm4gYS5jb3VudCA8IGIuY291bnQgZW5kLAogICAgZnVuY3Rpb24oYSwgYikgcmV0dXJuIGEuc291cmNlIDwgYi5zb3VyY2UgZW5kLAogICAgZnVuY3Rpb24oYSwgYikgcmV0dXJuIGEuZnVuYyA8IGIuZnVuYyBlbmQsCiAgICBmdW5jdGlvbihhLCBiKSByZXR1cm4gYS50aW1lIDwgYi50aW1lIGVuZCwKfQoKbG9jYWwgc29ydGVyID0gMQoKbG9jYWwgZnVuY3Rpb24gcGFyc2VQcm9maWxlKCkKICAgIGxvY2FsIGxpbmVzID0ge30KICAgIGxvY2FsIHByb2ZpbGUgPSBkZWJ1Z2dlci5wcm9maWxlKCkKICAgIGxvY2FsIGN3ID0gMgogICAgbG9jYWwgdHcgPSA0CiAgICBmb3Igayx2IGluIHBhaXJzKHByb2ZpbGUpIGRvIGZvciBsLHcgaW4gcGFpcnModikgZG8gCiAgICAgICAgdGFibGUuaW5zZXJ0KGxpbmVzLCB7c291cmNlID0gaywgZnVuYyA9IGwsIGNvdW50ID0gdy5jb3VudCwgdGltZSA9IHcudGltZX0pIAogICAgICAgIGN3ID0gbWF0aC5tYXgobWF0aC5mbG9vcihtYXRoLmxvZzEwKHcuY291bnQpKSArIDIsIGN3KQogICAgICAgIHR3ID0gbWF0aC5tYXgobWF0aC5mbG9vcihtYXRoLmxvZzEwKHcudGltZSkpICsgMiwgdHcpCiAgICBlbmQgZW5kCiAgICB3aWR0aHNbMV1bMl0gPSBjdwogICAgd2lkdGhzWzJdWzJdID0gbWF0aC5mbG9vcigodyAtIChjdyArIHR3KSkgLyAyKQogICAgd2lkdGhzWzNdWzJdID0gbWF0aC5jZWlsKCh3IC0gKGN3ICsgdHcpKSAvIDIpCiAgICB3aWR0aHNbNF1bMl0gPSB0dwogICAgYm9keSA9IHdpbmRvdy5jcmVhdGUodmlld3BvcnQsIDEsIDEsIHcsICNsaW5lcykKICAgIHNjcm9sbFBvcyA9IDEKICAgIHNjcm9sbFNpemUgPSAjbGluZXMKICAgIHRhYmxlLnNvcnQobGluZXMsIHNvcnRGdW5jdGlvbnNbc29ydGVyXSkKICAgIGZvciBrLHYgaW4gaXBhaXJzKGxpbmVzKSBkbwogICAgICAgIGxvY2FsIGkgPSAxCiAgICAgICAgZm9yIGwsdyBpbiBpcGFpcnMod2lkdGhzKSBkbwogICAgICAgICAgICBib2R5LnNldEN1cnNvclBvcyhpLCBrKQogICAgICAgICAgICBpZiB3WzNdID09ICJzb3VyY2UiIGFuZCAjdi5zb3VyY2UgPiB3WzJdLTEgdGhlbiBib2R5LndyaXRlKHN0cmluZy5zdWIoZnMuZ2V0TmFtZSh2LnNvdXJjZSksIDEsIHdbMl0tMSkpCiAgICAgICAgICAgIGVsc2UgYm9keS53cml0ZShzdHJpbmcuc3ViKHRvc3RyaW5nKHZbd1szXV0pLCAxLCB3WzJdLTEpKSBlbmQKICAgICAgICAgICAgaSA9IGkgKyB3WzJdCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCgp1cGRhdGVIZWFkZXIoKQoKd2hpbGUgdHJ1ZSBkbwogICAgbG9jYWwgZXYgPSB7b3MucHVsbEV2ZW50KCl9CiAgICBpZiBldlsxXSA9PSAibW91c2VfY2xpY2siIGFuZCBldlsyXSA9PSAxIHRoZW4KICAgICAgICBpZiBldls0XSA9PSAxIGFuZCBldlszXSA+IDEgYW5kIGV2WzNdIDwgNSB0aGVuCiAgICAgICAgICAgIGlmIHByb2ZpbGluZ1RpbWUgdGhlbgogICAgICAgICAgICAgICAgb3MuY2FuY2VsVGltZXIodG0pCiAgICAgICAgICAgICAgICBwcm9maWxpbmdUaW1lID0gbmlsCiAgICAgICAgICAgICAgICB0bSA9IG5pbAogICAgICAgICAgICAgICAgZGVidWdnZXIuc3RhcnRQcm9maWxpbmcoZmFsc2UpCiAgICAgICAgICAgICAgICBwYXJzZVByb2ZpbGUoKQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBwcm9maWxpbmdUaW1lID0gb3MuZXBvY2goKQogICAgICAgICAgICAgICAgdG0gPSBvcy5zdGFydFRpbWVyKDEpCiAgICAgICAgICAgICAgICBkZWJ1Z2dlci5zdGFydFByb2ZpbGluZyh0cnVlKQogICAgICAgICAgICAgICAgaWYgYm9keSB0aGVuIGJvZHkuc2V0VmlzaWJsZShmYWxzZSkgZW5kCiAgICAgICAgICAgICAgICB2aWV3cG9ydC5jbGVhcigpCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICB1cGRhdGVIZWFkZXIoKQogICAgICAgIGVsc2VpZiBldls0XSA9PSAyIHRoZW4KICAgICAgICAgICAgaWYgZXZbM10gPD0gd2lkdGhzWzFdWzJdIHRoZW4gc29ydGVyID0gMCArIChiaXQuYmFuZChzb3J0ZXIsIDMpID09IDAgYW5kIGJpdC5ieG9yKGJpdC5iYW5kKHNvcnRlciwgNCksIDQpIG9yIDApCiAgICAgICAgICAgIGVsc2VpZiBldlszXSA+IHdpZHRoc1sxXVsyXSBhbmQgZXZbM10gPD0gd2lkdGhzWzFdWzJdICsgd2lkdGhzWzJdWzJdIHRoZW4gc29ydGVyID0gMSArIChiaXQuYmFuZChzb3J0ZXIsIDMpID09IDEgYW5kIGJpdC5ieG9yKGJpdC5iYW5kKHNvcnRlciwgNCksIDQpIG9yIDApCiAgICAgICAgICAgIGVsc2VpZiBldlszXSA+IHdpZHRoc1sxXVsyXSArIHdpZHRoc1syXVsyXSBhbmQgZXZbM10gPD0gd2lkdGhzWzFdWzJdICsgd2lkdGhzWzJdWzJdICsgd2lkdGhzWzNdWzJdIHRoZW4gc29ydGVyID0gMiArIChiaXQuYmFuZChzb3J0ZXIsIDMpID09IDIgYW5kIGJpdC5ieG9yKGJpdC5iYW5kKHNvcnRlciwgNCksIDQpIG9yIDApCiAgICAgICAgICAgIGVsc2Ugc29ydGVyID0gMyArIChiaXQuYmFuZChzb3J0ZXIsIDMpID09IDMgYW5kIGJpdC5ieG9yKGJpdC5iYW5kKHNvcnRlciwgNCksIDQpIG9yIDApIGVuZAogICAgICAgICAgICBwYXJzZVByb2ZpbGUoKQogICAgICAgIGVuZAogICAgZWxzZWlmIGV2WzFdID09ICJtb3VzZV9zY3JvbGwiIGFuZCBldls0XSA+IDIgdGhlbgogICAgICAgIGlmIGV2WzJdID09IC0xIGFuZCBzY3JvbGxQb3MgPCAxIHRoZW4gc2Nyb2xsUG9zID0gc2Nyb2xsUG9zICsgMQogICAgICAgIGVsc2VpZiBldlsyXSA9PSAxIGFuZCBzY3JvbGxQb3MgPiBoIC0gMSAtIHNjcm9sbFNpemUgdGhlbiBzY3JvbGxQb3MgPSBzY3JvbGxQb3MgLSAxIGVuZAogICAgICAgIGlmIGJvZHkgdGhlbiBib2R5LnJlcG9zaXRpb24oMSwgc2Nyb2xsUG9zKSBlbmQKICAgIGVsc2VpZiBldlsxXSA9PSAidGltZXIiIGFuZCBldlsyXSA9PSB0bSB0aGVuCiAgICAgICAgdXBkYXRlSGVhZGVyKCkKICAgICAgICBwYXJzZVByb2ZpbGUoKQogICAgICAgIHRtID0gb3Muc3RhcnRUaW1lcigxKQogICAgZWxzZWlmIGV2WzFdID09ICJ0ZXJtX3Jlc2l6ZSIgdGhlbgogICAgICAgIHcsIGggPSB0ZXJtLmdldFNpemUoKQogICAgICAgIGhlYWRlciA9IHdpbmRvdy5jcmVhdGUodGVybS5jdXJyZW50KCksIDEsIDEsIHcsIDIpCiAgICAgICAgdmlld3BvcnQgPSB3aW5kb3cuY3JlYXRlKHRlcm0uY3VycmVudCgpLCAxLCAzLCB3LCBoIC0gMikKICAgICAgICB3aWR0aHMgPSB7eyIjIiwgNSwgImNvdW50In0sIHsiU291cmNlIiwgbWF0aC5jZWlsKCh3IC0gMTEpIC8gMiksICJzb3VyY2UifSwgeyJGdW5jdGlvbiIsIG1hdGguZmxvb3IoKHcgLSAxMSkgLyAyKSwgImZ1bmMifSwgeyJUaW1lIiwgNiwgInRpbWUifX0KICAgICAgICB1cGRhdGVIZWFkZXIoKQogICAgZWxzZWlmIGV2WzFdID09ICJrZXkiIHRoZW4KICAgICAgICBpZiBldlsyXSA9PSBrZXlzLmVudGVyIHRoZW4KICAgICAgICAgICAgaWYgcHJvZmlsaW5nVGltZSB0aGVuCiAgICAgICAgICAgICAgICBvcy5jYW5jZWxUaW1lcih0bSkKICAgICAgICAgICAgICAgIHByb2ZpbGluZ1RpbWUgPSBuaWwKICAgICAgICAgICAgICAgIHRtID0gbmlsCiAgICAgICAgICAgICAgICBkZWJ1Z2dlci5zdGFydFByb2ZpbGluZyhmYWxzZSkKICAgICAgICAgICAgICAgIHBhcnNlUHJvZmlsZSgpCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHByb2ZpbGluZ1RpbWUgPSBvcy5lcG9jaCgpCiAgICAgICAgICAgICAgICB0bSA9IG9zLnN0YXJ0VGltZXIoMSkKICAgICAgICAgICAgICAgIGRlYnVnZ2VyLnN0YXJ0UHJvZmlsaW5nKHRydWUpCiAgICAgICAgICAgICAgICBpZiBib2R5IHRoZW4gYm9keS5zZXRWaXNpYmxlKGZhbHNlKSBlbmQKICAgICAgICAgICAgICAgIHZpZXdwb3J0LmNsZWFyKCkKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIHVwZGF0ZUhlYWRlcigpCiAgICAgICAgZWxzZWlmIGV2WzJdID09IGtleXMudXAgYW5kIHNjcm9sbFBvcyA8IDEgdGhlbiAKICAgICAgICAgICAgc2Nyb2xsUG9zID0gc2Nyb2xsUG9zICsgMQogICAgICAgICAgICBpZiBib2R5IHRoZW4gYm9keS5yZXBvc2l0aW9uKDEsIHNjcm9sbFBvcykgZW5kCiAgICAgICAgZWxzZWlmIGV2WzJdID09IGtleXMuZG93biBhbmQgc2Nyb2xsUG9zID4gaCAtIDEgLSBzY3JvbGxTaXplIHRoZW4gCiAgICAgICAgICAgIHNjcm9sbFBvcyA9IHNjcm9sbFBvcyAtIDEgCiAgICAgICAgICAgIGlmIGJvZHkgdGhlbiBib2R5LnJlcG9zaXRpb24oMSwgc2Nyb2xsUG9zKSBlbmQKICAgICAgICBlbmQKICAgIGVuZAplbmQKZW5kKQoKaWYgbm90IG9rIHRoZW4gcHJpbnRFcnJvcihlcnIpIGVuZAp3aGlsZSBvcy5wdWxsRXZlbnQoKSBkbyBlbmQ=";
   Module["FS_createDataFile"]("/craftos/debug", "profiler.lua", decodeBase64(fileData235), true, true, false);
  }
  if (Module["calledRun"]) {
   runWithFS();
  } else {
   if (!Module["preRun"]) Module["preRun"] = [];
   Module["preRun"].push(runWithFS);
  }
 };
 loadPackage({
  "files": []
 });
})();

var necessaryPreJSTasks = Module["preRun"].slice();

if (!Module["preRun"]) throw "Module.preRun should exist because file support used it; did a pre-js delete it?";

necessaryPreJSTasks.forEach(function(task) {
 if (Module["preRun"].indexOf(task) < 0) throw "All preRun tasks that exist before user pre-js code should remain after; did you replace Module or modify Module.preRun?";
});

var moduleOverrides = {};

var key;

for (key in Module) {
 if (Module.hasOwnProperty(key)) {
  moduleOverrides[key] = Module[key];
 }
}

var arguments_ = [];

var thisProgram = "./this.program";

var quit_ = function(status, toThrow) {
 throw toThrow;
};

var ENVIRONMENT_IS_WEB = typeof window === "object";

var ENVIRONMENT_IS_WORKER = typeof importScripts === "function";

var ENVIRONMENT_IS_NODE = typeof process === "object" && typeof process.versions === "object" && typeof process.versions.node === "string";

var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module["ENVIRONMENT"]) {
 throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)");
}

var ENVIRONMENT_IS_PTHREAD = Module["ENVIRONMENT_IS_PTHREAD"] || false;

var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : undefined;

if (ENVIRONMENT_IS_WORKER) {
 _scriptDir = self.location.href;
} else if (ENVIRONMENT_IS_NODE) {
 _scriptDir = __filename;
}

var scriptDirectory = "";

function locateFile(path) {
 if (Module["locateFile"]) {
  return Module["locateFile"](path, scriptDirectory);
 }
 return scriptDirectory + path;
}

var read_, readAsync, readBinary, setWindowTitle;

function logExceptionOnExit(e) {
 if (e instanceof ExitStatus) return;
 var toLog = e;
 if (e && typeof e === "object" && e.stack) {
  toLog = [ e, e.stack ];
 }
 err("exiting due to exception: " + toLog);
}

var nodeFS;

var nodePath;

if (ENVIRONMENT_IS_NODE) {
 if (!(typeof process === "object" && typeof require === "function")) throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
 if (ENVIRONMENT_IS_WORKER) {
  scriptDirectory = require("path").dirname(scriptDirectory) + "/";
 } else {
  scriptDirectory = __dirname + "/";
 }
 read_ = function shell_read(filename, binary) {
  if (!nodeFS) nodeFS = require("fs");
  if (!nodePath) nodePath = require("path");
  filename = nodePath["normalize"](filename);
  return nodeFS["readFileSync"](filename, binary ? null : "utf8");
 };
 readBinary = function readBinary(filename) {
  var ret = read_(filename, true);
  if (!ret.buffer) {
   ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
 };
 readAsync = function readAsync(filename, onload, onerror) {
  if (!nodeFS) nodeFS = require("fs");
  if (!nodePath) nodePath = require("path");
  filename = nodePath["normalize"](filename);
  nodeFS["readFile"](filename, function(err, data) {
   if (err) onerror(err); else onload(data.buffer);
  });
 };
 if (process["argv"].length > 1) {
  thisProgram = process["argv"][1].replace(/\\/g, "/");
 }
 arguments_ = process["argv"].slice(2);
 if (typeof module !== "undefined") {
  module["exports"] = Module;
 }
 process["on"]("uncaughtException", function(ex) {
  if (!(ex instanceof ExitStatus)) {
   throw ex;
  }
 });
 process["on"]("unhandledRejection", function(reason) {
  throw reason;
 });
 quit_ = function(status, toThrow) {
  if (keepRuntimeAlive()) {
   process["exitCode"] = status;
   throw toThrow;
  }
  logExceptionOnExit(toThrow);
  process["exit"](status);
 };
 Module["inspect"] = function() {
  return "[Emscripten Module object]";
 };
 var nodeWorkerThreads;
 try {
  nodeWorkerThreads = require("worker_threads");
 } catch (e) {
  console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?');
  throw e;
 }
 global.Worker = nodeWorkerThreads.Worker;
} else if (ENVIRONMENT_IS_SHELL) {
 if (typeof process === "object" && typeof require === "function" || typeof window === "object" || typeof importScripts === "function") throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
 if (typeof read != "undefined") {
  read_ = function shell_read(f) {
   return read(f);
  };
 }
 readBinary = function readBinary(f) {
  var data;
  if (typeof readbuffer === "function") {
   return new Uint8Array(readbuffer(f));
  }
  data = read(f, "binary");
  assert(typeof data === "object");
  return data;
 };
 readAsync = function readAsync(f, onload, onerror) {
  setTimeout(function() {
   onload(readBinary(f));
  }, 0);
 };
 if (typeof scriptArgs != "undefined") {
  arguments_ = scriptArgs;
 } else if (typeof arguments != "undefined") {
  arguments_ = arguments;
 }
 if (typeof quit === "function") {
  quit_ = function(status, toThrow) {
   logExceptionOnExit(toThrow);
   quit(status);
  };
 }
 if (typeof print !== "undefined") {
  if (typeof console === "undefined") console = {};
  console.log = print;
  console.warn = console.error = typeof printErr !== "undefined" ? printErr : print;
 }
} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
 if (ENVIRONMENT_IS_WORKER) {
  scriptDirectory = self.location.href;
 } else if (typeof document !== "undefined" && document.currentScript) {
  scriptDirectory = document.currentScript.src;
 }
 if (scriptDirectory.indexOf("blob:") !== 0) {
  scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf("/") + 1);
 } else {
  scriptDirectory = "";
 }
 if (!(typeof window === "object" || typeof importScripts === "function")) throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
 if (ENVIRONMENT_IS_NODE) {
  read_ = function shell_read(filename, binary) {
   if (!nodeFS) nodeFS = require("fs");
   if (!nodePath) nodePath = require("path");
   filename = nodePath["normalize"](filename);
   return nodeFS["readFileSync"](filename, binary ? null : "utf8");
  };
  readBinary = function readBinary(filename) {
   var ret = read_(filename, true);
   if (!ret.buffer) {
    ret = new Uint8Array(ret);
   }
   assert(ret.buffer);
   return ret;
  };
  readAsync = function readAsync(filename, onload, onerror) {
   if (!nodeFS) nodeFS = require("fs");
   if (!nodePath) nodePath = require("path");
   filename = nodePath["normalize"](filename);
   nodeFS["readFile"](filename, function(err, data) {
    if (err) onerror(err); else onload(data.buffer);
   });
  };
 } else {
  read_ = function(url) {
   var xhr = new XMLHttpRequest();
   xhr.open("GET", url, false);
   xhr.send(null);
   return xhr.responseText;
  };
  if (ENVIRONMENT_IS_WORKER) {
   readBinary = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open("GET", url, false);
    xhr.responseType = "arraybuffer";
    xhr.send(null);
    return new Uint8Array(xhr.response);
   };
  }
  readAsync = function(url, onload, onerror) {
   var xhr = new XMLHttpRequest();
   xhr.open("GET", url, true);
   xhr.responseType = "arraybuffer";
   xhr.onload = function() {
    if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
     onload(xhr.response);
     return;
    }
    onerror();
   };
   xhr.onerror = onerror;
   xhr.send(null);
  };
 }
 setWindowTitle = function(title) {
  document.title = title;
 };
} else {
 throw new Error("environment detection error");
}

if (ENVIRONMENT_IS_NODE) {
 if (typeof performance === "undefined") {
  global.performance = require("perf_hooks").performance;
 }
}

var defaultPrint = console.log.bind(console);

var defaultPrintErr = console.warn.bind(console);

if (ENVIRONMENT_IS_NODE) {
 var fs = require("fs");
 defaultPrint = function(str) {
  fs.writeSync(1, str + "\n");
 };
 defaultPrintErr = function(str) {
  fs.writeSync(2, str + "\n");
 };
}

var out = Module["print"] || defaultPrint;

var err = Module["printErr"] || defaultPrintErr;

for (key in moduleOverrides) {
 if (moduleOverrides.hasOwnProperty(key)) {
  Module[key] = moduleOverrides[key];
 }
}

moduleOverrides = null;

if (Module["arguments"]) arguments_ = Module["arguments"];

if (!Object.getOwnPropertyDescriptor(Module, "arguments")) {
 Object.defineProperty(Module, "arguments", {
  configurable: true,
  get: function() {
   abort("Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
  }
 });
}

if (Module["thisProgram"]) thisProgram = Module["thisProgram"];

if (!Object.getOwnPropertyDescriptor(Module, "thisProgram")) {
 Object.defineProperty(Module, "thisProgram", {
  configurable: true,
  get: function() {
   abort("Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
  }
 });
}

if (Module["quit"]) quit_ = Module["quit"];

if (!Object.getOwnPropertyDescriptor(Module, "quit")) {
 Object.defineProperty(Module, "quit", {
  configurable: true,
  get: function() {
   abort("Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
  }
 });
}

assert(typeof Module["memoryInitializerPrefixURL"] === "undefined", "Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead");

assert(typeof Module["pthreadMainPrefixURL"] === "undefined", "Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead");

assert(typeof Module["cdInitializerPrefixURL"] === "undefined", "Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead");

assert(typeof Module["filePackagePrefixURL"] === "undefined", "Module.filePackagePrefixURL option was removed, use Module.locateFile instead");

assert(typeof Module["read"] === "undefined", "Module.read option was removed (modify read_ in JS)");

assert(typeof Module["readAsync"] === "undefined", "Module.readAsync option was removed (modify readAsync in JS)");

assert(typeof Module["readBinary"] === "undefined", "Module.readBinary option was removed (modify readBinary in JS)");

assert(typeof Module["setWindowTitle"] === "undefined", "Module.setWindowTitle option was removed (modify setWindowTitle in JS)");

assert(typeof Module["TOTAL_MEMORY"] === "undefined", "Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY");

if (!Object.getOwnPropertyDescriptor(Module, "read")) {
 Object.defineProperty(Module, "read", {
  configurable: true,
  get: function() {
   abort("Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
  }
 });
}

if (!Object.getOwnPropertyDescriptor(Module, "readAsync")) {
 Object.defineProperty(Module, "readAsync", {
  configurable: true,
  get: function() {
   abort("Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
  }
 });
}

if (!Object.getOwnPropertyDescriptor(Module, "readBinary")) {
 Object.defineProperty(Module, "readBinary", {
  configurable: true,
  get: function() {
   abort("Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
  }
 });
}

if (!Object.getOwnPropertyDescriptor(Module, "setWindowTitle")) {
 Object.defineProperty(Module, "setWindowTitle", {
  configurable: true,
  get: function() {
   abort("Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
  }
 });
}

var PROXYFS = "PROXYFS is no longer included by default; build with -lproxyfs.js";

var WORKERFS = "WORKERFS is no longer included by default; build with -lworkerfs.js";

var NODEFS = "NODEFS is no longer included by default; build with -lnodefs.js";

assert(ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER || ENVIRONMENT_IS_NODE, "Pthreads do not work in this environment yet (need Web Workers, or an alternative to them)");

assert(!ENVIRONMENT_IS_SHELL, "shell environment detected but not enabled at build time.  Add 'shell' to `-s ENVIRONMENT` to enable.");

var STACK_ALIGN = 16;

var POINTER_SIZE = 4;

function getNativeTypeSize(type) {
 switch (type) {
 case "i1":
 case "i8":
  return 1;

 case "i16":
  return 2;

 case "i32":
  return 4;

 case "i64":
  return 8;

 case "float":
  return 4;

 case "double":
  return 8;

 default:
  {
   if (type[type.length - 1] === "*") {
    return POINTER_SIZE;
   } else if (type[0] === "i") {
    var bits = Number(type.substr(1));
    assert(bits % 8 === 0, "getNativeTypeSize invalid bits " + bits + ", type " + type);
    return bits / 8;
   } else {
    return 0;
   }
  }
 }
}

function warnOnce(text) {
 if (!warnOnce.shown) warnOnce.shown = {};
 if (!warnOnce.shown[text]) {
  warnOnce.shown[text] = 1;
  err(text);
 }
}

function convertJsFunctionToWasm(func, sig) {
 if (typeof WebAssembly.Function === "function") {
  var typeNames = {
   "i": "i32",
   "j": "i64",
   "f": "f32",
   "d": "f64"
  };
  var type = {
   parameters: [],
   results: sig[0] == "v" ? [] : [ typeNames[sig[0]] ]
  };
  for (var i = 1; i < sig.length; ++i) {
   type.parameters.push(typeNames[sig[i]]);
  }
  return new WebAssembly.Function(type, func);
 }
 var typeSection = [ 1, 0, 1, 96 ];
 var sigRet = sig.slice(0, 1);
 var sigParam = sig.slice(1);
 var typeCodes = {
  "i": 127,
  "j": 126,
  "f": 125,
  "d": 124
 };
 typeSection.push(sigParam.length);
 for (var i = 0; i < sigParam.length; ++i) {
  typeSection.push(typeCodes[sigParam[i]]);
 }
 if (sigRet == "v") {
  typeSection.push(0);
 } else {
  typeSection = typeSection.concat([ 1, typeCodes[sigRet] ]);
 }
 typeSection[1] = typeSection.length - 2;
 var bytes = new Uint8Array([ 0, 97, 115, 109, 1, 0, 0, 0 ].concat(typeSection, [ 2, 7, 1, 1, 101, 1, 102, 0, 0, 7, 5, 1, 1, 102, 0, 0 ]));
 var module = new WebAssembly.Module(bytes);
 var instance = new WebAssembly.Instance(module, {
  "e": {
   "f": func
  }
 });
 var wrappedFunc = instance.exports["f"];
 return wrappedFunc;
}

var freeTableIndexes = [];

var functionsInTableMap;

function getEmptyTableSlot() {
 if (freeTableIndexes.length) {
  return freeTableIndexes.pop();
 }
 try {
  wasmTable.grow(1);
 } catch (err) {
  if (!(err instanceof RangeError)) {
   throw err;
  }
  throw "Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.";
 }
 return wasmTable.length - 1;
}

function updateTableMap(offset, count) {
 for (var i = offset; i < offset + count; i++) {
  var item = getWasmTableEntry(i);
  if (item) {
   functionsInTableMap.set(item, i);
  }
 }
}

function addFunction(func, sig) {
 assert(typeof func !== "undefined");
 if (!functionsInTableMap) {
  functionsInTableMap = new WeakMap();
  updateTableMap(0, wasmTable.length);
 }
 if (functionsInTableMap.has(func)) {
  return functionsInTableMap.get(func);
 }
 var ret = getEmptyTableSlot();
 try {
  setWasmTableEntry(ret, func);
 } catch (err) {
  if (!(err instanceof TypeError)) {
   throw err;
  }
  assert(typeof sig !== "undefined", "Missing signature argument to addFunction: " + func);
  var wrapped = convertJsFunctionToWasm(func, sig);
  setWasmTableEntry(ret, wrapped);
 }
 functionsInTableMap.set(func, ret);
 return ret;
}

function removeFunction(index) {
 functionsInTableMap.delete(getWasmTableEntry(index));
 freeTableIndexes.push(index);
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
 tempRet0 = value;
};

var getTempRet0 = function() {
 return tempRet0;
};

var Atomics_load = Atomics.load;

var Atomics_store = Atomics.store;

var Atomics_compareExchange = Atomics.compareExchange;

var wasmBinary;

if (Module["wasmBinary"]) wasmBinary = Module["wasmBinary"];

if (!Object.getOwnPropertyDescriptor(Module, "wasmBinary")) {
 Object.defineProperty(Module, "wasmBinary", {
  configurable: true,
  get: function() {
   abort("Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
  }
 });
}

var noExitRuntime = Module["noExitRuntime"] || true;

if (!Object.getOwnPropertyDescriptor(Module, "noExitRuntime")) {
 Object.defineProperty(Module, "noExitRuntime", {
  configurable: true,
  get: function() {
   abort("Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
  }
 });
}

if (typeof WebAssembly !== "object") {
 abort("no native wasm support detected");
}

function setValue(ptr, value, type, noSafe) {
 type = type || "i8";
 if (type.charAt(type.length - 1) === "*") type = "i32";
 switch (type) {
 case "i1":
  GROWABLE_HEAP_I8()[ptr >> 0] = value;
  break;

 case "i8":
  GROWABLE_HEAP_I8()[ptr >> 0] = value;
  break;

 case "i16":
  GROWABLE_HEAP_I16()[ptr >> 1] = value;
  break;

 case "i32":
  GROWABLE_HEAP_I32()[ptr >> 2] = value;
  break;

 case "i64":
  tempI64 = [ value >>> 0, (tempDouble = value, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0) ], 
  GROWABLE_HEAP_I32()[ptr >> 2] = tempI64[0], GROWABLE_HEAP_I32()[ptr + 4 >> 2] = tempI64[1];
  break;

 case "float":
  GROWABLE_HEAP_F32()[ptr >> 2] = value;
  break;

 case "double":
  GROWABLE_HEAP_F64()[ptr >> 3] = value;
  break;

 default:
  abort("invalid type for setValue: " + type);
 }
}

function getValue(ptr, type, noSafe) {
 type = type || "i8";
 if (type.charAt(type.length - 1) === "*") type = "i32";
 switch (type) {
 case "i1":
  return GROWABLE_HEAP_I8()[ptr >> 0];

 case "i8":
  return GROWABLE_HEAP_I8()[ptr >> 0];

 case "i16":
  return GROWABLE_HEAP_I16()[ptr >> 1];

 case "i32":
  return GROWABLE_HEAP_I32()[ptr >> 2];

 case "i64":
  return GROWABLE_HEAP_I32()[ptr >> 2];

 case "float":
  return GROWABLE_HEAP_F32()[ptr >> 2];

 case "double":
  return Number(GROWABLE_HEAP_F64()[ptr >> 3]);

 default:
  abort("invalid type for getValue: " + type);
 }
 return null;
}

var wasmMemory;

var wasmModule;

var ABORT = false;

var EXITSTATUS;

function assert(condition, text) {
 if (!condition) {
  abort("Assertion failed: " + text);
 }
}

function getCFunc(ident) {
 var func = Module["_" + ident];
 assert(func, "Cannot call unknown function " + ident + ", make sure it is exported");
 return func;
}

function ccall(ident, returnType, argTypes, args, opts) {
 var toC = {
  "string": function(str) {
   var ret = 0;
   if (str !== null && str !== undefined && str !== 0) {
    var len = (str.length << 2) + 1;
    ret = stackAlloc(len);
    stringToUTF8(str, ret, len);
   }
   return ret;
  },
  "array": function(arr) {
   var ret = stackAlloc(arr.length);
   writeArrayToMemory(arr, ret);
   return ret;
  }
 };
 function convertReturnValue(ret) {
  if (returnType === "string") return UTF8ToString(ret);
  if (returnType === "boolean") return Boolean(ret);
  return ret;
 }
 var func = getCFunc(ident);
 var cArgs = [];
 var stack = 0;
 assert(returnType !== "array", 'Return type should not be "array".');
 if (args) {
  for (var i = 0; i < args.length; i++) {
   var converter = toC[argTypes[i]];
   if (converter) {
    if (stack === 0) stack = stackSave();
    cArgs[i] = converter(args[i]);
   } else {
    cArgs[i] = args[i];
   }
  }
 }
 var ret = func.apply(null, cArgs);
 function onDone(ret) {
  runtimeKeepalivePop();
  if (stack !== 0) stackRestore(stack);
  return convertReturnValue(ret);
 }
 runtimeKeepalivePush();
 var asyncMode = opts && opts.async;
 if (Asyncify.currData) {
  assert(asyncMode, "The call to " + ident + " is running asynchronously. If this was intended, add the async option to the ccall/cwrap call.");
  return Asyncify.whenDone().then(onDone);
 }
 ret = onDone(ret);
 if (asyncMode) return Promise.resolve(ret);
 return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
 return function() {
  return ccall(ident, returnType, argTypes, arguments, opts);
 };
}

var ALLOC_NORMAL = 0;

var ALLOC_STACK = 1;

function allocate(slab, allocator) {
 var ret;
 assert(typeof allocator === "number", "allocate no longer takes a type argument");
 assert(typeof slab !== "number", "allocate no longer takes a number as arg0");
 if (allocator == ALLOC_STACK) {
  ret = stackAlloc(slab.length);
 } else {
  ret = _malloc(slab.length);
 }
 if (slab.subarray || slab.slice) {
  GROWABLE_HEAP_U8().set(slab, ret);
 } else {
  GROWABLE_HEAP_U8().set(new Uint8Array(slab), ret);
 }
 return ret;
}

function TextDecoderWrapper(encoding) {
 var textDecoder = new TextDecoder(encoding);
 this.decode = function(data) {
  assert(data instanceof Uint8Array);
  if (data.buffer instanceof SharedArrayBuffer) {
   data = new Uint8Array(data);
  }
  return textDecoder.decode.call(textDecoder, data);
 };
}

var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoderWrapper("utf8") : undefined;

function UTF8ArrayToString(heap, idx, maxBytesToRead) {
 var endIdx = idx + maxBytesToRead;
 var endPtr = idx;
 while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;
 if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
  return UTF8Decoder.decode(heap.subarray(idx, endPtr));
 } else {
  var str = "";
  while (idx < endPtr) {
   var u0 = heap[idx++];
   if (!(u0 & 128)) {
    str += String.fromCharCode(u0);
    continue;
   }
   var u1 = heap[idx++] & 63;
   if ((u0 & 224) == 192) {
    str += String.fromCharCode((u0 & 31) << 6 | u1);
    continue;
   }
   var u2 = heap[idx++] & 63;
   if ((u0 & 240) == 224) {
    u0 = (u0 & 15) << 12 | u1 << 6 | u2;
   } else {
    if ((u0 & 248) != 240) warnOnce("Invalid UTF-8 leading byte 0x" + u0.toString(16) + " encountered when deserializing a UTF-8 string in wasm memory to a JS string!");
    u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heap[idx++] & 63;
   }
   if (u0 < 65536) {
    str += String.fromCharCode(u0);
   } else {
    var ch = u0 - 65536;
    str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
   }
  }
 }
 return str;
}

function UTF8ToString(ptr, maxBytesToRead) {
 return ptr ? UTF8ArrayToString(GROWABLE_HEAP_U8(), ptr, maxBytesToRead) : "";
}

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
 if (!(maxBytesToWrite > 0)) return 0;
 var startIdx = outIdx;
 var endIdx = outIdx + maxBytesToWrite - 1;
 for (var i = 0; i < str.length; ++i) {
  var u = str.charCodeAt(i);
  if (u >= 55296 && u <= 57343) {
   var u1 = str.charCodeAt(++i);
   u = 65536 + ((u & 1023) << 10) | u1 & 1023;
  }
  if (u <= 127) {
   if (outIdx >= endIdx) break;
   heap[outIdx++] = u;
  } else if (u <= 2047) {
   if (outIdx + 1 >= endIdx) break;
   heap[outIdx++] = 192 | u >> 6;
   heap[outIdx++] = 128 | u & 63;
  } else if (u <= 65535) {
   if (outIdx + 2 >= endIdx) break;
   heap[outIdx++] = 224 | u >> 12;
   heap[outIdx++] = 128 | u >> 6 & 63;
   heap[outIdx++] = 128 | u & 63;
  } else {
   if (outIdx + 3 >= endIdx) break;
   if (u > 1114111) warnOnce("Invalid Unicode code point 0x" + u.toString(16) + " encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).");
   heap[outIdx++] = 240 | u >> 18;
   heap[outIdx++] = 128 | u >> 12 & 63;
   heap[outIdx++] = 128 | u >> 6 & 63;
   heap[outIdx++] = 128 | u & 63;
  }
 }
 heap[outIdx] = 0;
 return outIdx - startIdx;
}

function stringToUTF8(str, outPtr, maxBytesToWrite) {
 assert(typeof maxBytesToWrite == "number", "stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
 return stringToUTF8Array(str, GROWABLE_HEAP_U8(), outPtr, maxBytesToWrite);
}

function lengthBytesUTF8(str) {
 var len = 0;
 for (var i = 0; i < str.length; ++i) {
  var u = str.charCodeAt(i);
  if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
  if (u <= 127) ++len; else if (u <= 2047) len += 2; else if (u <= 65535) len += 3; else len += 4;
 }
 return len;
}

function AsciiToString(ptr) {
 var str = "";
 while (1) {
  var ch = GROWABLE_HEAP_U8()[ptr++ >> 0];
  if (!ch) return str;
  str += String.fromCharCode(ch);
 }
}

function stringToAscii(str, outPtr) {
 return writeAsciiToMemory(str, outPtr, false);
}

var UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoderWrapper("utf-16le") : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
 assert(ptr % 2 == 0, "Pointer passed to UTF16ToString must be aligned to two bytes!");
 var endPtr = ptr;
 var idx = endPtr >> 1;
 var maxIdx = idx + maxBytesToRead / 2;
 while (!(idx >= maxIdx) && GROWABLE_HEAP_U16()[idx]) ++idx;
 endPtr = idx << 1;
 if (endPtr - ptr > 32 && UTF16Decoder) {
  return UTF16Decoder.decode(GROWABLE_HEAP_U8().subarray(ptr, endPtr));
 } else {
  var str = "";
  for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
   var codeUnit = GROWABLE_HEAP_I16()[ptr + i * 2 >> 1];
   if (codeUnit == 0) break;
   str += String.fromCharCode(codeUnit);
  }
  return str;
 }
}

function stringToUTF16(str, outPtr, maxBytesToWrite) {
 assert(outPtr % 2 == 0, "Pointer passed to stringToUTF16 must be aligned to two bytes!");
 assert(typeof maxBytesToWrite == "number", "stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
 if (maxBytesToWrite === undefined) {
  maxBytesToWrite = 2147483647;
 }
 if (maxBytesToWrite < 2) return 0;
 maxBytesToWrite -= 2;
 var startPtr = outPtr;
 var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;
 for (var i = 0; i < numCharsToWrite; ++i) {
  var codeUnit = str.charCodeAt(i);
  GROWABLE_HEAP_I16()[outPtr >> 1] = codeUnit;
  outPtr += 2;
 }
 GROWABLE_HEAP_I16()[outPtr >> 1] = 0;
 return outPtr - startPtr;
}

function lengthBytesUTF16(str) {
 return str.length * 2;
}

function UTF32ToString(ptr, maxBytesToRead) {
 assert(ptr % 4 == 0, "Pointer passed to UTF32ToString must be aligned to four bytes!");
 var i = 0;
 var str = "";
 while (!(i >= maxBytesToRead / 4)) {
  var utf32 = GROWABLE_HEAP_I32()[ptr + i * 4 >> 2];
  if (utf32 == 0) break;
  ++i;
  if (utf32 >= 65536) {
   var ch = utf32 - 65536;
   str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
  } else {
   str += String.fromCharCode(utf32);
  }
 }
 return str;
}

function stringToUTF32(str, outPtr, maxBytesToWrite) {
 assert(outPtr % 4 == 0, "Pointer passed to stringToUTF32 must be aligned to four bytes!");
 assert(typeof maxBytesToWrite == "number", "stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
 if (maxBytesToWrite === undefined) {
  maxBytesToWrite = 2147483647;
 }
 if (maxBytesToWrite < 4) return 0;
 var startPtr = outPtr;
 var endPtr = startPtr + maxBytesToWrite - 4;
 for (var i = 0; i < str.length; ++i) {
  var codeUnit = str.charCodeAt(i);
  if (codeUnit >= 55296 && codeUnit <= 57343) {
   var trailSurrogate = str.charCodeAt(++i);
   codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;
  }
  GROWABLE_HEAP_I32()[outPtr >> 2] = codeUnit;
  outPtr += 4;
  if (outPtr + 4 > endPtr) break;
 }
 GROWABLE_HEAP_I32()[outPtr >> 2] = 0;
 return outPtr - startPtr;
}

function lengthBytesUTF32(str) {
 var len = 0;
 for (var i = 0; i < str.length; ++i) {
  var codeUnit = str.charCodeAt(i);
  if (codeUnit >= 55296 && codeUnit <= 57343) ++i;
  len += 4;
 }
 return len;
}

function allocateUTF8(str) {
 var size = lengthBytesUTF8(str) + 1;
 var ret = _malloc(size);
 if (ret) stringToUTF8Array(str, GROWABLE_HEAP_I8(), ret, size);
 return ret;
}

function allocateUTF8OnStack(str) {
 var size = lengthBytesUTF8(str) + 1;
 var ret = stackAlloc(size);
 stringToUTF8Array(str, GROWABLE_HEAP_I8(), ret, size);
 return ret;
}

function writeStringToMemory(string, buffer, dontAddNull) {
 warnOnce("writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!");
 var lastChar, end;
 if (dontAddNull) {
  end = buffer + lengthBytesUTF8(string);
  lastChar = GROWABLE_HEAP_I8()[end];
 }
 stringToUTF8(string, buffer, Infinity);
 if (dontAddNull) GROWABLE_HEAP_I8()[end] = lastChar;
}

function writeArrayToMemory(array, buffer) {
 assert(array.length >= 0, "writeArrayToMemory array must have a length (should be an array or typed array)");
 GROWABLE_HEAP_I8().set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
 for (var i = 0; i < str.length; ++i) {
  assert(str.charCodeAt(i) === (str.charCodeAt(i) & 255));
  GROWABLE_HEAP_I8()[buffer++ >> 0] = str.charCodeAt(i);
 }
 if (!dontAddNull) GROWABLE_HEAP_I8()[buffer >> 0] = 0;
}

function alignUp(x, multiple) {
 if (x % multiple > 0) {
  x += multiple - x % multiple;
 }
 return x;
}

var HEAP, buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

if (ENVIRONMENT_IS_PTHREAD) {
 buffer = Module["buffer"];
}

function updateGlobalBufferAndViews(buf) {
 buffer = buf;
 Module["HEAP8"] = HEAP8 = new Int8Array(buf);
 Module["HEAP16"] = HEAP16 = new Int16Array(buf);
 Module["HEAP32"] = HEAP32 = new Int32Array(buf);
 Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
 Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
 Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
 Module["HEAPF32"] = HEAPF32 = new Float32Array(buf);
 Module["HEAPF64"] = HEAPF64 = new Float64Array(buf);
}

var TOTAL_STACK = 5242880;

if (Module["TOTAL_STACK"]) assert(TOTAL_STACK === Module["TOTAL_STACK"], "the stack size can no longer be determined at runtime");

var INITIAL_MEMORY = Module["INITIAL_MEMORY"] || 33554432;

if (!Object.getOwnPropertyDescriptor(Module, "INITIAL_MEMORY")) {
 Object.defineProperty(Module, "INITIAL_MEMORY", {
  configurable: true,
  get: function() {
   abort("Module.INITIAL_MEMORY has been replaced with plain INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
  }
 });
}

assert(INITIAL_MEMORY >= TOTAL_STACK, "INITIAL_MEMORY should be larger than TOTAL_STACK, was " + INITIAL_MEMORY + "! (TOTAL_STACK=" + TOTAL_STACK + ")");

assert(typeof Int32Array !== "undefined" && typeof Float64Array !== "undefined" && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined, "JS engine does not provide full typed array support");

if (ENVIRONMENT_IS_PTHREAD) {
 wasmMemory = Module["wasmMemory"];
 buffer = Module["buffer"];
} else {
 if (Module["wasmMemory"]) {
  wasmMemory = Module["wasmMemory"];
 } else {
  wasmMemory = new WebAssembly.Memory({
   "initial": INITIAL_MEMORY / 65536,
   "maximum": 2147483648 / 65536,
   "shared": true
  });
  if (!(wasmMemory.buffer instanceof SharedArrayBuffer)) {
   err("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag");
   if (ENVIRONMENT_IS_NODE) {
    console.log("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)");
   }
   throw Error("bad memory");
  }
 }
}

if (wasmMemory) {
 buffer = wasmMemory.buffer;
}

INITIAL_MEMORY = buffer.byteLength;

assert(INITIAL_MEMORY % 65536 === 0);

updateGlobalBufferAndViews(buffer);

var wasmTable;

function writeStackCookie() {
 var max = _emscripten_stack_get_end();
 assert((max & 3) == 0);
 GROWABLE_HEAP_I32()[max + 4 >> 2] = 34821223;
 GROWABLE_HEAP_I32()[max + 8 >> 2] = 2310721022;
 GROWABLE_HEAP_I32()[0] = 1668509029;
}

function checkStackCookie() {
 if (ABORT) return;
 var max = _emscripten_stack_get_end();
 var cookie1 = GROWABLE_HEAP_U32()[max + 4 >> 2];
 var cookie2 = GROWABLE_HEAP_U32()[max + 8 >> 2];
 if (cookie1 != 34821223 || cookie2 != 2310721022) {
  abort("Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x" + cookie2.toString(16) + " 0x" + cookie1.toString(16));
 }
 if (GROWABLE_HEAP_I32()[0] !== 1668509029) abort("Runtime error: The application has corrupted its heap memory area (address zero)!");
}

(function() {
 var h16 = new Int16Array(1);
 var h8 = new Int8Array(h16.buffer);
 h16[0] = 25459;
 if (h8[0] !== 115 || h8[1] !== 99) throw "Runtime error: expected the system to be little-endian! (Run with -s SUPPORT_BIG_ENDIAN=1 to bypass)";
})();

var __ATPRERUN__ = [];

var __ATINIT__ = [];

var __ATMAIN__ = [];

var __ATEXIT__ = [];

var __ATPOSTRUN__ = [];

var runtimeInitialized = false;

var runtimeExited = false;

var runtimeKeepaliveCounter = 0;

function keepRuntimeAlive() {
 return noExitRuntime || runtimeKeepaliveCounter > 0;
}

function preRun() {
 if (ENVIRONMENT_IS_PTHREAD) return;
 if (Module["preRun"]) {
  if (typeof Module["preRun"] == "function") Module["preRun"] = [ Module["preRun"] ];
  while (Module["preRun"].length) {
   addOnPreRun(Module["preRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
 checkStackCookie();
 assert(!runtimeInitialized);
 runtimeInitialized = true;
 if (ENVIRONMENT_IS_PTHREAD) return;
 if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
 FS.ignorePermissions = false;
 TTY.init();
 callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
 checkStackCookie();
 if (ENVIRONMENT_IS_PTHREAD) return;
 callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
 Asyncify.state = Asyncify.State.Disabled;
 checkStackCookie();
 if (ENVIRONMENT_IS_PTHREAD) return;
 PThread.terminateAllThreads();
 runtimeExited = true;
}

function postRun() {
 checkStackCookie();
 if (ENVIRONMENT_IS_PTHREAD) return;
 if (Module["postRun"]) {
  if (typeof Module["postRun"] == "function") Module["postRun"] = [ Module["postRun"] ];
  while (Module["postRun"].length) {
   addOnPostRun(Module["postRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
 __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
 __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
 __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {}

function addOnPostRun(cb) {
 __ATPOSTRUN__.unshift(cb);
}

assert(Math.imul, "This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");

assert(Math.fround, "This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");

assert(Math.clz32, "This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");

assert(Math.trunc, "This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");

var runDependencies = 0;

var runDependencyWatcher = null;

var dependenciesFulfilled = null;

var runDependencyTracking = {};

function getUniqueRunDependency(id) {
 var orig = id;
 while (1) {
  if (!runDependencyTracking[id]) return id;
  id = orig + Math.random();
 }
}

function addRunDependency(id) {
 runDependencies++;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
 if (id) {
  assert(!runDependencyTracking[id]);
  runDependencyTracking[id] = 1;
  if (runDependencyWatcher === null && typeof setInterval !== "undefined") {
   runDependencyWatcher = setInterval(function() {
    if (ABORT) {
     clearInterval(runDependencyWatcher);
     runDependencyWatcher = null;
     return;
    }
    var shown = false;
    for (var dep in runDependencyTracking) {
     if (!shown) {
      shown = true;
      err("still waiting on run dependencies:");
     }
     err("dependency: " + dep);
    }
    if (shown) {
     err("(end of list)");
    }
   }, 1e4);
  }
 } else {
  err("warning: run dependency added without ID");
 }
}

function removeRunDependency(id) {
 runDependencies--;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
 if (id) {
  assert(runDependencyTracking[id]);
  delete runDependencyTracking[id];
 } else {
  err("warning: run dependency removed without ID");
 }
 if (runDependencies == 0) {
  if (runDependencyWatcher !== null) {
   clearInterval(runDependencyWatcher);
   runDependencyWatcher = null;
  }
  if (dependenciesFulfilled) {
   var callback = dependenciesFulfilled;
   dependenciesFulfilled = null;
   callback();
  }
 }
}

Module["preloadedImages"] = {};

Module["preloadedAudios"] = {};

function abort(what) {
 if (ENVIRONMENT_IS_PTHREAD) {
  postMessage({
   "cmd": "onAbort",
   "arg": what
  });
 } else {
  if (Module["onAbort"]) {
   Module["onAbort"](what);
  }
 }
 what = "Aborted(" + what + ")";
 err(what);
 ABORT = true;
 EXITSTATUS = 1;
 var e = new WebAssembly.RuntimeError(what);
 throw e;
}

var dataURIPrefix = "data:application/octet-stream;base64,";

function isDataURI(filename) {
 return filename.startsWith(dataURIPrefix);
}

function isFileURI(filename) {
 return filename.startsWith("file://");
}

function createExportWrapper(name, fixedasm) {
 return function() {
  var displayName = name;
  var asm = fixedasm;
  if (!fixedasm) {
   asm = Module["asm"];
  }
  assert(runtimeInitialized, "native function `" + displayName + "` called before runtime initialization");
  assert(!runtimeExited, "native function `" + displayName + "` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
  if (!asm[name]) {
   assert(asm[name], "exported native function `" + displayName + "` not found");
  }
  return asm[name].apply(null, arguments);
 };
}

var wasmBinaryFile;

wasmBinaryFile = "craftos.wasm";

if (!isDataURI(wasmBinaryFile)) {
 wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary(file) {
 try {
  if (file == wasmBinaryFile && wasmBinary) {
   return new Uint8Array(wasmBinary);
  }
  if (readBinary) {
   return readBinary(file);
  } else {
   throw "both async and sync fetching of the wasm failed";
  }
 } catch (err) {
  abort(err);
 }
}

function getBinaryPromise() {
 if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
  if (typeof fetch === "function" && !isFileURI(wasmBinaryFile)) {
   return fetch(wasmBinaryFile, {
    credentials: "same-origin"
   }).then(function(response) {
    if (!response["ok"]) {
     throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
    }
    return response["arrayBuffer"]();
   }).catch(function() {
    return getBinary(wasmBinaryFile);
   });
  } else {
   if (readAsync) {
    return new Promise(function(resolve, reject) {
     readAsync(wasmBinaryFile, function(response) {
      resolve(new Uint8Array(response));
     }, reject);
    });
   }
  }
 }
 return Promise.resolve().then(function() {
  return getBinary(wasmBinaryFile);
 });
}

function createWasm() {
 var info = {
  "env": asmLibraryArg,
  "wasi_snapshot_preview1": asmLibraryArg
 };
 function receiveInstance(instance, module) {
  var exports = instance.exports;
  exports = Asyncify.instrumentWasmExports(exports);
  Module["asm"] = exports;
  registerTlsInit(Module["asm"]["emscripten_tls_init"]);
  wasmTable = Module["asm"]["__indirect_function_table"];
  assert(wasmTable, "table not found in wasm exports");
  addOnInit(Module["asm"]["__wasm_call_ctors"]);
  wasmModule = module;
  if (!ENVIRONMENT_IS_PTHREAD) {
   var numWorkersToLoad = PThread.unusedWorkers.length;
   PThread.unusedWorkers.forEach(function(w) {
    PThread.loadWasmModuleToWorker(w, function() {
     if (!--numWorkersToLoad) removeRunDependency("wasm-instantiate");
    });
   });
  }
 }
 if (!ENVIRONMENT_IS_PTHREAD) {
  addRunDependency("wasm-instantiate");
 }
 var trueModule = Module;
 function receiveInstantiationResult(result) {
  assert(Module === trueModule, "the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?");
  trueModule = null;
  receiveInstance(result["instance"], result["module"]);
 }
 function instantiateArrayBuffer(receiver) {
  return getBinaryPromise().then(function(binary) {
   return WebAssembly.instantiate(binary, info);
  }).then(function(instance) {
   return instance;
  }).then(receiver, function(reason) {
   err("failed to asynchronously prepare wasm: " + reason);
   if (isFileURI(wasmBinaryFile)) {
    err("warning: Loading from a file URI (" + wasmBinaryFile + ") is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing");
   }
   abort(reason);
  });
 }
 function instantiateAsync() {
  if (!wasmBinary && typeof WebAssembly.instantiateStreaming === "function" && !isDataURI(wasmBinaryFile) && !isFileURI(wasmBinaryFile) && typeof fetch === "function") {
   return fetch(wasmBinaryFile, {
    credentials: "same-origin"
   }).then(function(response) {
    var result = WebAssembly.instantiateStreaming(response, info);
    return result.then(receiveInstantiationResult, function(reason) {
     err("wasm streaming compile failed: " + reason);
     err("falling back to ArrayBuffer instantiation");
     return instantiateArrayBuffer(receiveInstantiationResult);
    });
   });
  } else {
   return instantiateArrayBuffer(receiveInstantiationResult);
  }
 }
 if (Module["instantiateWasm"]) {
  try {
   var exports = Module["instantiateWasm"](info, receiveInstance);
   exports = Asyncify.instrumentWasmExports(exports);
   return exports;
  } catch (e) {
   err("Module.instantiateWasm callback failed with error: " + e);
   return false;
  }
 }
 instantiateAsync();
 return {};
}

var tempDouble;

var tempI64;

var ASM_CONSTS = {
 746568: function() {
  return window.waitingForFilesystemSynchronization ? 1 : 0;
 },
 746627: function($0, $1) {
  if (Module.windowEventListener !== undefined) Module.windowEventListener.onWindowCreate($0, $1);
 },
 746726: function($0) {
  if (Module.windowEventListener !== undefined) Module.windowEventListener.onWindowDestroy($0);
 },
 746822: function($0) {
  var str = UTF8ToString($0) + "\n\n" + "Abort/Retry/Ignore/AlwaysIgnore? [ariA] :";
  var reply = window.prompt(str, "i");
  if (reply === null) {
   reply = "i";
  }
  return allocate(intArrayFromString(reply), "i8", ALLOC_NORMAL);
 },
 747047: function($0, $1) {
  alert(UTF8ToString($0) + "\n\n" + UTF8ToString($1));
 },
 747104: function($0, $1, $2) {
  var w = $0;
  var h = $1;
  var pixels = $2;
  if (!Module["SDL2"]) Module["SDL2"] = {};
  var SDL2 = Module["SDL2"];
  if (SDL2.ctxCanvas !== Module["canvas"]) {
   SDL2.ctx = Module["createContext"](Module["canvas"], false, true);
   SDL2.ctxCanvas = Module["canvas"];
  }
  if (SDL2.w !== w || SDL2.h !== h || SDL2.imageCtx !== SDL2.ctx) {
   SDL2.image = SDL2.ctx.createImageData(w, h);
   SDL2.w = w;
   SDL2.h = h;
   SDL2.imageCtx = SDL2.ctx;
  }
  var data = SDL2.image.data;
  var src = pixels >> 2;
  var dst = 0;
  var num;
  if (typeof CanvasPixelArray !== "undefined" && data instanceof CanvasPixelArray) {
   num = data.length;
   while (dst < num) {
    var val = GROWABLE_HEAP_I32()[src];
    data[dst] = val & 255;
    data[dst + 1] = val >> 8 & 255;
    data[dst + 2] = val >> 16 & 255;
    data[dst + 3] = 255;
    src++;
    dst += 4;
   }
  } else {
   if (SDL2.data32Data !== data) {
    SDL2.data32 = new Int32Array(data.buffer);
    SDL2.data8 = new Uint8Array(data.buffer);
   }
   var data32 = SDL2.data32;
   num = data32.length;
   data32.set(GROWABLE_HEAP_I32().subarray(src, src + num));
   var data8 = SDL2.data8;
   var i = 3;
   var j = i + 4 * num;
   if (num % 8 == 0) {
    while (i < j) {
     data8[i] = 255;
     i = i + 4 | 0;
     data8[i] = 255;
     i = i + 4 | 0;
     data8[i] = 255;
     i = i + 4 | 0;
     data8[i] = 255;
     i = i + 4 | 0;
     data8[i] = 255;
     i = i + 4 | 0;
     data8[i] = 255;
     i = i + 4 | 0;
     data8[i] = 255;
     i = i + 4 | 0;
     data8[i] = 255;
     i = i + 4 | 0;
    }
   } else {
    while (i < j) {
     data8[i] = 255;
     i = i + 4 | 0;
    }
   }
  }
  SDL2.ctx.putImageData(SDL2.image, 0, 0);
  return 0;
 },
 748559: function($0, $1, $2, $3, $4) {
  var w = $0;
  var h = $1;
  var hot_x = $2;
  var hot_y = $3;
  var pixels = $4;
  var canvas = document.createElement("canvas");
  canvas.width = w;
  canvas.height = h;
  var ctx = canvas.getContext("2d");
  var image = ctx.createImageData(w, h);
  var data = image.data;
  var src = pixels >> 2;
  var dst = 0;
  var num;
  if (typeof CanvasPixelArray !== "undefined" && data instanceof CanvasPixelArray) {
   num = data.length;
   while (dst < num) {
    var val = GROWABLE_HEAP_I32()[src];
    data[dst] = val & 255;
    data[dst + 1] = val >> 8 & 255;
    data[dst + 2] = val >> 16 & 255;
    data[dst + 3] = val >> 24 & 255;
    src++;
    dst += 4;
   }
  } else {
   var data32 = new Int32Array(data.buffer);
   num = data32.length;
   data32.set(GROWABLE_HEAP_I32().subarray(src, src + num));
  }
  ctx.putImageData(image, 0, 0);
  var url = hot_x === 0 && hot_y === 0 ? "url(" + canvas.toDataURL() + "), auto" : "url(" + canvas.toDataURL() + ") " + hot_x + " " + hot_y + ", auto";
  var urlBuf = _malloc(url.length + 1);
  stringToUTF8(url, urlBuf, url.length + 1);
  return urlBuf;
 },
 749548: function($0) {
  if (Module["canvas"]) {
   Module["canvas"].style["cursor"] = UTF8ToString($0);
  }
  return 0;
 },
 749641: function() {
  if (Module["canvas"]) {
   Module["canvas"].style["cursor"] = "none";
  }
 },
 749710: function() {
  return screen.width;
 },
 749735: function() {
  return screen.height;
 },
 749761: function() {
  return window.innerWidth;
 },
 749791: function() {
  return window.innerHeight;
 },
 749822: function($0) {
  if (typeof setWindowTitle !== "undefined") {
   setWindowTitle(UTF8ToString($0));
  }
  return 0;
 },
 749917: function() {
  if (typeof AudioContext !== "undefined") {
   return 1;
  } else if (typeof webkitAudioContext !== "undefined") {
   return 1;
  }
  return 0;
 },
 750054: function() {
  if (typeof navigator.mediaDevices !== "undefined" && typeof navigator.mediaDevices.getUserMedia !== "undefined") {
   return 1;
  } else if (typeof navigator.webkitGetUserMedia !== "undefined") {
   return 1;
  }
  return 0;
 },
 750278: function($0) {
  if (typeof Module["SDL2"] === "undefined") {
   Module["SDL2"] = {};
  }
  var SDL2 = Module["SDL2"];
  if (!$0) {
   SDL2.audio = {};
  } else {
   SDL2.capture = {};
  }
  if (!SDL2.audioContext) {
   if (typeof AudioContext !== "undefined") {
    SDL2.audioContext = new AudioContext();
   } else if (typeof webkitAudioContext !== "undefined") {
    SDL2.audioContext = new webkitAudioContext();
   }
   if (SDL2.audioContext) {
    autoResumeAudioContext(SDL2.audioContext);
   }
  }
  return SDL2.audioContext === undefined ? -1 : 0;
 },
 750771: function() {
  var SDL2 = Module["SDL2"];
  return SDL2.audioContext.sampleRate;
 },
 750839: function($0, $1, $2, $3) {
  var SDL2 = Module["SDL2"];
  var have_microphone = function(stream) {
   if (SDL2.capture.silenceTimer !== undefined) {
    clearTimeout(SDL2.capture.silenceTimer);
    SDL2.capture.silenceTimer = undefined;
   }
   SDL2.capture.mediaStreamNode = SDL2.audioContext.createMediaStreamSource(stream);
   SDL2.capture.scriptProcessorNode = SDL2.audioContext.createScriptProcessor($1, $0, 1);
   SDL2.capture.scriptProcessorNode.onaudioprocess = function(audioProcessingEvent) {
    if (SDL2 === undefined || SDL2.capture === undefined) {
     return;
    }
    audioProcessingEvent.outputBuffer.getChannelData(0).fill(0);
    SDL2.capture.currentCaptureBuffer = audioProcessingEvent.inputBuffer;
    dynCall("vi", $2, [ $3 ]);
   };
   SDL2.capture.mediaStreamNode.connect(SDL2.capture.scriptProcessorNode);
   SDL2.capture.scriptProcessorNode.connect(SDL2.audioContext.destination);
   SDL2.capture.stream = stream;
  };
  var no_microphone = function(error) {};
  SDL2.capture.silenceBuffer = SDL2.audioContext.createBuffer($0, $1, SDL2.audioContext.sampleRate);
  SDL2.capture.silenceBuffer.getChannelData(0).fill(0);
  var silence_callback = function() {
   SDL2.capture.currentCaptureBuffer = SDL2.capture.silenceBuffer;
   dynCall("vi", $2, [ $3 ]);
  };
  SDL2.capture.silenceTimer = setTimeout(silence_callback, $1 / SDL2.audioContext.sampleRate * 1e3);
  if (navigator.mediaDevices !== undefined && navigator.mediaDevices.getUserMedia !== undefined) {
   navigator.mediaDevices.getUserMedia({
    audio: true,
    video: false
   }).then(have_microphone).catch(no_microphone);
  } else if (navigator.webkitGetUserMedia !== undefined) {
   navigator.webkitGetUserMedia({
    audio: true,
    video: false
   }, have_microphone, no_microphone);
  }
 },
 752491: function($0, $1, $2, $3) {
  var SDL2 = Module["SDL2"];
  SDL2.audio.scriptProcessorNode = SDL2.audioContext["createScriptProcessor"]($1, 0, $0);
  SDL2.audio.scriptProcessorNode["onaudioprocess"] = function(e) {
   if (SDL2 === undefined || SDL2.audio === undefined) {
    return;
   }
   SDL2.audio.currentOutputBuffer = e["outputBuffer"];
   dynCall("vi", $2, [ $3 ]);
  };
  SDL2.audio.scriptProcessorNode["connect"](SDL2.audioContext["destination"]);
 },
 752901: function($0, $1) {
  var SDL2 = Module["SDL2"];
  var numChannels = SDL2.capture.currentCaptureBuffer.numberOfChannels;
  for (var c = 0; c < numChannels; ++c) {
   var channelData = SDL2.capture.currentCaptureBuffer.getChannelData(c);
   if (channelData.length != $1) {
    throw "Web Audio capture buffer length mismatch! Destination size: " + channelData.length + " samples vs expected " + $1 + " samples!";
   }
   if (numChannels == 1) {
    for (var j = 0; j < $1; ++j) {
     setValue($0 + j * 4, channelData[j], "float");
    }
   } else {
    for (var j = 0; j < $1; ++j) {
     setValue($0 + (j * numChannels + c) * 4, channelData[j], "float");
    }
   }
  }
 },
 753506: function($0, $1) {
  var SDL2 = Module["SDL2"];
  var numChannels = SDL2.audio.currentOutputBuffer["numberOfChannels"];
  for (var c = 0; c < numChannels; ++c) {
   var channelData = SDL2.audio.currentOutputBuffer["getChannelData"](c);
   if (channelData.length != $1) {
    throw "Web Audio output buffer length mismatch! Destination size: " + channelData.length + " samples vs expected " + $1 + " samples!";
   }
   for (var j = 0; j < $1; ++j) {
    channelData[j] = GROWABLE_HEAP_F32()[$0 + (j * numChannels + c << 2) >> 2];
   }
  }
 },
 753986: function($0) {
  var SDL2 = Module["SDL2"];
  if ($0) {
   if (SDL2.capture.silenceTimer !== undefined) {
    clearTimeout(SDL2.capture.silenceTimer);
   }
   if (SDL2.capture.stream !== undefined) {
    var tracks = SDL2.capture.stream.getAudioTracks();
    for (var i = 0; i < tracks.length; i++) {
     SDL2.capture.stream.removeTrack(tracks[i]);
    }
    SDL2.capture.stream = undefined;
   }
   if (SDL2.capture.scriptProcessorNode !== undefined) {
    SDL2.capture.scriptProcessorNode.onaudioprocess = function(audioProcessingEvent) {};
    SDL2.capture.scriptProcessorNode.disconnect();
    SDL2.capture.scriptProcessorNode = undefined;
   }
   if (SDL2.capture.mediaStreamNode !== undefined) {
    SDL2.capture.mediaStreamNode.disconnect();
    SDL2.capture.mediaStreamNode = undefined;
   }
   if (SDL2.capture.silenceBuffer !== undefined) {
    SDL2.capture.silenceBuffer = undefined;
   }
   SDL2.capture = undefined;
  } else {
   if (SDL2.audio.scriptProcessorNode != undefined) {
    SDL2.audio.scriptProcessorNode.disconnect();
    SDL2.audio.scriptProcessorNode = undefined;
   }
   SDL2.audio = undefined;
  }
  if (SDL2.audioContext !== undefined && SDL2.audio === undefined && SDL2.capture === undefined) {
   SDL2.audioContext.close();
   SDL2.audioContext = undefined;
  }
 }
};

function syncfs() {
 if (window.fsIsSyncing) return;
 window.fsIsSyncing = true;
 FS.syncfs(false, function(err) {
  window.fsIsSyncing = false;
  if (err != null) console.log("Error while syncing filesystem: ", err);
 });
}

function listenOnce(object, event, func) {
 object.addEventListener(event, func, {
  "once": true
 });
}

function autoResumeAudioContext(ctx, elements) {
 if (!elements) {
  elements = [ document, document.getElementById("canvas") ];
 }
 [ "keydown", "mousedown", "touchstart" ].forEach(function(event) {
  elements.forEach(function(element) {
   if (element) {
    listenOnce(element, event, function() {
     if (ctx.state === "suspended") ctx.resume();
    });
   }
  });
 });
}

function callRuntimeCallbacks(callbacks) {
 while (callbacks.length > 0) {
  var callback = callbacks.shift();
  if (typeof callback == "function") {
   callback(Module);
   continue;
  }
  var func = callback.func;
  if (typeof func === "number") {
   if (callback.arg === undefined) {
    (function() {
     dynCall_v.call(null, func);
    })();
   } else {
    (function(a1) {
     dynCall_vi.apply(null, [ func, a1 ]);
    })(callback.arg);
   }
  } else {
   func(callback.arg === undefined ? null : callback.arg);
  }
 }
}

function withStackSave(f) {
 var stack = stackSave();
 var ret = f();
 stackRestore(stack);
 return ret;
}

function demangle(func) {
 demangle.recursionGuard = (demangle.recursionGuard | 0) + 1;
 if (demangle.recursionGuard > 1) return func;
 var __cxa_demangle_func = Module["___cxa_demangle"] || Module["__cxa_demangle"];
 assert(__cxa_demangle_func);
 return withStackSave(function() {
  try {
   var s = func;
   if (s.startsWith("__Z")) s = s.substr(1);
   var len = lengthBytesUTF8(s) + 1;
   var buf = stackAlloc(len);
   stringToUTF8(s, buf, len);
   var status = stackAlloc(4);
   var ret = __cxa_demangle_func(buf, 0, 0, status);
   if (GROWABLE_HEAP_I32()[status >> 2] === 0 && ret) {
    return UTF8ToString(ret);
   }
  } catch (e) {} finally {
   _free(ret);
   if (demangle.recursionGuard < 2) --demangle.recursionGuard;
  }
  return func;
 });
}

function demangleAll(text) {
 var regex = /\b_Z[\w\d_]+/g;
 return text.replace(regex, function(x) {
  var y = demangle(x);
  return x === y ? x : y + " [" + x + "]";
 });
}

function dynCallLegacy(sig, ptr, args) {
 assert("dynCall_" + sig in Module, "bad function pointer type - no table for sig '" + sig + "'");
 if (args && args.length) {
  assert(args.length === sig.substring(1).replace(/j/g, "--").length);
 } else {
  assert(sig.length == 1);
 }
 var f = Module["dynCall_" + sig];
 return args && args.length ? f.apply(null, [ ptr ].concat(args)) : f.call(null, ptr);
}

var wasmTableMirror = [];

function getWasmTableEntry(funcPtr) {
 var func = wasmTableMirror[funcPtr];
 if (!func) {
  if (funcPtr >= wasmTableMirror.length) wasmTableMirror.length = funcPtr + 1;
  wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);
 }
 assert(wasmTable.get(funcPtr) == func, "JavaScript-side Wasm function table mirror is out of date!");
 return func;
}

function dynCall(sig, ptr, args) {
 return dynCallLegacy(sig, ptr, args);
}

function _emscripten_futex_wake(addr, count) {
 if (addr <= 0 || addr > GROWABLE_HEAP_I8().length || addr & 3 != 0 || count < 0) return -28;
 if (count == 0) return 0;
 if (count >= 2147483647) count = Infinity;
 assert(__emscripten_main_thread_futex > 0);
 var mainThreadWaitAddress = Atomics.load(GROWABLE_HEAP_I32(), __emscripten_main_thread_futex >> 2);
 var mainThreadWoken = 0;
 if (mainThreadWaitAddress == addr) {
  assert(!ENVIRONMENT_IS_WEB);
  var loadedAddr = Atomics.compareExchange(GROWABLE_HEAP_I32(), __emscripten_main_thread_futex >> 2, mainThreadWaitAddress, 0);
  if (loadedAddr == mainThreadWaitAddress) {
   --count;
   mainThreadWoken = 1;
   if (count <= 0) return 1;
  }
 }
 var ret = Atomics.notify(GROWABLE_HEAP_I32(), addr >> 2, count);
 if (ret >= 0) return ret + mainThreadWoken;
 throw "Atomics.notify returned an unexpected value " + ret;
}

Module["_emscripten_futex_wake"] = _emscripten_futex_wake;

function killThread(pthread_ptr) {
 assert(!ENVIRONMENT_IS_PTHREAD, "Internal Error! killThread() can only ever be called from main application thread!");
 assert(pthread_ptr, "Internal Error! Null pthread_ptr in killThread!");
 GROWABLE_HEAP_I32()[pthread_ptr >> 2] = 0;
 var pthread = PThread.pthreads[pthread_ptr];
 delete PThread.pthreads[pthread_ptr];
 pthread.worker.terminate();
 __emscripten_thread_free_data(pthread_ptr);
 PThread.runningWorkers.splice(PThread.runningWorkers.indexOf(pthread.worker), 1);
 pthread.worker.pthread = undefined;
}

function cancelThread(pthread_ptr) {
 assert(!ENVIRONMENT_IS_PTHREAD, "Internal Error! cancelThread() can only ever be called from main application thread!");
 assert(pthread_ptr, "Internal Error! Null pthread_ptr in cancelThread!");
 var pthread = PThread.pthreads[pthread_ptr];
 pthread.worker.postMessage({
  "cmd": "cancel"
 });
}

function cleanupThread(pthread_ptr) {
 assert(!ENVIRONMENT_IS_PTHREAD, "Internal Error! cleanupThread() can only ever be called from main application thread!");
 assert(pthread_ptr, "Internal Error! Null pthread_ptr in cleanupThread!");
 var pthread = PThread.pthreads[pthread_ptr];
 if (pthread) {
  GROWABLE_HEAP_I32()[pthread_ptr >> 2] = 0;
  var worker = pthread.worker;
  PThread.returnWorkerToPool(worker);
 }
}

function _exit(status) {
 exit(status);
}

Module["_exit"] = _exit;

function handleException(e) {
 if (e instanceof ExitStatus || e == "unwind") {
  return EXITSTATUS;
 }
 quit_(1, e);
}

var PThread = {
 unusedWorkers: [],
 runningWorkers: [],
 tlsInitFunctions: [],
 initMainThreadBlock: function() {
  assert(!ENVIRONMENT_IS_PTHREAD);
  var pthreadPoolSize = 12;
  for (var i = 0; i < pthreadPoolSize; ++i) {
   PThread.allocateUnusedWorker();
  }
 },
 initWorker: function() {},
 pthreads: {},
 setExitStatus: function(status) {
  EXITSTATUS = status;
 },
 terminateAllThreads: function() {
  assert(!ENVIRONMENT_IS_PTHREAD, "Internal Error! terminateAllThreads() can only ever be called from main application thread!");
  for (var t in PThread.pthreads) {
   var pthread = PThread.pthreads[t];
   if (pthread && pthread.worker) {
    PThread.returnWorkerToPool(pthread.worker);
   }
  }
  assert(Object.keys(PThread.pthreads).length === 0);
  assert(PThread.runningWorkers.length === 0);
  for (var i = 0; i < PThread.unusedWorkers.length; ++i) {
   var worker = PThread.unusedWorkers[i];
   assert(!worker.pthread);
   worker.terminate();
  }
  PThread.unusedWorkers = [];
 },
 returnWorkerToPool: function(worker) {
  PThread.runWithoutMainThreadQueuedCalls(function() {
   delete PThread.pthreads[worker.pthread.threadInfoStruct];
   PThread.unusedWorkers.push(worker);
   PThread.runningWorkers.splice(PThread.runningWorkers.indexOf(worker), 1);
   __emscripten_thread_free_data(worker.pthread.threadInfoStruct);
   worker.pthread = undefined;
  });
 },
 runWithoutMainThreadQueuedCalls: function(func) {
  assert(PThread.mainRuntimeThread, "runWithoutMainThreadQueuedCalls must be done on the main runtime thread");
  assert(__emscripten_allow_main_runtime_queued_calls);
  GROWABLE_HEAP_I32()[__emscripten_allow_main_runtime_queued_calls >> 2] = 0;
  try {
   func();
  } finally {
   GROWABLE_HEAP_I32()[__emscripten_allow_main_runtime_queued_calls >> 2] = 1;
  }
 },
 receiveObjectTransfer: function(data) {},
 threadInit: function() {
  for (var i in PThread.tlsInitFunctions) {
   PThread.tlsInitFunctions[i]();
  }
 },
 loadWasmModuleToWorker: function(worker, onFinishedLoading) {
  worker.onmessage = function(e) {
   var d = e["data"];
   var cmd = d["cmd"];
   if (worker.pthread) PThread.currentProxiedOperationCallerThread = worker.pthread.threadInfoStruct;
   if (d["targetThread"] && d["targetThread"] != _pthread_self()) {
    var thread = PThread.pthreads[d.targetThread];
    if (thread) {
     thread.worker.postMessage(d, d["transferList"]);
    } else {
     err('Internal error! Worker sent a message "' + cmd + '" to target pthread ' + d["targetThread"] + ", but that thread no longer exists!");
    }
    PThread.currentProxiedOperationCallerThread = undefined;
    return;
   }
   if (cmd === "processQueuedMainThreadWork") {
    _emscripten_main_thread_process_queued_calls();
   } else if (cmd === "spawnThread") {
    spawnThread(d);
   } else if (cmd === "cleanupThread") {
    cleanupThread(d["thread"]);
   } else if (cmd === "killThread") {
    killThread(d["thread"]);
   } else if (cmd === "cancelThread") {
    cancelThread(d["thread"]);
   } else if (cmd === "loaded") {
    worker.loaded = true;
    if (onFinishedLoading) onFinishedLoading(worker);
    if (worker.runPthread) {
     worker.runPthread();
     delete worker.runPthread;
    }
   } else if (cmd === "print") {
    out("Thread " + d["threadId"] + ": " + d["text"]);
   } else if (cmd === "printErr") {
    err("Thread " + d["threadId"] + ": " + d["text"]);
   } else if (cmd === "alert") {
    alert("Thread " + d["threadId"] + ": " + d["text"]);
   } else if (cmd === "detachedExit") {
    assert(worker.pthread);
    PThread.returnWorkerToPool(worker);
   } else if (cmd === "cancelDone") {
    PThread.returnWorkerToPool(worker);
   } else if (d.target === "setimmediate") {
    worker.postMessage(d);
   } else if (cmd === "onAbort") {
    if (Module["onAbort"]) {
     Module["onAbort"](d["arg"]);
    }
   } else {
    err("worker sent an unknown command " + cmd);
   }
   PThread.currentProxiedOperationCallerThread = undefined;
  };
  worker.onerror = function(e) {
   err("pthread sent an error! " + e.filename + ":" + e.lineno + ": " + e.message);
   throw e;
  };
  if (ENVIRONMENT_IS_NODE) {
   worker.on("message", function(data) {
    worker.onmessage({
     data: data
    });
   });
   worker.on("error", function(e) {
    worker.onerror(e);
   });
   worker.on("detachedExit", function() {});
  }
  assert(wasmMemory instanceof WebAssembly.Memory, "WebAssembly memory should have been loaded by now!");
  assert(wasmModule instanceof WebAssembly.Module, "WebAssembly Module should have been loaded by now!");
  worker.postMessage({
   "cmd": "load",
   "urlOrBlob": Module["mainScriptUrlOrBlob"] || _scriptDir,
   "wasmMemory": wasmMemory,
   "wasmModule": wasmModule
  });
 },
 allocateUnusedWorker: function() {
  var pthreadMainJs = locateFile("craftos.worker.js");
  PThread.unusedWorkers.push(new Worker(pthreadMainJs));
 },
 getNewWorker: function() {
  if (PThread.unusedWorkers.length == 0) {
   err("Tried to spawn a new thread, but the thread pool is exhausted.\n" + "This might result in a deadlock unless some threads eventually exit or the code explicitly breaks out to the event loop.\n" + "If you want to increase the pool size, use setting `-s PTHREAD_POOL_SIZE=...`." + "\nIf you want to throw an explicit error instead of the risk of deadlocking in those cases, use setting `-s PTHREAD_POOL_SIZE_STRICT=2`.");
   PThread.allocateUnusedWorker();
   PThread.loadWasmModuleToWorker(PThread.unusedWorkers[0]);
  }
  return PThread.unusedWorkers.pop();
 }
};

function establishStackSpace() {
 var pthread_ptr = _pthread_self();
 var stackTop = GROWABLE_HEAP_I32()[pthread_ptr + 44 >> 2];
 var stackSize = GROWABLE_HEAP_I32()[pthread_ptr + 48 >> 2];
 var stackMax = stackTop - stackSize;
 assert(stackTop != 0);
 assert(stackMax != 0);
 assert(stackTop > stackMax);
 _emscripten_stack_set_limits(stackTop, stackMax);
 stackRestore(stackTop);
 writeStackCookie();
}

Module["establishStackSpace"] = establishStackSpace;

function exitOnMainThread(returnCode) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(1, 0, returnCode);
 try {
  _exit(returnCode);
 } catch (e) {
  handleException(e);
 }
}

function invokeEntryPoint(ptr, arg) {
 return function(a1) {
  return dynCall_ii.apply(null, [ ptr, a1 ]);
 }(arg);
}

Module["invokeEntryPoint"] = invokeEntryPoint;

function jsStackTrace() {
 var error = new Error();
 if (!error.stack) {
  try {
   throw new Error();
  } catch (e) {
   error = e;
  }
  if (!error.stack) {
   return "(no stack trace available)";
  }
 }
 return error.stack.toString();
}

function registerTlsInit(tlsInitFunc, moduleExports, metadata) {
 PThread.tlsInitFunctions.push(tlsInitFunc);
}

function setWasmTableEntry(idx, func) {
 wasmTable.set(idx, func);
 wasmTableMirror[idx] = func;
}

function stackTrace() {
 var js = jsStackTrace();
 if (Module["extraStackTrace"]) js += "\n" + Module["extraStackTrace"]();
 return demangleAll(js);
}

function ___assert_fail(condition, filename, line, func) {
 abort("Assertion failed: " + UTF8ToString(condition) + ", at: " + [ filename ? UTF8ToString(filename) : "unknown filename", line, func ? UTF8ToString(func) : "unknown function" ]);
}

function ___call_sighandler(fp, sig) {
 (function(a1) {
  dynCall_vi.apply(null, [ fp, a1 ]);
 })(sig);
}

var _emscripten_get_now;

if (ENVIRONMENT_IS_NODE) {
 _emscripten_get_now = function() {
  var t = process["hrtime"]();
  return t[0] * 1e3 + t[1] / 1e6;
 };
} else if (ENVIRONMENT_IS_PTHREAD) {
 _emscripten_get_now = function() {
  return performance.now() - Module["__performance_now_clock_drift"];
 };
} else _emscripten_get_now = function() {
 return performance.now();
};

var _emscripten_get_now_is_monotonic = true;

function setErrNo(value) {
 GROWABLE_HEAP_I32()[___errno_location() >> 2] = value;
 return value;
}

function _clock_gettime(clk_id, tp) {
 var now;
 if (clk_id === 0) {
  now = Date.now();
 } else if ((clk_id === 1 || clk_id === 4) && _emscripten_get_now_is_monotonic) {
  now = _emscripten_get_now();
 } else {
  setErrNo(28);
  return -1;
 }
 GROWABLE_HEAP_I32()[tp >> 2] = now / 1e3 | 0;
 GROWABLE_HEAP_I32()[tp + 4 >> 2] = now % 1e3 * 1e3 * 1e3 | 0;
 return 0;
}

function ___clock_gettime(a0, a1) {
 return _clock_gettime(a0, a1);
}

function ___cxa_allocate_exception(size) {
 return _malloc(size + 16) + 16;
}

function _atexit(func, arg) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(2, 1, func, arg);
}

function ___cxa_atexit(a0, a1) {
 return _atexit(a0, a1);
}

function ExceptionInfo(excPtr) {
 this.excPtr = excPtr;
 this.ptr = excPtr - 16;
 this.set_type = function(type) {
  GROWABLE_HEAP_I32()[this.ptr + 4 >> 2] = type;
 };
 this.get_type = function() {
  return GROWABLE_HEAP_I32()[this.ptr + 4 >> 2];
 };
 this.set_destructor = function(destructor) {
  GROWABLE_HEAP_I32()[this.ptr + 8 >> 2] = destructor;
 };
 this.get_destructor = function() {
  return GROWABLE_HEAP_I32()[this.ptr + 8 >> 2];
 };
 this.set_refcount = function(refcount) {
  GROWABLE_HEAP_I32()[this.ptr >> 2] = refcount;
 };
 this.set_caught = function(caught) {
  caught = caught ? 1 : 0;
  GROWABLE_HEAP_I8()[this.ptr + 12 >> 0] = caught;
 };
 this.get_caught = function() {
  return GROWABLE_HEAP_I8()[this.ptr + 12 >> 0] != 0;
 };
 this.set_rethrown = function(rethrown) {
  rethrown = rethrown ? 1 : 0;
  GROWABLE_HEAP_I8()[this.ptr + 13 >> 0] = rethrown;
 };
 this.get_rethrown = function() {
  return GROWABLE_HEAP_I8()[this.ptr + 13 >> 0] != 0;
 };
 this.init = function(type, destructor) {
  this.set_type(type);
  this.set_destructor(destructor);
  this.set_refcount(0);
  this.set_caught(false);
  this.set_rethrown(false);
 };
 this.add_ref = function() {
  Atomics.add(GROWABLE_HEAP_I32(), this.ptr + 0 >> 2, 1);
 };
 this.release_ref = function() {
  var prev = Atomics.sub(GROWABLE_HEAP_I32(), this.ptr + 0 >> 2, 1);
  assert(prev > 0);
  return prev === 1;
 };
}

function CatchInfo(ptr) {
 this.free = function() {
  _free(this.ptr);
  this.ptr = 0;
 };
 this.set_base_ptr = function(basePtr) {
  GROWABLE_HEAP_I32()[this.ptr >> 2] = basePtr;
 };
 this.get_base_ptr = function() {
  return GROWABLE_HEAP_I32()[this.ptr >> 2];
 };
 this.set_adjusted_ptr = function(adjustedPtr) {
  GROWABLE_HEAP_I32()[this.ptr + 4 >> 2] = adjustedPtr;
 };
 this.get_adjusted_ptr_addr = function() {
  return this.ptr + 4;
 };
 this.get_adjusted_ptr = function() {
  return GROWABLE_HEAP_I32()[this.ptr + 4 >> 2];
 };
 this.get_exception_ptr = function() {
  var isPointer = ___cxa_is_pointer_type(this.get_exception_info().get_type());
  if (isPointer) {
   return GROWABLE_HEAP_I32()[this.get_base_ptr() >> 2];
  }
  var adjusted = this.get_adjusted_ptr();
  if (adjusted !== 0) return adjusted;
  return this.get_base_ptr();
 };
 this.get_exception_info = function() {
  return new ExceptionInfo(this.get_base_ptr());
 };
 if (ptr === undefined) {
  this.ptr = _malloc(8);
  this.set_adjusted_ptr(0);
 } else {
  this.ptr = ptr;
 }
}

var exceptionCaught = [];

function exception_addRef(info) {
 info.add_ref();
}

var uncaughtExceptionCount = 0;

function ___cxa_begin_catch(ptr) {
 var catchInfo = new CatchInfo(ptr);
 var info = catchInfo.get_exception_info();
 if (!info.get_caught()) {
  info.set_caught(true);
  uncaughtExceptionCount--;
 }
 info.set_rethrown(false);
 exceptionCaught.push(catchInfo);
 exception_addRef(info);
 return catchInfo.get_exception_ptr();
}

function ___cxa_current_primary_exception() {
 if (!exceptionCaught.length) {
  return 0;
 }
 var catchInfo = exceptionCaught[exceptionCaught.length - 1];
 exception_addRef(catchInfo.get_exception_info());
 return catchInfo.get_base_ptr();
}

function ___cxa_free_exception(ptr) {
 try {
  return _free(new ExceptionInfo(ptr).ptr);
 } catch (e) {
  err("exception during cxa_free_exception: " + e);
 }
}

function exception_decRef(info) {
 if (info.release_ref() && !info.get_rethrown()) {
  var destructor = info.get_destructor();
  if (destructor) {
   (function(a1) {
    return dynCall_ii.apply(null, [ destructor, a1 ]);
   })(info.excPtr);
  }
  ___cxa_free_exception(info.excPtr);
 }
}

function ___cxa_decrement_exception_refcount(ptr) {
 if (!ptr) return;
 exception_decRef(new ExceptionInfo(ptr));
}

var exceptionLast = 0;

function ___cxa_end_catch() {
 _setThrew(0);
 assert(exceptionCaught.length > 0);
 var catchInfo = exceptionCaught.pop();
 exception_decRef(catchInfo.get_exception_info());
 catchInfo.free();
 exceptionLast = 0;
}

function ___resumeException(catchInfoPtr) {
 var catchInfo = new CatchInfo(catchInfoPtr);
 var ptr = catchInfo.get_base_ptr();
 if (!exceptionLast) {
  exceptionLast = ptr;
 }
 catchInfo.free();
 throw ptr;
}

function ___cxa_find_matching_catch_2() {
 var thrown = exceptionLast;
 if (!thrown) {
  setTempRet0(0);
  return 0 | 0;
 }
 var info = new ExceptionInfo(thrown);
 var thrownType = info.get_type();
 var catchInfo = new CatchInfo();
 catchInfo.set_base_ptr(thrown);
 catchInfo.set_adjusted_ptr(thrown);
 if (!thrownType) {
  setTempRet0(0);
  return catchInfo.ptr | 0;
 }
 var typeArray = Array.prototype.slice.call(arguments);
 for (var i = 0; i < typeArray.length; i++) {
  var caughtType = typeArray[i];
  if (caughtType === 0 || caughtType === thrownType) {
   break;
  }
  if (___cxa_can_catch(caughtType, thrownType, catchInfo.get_adjusted_ptr_addr())) {
   setTempRet0(caughtType);
   return catchInfo.ptr | 0;
  }
 }
 setTempRet0(thrownType);
 return catchInfo.ptr | 0;
}

function ___cxa_find_matching_catch_3() {
 var thrown = exceptionLast;
 if (!thrown) {
  setTempRet0(0);
  return 0 | 0;
 }
 var info = new ExceptionInfo(thrown);
 var thrownType = info.get_type();
 var catchInfo = new CatchInfo();
 catchInfo.set_base_ptr(thrown);
 catchInfo.set_adjusted_ptr(thrown);
 if (!thrownType) {
  setTempRet0(0);
  return catchInfo.ptr | 0;
 }
 var typeArray = Array.prototype.slice.call(arguments);
 for (var i = 0; i < typeArray.length; i++) {
  var caughtType = typeArray[i];
  if (caughtType === 0 || caughtType === thrownType) {
   break;
  }
  if (___cxa_can_catch(caughtType, thrownType, catchInfo.get_adjusted_ptr_addr())) {
   setTempRet0(caughtType);
   return catchInfo.ptr | 0;
  }
 }
 setTempRet0(thrownType);
 return catchInfo.ptr | 0;
}

function ___cxa_find_matching_catch_4() {
 var thrown = exceptionLast;
 if (!thrown) {
  setTempRet0(0);
  return 0 | 0;
 }
 var info = new ExceptionInfo(thrown);
 var thrownType = info.get_type();
 var catchInfo = new CatchInfo();
 catchInfo.set_base_ptr(thrown);
 catchInfo.set_adjusted_ptr(thrown);
 if (!thrownType) {
  setTempRet0(0);
  return catchInfo.ptr | 0;
 }
 var typeArray = Array.prototype.slice.call(arguments);
 for (var i = 0; i < typeArray.length; i++) {
  var caughtType = typeArray[i];
  if (caughtType === 0 || caughtType === thrownType) {
   break;
  }
  if (___cxa_can_catch(caughtType, thrownType, catchInfo.get_adjusted_ptr_addr())) {
   setTempRet0(caughtType);
   return catchInfo.ptr | 0;
  }
 }
 setTempRet0(thrownType);
 return catchInfo.ptr | 0;
}

function ___cxa_find_matching_catch_5() {
 var thrown = exceptionLast;
 if (!thrown) {
  setTempRet0(0);
  return 0 | 0;
 }
 var info = new ExceptionInfo(thrown);
 var thrownType = info.get_type();
 var catchInfo = new CatchInfo();
 catchInfo.set_base_ptr(thrown);
 catchInfo.set_adjusted_ptr(thrown);
 if (!thrownType) {
  setTempRet0(0);
  return catchInfo.ptr | 0;
 }
 var typeArray = Array.prototype.slice.call(arguments);
 for (var i = 0; i < typeArray.length; i++) {
  var caughtType = typeArray[i];
  if (caughtType === 0 || caughtType === thrownType) {
   break;
  }
  if (___cxa_can_catch(caughtType, thrownType, catchInfo.get_adjusted_ptr_addr())) {
   setTempRet0(caughtType);
   return catchInfo.ptr | 0;
  }
 }
 setTempRet0(thrownType);
 return catchInfo.ptr | 0;
}

function ___cxa_increment_exception_refcount(ptr) {
 if (!ptr) return;
 exception_addRef(new ExceptionInfo(ptr));
}

function ___cxa_rethrow() {
 var catchInfo = exceptionCaught.pop();
 if (!catchInfo) {
  abort("no exception to throw");
 }
 var info = catchInfo.get_exception_info();
 var ptr = catchInfo.get_base_ptr();
 if (!info.get_rethrown()) {
  exceptionCaught.push(catchInfo);
  info.set_rethrown(true);
  info.set_caught(false);
  uncaughtExceptionCount++;
 } else {
  catchInfo.free();
 }
 exceptionLast = ptr;
 throw ptr;
}

function ___cxa_rethrow_primary_exception(ptr) {
 if (!ptr) return;
 var catchInfo = new CatchInfo();
 catchInfo.set_base_ptr(ptr);
 var info = catchInfo.get_exception_info();
 exceptionCaught.push(catchInfo);
 info.set_rethrown(true);
 ___cxa_rethrow();
}

function ___cxa_throw(ptr, type, destructor) {
 var info = new ExceptionInfo(ptr);
 info.init(type, destructor);
 exceptionLast = ptr;
 uncaughtExceptionCount++;
 throw ptr;
}

function ___cxa_uncaught_exceptions() {
 return uncaughtExceptionCount;
}

function ___emscripten_init_main_thread_js(tb) {
 __emscripten_thread_init(tb, !ENVIRONMENT_IS_WORKER, 1);
 PThread.mainRuntimeThread = true;
 PThread.threadInit();
}

function ___emscripten_thread_cleanup(thread) {
 if (!ENVIRONMENT_IS_PTHREAD) cleanupThread(thread); else postMessage({
  "cmd": "cleanupThread",
  "thread": thread
 });
}

function _gmtime_r(time, tmPtr) {
 var date = new Date(GROWABLE_HEAP_I32()[time >> 2] * 1e3);
 GROWABLE_HEAP_I32()[tmPtr >> 2] = date.getUTCSeconds();
 GROWABLE_HEAP_I32()[tmPtr + 4 >> 2] = date.getUTCMinutes();
 GROWABLE_HEAP_I32()[tmPtr + 8 >> 2] = date.getUTCHours();
 GROWABLE_HEAP_I32()[tmPtr + 12 >> 2] = date.getUTCDate();
 GROWABLE_HEAP_I32()[tmPtr + 16 >> 2] = date.getUTCMonth();
 GROWABLE_HEAP_I32()[tmPtr + 20 >> 2] = date.getUTCFullYear() - 1900;
 GROWABLE_HEAP_I32()[tmPtr + 24 >> 2] = date.getUTCDay();
 GROWABLE_HEAP_I32()[tmPtr + 36 >> 2] = 0;
 GROWABLE_HEAP_I32()[tmPtr + 32 >> 2] = 0;
 var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
 var yday = (date.getTime() - start) / (1e3 * 60 * 60 * 24) | 0;
 GROWABLE_HEAP_I32()[tmPtr + 28 >> 2] = yday;
 if (!_gmtime_r.GMTString) _gmtime_r.GMTString = allocateUTF8("GMT");
 GROWABLE_HEAP_I32()[tmPtr + 40 >> 2] = _gmtime_r.GMTString;
 return tmPtr;
}

function ___gmtime_r(a0, a1) {
 return _gmtime_r(a0, a1);
}

function _tzset_impl() {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(3, 1);
 var currentYear = new Date().getFullYear();
 var winter = new Date(currentYear, 0, 1);
 var summer = new Date(currentYear, 6, 1);
 var winterOffset = winter.getTimezoneOffset();
 var summerOffset = summer.getTimezoneOffset();
 var stdTimezoneOffset = Math.max(winterOffset, summerOffset);
 GROWABLE_HEAP_I32()[__get_timezone() >> 2] = stdTimezoneOffset * 60;
 GROWABLE_HEAP_I32()[__get_daylight() >> 2] = Number(winterOffset != summerOffset);
 function extractZone(date) {
  var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
  return match ? match[1] : "GMT";
 }
 var winterName = extractZone(winter);
 var summerName = extractZone(summer);
 var winterNamePtr = allocateUTF8(winterName);
 var summerNamePtr = allocateUTF8(summerName);
 if (summerOffset < winterOffset) {
  GROWABLE_HEAP_I32()[__get_tzname() >> 2] = winterNamePtr;
  GROWABLE_HEAP_I32()[__get_tzname() + 4 >> 2] = summerNamePtr;
 } else {
  GROWABLE_HEAP_I32()[__get_tzname() >> 2] = summerNamePtr;
  GROWABLE_HEAP_I32()[__get_tzname() + 4 >> 2] = winterNamePtr;
 }
}

function _tzset() {
 if (_tzset.called) return;
 _tzset.called = true;
 _tzset_impl();
}

function _localtime_r(time, tmPtr) {
 _tzset();
 var date = new Date(GROWABLE_HEAP_I32()[time >> 2] * 1e3);
 GROWABLE_HEAP_I32()[tmPtr >> 2] = date.getSeconds();
 GROWABLE_HEAP_I32()[tmPtr + 4 >> 2] = date.getMinutes();
 GROWABLE_HEAP_I32()[tmPtr + 8 >> 2] = date.getHours();
 GROWABLE_HEAP_I32()[tmPtr + 12 >> 2] = date.getDate();
 GROWABLE_HEAP_I32()[tmPtr + 16 >> 2] = date.getMonth();
 GROWABLE_HEAP_I32()[tmPtr + 20 >> 2] = date.getFullYear() - 1900;
 GROWABLE_HEAP_I32()[tmPtr + 24 >> 2] = date.getDay();
 var start = new Date(date.getFullYear(), 0, 1);
 var yday = (date.getTime() - start.getTime()) / (1e3 * 60 * 60 * 24) | 0;
 GROWABLE_HEAP_I32()[tmPtr + 28 >> 2] = yday;
 GROWABLE_HEAP_I32()[tmPtr + 36 >> 2] = -(date.getTimezoneOffset() * 60);
 var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
 var winterOffset = start.getTimezoneOffset();
 var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset)) | 0;
 GROWABLE_HEAP_I32()[tmPtr + 32 >> 2] = dst;
 var zonePtr = GROWABLE_HEAP_I32()[__get_tzname() + (dst ? 4 : 0) >> 2];
 GROWABLE_HEAP_I32()[tmPtr + 40 >> 2] = zonePtr;
 return tmPtr;
}

function ___localtime_r(a0, a1) {
 return _localtime_r(a0, a1);
}

function spawnThread(threadParams) {
 assert(!ENVIRONMENT_IS_PTHREAD, "Internal Error! spawnThread() can only ever be called from main application thread!");
 assert(threadParams.pthread_ptr, "Internal error, no pthread ptr!");
 var worker = PThread.getNewWorker();
 if (!worker) {
  return 6;
 }
 assert(!worker.pthread, "Internal error!");
 PThread.runningWorkers.push(worker);
 var pthread = PThread.pthreads[threadParams.pthread_ptr] = {
  worker: worker,
  threadInfoStruct: threadParams.pthread_ptr
 };
 worker.pthread = pthread;
 var msg = {
  "cmd": "run",
  "start_routine": threadParams.startRoutine,
  "arg": threadParams.arg,
  "threadInfoStruct": threadParams.pthread_ptr
 };
 worker.runPthread = function() {
  msg.time = performance.now();
  worker.postMessage(msg, threadParams.transferList);
 };
 if (worker.loaded) {
  worker.runPthread();
  delete worker.runPthread;
 }
 return 0;
}

function ___pthread_create_js(pthread_ptr, attr, start_routine, arg) {
 if (typeof SharedArrayBuffer === "undefined") {
  err("Current environment does not support SharedArrayBuffer, pthreads are not available!");
  return 6;
 }
 var transferList = [];
 var error = 0;
 if (ENVIRONMENT_IS_PTHREAD && (transferList.length === 0 || error)) {
  return _emscripten_sync_run_in_main_thread_4(687865856, pthread_ptr, attr, start_routine, arg);
 }
 if (error) return error;
 var threadParams = {
  startRoutine: start_routine,
  pthread_ptr: pthread_ptr,
  arg: arg,
  transferList: transferList
 };
 if (ENVIRONMENT_IS_PTHREAD) {
  threadParams.cmd = "spawnThread";
  postMessage(threadParams, transferList);
  return 0;
 }
 return spawnThread(threadParams);
}

function ___pthread_detached_exit() {
 postMessage({
  "cmd": "detachedExit"
 });
}

var PATH = {
 splitPath: function(filename) {
  var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
  return splitPathRe.exec(filename).slice(1);
 },
 normalizeArray: function(parts, allowAboveRoot) {
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
   var last = parts[i];
   if (last === ".") {
    parts.splice(i, 1);
   } else if (last === "..") {
    parts.splice(i, 1);
    up++;
   } else if (up) {
    parts.splice(i, 1);
    up--;
   }
  }
  if (allowAboveRoot) {
   for (;up; up--) {
    parts.unshift("..");
   }
  }
  return parts;
 },
 normalize: function(path) {
  var isAbsolute = path.charAt(0) === "/", trailingSlash = path.substr(-1) === "/";
  path = PATH.normalizeArray(path.split("/").filter(function(p) {
   return !!p;
  }), !isAbsolute).join("/");
  if (!path && !isAbsolute) {
   path = ".";
  }
  if (path && trailingSlash) {
   path += "/";
  }
  return (isAbsolute ? "/" : "") + path;
 },
 dirname: function(path) {
  var result = PATH.splitPath(path), root = result[0], dir = result[1];
  if (!root && !dir) {
   return ".";
  }
  if (dir) {
   dir = dir.substr(0, dir.length - 1);
  }
  return root + dir;
 },
 basename: function(path) {
  if (path === "/") return "/";
  path = PATH.normalize(path);
  path = path.replace(/\/$/, "");
  var lastSlash = path.lastIndexOf("/");
  if (lastSlash === -1) return path;
  return path.substr(lastSlash + 1);
 },
 extname: function(path) {
  return PATH.splitPath(path)[3];
 },
 join: function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return PATH.normalize(paths.join("/"));
 },
 join2: function(l, r) {
  return PATH.normalize(l + "/" + r);
 }
};

function getRandomDevice() {
 if (typeof crypto === "object" && typeof crypto["getRandomValues"] === "function") {
  var randomBuffer = new Uint8Array(1);
  return function() {
   crypto.getRandomValues(randomBuffer);
   return randomBuffer[0];
  };
 } else if (ENVIRONMENT_IS_NODE) {
  try {
   var crypto_module = require("crypto");
   return function() {
    return crypto_module["randomBytes"](1)[0];
   };
  } catch (e) {}
 }
 return function() {
  abort("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };");
 };
}

var PATH_FS = {
 resolve: function() {
  var resolvedPath = "", resolvedAbsolute = false;
  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
   var path = i >= 0 ? arguments[i] : FS.cwd();
   if (typeof path !== "string") {
    throw new TypeError("Arguments to path.resolve must be strings");
   } else if (!path) {
    return "";
   }
   resolvedPath = path + "/" + resolvedPath;
   resolvedAbsolute = path.charAt(0) === "/";
  }
  resolvedPath = PATH.normalizeArray(resolvedPath.split("/").filter(function(p) {
   return !!p;
  }), !resolvedAbsolute).join("/");
  return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
 },
 relative: function(from, to) {
  from = PATH_FS.resolve(from).substr(1);
  to = PATH_FS.resolve(to).substr(1);
  function trim(arr) {
   var start = 0;
   for (;start < arr.length; start++) {
    if (arr[start] !== "") break;
   }
   var end = arr.length - 1;
   for (;end >= 0; end--) {
    if (arr[end] !== "") break;
   }
   if (start > end) return [];
   return arr.slice(start, end - start + 1);
  }
  var fromParts = trim(from.split("/"));
  var toParts = trim(to.split("/"));
  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
   if (fromParts[i] !== toParts[i]) {
    samePartsLength = i;
    break;
   }
  }
  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
   outputParts.push("..");
  }
  outputParts = outputParts.concat(toParts.slice(samePartsLength));
  return outputParts.join("/");
 }
};

var TTY = {
 ttys: [],
 init: function() {},
 shutdown: function() {},
 register: function(dev, ops) {
  TTY.ttys[dev] = {
   input: [],
   output: [],
   ops: ops
  };
  FS.registerDevice(dev, TTY.stream_ops);
 },
 stream_ops: {
  open: function(stream) {
   var tty = TTY.ttys[stream.node.rdev];
   if (!tty) {
    throw new FS.ErrnoError(43);
   }
   stream.tty = tty;
   stream.seekable = false;
  },
  close: function(stream) {
   stream.tty.ops.flush(stream.tty);
  },
  flush: function(stream) {
   stream.tty.ops.flush(stream.tty);
  },
  read: function(stream, buffer, offset, length, pos) {
   if (!stream.tty || !stream.tty.ops.get_char) {
    throw new FS.ErrnoError(60);
   }
   var bytesRead = 0;
   for (var i = 0; i < length; i++) {
    var result;
    try {
     result = stream.tty.ops.get_char(stream.tty);
    } catch (e) {
     throw new FS.ErrnoError(29);
    }
    if (result === undefined && bytesRead === 0) {
     throw new FS.ErrnoError(6);
    }
    if (result === null || result === undefined) break;
    bytesRead++;
    buffer[offset + i] = result;
   }
   if (bytesRead) {
    stream.node.timestamp = Date.now();
   }
   return bytesRead;
  },
  write: function(stream, buffer, offset, length, pos) {
   if (!stream.tty || !stream.tty.ops.put_char) {
    throw new FS.ErrnoError(60);
   }
   try {
    for (var i = 0; i < length; i++) {
     stream.tty.ops.put_char(stream.tty, buffer[offset + i]);
    }
   } catch (e) {
    throw new FS.ErrnoError(29);
   }
   if (length) {
    stream.node.timestamp = Date.now();
   }
   return i;
  }
 },
 default_tty_ops: {
  get_char: function(tty) {
   if (!tty.input.length) {
    var result = null;
    if (ENVIRONMENT_IS_NODE) {
     var BUFSIZE = 256;
     var buf = Buffer.alloc(BUFSIZE);
     var bytesRead = 0;
     try {
      bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
     } catch (e) {
      if (e.toString().includes("EOF")) bytesRead = 0; else throw e;
     }
     if (bytesRead > 0) {
      result = buf.slice(0, bytesRead).toString("utf-8");
     } else {
      result = null;
     }
    } else if (typeof window != "undefined" && typeof window.prompt == "function") {
     result = window.prompt("Input: ");
     if (result !== null) {
      result += "\n";
     }
    } else if (typeof readline == "function") {
     result = readline();
     if (result !== null) {
      result += "\n";
     }
    }
    if (!result) {
     return null;
    }
    tty.input = intArrayFromString(result, true);
   }
   return tty.input.shift();
  },
  put_char: function(tty, val) {
   if (val === null || val === 10) {
    out(UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   } else {
    if (val != 0) tty.output.push(val);
   }
  },
  flush: function(tty) {
   if (tty.output && tty.output.length > 0) {
    out(UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   }
  }
 },
 default_tty1_ops: {
  put_char: function(tty, val) {
   if (val === null || val === 10) {
    err(UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   } else {
    if (val != 0) tty.output.push(val);
   }
  },
  flush: function(tty) {
   if (tty.output && tty.output.length > 0) {
    err(UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   }
  }
 }
};

function zeroMemory(address, size) {
 GROWABLE_HEAP_U8().fill(0, address, address + size);
}

function alignMemory(size, alignment) {
 assert(alignment, "alignment argument is required");
 return Math.ceil(size / alignment) * alignment;
}

function mmapAlloc(size) {
 size = alignMemory(size, 65536);
 var ptr = _memalign(65536, size);
 if (!ptr) return 0;
 zeroMemory(ptr, size);
 return ptr;
}

var MEMFS = {
 ops_table: null,
 mount: function(mount) {
  return MEMFS.createNode(null, "/", 16384 | 511, 0);
 },
 createNode: function(parent, name, mode, dev) {
  if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
   throw new FS.ErrnoError(63);
  }
  if (!MEMFS.ops_table) {
   MEMFS.ops_table = {
    dir: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr,
      lookup: MEMFS.node_ops.lookup,
      mknod: MEMFS.node_ops.mknod,
      rename: MEMFS.node_ops.rename,
      unlink: MEMFS.node_ops.unlink,
      rmdir: MEMFS.node_ops.rmdir,
      readdir: MEMFS.node_ops.readdir,
      symlink: MEMFS.node_ops.symlink
     },
     stream: {
      llseek: MEMFS.stream_ops.llseek
     }
    },
    file: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr
     },
     stream: {
      llseek: MEMFS.stream_ops.llseek,
      read: MEMFS.stream_ops.read,
      write: MEMFS.stream_ops.write,
      allocate: MEMFS.stream_ops.allocate,
      mmap: MEMFS.stream_ops.mmap,
      msync: MEMFS.stream_ops.msync
     }
    },
    link: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr,
      readlink: MEMFS.node_ops.readlink
     },
     stream: {}
    },
    chrdev: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr
     },
     stream: FS.chrdev_stream_ops
    }
   };
  }
  var node = FS.createNode(parent, name, mode, dev);
  if (FS.isDir(node.mode)) {
   node.node_ops = MEMFS.ops_table.dir.node;
   node.stream_ops = MEMFS.ops_table.dir.stream;
   node.contents = {};
  } else if (FS.isFile(node.mode)) {
   node.node_ops = MEMFS.ops_table.file.node;
   node.stream_ops = MEMFS.ops_table.file.stream;
   node.usedBytes = 0;
   node.contents = null;
  } else if (FS.isLink(node.mode)) {
   node.node_ops = MEMFS.ops_table.link.node;
   node.stream_ops = MEMFS.ops_table.link.stream;
  } else if (FS.isChrdev(node.mode)) {
   node.node_ops = MEMFS.ops_table.chrdev.node;
   node.stream_ops = MEMFS.ops_table.chrdev.stream;
  }
  node.timestamp = Date.now();
  if (parent) {
   parent.contents[name] = node;
   parent.timestamp = node.timestamp;
  }
  return node;
 },
 getFileDataAsTypedArray: function(node) {
  if (!node.contents) return new Uint8Array(0);
  if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes);
  return new Uint8Array(node.contents);
 },
 expandFileStorage: function(node, newCapacity) {
  var prevCapacity = node.contents ? node.contents.length : 0;
  if (prevCapacity >= newCapacity) return;
  var CAPACITY_DOUBLING_MAX = 1024 * 1024;
  newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) >>> 0);
  if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256);
  var oldContents = node.contents;
  node.contents = new Uint8Array(newCapacity);
  if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0);
 },
 resizeFileStorage: function(node, newSize) {
  if (node.usedBytes == newSize) return;
  if (newSize == 0) {
   node.contents = null;
   node.usedBytes = 0;
  } else {
   var oldContents = node.contents;
   node.contents = new Uint8Array(newSize);
   if (oldContents) {
    node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)));
   }
   node.usedBytes = newSize;
  }
 },
 node_ops: {
  getattr: function(node) {
   var attr = {};
   attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
   attr.ino = node.id;
   attr.mode = node.mode;
   attr.nlink = 1;
   attr.uid = 0;
   attr.gid = 0;
   attr.rdev = node.rdev;
   if (FS.isDir(node.mode)) {
    attr.size = 4096;
   } else if (FS.isFile(node.mode)) {
    attr.size = node.usedBytes;
   } else if (FS.isLink(node.mode)) {
    attr.size = node.link.length;
   } else {
    attr.size = 0;
   }
   attr.atime = new Date(node.timestamp);
   attr.mtime = new Date(node.timestamp);
   attr.ctime = new Date(node.timestamp);
   attr.blksize = 4096;
   attr.blocks = Math.ceil(attr.size / attr.blksize);
   return attr;
  },
  setattr: function(node, attr) {
   if (attr.mode !== undefined) {
    node.mode = attr.mode;
   }
   if (attr.timestamp !== undefined) {
    node.timestamp = attr.timestamp;
   }
   if (attr.size !== undefined) {
    MEMFS.resizeFileStorage(node, attr.size);
   }
  },
  lookup: function(parent, name) {
   throw FS.genericErrors[44];
  },
  mknod: function(parent, name, mode, dev) {
   return MEMFS.createNode(parent, name, mode, dev);
  },
  rename: function(old_node, new_dir, new_name) {
   if (FS.isDir(old_node.mode)) {
    var new_node;
    try {
     new_node = FS.lookupNode(new_dir, new_name);
    } catch (e) {}
    if (new_node) {
     for (var i in new_node.contents) {
      throw new FS.ErrnoError(55);
     }
    }
   }
   delete old_node.parent.contents[old_node.name];
   old_node.parent.timestamp = Date.now();
   old_node.name = new_name;
   new_dir.contents[new_name] = old_node;
   new_dir.timestamp = old_node.parent.timestamp;
   old_node.parent = new_dir;
  },
  unlink: function(parent, name) {
   delete parent.contents[name];
   parent.timestamp = Date.now();
  },
  rmdir: function(parent, name) {
   var node = FS.lookupNode(parent, name);
   for (var i in node.contents) {
    throw new FS.ErrnoError(55);
   }
   delete parent.contents[name];
   parent.timestamp = Date.now();
  },
  readdir: function(node) {
   var entries = [ ".", ".." ];
   for (var key in node.contents) {
    if (!node.contents.hasOwnProperty(key)) {
     continue;
    }
    entries.push(key);
   }
   return entries;
  },
  symlink: function(parent, newname, oldpath) {
   var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);
   node.link = oldpath;
   return node;
  },
  readlink: function(node) {
   if (!FS.isLink(node.mode)) {
    throw new FS.ErrnoError(28);
   }
   return node.link;
  }
 },
 stream_ops: {
  read: function(stream, buffer, offset, length, position) {
   var contents = stream.node.contents;
   if (position >= stream.node.usedBytes) return 0;
   var size = Math.min(stream.node.usedBytes - position, length);
   assert(size >= 0);
   if (size > 8 && contents.subarray) {
    buffer.set(contents.subarray(position, position + size), offset);
   } else {
    for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
   }
   return size;
  },
  write: function(stream, buffer, offset, length, position, canOwn) {
   assert(!(buffer instanceof ArrayBuffer));
   if (buffer.buffer === GROWABLE_HEAP_I8().buffer) {
    canOwn = false;
   }
   if (!length) return 0;
   var node = stream.node;
   node.timestamp = Date.now();
   if (buffer.subarray && (!node.contents || node.contents.subarray)) {
    if (canOwn) {
     assert(position === 0, "canOwn must imply no weird position inside the file");
     node.contents = buffer.subarray(offset, offset + length);
     node.usedBytes = length;
     return length;
    } else if (node.usedBytes === 0 && position === 0) {
     node.contents = buffer.slice(offset, offset + length);
     node.usedBytes = length;
     return length;
    } else if (position + length <= node.usedBytes) {
     node.contents.set(buffer.subarray(offset, offset + length), position);
     return length;
    }
   }
   MEMFS.expandFileStorage(node, position + length);
   if (node.contents.subarray && buffer.subarray) {
    node.contents.set(buffer.subarray(offset, offset + length), position);
   } else {
    for (var i = 0; i < length; i++) {
     node.contents[position + i] = buffer[offset + i];
    }
   }
   node.usedBytes = Math.max(node.usedBytes, position + length);
   return length;
  },
  llseek: function(stream, offset, whence) {
   var position = offset;
   if (whence === 1) {
    position += stream.position;
   } else if (whence === 2) {
    if (FS.isFile(stream.node.mode)) {
     position += stream.node.usedBytes;
    }
   }
   if (position < 0) {
    throw new FS.ErrnoError(28);
   }
   return position;
  },
  allocate: function(stream, offset, length) {
   MEMFS.expandFileStorage(stream.node, offset + length);
   stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
  },
  mmap: function(stream, address, length, position, prot, flags) {
   if (address !== 0) {
    throw new FS.ErrnoError(28);
   }
   if (!FS.isFile(stream.node.mode)) {
    throw new FS.ErrnoError(43);
   }
   var ptr;
   var allocated;
   var contents = stream.node.contents;
   if (!(flags & 2) && contents.buffer === buffer) {
    allocated = false;
    ptr = contents.byteOffset;
   } else {
    if (position > 0 || position + length < contents.length) {
     if (contents.subarray) {
      contents = contents.subarray(position, position + length);
     } else {
      contents = Array.prototype.slice.call(contents, position, position + length);
     }
    }
    allocated = true;
    ptr = mmapAlloc(length);
    if (!ptr) {
     throw new FS.ErrnoError(48);
    }
    GROWABLE_HEAP_I8().set(contents, ptr);
   }
   return {
    ptr: ptr,
    allocated: allocated
   };
  },
  msync: function(stream, buffer, offset, length, mmapFlags) {
   if (!FS.isFile(stream.node.mode)) {
    throw new FS.ErrnoError(43);
   }
   if (mmapFlags & 2) {
    return 0;
   }
   var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
   return 0;
  }
 }
};

function asyncLoad(url, onload, onerror, noRunDep) {
 var dep = !noRunDep ? getUniqueRunDependency("al " + url) : "";
 readAsync(url, function(arrayBuffer) {
  assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
  onload(new Uint8Array(arrayBuffer));
  if (dep) removeRunDependency(dep);
 }, function(event) {
  if (onerror) {
   onerror();
  } else {
   throw 'Loading data file "' + url + '" failed.';
  }
 });
 if (dep) addRunDependency(dep);
}

var IDBFS = {
 dbs: {},
 indexedDB: function() {
  if (typeof indexedDB !== "undefined") return indexedDB;
  var ret = null;
  if (typeof window === "object") ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
  assert(ret, "IDBFS used, but indexedDB not supported");
  return ret;
 },
 DB_VERSION: 21,
 DB_STORE_NAME: "FILE_DATA",
 mount: function(mount) {
  return MEMFS.mount.apply(null, arguments);
 },
 syncfs: function(mount, populate, callback) {
  IDBFS.getLocalSet(mount, function(err, local) {
   if (err) return callback(err);
   IDBFS.getRemoteSet(mount, function(err, remote) {
    if (err) return callback(err);
    var src = populate ? remote : local;
    var dst = populate ? local : remote;
    IDBFS.reconcile(src, dst, callback);
   });
  });
 },
 getDB: function(name, callback) {
  var db = IDBFS.dbs[name];
  if (db) {
   return callback(null, db);
  }
  var req;
  try {
   req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
  } catch (e) {
   return callback(e);
  }
  if (!req) {
   return callback("Unable to connect to IndexedDB");
  }
  req.onupgradeneeded = function(e) {
   var db = e.target.result;
   var transaction = e.target.transaction;
   var fileStore;
   if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
    fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
   } else {
    fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
   }
   if (!fileStore.indexNames.contains("timestamp")) {
    fileStore.createIndex("timestamp", "timestamp", {
     unique: false
    });
   }
  };
  req.onsuccess = function() {
   db = req.result;
   IDBFS.dbs[name] = db;
   callback(null, db);
  };
  req.onerror = function(e) {
   callback(this.error);
   e.preventDefault();
  };
 },
 getLocalSet: function(mount, callback) {
  var entries = {};
  function isRealDir(p) {
   return p !== "." && p !== "..";
  }
  function toAbsolute(root) {
   return function(p) {
    return PATH.join2(root, p);
   };
  }
  var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  while (check.length) {
   var path = check.pop();
   var stat;
   try {
    stat = FS.stat(path);
   } catch (e) {
    return callback(e);
   }
   if (FS.isDir(stat.mode)) {
    check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
   }
   entries[path] = {
    "timestamp": stat.mtime
   };
  }
  return callback(null, {
   type: "local",
   entries: entries
  });
 },
 getRemoteSet: function(mount, callback) {
  var entries = {};
  IDBFS.getDB(mount.mountpoint, function(err, db) {
   if (err) return callback(err);
   try {
    var transaction = db.transaction([ IDBFS.DB_STORE_NAME ], "readonly");
    transaction.onerror = function(e) {
     callback(this.error);
     e.preventDefault();
    };
    var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
    var index = store.index("timestamp");
    index.openKeyCursor().onsuccess = function(event) {
     var cursor = event.target.result;
     if (!cursor) {
      return callback(null, {
       type: "remote",
       db: db,
       entries: entries
      });
     }
     entries[cursor.primaryKey] = {
      "timestamp": cursor.key
     };
     cursor.continue();
    };
   } catch (e) {
    return callback(e);
   }
  });
 },
 loadLocalEntry: function(path, callback) {
  var stat, node;
  try {
   var lookup = FS.lookupPath(path);
   node = lookup.node;
   stat = FS.stat(path);
  } catch (e) {
   return callback(e);
  }
  if (FS.isDir(stat.mode)) {
   return callback(null, {
    "timestamp": stat.mtime,
    "mode": stat.mode
   });
  } else if (FS.isFile(stat.mode)) {
   node.contents = MEMFS.getFileDataAsTypedArray(node);
   return callback(null, {
    "timestamp": stat.mtime,
    "mode": stat.mode,
    "contents": node.contents
   });
  } else {
   return callback(new Error("node type not supported"));
  }
 },
 storeLocalEntry: function(path, entry, callback) {
  try {
   if (FS.isDir(entry["mode"])) {
    FS.mkdirTree(path, entry["mode"]);
   } else if (FS.isFile(entry["mode"])) {
    FS.writeFile(path, entry["contents"], {
     canOwn: true
    });
   } else {
    return callback(new Error("node type not supported"));
   }
   FS.chmod(path, entry["mode"]);
   FS.utime(path, entry["timestamp"], entry["timestamp"]);
  } catch (e) {
   return callback(e);
  }
  callback(null);
 },
 removeLocalEntry: function(path, callback) {
  try {
   var lookup = FS.lookupPath(path);
   var stat = FS.stat(path);
   if (FS.isDir(stat.mode)) {
    FS.rmdir(path);
   } else if (FS.isFile(stat.mode)) {
    FS.unlink(path);
   }
  } catch (e) {
   return callback(e);
  }
  callback(null);
 },
 loadRemoteEntry: function(store, path, callback) {
  var req = store.get(path);
  req.onsuccess = function(event) {
   callback(null, event.target.result);
  };
  req.onerror = function(e) {
   callback(this.error);
   e.preventDefault();
  };
 },
 storeRemoteEntry: function(store, path, entry, callback) {
  try {
   var req = store.put(entry, path);
  } catch (e) {
   callback(e);
   return;
  }
  req.onsuccess = function() {
   callback(null);
  };
  req.onerror = function(e) {
   callback(this.error);
   e.preventDefault();
  };
 },
 removeRemoteEntry: function(store, path, callback) {
  var req = store.delete(path);
  req.onsuccess = function() {
   callback(null);
  };
  req.onerror = function(e) {
   callback(this.error);
   e.preventDefault();
  };
 },
 reconcile: function(src, dst, callback) {
  var total = 0;
  var create = [];
  Object.keys(src.entries).forEach(function(key) {
   var e = src.entries[key];
   var e2 = dst.entries[key];
   if (!e2 || e["timestamp"].getTime() != e2["timestamp"].getTime()) {
    create.push(key);
    total++;
   }
  });
  var remove = [];
  Object.keys(dst.entries).forEach(function(key) {
   if (!src.entries[key]) {
    remove.push(key);
    total++;
   }
  });
  if (!total) {
   return callback(null);
  }
  var errored = false;
  var db = src.type === "remote" ? src.db : dst.db;
  var transaction = db.transaction([ IDBFS.DB_STORE_NAME ], "readwrite");
  var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  function done(err) {
   if (err && !errored) {
    errored = true;
    return callback(err);
   }
  }
  transaction.onerror = function(e) {
   done(this.error);
   e.preventDefault();
  };
  transaction.oncomplete = function(e) {
   if (!errored) {
    callback(null);
   }
  };
  create.sort().forEach(function(path) {
   if (dst.type === "local") {
    IDBFS.loadRemoteEntry(store, path, function(err, entry) {
     if (err) return done(err);
     IDBFS.storeLocalEntry(path, entry, done);
    });
   } else {
    IDBFS.loadLocalEntry(path, function(err, entry) {
     if (err) return done(err);
     IDBFS.storeRemoteEntry(store, path, entry, done);
    });
   }
  });
  remove.sort().reverse().forEach(function(path) {
   if (dst.type === "local") {
    IDBFS.removeLocalEntry(path, done);
   } else {
    IDBFS.removeRemoteEntry(store, path, done);
   }
  });
 }
};

var ERRNO_MESSAGES = {
 0: "Success",
 1: "Arg list too long",
 2: "Permission denied",
 3: "Address already in use",
 4: "Address not available",
 5: "Address family not supported by protocol family",
 6: "No more processes",
 7: "Socket already connected",
 8: "Bad file number",
 9: "Trying to read unreadable message",
 10: "Mount device busy",
 11: "Operation canceled",
 12: "No children",
 13: "Connection aborted",
 14: "Connection refused",
 15: "Connection reset by peer",
 16: "File locking deadlock error",
 17: "Destination address required",
 18: "Math arg out of domain of func",
 19: "Quota exceeded",
 20: "File exists",
 21: "Bad address",
 22: "File too large",
 23: "Host is unreachable",
 24: "Identifier removed",
 25: "Illegal byte sequence",
 26: "Connection already in progress",
 27: "Interrupted system call",
 28: "Invalid argument",
 29: "I/O error",
 30: "Socket is already connected",
 31: "Is a directory",
 32: "Too many symbolic links",
 33: "Too many open files",
 34: "Too many links",
 35: "Message too long",
 36: "Multihop attempted",
 37: "File or path name too long",
 38: "Network interface is not configured",
 39: "Connection reset by network",
 40: "Network is unreachable",
 41: "Too many open files in system",
 42: "No buffer space available",
 43: "No such device",
 44: "No such file or directory",
 45: "Exec format error",
 46: "No record locks available",
 47: "The link has been severed",
 48: "Not enough core",
 49: "No message of desired type",
 50: "Protocol not available",
 51: "No space left on device",
 52: "Function not implemented",
 53: "Socket is not connected",
 54: "Not a directory",
 55: "Directory not empty",
 56: "State not recoverable",
 57: "Socket operation on non-socket",
 59: "Not a typewriter",
 60: "No such device or address",
 61: "Value too large for defined data type",
 62: "Previous owner died",
 63: "Not super-user",
 64: "Broken pipe",
 65: "Protocol error",
 66: "Unknown protocol",
 67: "Protocol wrong type for socket",
 68: "Math result not representable",
 69: "Read only file system",
 70: "Illegal seek",
 71: "No such process",
 72: "Stale file handle",
 73: "Connection timed out",
 74: "Text file busy",
 75: "Cross-device link",
 100: "Device not a stream",
 101: "Bad font file fmt",
 102: "Invalid slot",
 103: "Invalid request code",
 104: "No anode",
 105: "Block device required",
 106: "Channel number out of range",
 107: "Level 3 halted",
 108: "Level 3 reset",
 109: "Link number out of range",
 110: "Protocol driver not attached",
 111: "No CSI structure available",
 112: "Level 2 halted",
 113: "Invalid exchange",
 114: "Invalid request descriptor",
 115: "Exchange full",
 116: "No data (for no delay io)",
 117: "Timer expired",
 118: "Out of streams resources",
 119: "Machine is not on the network",
 120: "Package not installed",
 121: "The object is remote",
 122: "Advertise error",
 123: "Srmount error",
 124: "Communication error on send",
 125: "Cross mount point (not really error)",
 126: "Given log. name not unique",
 127: "f.d. invalid for this operation",
 128: "Remote address changed",
 129: "Can   access a needed shared lib",
 130: "Accessing a corrupted shared lib",
 131: ".lib section in a.out corrupted",
 132: "Attempting to link in too many libs",
 133: "Attempting to exec a shared library",
 135: "Streams pipe error",
 136: "Too many users",
 137: "Socket type not supported",
 138: "Not supported",
 139: "Protocol family not supported",
 140: "Can't send after socket shutdown",
 141: "Too many references",
 142: "Host is down",
 148: "No medium (in tape drive)",
 156: "Level 2 not synchronized"
};

var ERRNO_CODES = {};

var FS = {
 root: null,
 mounts: [],
 devices: {},
 streams: [],
 nextInode: 1,
 nameTable: null,
 currentPath: "/",
 initialized: false,
 ignorePermissions: true,
 trackingDelegate: {},
 ErrnoError: null,
 genericErrors: {},
 filesystems: null,
 syncFSRequests: 0,
 lookupPath: function(path, opts) {
  path = PATH_FS.resolve(FS.cwd(), path);
  opts = opts || {};
  if (!path) return {
   path: "",
   node: null
  };
  var defaults = {
   follow_mount: true,
   recurse_count: 0
  };
  for (var key in defaults) {
   if (opts[key] === undefined) {
    opts[key] = defaults[key];
   }
  }
  if (opts.recurse_count > 8) {
   throw new FS.ErrnoError(32);
  }
  var parts = PATH.normalizeArray(path.split("/").filter(function(p) {
   return !!p;
  }), false);
  var current = FS.root;
  var current_path = "/";
  for (var i = 0; i < parts.length; i++) {
   var islast = i === parts.length - 1;
   if (islast && opts.parent) {
    break;
   }
   current = FS.lookupNode(current, parts[i]);
   current_path = PATH.join2(current_path, parts[i]);
   if (FS.isMountpoint(current)) {
    if (!islast || islast && opts.follow_mount) {
     current = current.mounted.root;
    }
   }
   if (!islast || opts.follow) {
    var count = 0;
    while (FS.isLink(current.mode)) {
     var link = FS.readlink(current_path);
     current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
     var lookup = FS.lookupPath(current_path, {
      recurse_count: opts.recurse_count
     });
     current = lookup.node;
     if (count++ > 40) {
      throw new FS.ErrnoError(32);
     }
    }
   }
  }
  return {
   path: current_path,
   node: current
  };
 },
 getPath: function(node) {
  var path;
  while (true) {
   if (FS.isRoot(node)) {
    var mount = node.mount.mountpoint;
    if (!path) return mount;
    return mount[mount.length - 1] !== "/" ? mount + "/" + path : mount + path;
   }
   path = path ? node.name + "/" + path : node.name;
   node = node.parent;
  }
 },
 hashName: function(parentid, name) {
  var hash = 0;
  for (var i = 0; i < name.length; i++) {
   hash = (hash << 5) - hash + name.charCodeAt(i) | 0;
  }
  return (parentid + hash >>> 0) % FS.nameTable.length;
 },
 hashAddNode: function(node) {
  var hash = FS.hashName(node.parent.id, node.name);
  node.name_next = FS.nameTable[hash];
  FS.nameTable[hash] = node;
 },
 hashRemoveNode: function(node) {
  var hash = FS.hashName(node.parent.id, node.name);
  if (FS.nameTable[hash] === node) {
   FS.nameTable[hash] = node.name_next;
  } else {
   var current = FS.nameTable[hash];
   while (current) {
    if (current.name_next === node) {
     current.name_next = node.name_next;
     break;
    }
    current = current.name_next;
   }
  }
 },
 lookupNode: function(parent, name) {
  var errCode = FS.mayLookup(parent);
  if (errCode) {
   throw new FS.ErrnoError(errCode, parent);
  }
  var hash = FS.hashName(parent.id, name);
  for (var node = FS.nameTable[hash]; node; node = node.name_next) {
   var nodeName = node.name;
   if (node.parent.id === parent.id && nodeName === name) {
    return node;
   }
  }
  return FS.lookup(parent, name);
 },
 createNode: function(parent, name, mode, rdev) {
  assert(typeof parent === "object");
  var node = new FS.FSNode(parent, name, mode, rdev);
  FS.hashAddNode(node);
  return node;
 },
 destroyNode: function(node) {
  FS.hashRemoveNode(node);
 },
 isRoot: function(node) {
  return node === node.parent;
 },
 isMountpoint: function(node) {
  return !!node.mounted;
 },
 isFile: function(mode) {
  return (mode & 61440) === 32768;
 },
 isDir: function(mode) {
  return (mode & 61440) === 16384;
 },
 isLink: function(mode) {
  return (mode & 61440) === 40960;
 },
 isChrdev: function(mode) {
  return (mode & 61440) === 8192;
 },
 isBlkdev: function(mode) {
  return (mode & 61440) === 24576;
 },
 isFIFO: function(mode) {
  return (mode & 61440) === 4096;
 },
 isSocket: function(mode) {
  return (mode & 49152) === 49152;
 },
 flagModes: {
  "r": 0,
  "r+": 2,
  "w": 577,
  "w+": 578,
  "a": 1089,
  "a+": 1090
 },
 modeStringToFlags: function(str) {
  var flags = FS.flagModes[str];
  if (typeof flags === "undefined") {
   throw new Error("Unknown file open mode: " + str);
  }
  return flags;
 },
 flagsToPermissionString: function(flag) {
  var perms = [ "r", "w", "rw" ][flag & 3];
  if (flag & 512) {
   perms += "w";
  }
  return perms;
 },
 nodePermissions: function(node, perms) {
  if (FS.ignorePermissions) {
   return 0;
  }
  if (perms.includes("r") && !(node.mode & 292)) {
   return 2;
  } else if (perms.includes("w") && !(node.mode & 146)) {
   return 2;
  } else if (perms.includes("x") && !(node.mode & 73)) {
   return 2;
  }
  return 0;
 },
 mayLookup: function(dir) {
  var errCode = FS.nodePermissions(dir, "x");
  if (errCode) return errCode;
  if (!dir.node_ops.lookup) return 2;
  return 0;
 },
 mayCreate: function(dir, name) {
  try {
   var node = FS.lookupNode(dir, name);
   return 20;
  } catch (e) {}
  return FS.nodePermissions(dir, "wx");
 },
 mayDelete: function(dir, name, isdir) {
  var node;
  try {
   node = FS.lookupNode(dir, name);
  } catch (e) {
   return e.errno;
  }
  var errCode = FS.nodePermissions(dir, "wx");
  if (errCode) {
   return errCode;
  }
  if (isdir) {
   if (!FS.isDir(node.mode)) {
    return 54;
   }
   if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
    return 10;
   }
  } else {
   if (FS.isDir(node.mode)) {
    return 31;
   }
  }
  return 0;
 },
 mayOpen: function(node, flags) {
  if (!node) {
   return 44;
  }
  if (FS.isLink(node.mode)) {
   return 32;
  } else if (FS.isDir(node.mode)) {
   if (FS.flagsToPermissionString(flags) !== "r" || flags & 512) {
    return 31;
   }
  }
  return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
 },
 MAX_OPEN_FDS: 4096,
 nextfd: function(fd_start, fd_end) {
  fd_start = fd_start || 0;
  fd_end = fd_end || FS.MAX_OPEN_FDS;
  for (var fd = fd_start; fd <= fd_end; fd++) {
   if (!FS.streams[fd]) {
    return fd;
   }
  }
  throw new FS.ErrnoError(33);
 },
 getStream: function(fd) {
  return FS.streams[fd];
 },
 createStream: function(stream, fd_start, fd_end) {
  if (!FS.FSStream) {
   FS.FSStream = function() {};
   FS.FSStream.prototype = {
    object: {
     get: function() {
      return this.node;
     },
     set: function(val) {
      this.node = val;
     }
    },
    isRead: {
     get: function() {
      return (this.flags & 2097155) !== 1;
     }
    },
    isWrite: {
     get: function() {
      return (this.flags & 2097155) !== 0;
     }
    },
    isAppend: {
     get: function() {
      return this.flags & 1024;
     }
    }
   };
  }
  var newStream = new FS.FSStream();
  for (var p in stream) {
   newStream[p] = stream[p];
  }
  stream = newStream;
  var fd = FS.nextfd(fd_start, fd_end);
  stream.fd = fd;
  FS.streams[fd] = stream;
  return stream;
 },
 closeStream: function(fd) {
  FS.streams[fd] = null;
 },
 chrdev_stream_ops: {
  open: function(stream) {
   var device = FS.getDevice(stream.node.rdev);
   stream.stream_ops = device.stream_ops;
   if (stream.stream_ops.open) {
    stream.stream_ops.open(stream);
   }
  },
  llseek: function() {
   throw new FS.ErrnoError(70);
  }
 },
 major: function(dev) {
  return dev >> 8;
 },
 minor: function(dev) {
  return dev & 255;
 },
 makedev: function(ma, mi) {
  return ma << 8 | mi;
 },
 registerDevice: function(dev, ops) {
  FS.devices[dev] = {
   stream_ops: ops
  };
 },
 getDevice: function(dev) {
  return FS.devices[dev];
 },
 getMounts: function(mount) {
  var mounts = [];
  var check = [ mount ];
  while (check.length) {
   var m = check.pop();
   mounts.push(m);
   check.push.apply(check, m.mounts);
  }
  return mounts;
 },
 syncfs: function(populate, callback) {
  if (typeof populate === "function") {
   callback = populate;
   populate = false;
  }
  FS.syncFSRequests++;
  if (FS.syncFSRequests > 1) {
   err("warning: " + FS.syncFSRequests + " FS.syncfs operations in flight at once, probably just doing extra work");
  }
  var mounts = FS.getMounts(FS.root.mount);
  var completed = 0;
  function doCallback(errCode) {
   assert(FS.syncFSRequests > 0);
   FS.syncFSRequests--;
   return callback(errCode);
  }
  function done(errCode) {
   if (errCode) {
    if (!done.errored) {
     done.errored = true;
     return doCallback(errCode);
    }
    return;
   }
   if (++completed >= mounts.length) {
    doCallback(null);
   }
  }
  mounts.forEach(function(mount) {
   if (!mount.type.syncfs) {
    return done(null);
   }
   mount.type.syncfs(mount, populate, done);
  });
 },
 mount: function(type, opts, mountpoint) {
  if (typeof type === "string") {
   throw type;
  }
  var root = mountpoint === "/";
  var pseudo = !mountpoint;
  var node;
  if (root && FS.root) {
   throw new FS.ErrnoError(10);
  } else if (!root && !pseudo) {
   var lookup = FS.lookupPath(mountpoint, {
    follow_mount: false
   });
   mountpoint = lookup.path;
   node = lookup.node;
   if (FS.isMountpoint(node)) {
    throw new FS.ErrnoError(10);
   }
   if (!FS.isDir(node.mode)) {
    throw new FS.ErrnoError(54);
   }
  }
  var mount = {
   type: type,
   opts: opts,
   mountpoint: mountpoint,
   mounts: []
  };
  var mountRoot = type.mount(mount);
  mountRoot.mount = mount;
  mount.root = mountRoot;
  if (root) {
   FS.root = mountRoot;
  } else if (node) {
   node.mounted = mount;
   if (node.mount) {
    node.mount.mounts.push(mount);
   }
  }
  return mountRoot;
 },
 unmount: function(mountpoint) {
  var lookup = FS.lookupPath(mountpoint, {
   follow_mount: false
  });
  if (!FS.isMountpoint(lookup.node)) {
   throw new FS.ErrnoError(28);
  }
  var node = lookup.node;
  var mount = node.mounted;
  var mounts = FS.getMounts(mount);
  Object.keys(FS.nameTable).forEach(function(hash) {
   var current = FS.nameTable[hash];
   while (current) {
    var next = current.name_next;
    if (mounts.includes(current.mount)) {
     FS.destroyNode(current);
    }
    current = next;
   }
  });
  node.mounted = null;
  var idx = node.mount.mounts.indexOf(mount);
  assert(idx !== -1);
  node.mount.mounts.splice(idx, 1);
 },
 lookup: function(parent, name) {
  return parent.node_ops.lookup(parent, name);
 },
 mknod: function(path, mode, dev) {
  var lookup = FS.lookupPath(path, {
   parent: true
  });
  var parent = lookup.node;
  var name = PATH.basename(path);
  if (!name || name === "." || name === "..") {
   throw new FS.ErrnoError(28);
  }
  var errCode = FS.mayCreate(parent, name);
  if (errCode) {
   throw new FS.ErrnoError(errCode);
  }
  if (!parent.node_ops.mknod) {
   throw new FS.ErrnoError(63);
  }
  return parent.node_ops.mknod(parent, name, mode, dev);
 },
 create: function(path, mode) {
  mode = mode !== undefined ? mode : 438;
  mode &= 4095;
  mode |= 32768;
  return FS.mknod(path, mode, 0);
 },
 mkdir: function(path, mode) {
  mode = mode !== undefined ? mode : 511;
  mode &= 511 | 512;
  mode |= 16384;
  if (FS.trackingDelegate["onMakeDirectory"]) {
   FS.trackingDelegate["onMakeDirectory"](path, mode);
  }
  return FS.mknod(path, mode, 0);
 },
 mkdirTree: function(path, mode) {
  var dirs = path.split("/");
  var d = "";
  for (var i = 0; i < dirs.length; ++i) {
   if (!dirs[i]) continue;
   d += "/" + dirs[i];
   try {
    FS.mkdir(d, mode);
   } catch (e) {
    if (e.errno != 20) throw e;
   }
  }
 },
 mkdev: function(path, mode, dev) {
  if (typeof dev === "undefined") {
   dev = mode;
   mode = 438;
  }
  mode |= 8192;
  return FS.mknod(path, mode, dev);
 },
 symlink: function(oldpath, newpath) {
  if (!PATH_FS.resolve(oldpath)) {
   throw new FS.ErrnoError(44);
  }
  var lookup = FS.lookupPath(newpath, {
   parent: true
  });
  var parent = lookup.node;
  if (!parent) {
   throw new FS.ErrnoError(44);
  }
  var newname = PATH.basename(newpath);
  var errCode = FS.mayCreate(parent, newname);
  if (errCode) {
   throw new FS.ErrnoError(errCode);
  }
  if (!parent.node_ops.symlink) {
   throw new FS.ErrnoError(63);
  }
  if (FS.trackingDelegate["onMakeSymlink"]) {
   FS.trackingDelegate["onMakeSymlink"](oldpath, newpath);
  }
  return parent.node_ops.symlink(parent, newname, oldpath);
 },
 rename: function(old_path, new_path) {
  var old_dirname = PATH.dirname(old_path);
  var new_dirname = PATH.dirname(new_path);
  var old_name = PATH.basename(old_path);
  var new_name = PATH.basename(new_path);
  var lookup, old_dir, new_dir;
  lookup = FS.lookupPath(old_path, {
   parent: true
  });
  old_dir = lookup.node;
  lookup = FS.lookupPath(new_path, {
   parent: true
  });
  new_dir = lookup.node;
  if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
  if (old_dir.mount !== new_dir.mount) {
   throw new FS.ErrnoError(75);
  }
  var old_node = FS.lookupNode(old_dir, old_name);
  var relative = PATH_FS.relative(old_path, new_dirname);
  if (relative.charAt(0) !== ".") {
   throw new FS.ErrnoError(28);
  }
  relative = PATH_FS.relative(new_path, old_dirname);
  if (relative.charAt(0) !== ".") {
   throw new FS.ErrnoError(55);
  }
  var new_node;
  try {
   new_node = FS.lookupNode(new_dir, new_name);
  } catch (e) {}
  if (old_node === new_node) {
   return;
  }
  var isdir = FS.isDir(old_node.mode);
  var errCode = FS.mayDelete(old_dir, old_name, isdir);
  if (errCode) {
   throw new FS.ErrnoError(errCode);
  }
  errCode = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);
  if (errCode) {
   throw new FS.ErrnoError(errCode);
  }
  if (!old_dir.node_ops.rename) {
   throw new FS.ErrnoError(63);
  }
  if (FS.isMountpoint(old_node) || new_node && FS.isMountpoint(new_node)) {
   throw new FS.ErrnoError(10);
  }
  if (new_dir !== old_dir) {
   errCode = FS.nodePermissions(old_dir, "w");
   if (errCode) {
    throw new FS.ErrnoError(errCode);
   }
  }
  if (FS.trackingDelegate["willMovePath"]) {
   FS.trackingDelegate["willMovePath"](old_path, new_path);
  }
  FS.hashRemoveNode(old_node);
  try {
   old_dir.node_ops.rename(old_node, new_dir, new_name);
  } catch (e) {
   throw e;
  } finally {
   FS.hashAddNode(old_node);
  }
  if (FS.trackingDelegate["onMovePath"]) {
   FS.trackingDelegate["onMovePath"](old_path, new_path);
  }
 },
 rmdir: function(path) {
  var lookup = FS.lookupPath(path, {
   parent: true
  });
  var parent = lookup.node;
  var name = PATH.basename(path);
  var node = FS.lookupNode(parent, name);
  var errCode = FS.mayDelete(parent, name, true);
  if (errCode) {
   throw new FS.ErrnoError(errCode);
  }
  if (!parent.node_ops.rmdir) {
   throw new FS.ErrnoError(63);
  }
  if (FS.isMountpoint(node)) {
   throw new FS.ErrnoError(10);
  }
  if (FS.trackingDelegate["willDeletePath"]) {
   FS.trackingDelegate["willDeletePath"](path);
  }
  parent.node_ops.rmdir(parent, name);
  FS.destroyNode(node);
  if (FS.trackingDelegate["onDeletePath"]) {
   FS.trackingDelegate["onDeletePath"](path);
  }
 },
 readdir: function(path) {
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  var node = lookup.node;
  if (!node.node_ops.readdir) {
   throw new FS.ErrnoError(54);
  }
  return node.node_ops.readdir(node);
 },
 unlink: function(path) {
  var lookup = FS.lookupPath(path, {
   parent: true
  });
  var parent = lookup.node;
  var name = PATH.basename(path);
  var node = FS.lookupNode(parent, name);
  var errCode = FS.mayDelete(parent, name, false);
  if (errCode) {
   throw new FS.ErrnoError(errCode);
  }
  if (!parent.node_ops.unlink) {
   throw new FS.ErrnoError(63);
  }
  if (FS.isMountpoint(node)) {
   throw new FS.ErrnoError(10);
  }
  if (FS.trackingDelegate["willDeletePath"]) {
   FS.trackingDelegate["willDeletePath"](path);
  }
  parent.node_ops.unlink(parent, name);
  FS.destroyNode(node);
  if (FS.trackingDelegate["onDeletePath"]) {
   FS.trackingDelegate["onDeletePath"](path);
  }
 },
 readlink: function(path) {
  var lookup = FS.lookupPath(path);
  var link = lookup.node;
  if (!link) {
   throw new FS.ErrnoError(44);
  }
  if (!link.node_ops.readlink) {
   throw new FS.ErrnoError(28);
  }
  return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
 },
 stat: function(path, dontFollow) {
  var lookup = FS.lookupPath(path, {
   follow: !dontFollow
  });
  var node = lookup.node;
  if (!node) {
   throw new FS.ErrnoError(44);
  }
  if (!node.node_ops.getattr) {
   throw new FS.ErrnoError(63);
  }
  return node.node_ops.getattr(node);
 },
 lstat: function(path) {
  return FS.stat(path, true);
 },
 chmod: function(path, mode, dontFollow) {
  var node;
  if (typeof path === "string") {
   var lookup = FS.lookupPath(path, {
    follow: !dontFollow
   });
   node = lookup.node;
  } else {
   node = path;
  }
  if (!node.node_ops.setattr) {
   throw new FS.ErrnoError(63);
  }
  node.node_ops.setattr(node, {
   mode: mode & 4095 | node.mode & ~4095,
   timestamp: Date.now()
  });
 },
 lchmod: function(path, mode) {
  FS.chmod(path, mode, true);
 },
 fchmod: function(fd, mode) {
  var stream = FS.getStream(fd);
  if (!stream) {
   throw new FS.ErrnoError(8);
  }
  FS.chmod(stream.node, mode);
 },
 chown: function(path, uid, gid, dontFollow) {
  var node;
  if (typeof path === "string") {
   var lookup = FS.lookupPath(path, {
    follow: !dontFollow
   });
   node = lookup.node;
  } else {
   node = path;
  }
  if (!node.node_ops.setattr) {
   throw new FS.ErrnoError(63);
  }
  node.node_ops.setattr(node, {
   timestamp: Date.now()
  });
 },
 lchown: function(path, uid, gid) {
  FS.chown(path, uid, gid, true);
 },
 fchown: function(fd, uid, gid) {
  var stream = FS.getStream(fd);
  if (!stream) {
   throw new FS.ErrnoError(8);
  }
  FS.chown(stream.node, uid, gid);
 },
 truncate: function(path, len) {
  if (len < 0) {
   throw new FS.ErrnoError(28);
  }
  var node;
  if (typeof path === "string") {
   var lookup = FS.lookupPath(path, {
    follow: true
   });
   node = lookup.node;
  } else {
   node = path;
  }
  if (!node.node_ops.setattr) {
   throw new FS.ErrnoError(63);
  }
  if (FS.isDir(node.mode)) {
   throw new FS.ErrnoError(31);
  }
  if (!FS.isFile(node.mode)) {
   throw new FS.ErrnoError(28);
  }
  var errCode = FS.nodePermissions(node, "w");
  if (errCode) {
   throw new FS.ErrnoError(errCode);
  }
  node.node_ops.setattr(node, {
   size: len,
   timestamp: Date.now()
  });
 },
 ftruncate: function(fd, len) {
  var stream = FS.getStream(fd);
  if (!stream) {
   throw new FS.ErrnoError(8);
  }
  if ((stream.flags & 2097155) === 0) {
   throw new FS.ErrnoError(28);
  }
  FS.truncate(stream.node, len);
 },
 utime: function(path, atime, mtime) {
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  var node = lookup.node;
  node.node_ops.setattr(node, {
   timestamp: Math.max(atime, mtime)
  });
 },
 open: function(path, flags, mode, fd_start, fd_end) {
  if (path === "") {
   throw new FS.ErrnoError(44);
  }
  flags = typeof flags === "string" ? FS.modeStringToFlags(flags) : flags;
  mode = typeof mode === "undefined" ? 438 : mode;
  if (flags & 64) {
   mode = mode & 4095 | 32768;
  } else {
   mode = 0;
  }
  var node;
  if (typeof path === "object") {
   node = path;
  } else {
   path = PATH.normalize(path);
   try {
    var lookup = FS.lookupPath(path, {
     follow: !(flags & 131072)
    });
    node = lookup.node;
   } catch (e) {}
  }
  var created = false;
  if (flags & 64) {
   if (node) {
    if (flags & 128) {
     throw new FS.ErrnoError(20);
    }
   } else {
    node = FS.mknod(path, mode, 0);
    created = true;
   }
  }
  if (!node) {
   throw new FS.ErrnoError(44);
  }
  if (FS.isChrdev(node.mode)) {
   flags &= ~512;
  }
  if (flags & 65536 && !FS.isDir(node.mode)) {
   throw new FS.ErrnoError(54);
  }
  if (!created) {
   var errCode = FS.mayOpen(node, flags);
   if (errCode) {
    throw new FS.ErrnoError(errCode);
   }
  }
  if (flags & 512) {
   FS.truncate(node, 0);
  }
  var trackingFlags = flags;
  flags &= ~(128 | 512 | 131072);
  var stream = FS.createStream({
   node: node,
   path: FS.getPath(node),
   id: node.id,
   flags: flags,
   mode: node.mode,
   seekable: true,
   position: 0,
   stream_ops: node.stream_ops,
   node_ops: node.node_ops,
   ungotten: [],
   error: false
  }, fd_start, fd_end);
  if (stream.stream_ops.open) {
   stream.stream_ops.open(stream);
  }
  if (Module["logReadFiles"] && !(flags & 1)) {
   if (!FS.readFiles) FS.readFiles = {};
   if (!(path in FS.readFiles)) {
    FS.readFiles[path] = 1;
    err("FS.trackingDelegate error on read file: " + path);
   }
  }
  if (FS.trackingDelegate["onOpenFile"]) {
   FS.trackingDelegate["onOpenFile"](path, trackingFlags);
  }
  return stream;
 },
 close: function(stream) {
  if (FS.isClosed(stream)) {
   throw new FS.ErrnoError(8);
  }
  if (stream.getdents) stream.getdents = null;
  try {
   if (stream.stream_ops.close) {
    stream.stream_ops.close(stream);
   }
  } catch (e) {
   throw e;
  } finally {
   FS.closeStream(stream.fd);
  }
  stream.fd = null;
  if (stream.path && FS.trackingDelegate["onCloseFile"]) {
   FS.trackingDelegate["onCloseFile"](stream.path);
  }
 },
 isClosed: function(stream) {
  return stream.fd === null;
 },
 llseek: function(stream, offset, whence) {
  if (FS.isClosed(stream)) {
   throw new FS.ErrnoError(8);
  }
  if (!stream.seekable || !stream.stream_ops.llseek) {
   throw new FS.ErrnoError(70);
  }
  if (whence != 0 && whence != 1 && whence != 2) {
   throw new FS.ErrnoError(28);
  }
  stream.position = stream.stream_ops.llseek(stream, offset, whence);
  stream.ungotten = [];
  if (stream.path && FS.trackingDelegate["onSeekFile"]) {
   FS.trackingDelegate["onSeekFile"](stream.path, stream.position, whence);
  }
  return stream.position;
 },
 read: function(stream, buffer, offset, length, position) {
  if (length < 0 || position < 0) {
   throw new FS.ErrnoError(28);
  }
  if (FS.isClosed(stream)) {
   throw new FS.ErrnoError(8);
  }
  if ((stream.flags & 2097155) === 1) {
   throw new FS.ErrnoError(8);
  }
  if (FS.isDir(stream.node.mode)) {
   throw new FS.ErrnoError(31);
  }
  if (!stream.stream_ops.read) {
   throw new FS.ErrnoError(28);
  }
  var seeking = typeof position !== "undefined";
  if (!seeking) {
   position = stream.position;
  } else if (!stream.seekable) {
   throw new FS.ErrnoError(70);
  }
  var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
  if (!seeking) stream.position += bytesRead;
  if (stream.path && FS.trackingDelegate["onReadFile"]) {
   FS.trackingDelegate["onReadFile"](stream.path, bytesRead);
  }
  return bytesRead;
 },
 write: function(stream, buffer, offset, length, position, canOwn) {
  if (length < 0 || position < 0) {
   throw new FS.ErrnoError(28);
  }
  if (FS.isClosed(stream)) {
   throw new FS.ErrnoError(8);
  }
  if ((stream.flags & 2097155) === 0) {
   throw new FS.ErrnoError(8);
  }
  if (FS.isDir(stream.node.mode)) {
   throw new FS.ErrnoError(31);
  }
  if (!stream.stream_ops.write) {
   throw new FS.ErrnoError(28);
  }
  if (stream.seekable && stream.flags & 1024) {
   FS.llseek(stream, 0, 2);
  }
  var seeking = typeof position !== "undefined";
  if (!seeking) {
   position = stream.position;
  } else if (!stream.seekable) {
   throw new FS.ErrnoError(70);
  }
  var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
  if (!seeking) stream.position += bytesWritten;
  if (stream.path && FS.trackingDelegate["onWriteToFile"]) {
   FS.trackingDelegate["onWriteToFile"](stream.path, bytesWritten);
  }
  return bytesWritten;
 },
 allocate: function(stream, offset, length) {
  if (FS.isClosed(stream)) {
   throw new FS.ErrnoError(8);
  }
  if (offset < 0 || length <= 0) {
   throw new FS.ErrnoError(28);
  }
  if ((stream.flags & 2097155) === 0) {
   throw new FS.ErrnoError(8);
  }
  if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
   throw new FS.ErrnoError(43);
  }
  if (!stream.stream_ops.allocate) {
   throw new FS.ErrnoError(138);
  }
  stream.stream_ops.allocate(stream, offset, length);
 },
 mmap: function(stream, address, length, position, prot, flags) {
  if ((prot & 2) !== 0 && (flags & 2) === 0 && (stream.flags & 2097155) !== 2) {
   throw new FS.ErrnoError(2);
  }
  if ((stream.flags & 2097155) === 1) {
   throw new FS.ErrnoError(2);
  }
  if (!stream.stream_ops.mmap) {
   throw new FS.ErrnoError(43);
  }
  return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
 },
 msync: function(stream, buffer, offset, length, mmapFlags) {
  if (!stream || !stream.stream_ops.msync) {
   return 0;
  }
  return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
 },
 munmap: function(stream) {
  return 0;
 },
 ioctl: function(stream, cmd, arg) {
  if (!stream.stream_ops.ioctl) {
   throw new FS.ErrnoError(59);
  }
  return stream.stream_ops.ioctl(stream, cmd, arg);
 },
 readFile: function(path, opts) {
  opts = opts || {};
  opts.flags = opts.flags || 0;
  opts.encoding = opts.encoding || "binary";
  if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
   throw new Error('Invalid encoding type "' + opts.encoding + '"');
  }
  var ret;
  var stream = FS.open(path, opts.flags);
  var stat = FS.stat(path);
  var length = stat.size;
  var buf = new Uint8Array(length);
  FS.read(stream, buf, 0, length, 0);
  if (opts.encoding === "utf8") {
   ret = UTF8ArrayToString(buf, 0);
  } else if (opts.encoding === "binary") {
   ret = buf;
  }
  FS.close(stream);
  return ret;
 },
 writeFile: function(path, data, opts) {
  opts = opts || {};
  opts.flags = opts.flags || 577;
  var stream = FS.open(path, opts.flags, opts.mode);
  if (typeof data === "string") {
   var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
   var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
   FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
  } else if (ArrayBuffer.isView(data)) {
   FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
  } else {
   throw new Error("Unsupported data type");
  }
  FS.close(stream);
 },
 cwd: function() {
  return FS.currentPath;
 },
 chdir: function(path) {
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  if (lookup.node === null) {
   throw new FS.ErrnoError(44);
  }
  if (!FS.isDir(lookup.node.mode)) {
   throw new FS.ErrnoError(54);
  }
  var errCode = FS.nodePermissions(lookup.node, "x");
  if (errCode) {
   throw new FS.ErrnoError(errCode);
  }
  FS.currentPath = lookup.path;
 },
 createDefaultDirectories: function() {
  FS.mkdir("/tmp");
  FS.mkdir("/home");
  FS.mkdir("/home/web_user");
 },
 createDefaultDevices: function() {
  FS.mkdir("/dev");
  FS.registerDevice(FS.makedev(1, 3), {
   read: function() {
    return 0;
   },
   write: function(stream, buffer, offset, length, pos) {
    return length;
   }
  });
  FS.mkdev("/dev/null", FS.makedev(1, 3));
  TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
  TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
  FS.mkdev("/dev/tty", FS.makedev(5, 0));
  FS.mkdev("/dev/tty1", FS.makedev(6, 0));
  var random_device = getRandomDevice();
  FS.createDevice("/dev", "random", random_device);
  FS.createDevice("/dev", "urandom", random_device);
  FS.mkdir("/dev/shm");
  FS.mkdir("/dev/shm/tmp");
 },
 createSpecialDirectories: function() {
  FS.mkdir("/proc");
  var proc_self = FS.mkdir("/proc/self");
  FS.mkdir("/proc/self/fd");
  FS.mount({
   mount: function() {
    var node = FS.createNode(proc_self, "fd", 16384 | 511, 73);
    node.node_ops = {
     lookup: function(parent, name) {
      var fd = +name;
      var stream = FS.getStream(fd);
      if (!stream) throw new FS.ErrnoError(8);
      var ret = {
       parent: null,
       mount: {
        mountpoint: "fake"
       },
       node_ops: {
        readlink: function() {
         return stream.path;
        }
       }
      };
      ret.parent = ret;
      return ret;
     }
    };
    return node;
   }
  }, {}, "/proc/self/fd");
 },
 createStandardStreams: function() {
  if (Module["stdin"]) {
   FS.createDevice("/dev", "stdin", Module["stdin"]);
  } else {
   FS.symlink("/dev/tty", "/dev/stdin");
  }
  if (Module["stdout"]) {
   FS.createDevice("/dev", "stdout", null, Module["stdout"]);
  } else {
   FS.symlink("/dev/tty", "/dev/stdout");
  }
  if (Module["stderr"]) {
   FS.createDevice("/dev", "stderr", null, Module["stderr"]);
  } else {
   FS.symlink("/dev/tty1", "/dev/stderr");
  }
  var stdin = FS.open("/dev/stdin", 0);
  var stdout = FS.open("/dev/stdout", 1);
  var stderr = FS.open("/dev/stderr", 1);
  assert(stdin.fd === 0, "invalid handle for stdin (" + stdin.fd + ")");
  assert(stdout.fd === 1, "invalid handle for stdout (" + stdout.fd + ")");
  assert(stderr.fd === 2, "invalid handle for stderr (" + stderr.fd + ")");
 },
 ensureErrnoError: function() {
  if (FS.ErrnoError) return;
  FS.ErrnoError = function ErrnoError(errno, node) {
   this.node = node;
   this.setErrno = function(errno) {
    this.errno = errno;
    for (var key in ERRNO_CODES) {
     if (ERRNO_CODES[key] === errno) {
      this.code = key;
      break;
     }
    }
   };
   this.setErrno(errno);
   this.message = ERRNO_MESSAGES[errno];
   if (this.stack) {
    Object.defineProperty(this, "stack", {
     value: new Error().stack,
     writable: true
    });
    this.stack = demangleAll(this.stack);
   }
  };
  FS.ErrnoError.prototype = new Error();
  FS.ErrnoError.prototype.constructor = FS.ErrnoError;
  [ 44 ].forEach(function(code) {
   FS.genericErrors[code] = new FS.ErrnoError(code);
   FS.genericErrors[code].stack = "<generic error, no stack>";
  });
 },
 staticInit: function() {
  FS.ensureErrnoError();
  FS.nameTable = new Array(4096);
  FS.mount(MEMFS, {}, "/");
  FS.createDefaultDirectories();
  FS.createDefaultDevices();
  FS.createSpecialDirectories();
  FS.filesystems = {
   "MEMFS": MEMFS,
   "IDBFS": IDBFS
  };
 },
 init: function(input, output, error) {
  assert(!FS.init.initialized, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");
  FS.init.initialized = true;
  FS.ensureErrnoError();
  Module["stdin"] = input || Module["stdin"];
  Module["stdout"] = output || Module["stdout"];
  Module["stderr"] = error || Module["stderr"];
  FS.createStandardStreams();
 },
 quit: function() {
  FS.init.initialized = false;
  var fflush = Module["_fflush"];
  if (fflush) fflush(0);
  for (var i = 0; i < FS.streams.length; i++) {
   var stream = FS.streams[i];
   if (!stream) {
    continue;
   }
   FS.close(stream);
  }
 },
 getMode: function(canRead, canWrite) {
  var mode = 0;
  if (canRead) mode |= 292 | 73;
  if (canWrite) mode |= 146;
  return mode;
 },
 findObject: function(path, dontResolveLastLink) {
  var ret = FS.analyzePath(path, dontResolveLastLink);
  if (ret.exists) {
   return ret.object;
  } else {
   return null;
  }
 },
 analyzePath: function(path, dontResolveLastLink) {
  try {
   var lookup = FS.lookupPath(path, {
    follow: !dontResolveLastLink
   });
   path = lookup.path;
  } catch (e) {}
  var ret = {
   isRoot: false,
   exists: false,
   error: 0,
   name: null,
   path: null,
   object: null,
   parentExists: false,
   parentPath: null,
   parentObject: null
  };
  try {
   var lookup = FS.lookupPath(path, {
    parent: true
   });
   ret.parentExists = true;
   ret.parentPath = lookup.path;
   ret.parentObject = lookup.node;
   ret.name = PATH.basename(path);
   lookup = FS.lookupPath(path, {
    follow: !dontResolveLastLink
   });
   ret.exists = true;
   ret.path = lookup.path;
   ret.object = lookup.node;
   ret.name = lookup.node.name;
   ret.isRoot = lookup.path === "/";
  } catch (e) {
   ret.error = e.errno;
  }
  return ret;
 },
 createPath: function(parent, path, canRead, canWrite) {
  parent = typeof parent === "string" ? parent : FS.getPath(parent);
  var parts = path.split("/").reverse();
  while (parts.length) {
   var part = parts.pop();
   if (!part) continue;
   var current = PATH.join2(parent, part);
   try {
    FS.mkdir(current);
   } catch (e) {}
   parent = current;
  }
  return current;
 },
 createFile: function(parent, name, properties, canRead, canWrite) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  var mode = FS.getMode(canRead, canWrite);
  return FS.create(path, mode);
 },
 createDataFile: function(parent, name, data, canRead, canWrite, canOwn) {
  var path = name ? PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name) : parent;
  var mode = FS.getMode(canRead, canWrite);
  var node = FS.create(path, mode);
  if (data) {
   if (typeof data === "string") {
    var arr = new Array(data.length);
    for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
    data = arr;
   }
   FS.chmod(node, mode | 146);
   var stream = FS.open(node, 577);
   FS.write(stream, data, 0, data.length, 0, canOwn);
   FS.close(stream);
   FS.chmod(node, mode);
  }
  return node;
 },
 createDevice: function(parent, name, input, output) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  var mode = FS.getMode(!!input, !!output);
  if (!FS.createDevice.major) FS.createDevice.major = 64;
  var dev = FS.makedev(FS.createDevice.major++, 0);
  FS.registerDevice(dev, {
   open: function(stream) {
    stream.seekable = false;
   },
   close: function(stream) {
    if (output && output.buffer && output.buffer.length) {
     output(10);
    }
   },
   read: function(stream, buffer, offset, length, pos) {
    var bytesRead = 0;
    for (var i = 0; i < length; i++) {
     var result;
     try {
      result = input();
     } catch (e) {
      throw new FS.ErrnoError(29);
     }
     if (result === undefined && bytesRead === 0) {
      throw new FS.ErrnoError(6);
     }
     if (result === null || result === undefined) break;
     bytesRead++;
     buffer[offset + i] = result;
    }
    if (bytesRead) {
     stream.node.timestamp = Date.now();
    }
    return bytesRead;
   },
   write: function(stream, buffer, offset, length, pos) {
    for (var i = 0; i < length; i++) {
     try {
      output(buffer[offset + i]);
     } catch (e) {
      throw new FS.ErrnoError(29);
     }
    }
    if (length) {
     stream.node.timestamp = Date.now();
    }
    return i;
   }
  });
  return FS.mkdev(path, mode, dev);
 },
 forceLoadFile: function(obj) {
  if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
  if (typeof XMLHttpRequest !== "undefined") {
   throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
  } else if (read_) {
   try {
    obj.contents = intArrayFromString(read_(obj.url), true);
    obj.usedBytes = obj.contents.length;
   } catch (e) {
    throw new FS.ErrnoError(29);
   }
  } else {
   throw new Error("Cannot load without read() or XMLHttpRequest.");
  }
 },
 createLazyFile: function(parent, name, url, canRead, canWrite) {
  function LazyUint8Array() {
   this.lengthKnown = false;
   this.chunks = [];
  }
  LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
   if (idx > this.length - 1 || idx < 0) {
    return undefined;
   }
   var chunkOffset = idx % this.chunkSize;
   var chunkNum = idx / this.chunkSize | 0;
   return this.getter(chunkNum)[chunkOffset];
  };
  LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
   this.getter = getter;
  };
  LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
   var xhr = new XMLHttpRequest();
   xhr.open("HEAD", url, false);
   xhr.send(null);
   if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
   var datalength = Number(xhr.getResponseHeader("Content-length"));
   var header;
   var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
   var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
   var chunkSize = 1024 * 1024;
   if (!hasByteServing) chunkSize = datalength;
   var doXHR = function(from, to) {
    if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
    if (to > datalength - 1) throw new Error("only " + datalength + " bytes available! programmer error!");
    var xhr = new XMLHttpRequest();
    xhr.open("GET", url, false);
    if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
    if (typeof Uint8Array != "undefined") xhr.responseType = "arraybuffer";
    if (xhr.overrideMimeType) {
     xhr.overrideMimeType("text/plain; charset=x-user-defined");
    }
    xhr.send(null);
    if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
    if (xhr.response !== undefined) {
     return new Uint8Array(xhr.response || []);
    } else {
     return intArrayFromString(xhr.responseText || "", true);
    }
   };
   var lazyArray = this;
   lazyArray.setDataGetter(function(chunkNum) {
    var start = chunkNum * chunkSize;
    var end = (chunkNum + 1) * chunkSize - 1;
    end = Math.min(end, datalength - 1);
    if (typeof lazyArray.chunks[chunkNum] === "undefined") {
     lazyArray.chunks[chunkNum] = doXHR(start, end);
    }
    if (typeof lazyArray.chunks[chunkNum] === "undefined") throw new Error("doXHR failed!");
    return lazyArray.chunks[chunkNum];
   });
   if (usesGzip || !datalength) {
    chunkSize = datalength = 1;
    datalength = this.getter(0).length;
    chunkSize = datalength;
    out("LazyFiles on gzip forces download of the whole file when length is accessed");
   }
   this._length = datalength;
   this._chunkSize = chunkSize;
   this.lengthKnown = true;
  };
  if (typeof XMLHttpRequest !== "undefined") {
   if (!ENVIRONMENT_IS_WORKER) throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
   var lazyArray = new LazyUint8Array();
   Object.defineProperties(lazyArray, {
    length: {
     get: function() {
      if (!this.lengthKnown) {
       this.cacheLength();
      }
      return this._length;
     }
    },
    chunkSize: {
     get: function() {
      if (!this.lengthKnown) {
       this.cacheLength();
      }
      return this._chunkSize;
     }
    }
   });
   var properties = {
    isDevice: false,
    contents: lazyArray
   };
  } else {
   var properties = {
    isDevice: false,
    url: url
   };
  }
  var node = FS.createFile(parent, name, properties, canRead, canWrite);
  if (properties.contents) {
   node.contents = properties.contents;
  } else if (properties.url) {
   node.contents = null;
   node.url = properties.url;
  }
  Object.defineProperties(node, {
   usedBytes: {
    get: function() {
     return this.contents.length;
    }
   }
  });
  var stream_ops = {};
  var keys = Object.keys(node.stream_ops);
  keys.forEach(function(key) {
   var fn = node.stream_ops[key];
   stream_ops[key] = function forceLoadLazyFile() {
    FS.forceLoadFile(node);
    return fn.apply(null, arguments);
   };
  });
  stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
   FS.forceLoadFile(node);
   var contents = stream.node.contents;
   if (position >= contents.length) return 0;
   var size = Math.min(contents.length - position, length);
   assert(size >= 0);
   if (contents.slice) {
    for (var i = 0; i < size; i++) {
     buffer[offset + i] = contents[position + i];
    }
   } else {
    for (var i = 0; i < size; i++) {
     buffer[offset + i] = contents.get(position + i);
    }
   }
   return size;
  };
  node.stream_ops = stream_ops;
  return node;
 },
 createPreloadedFile: function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
  Browser.init();
  var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
  var dep = getUniqueRunDependency("cp " + fullname);
  function processData(byteArray) {
   function finish(byteArray) {
    if (preFinish) preFinish();
    if (!dontCreateFile) {
     FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
    }
    if (onload) onload();
    removeRunDependency(dep);
   }
   var handled = false;
   Module["preloadPlugins"].forEach(function(plugin) {
    if (handled) return;
    if (plugin["canHandle"](fullname)) {
     plugin["handle"](byteArray, fullname, finish, function() {
      if (onerror) onerror();
      removeRunDependency(dep);
     });
     handled = true;
    }
   });
   if (!handled) finish(byteArray);
  }
  addRunDependency(dep);
  if (typeof url == "string") {
   asyncLoad(url, function(byteArray) {
    processData(byteArray);
   }, onerror);
  } else {
   processData(url);
  }
 },
 indexedDB: function() {
  return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
 },
 DB_NAME: function() {
  return "EM_FS_" + window.location.pathname;
 },
 DB_VERSION: 20,
 DB_STORE_NAME: "FILE_DATA",
 saveFilesToDB: function(paths, onload, onerror) {
  onload = onload || function() {};
  onerror = onerror || function() {};
  var indexedDB = FS.indexedDB();
  try {
   var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
  } catch (e) {
   return onerror(e);
  }
  openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
   out("creating db");
   var db = openRequest.result;
   db.createObjectStore(FS.DB_STORE_NAME);
  };
  openRequest.onsuccess = function openRequest_onsuccess() {
   var db = openRequest.result;
   var transaction = db.transaction([ FS.DB_STORE_NAME ], "readwrite");
   var files = transaction.objectStore(FS.DB_STORE_NAME);
   var ok = 0, fail = 0, total = paths.length;
   function finish() {
    if (fail == 0) onload(); else onerror();
   }
   paths.forEach(function(path) {
    var putRequest = files.put(FS.analyzePath(path).object.contents, path);
    putRequest.onsuccess = function putRequest_onsuccess() {
     ok++;
     if (ok + fail == total) finish();
    };
    putRequest.onerror = function putRequest_onerror() {
     fail++;
     if (ok + fail == total) finish();
    };
   });
   transaction.onerror = onerror;
  };
  openRequest.onerror = onerror;
 },
 loadFilesFromDB: function(paths, onload, onerror) {
  onload = onload || function() {};
  onerror = onerror || function() {};
  var indexedDB = FS.indexedDB();
  try {
   var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
  } catch (e) {
   return onerror(e);
  }
  openRequest.onupgradeneeded = onerror;
  openRequest.onsuccess = function openRequest_onsuccess() {
   var db = openRequest.result;
   try {
    var transaction = db.transaction([ FS.DB_STORE_NAME ], "readonly");
   } catch (e) {
    onerror(e);
    return;
   }
   var files = transaction.objectStore(FS.DB_STORE_NAME);
   var ok = 0, fail = 0, total = paths.length;
   function finish() {
    if (fail == 0) onload(); else onerror();
   }
   paths.forEach(function(path) {
    var getRequest = files.get(path);
    getRequest.onsuccess = function getRequest_onsuccess() {
     if (FS.analyzePath(path).exists) {
      FS.unlink(path);
     }
     FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
     ok++;
     if (ok + fail == total) finish();
    };
    getRequest.onerror = function getRequest_onerror() {
     fail++;
     if (ok + fail == total) finish();
    };
   });
   transaction.onerror = onerror;
  };
  openRequest.onerror = onerror;
 },
 absolutePath: function() {
  abort("FS.absolutePath has been removed; use PATH_FS.resolve instead");
 },
 createFolder: function() {
  abort("FS.createFolder has been removed; use FS.mkdir instead");
 },
 createLink: function() {
  abort("FS.createLink has been removed; use FS.symlink instead");
 },
 joinPath: function() {
  abort("FS.joinPath has been removed; use PATH.join instead");
 },
 mmapAlloc: function() {
  abort("FS.mmapAlloc has been replaced by the top level function mmapAlloc");
 },
 standardizePath: function() {
  abort("FS.standardizePath has been removed; use PATH.normalize instead");
 }
};

var SYSCALLS = {
 mappings: {},
 DEFAULT_POLLMASK: 5,
 calculateAt: function(dirfd, path, allowEmpty) {
  if (path[0] === "/") {
   return path;
  }
  var dir;
  if (dirfd === -100) {
   dir = FS.cwd();
  } else {
   var dirstream = FS.getStream(dirfd);
   if (!dirstream) throw new FS.ErrnoError(8);
   dir = dirstream.path;
  }
  if (path.length == 0) {
   if (!allowEmpty) {
    throw new FS.ErrnoError(44);
   }
   return dir;
  }
  return PATH.join2(dir, path);
 },
 doStat: function(func, path, buf) {
  try {
   var stat = func(path);
  } catch (e) {
   if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
    return -54;
   }
   throw e;
  }
  GROWABLE_HEAP_I32()[buf >> 2] = stat.dev;
  GROWABLE_HEAP_I32()[buf + 4 >> 2] = 0;
  GROWABLE_HEAP_I32()[buf + 8 >> 2] = stat.ino;
  GROWABLE_HEAP_I32()[buf + 12 >> 2] = stat.mode;
  GROWABLE_HEAP_I32()[buf + 16 >> 2] = stat.nlink;
  GROWABLE_HEAP_I32()[buf + 20 >> 2] = stat.uid;
  GROWABLE_HEAP_I32()[buf + 24 >> 2] = stat.gid;
  GROWABLE_HEAP_I32()[buf + 28 >> 2] = stat.rdev;
  GROWABLE_HEAP_I32()[buf + 32 >> 2] = 0;
  tempI64 = [ stat.size >>> 0, (tempDouble = stat.size, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0) ], 
  GROWABLE_HEAP_I32()[buf + 40 >> 2] = tempI64[0], GROWABLE_HEAP_I32()[buf + 44 >> 2] = tempI64[1];
  GROWABLE_HEAP_I32()[buf + 48 >> 2] = 4096;
  GROWABLE_HEAP_I32()[buf + 52 >> 2] = stat.blocks;
  GROWABLE_HEAP_I32()[buf + 56 >> 2] = stat.atime.getTime() / 1e3 | 0;
  GROWABLE_HEAP_I32()[buf + 60 >> 2] = 0;
  GROWABLE_HEAP_I32()[buf + 64 >> 2] = stat.mtime.getTime() / 1e3 | 0;
  GROWABLE_HEAP_I32()[buf + 68 >> 2] = 0;
  GROWABLE_HEAP_I32()[buf + 72 >> 2] = stat.ctime.getTime() / 1e3 | 0;
  GROWABLE_HEAP_I32()[buf + 76 >> 2] = 0;
  tempI64 = [ stat.ino >>> 0, (tempDouble = stat.ino, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0) ], 
  GROWABLE_HEAP_I32()[buf + 80 >> 2] = tempI64[0], GROWABLE_HEAP_I32()[buf + 84 >> 2] = tempI64[1];
  return 0;
 },
 doMsync: function(addr, stream, len, flags, offset) {
  var buffer = GROWABLE_HEAP_U8().slice(addr, addr + len);
  FS.msync(stream, buffer, offset, len, flags);
 },
 doMkdir: function(path, mode) {
  path = PATH.normalize(path);
  if (path[path.length - 1] === "/") path = path.substr(0, path.length - 1);
  FS.mkdir(path, mode, 0);
  return 0;
 },
 doMknod: function(path, mode, dev) {
  switch (mode & 61440) {
  case 32768:
  case 8192:
  case 24576:
  case 4096:
  case 49152:
   break;

  default:
   return -28;
  }
  FS.mknod(path, mode, dev);
  return 0;
 },
 doReadlink: function(path, buf, bufsize) {
  if (bufsize <= 0) return -28;
  var ret = FS.readlink(path);
  var len = Math.min(bufsize, lengthBytesUTF8(ret));
  var endChar = GROWABLE_HEAP_I8()[buf + len];
  stringToUTF8(ret, buf, bufsize + 1);
  GROWABLE_HEAP_I8()[buf + len] = endChar;
  return len;
 },
 doAccess: function(path, amode) {
  if (amode & ~7) {
   return -28;
  }
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  var node = lookup.node;
  if (!node) {
   return -44;
  }
  var perms = "";
  if (amode & 4) perms += "r";
  if (amode & 2) perms += "w";
  if (amode & 1) perms += "x";
  if (perms && FS.nodePermissions(node, perms)) {
   return -2;
  }
  return 0;
 },
 doDup: function(path, flags, suggestFD) {
  var suggest = FS.getStream(suggestFD);
  if (suggest) FS.close(suggest);
  return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
 },
 doReadv: function(stream, iov, iovcnt, offset) {
  var ret = 0;
  for (var i = 0; i < iovcnt; i++) {
   var ptr = GROWABLE_HEAP_I32()[iov + i * 8 >> 2];
   var len = GROWABLE_HEAP_I32()[iov + (i * 8 + 4) >> 2];
   var curr = FS.read(stream, GROWABLE_HEAP_I8(), ptr, len, offset);
   if (curr < 0) return -1;
   ret += curr;
   if (curr < len) break;
  }
  return ret;
 },
 doWritev: function(stream, iov, iovcnt, offset) {
  var ret = 0;
  for (var i = 0; i < iovcnt; i++) {
   var ptr = GROWABLE_HEAP_I32()[iov + i * 8 >> 2];
   var len = GROWABLE_HEAP_I32()[iov + (i * 8 + 4) >> 2];
   var curr = FS.write(stream, GROWABLE_HEAP_I8(), ptr, len, offset);
   if (curr < 0) return -1;
   ret += curr;
  }
  return ret;
 },
 varargs: undefined,
 get: function() {
  assert(SYSCALLS.varargs != undefined);
  SYSCALLS.varargs += 4;
  var ret = GROWABLE_HEAP_I32()[SYSCALLS.varargs - 4 >> 2];
  return ret;
 },
 getStr: function(ptr) {
  var ret = UTF8ToString(ptr);
  return ret;
 },
 getStreamFromFD: function(fd) {
  var stream = FS.getStream(fd);
  if (!stream) throw new FS.ErrnoError(8);
  return stream;
 },
 get64: function(low, high) {
  if (low >= 0) assert(high === 0); else assert(high === -1);
  return low;
 }
};

function ___syscall_access(path, amode) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(4, 1, path, amode);
 try {
  path = SYSCALLS.getStr(path);
  return SYSCALLS.doAccess(path, amode);
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) throw e;
  return -e.errno;
 }
}

function ___syscall_dup3(fd, suggestFD, flags) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(5, 1, fd, suggestFD, flags);
 try {
  var old = SYSCALLS.getStreamFromFD(fd);
  assert(!flags);
  if (old.fd === suggestFD) return -28;
  return SYSCALLS.doDup(old.path, old.flags, suggestFD);
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) throw e;
  return -e.errno;
 }
}

function ___syscall_fcntl64(fd, cmd, varargs) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(6, 1, fd, cmd, varargs);
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD(fd);
  switch (cmd) {
  case 0:
   {
    var arg = SYSCALLS.get();
    if (arg < 0) {
     return -28;
    }
    var newStream;
    newStream = FS.open(stream.path, stream.flags, 0, arg);
    return newStream.fd;
   }

  case 1:
  case 2:
   return 0;

  case 3:
   return stream.flags;

  case 4:
   {
    var arg = SYSCALLS.get();
    stream.flags |= arg;
    return 0;
   }

  case 5:
   {
    var arg = SYSCALLS.get();
    var offset = 0;
    GROWABLE_HEAP_I16()[arg + offset >> 1] = 2;
    return 0;
   }

  case 6:
  case 7:
   return 0;

  case 16:
  case 8:
   return -28;

  case 9:
   setErrNo(28);
   return -1;

  default:
   {
    return -28;
   }
  }
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) throw e;
  return -e.errno;
 }
}

function ___syscall_fstat64(fd, buf) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(7, 1, fd, buf);
 try {
  var stream = SYSCALLS.getStreamFromFD(fd);
  return SYSCALLS.doStat(FS.stat, stream.path, buf);
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) throw e;
  return -e.errno;
 }
}

function ___syscall_fstatat64(dirfd, path, buf, flags) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(8, 1, dirfd, path, buf, flags);
 try {
  path = SYSCALLS.getStr(path);
  var nofollow = flags & 256;
  var allowEmpty = flags & 4096;
  flags = flags & ~4352;
  assert(!flags, flags);
  path = SYSCALLS.calculateAt(dirfd, path, allowEmpty);
  return SYSCALLS.doStat(nofollow ? FS.lstat : FS.stat, path, buf);
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) throw e;
  return -e.errno;
 }
}

function ___syscall_getdents64(fd, dirp, count) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(9, 1, fd, dirp, count);
 try {
  var stream = SYSCALLS.getStreamFromFD(fd);
  if (!stream.getdents) {
   stream.getdents = FS.readdir(stream.path);
  }
  var struct_size = 280;
  var pos = 0;
  var off = FS.llseek(stream, 0, 1);
  var idx = Math.floor(off / struct_size);
  while (idx < stream.getdents.length && pos + struct_size <= count) {
   var id;
   var type;
   var name = stream.getdents[idx];
   if (name === ".") {
    id = stream.id;
    type = 4;
   } else if (name === "..") {
    var lookup = FS.lookupPath(stream.path, {
     parent: true
    });
    id = lookup.node.id;
    type = 4;
   } else {
    var child = FS.lookupNode(stream, name);
    id = child.id;
    type = FS.isChrdev(child.mode) ? 2 : FS.isDir(child.mode) ? 4 : FS.isLink(child.mode) ? 10 : 8;
   }
   assert(id);
   tempI64 = [ id >>> 0, (tempDouble = id, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0) ], 
   GROWABLE_HEAP_I32()[dirp + pos >> 2] = tempI64[0], GROWABLE_HEAP_I32()[dirp + pos + 4 >> 2] = tempI64[1];
   tempI64 = [ (idx + 1) * struct_size >>> 0, (tempDouble = (idx + 1) * struct_size, 
   +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0) ], 
   GROWABLE_HEAP_I32()[dirp + pos + 8 >> 2] = tempI64[0], GROWABLE_HEAP_I32()[dirp + pos + 12 >> 2] = tempI64[1];
   GROWABLE_HEAP_I16()[dirp + pos + 16 >> 1] = 280;
   GROWABLE_HEAP_I8()[dirp + pos + 18 >> 0] = type;
   stringToUTF8(name, dirp + pos + 19, 256);
   pos += struct_size;
   idx += 1;
  }
  FS.llseek(stream, idx * struct_size, 0);
  return pos;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) throw e;
  return -e.errno;
 }
}

function ___syscall_ioctl(fd, op, varargs) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(10, 1, fd, op, varargs);
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD(fd);
  switch (op) {
  case 21509:
  case 21505:
   {
    if (!stream.tty) return -59;
    return 0;
   }

  case 21510:
  case 21511:
  case 21512:
  case 21506:
  case 21507:
  case 21508:
   {
    if (!stream.tty) return -59;
    return 0;
   }

  case 21519:
   {
    if (!stream.tty) return -59;
    var argp = SYSCALLS.get();
    GROWABLE_HEAP_I32()[argp >> 2] = 0;
    return 0;
   }

  case 21520:
   {
    if (!stream.tty) return -59;
    return -28;
   }

  case 21531:
   {
    var argp = SYSCALLS.get();
    return FS.ioctl(stream, op, argp);
   }

  case 21523:
   {
    if (!stream.tty) return -59;
    return 0;
   }

  case 21524:
   {
    if (!stream.tty) return -59;
    return 0;
   }

  default:
   abort("bad ioctl syscall " + op);
  }
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) throw e;
  return -e.errno;
 }
}

function ___syscall_lstat64(path, buf) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(11, 1, path, buf);
 try {
  path = SYSCALLS.getStr(path);
  return SYSCALLS.doStat(FS.lstat, path, buf);
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) throw e;
  return -e.errno;
 }
}

function ___syscall_mkdir(path, mode) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(12, 1, path, mode);
 try {
  path = SYSCALLS.getStr(path);
  return SYSCALLS.doMkdir(path, mode);
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) throw e;
  return -e.errno;
 }
}

function ___syscall_open(path, flags, varargs) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(13, 1, path, flags, varargs);
 SYSCALLS.varargs = varargs;
 try {
  var pathname = SYSCALLS.getStr(path);
  var mode = varargs ? SYSCALLS.get() : 0;
  var stream = FS.open(pathname, flags, mode);
  return stream.fd;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) throw e;
  return -e.errno;
 }
}

function ___syscall_rename(old_path, new_path) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(14, 1, old_path, new_path);
 try {
  old_path = SYSCALLS.getStr(old_path);
  new_path = SYSCALLS.getStr(new_path);
  FS.rename(old_path, new_path);
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) throw e;
  return -e.errno;
 }
}

function ___syscall_rmdir(path) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(15, 1, path);
 try {
  path = SYSCALLS.getStr(path);
  FS.rmdir(path);
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) throw e;
  return -e.errno;
 }
}

function ___syscall_stat64(path, buf) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(16, 1, path, buf);
 try {
  path = SYSCALLS.getStr(path);
  return SYSCALLS.doStat(FS.stat, path, buf);
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) throw e;
  return -e.errno;
 }
}

function ___syscall_unlink(path) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(17, 1, path);
 try {
  path = SYSCALLS.getStr(path);
  FS.unlink(path);
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) throw e;
  return -e.errno;
 }
}

function __dlopen_js(filename, flag) {
 abort("To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking");
}

function __dlsym_js(handle, symbol) {
 abort("To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking");
}

function __emscripten_default_pthread_stack_size() {
 return 2097152;
}

function __emscripten_fetch_free(id) {
 delete Fetch.xhrs[id - 1];
}

function __emscripten_fetch_get_response_headers(id, dst, dstSizeBytes) {
 var responseHeaders = Fetch.xhrs[id - 1].getAllResponseHeaders();
 var lengthBytes = lengthBytesUTF8(responseHeaders) + 1;
 stringToUTF8(responseHeaders, dst, dstSizeBytes);
 return Math.min(lengthBytes, dstSizeBytes);
}

function __emscripten_fetch_get_response_headers_length(id) {
 return lengthBytesUTF8(Fetch.xhrs[id - 1].getAllResponseHeaders()) + 1;
}

function __emscripten_notify_thread_queue(targetThreadId, mainThreadId) {
 if (targetThreadId == mainThreadId) {
  postMessage({
   "cmd": "processQueuedMainThreadWork"
  });
 } else if (ENVIRONMENT_IS_PTHREAD) {
  postMessage({
   "targetThread": targetThreadId,
   "cmd": "processThreadQueue"
  });
 } else {
  var pthread = PThread.pthreads[targetThreadId];
  var worker = pthread && pthread.worker;
  if (!worker) {
   err("Cannot send message to thread with ID " + targetThreadId + ", unknown thread ID!");
   return;
  }
  worker.postMessage({
   "cmd": "processThreadQueue"
  });
 }
 return 1;
}

function __emscripten_throw_longjmp() {
 throw "longjmp";
}

function _abort() {
 abort("native code called abort()");
}

function _clock() {
 if (_clock.start === undefined) _clock.start = Date.now();
 return (Date.now() - _clock.start) * (1e6 / 1e3) | 0;
}

function _difftime(time1, time0) {
 return time1 - time0;
}

function _emscripten_set_main_loop_timing(mode, value) {
 Browser.mainLoop.timingMode = mode;
 Browser.mainLoop.timingValue = value;
 if (!Browser.mainLoop.func) {
  err("emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.");
  return 1;
 }
 if (!Browser.mainLoop.running) {
  runtimeKeepalivePush();
  Browser.mainLoop.running = true;
 }
 if (mode == 0) {
  Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
   var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now()) | 0;
   setTimeout(Browser.mainLoop.runner, timeUntilNextTick);
  };
  Browser.mainLoop.method = "timeout";
 } else if (mode == 1) {
  Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
   Browser.requestAnimationFrame(Browser.mainLoop.runner);
  };
  Browser.mainLoop.method = "rAF";
 } else if (mode == 2) {
  if (typeof setImmediate === "undefined") {
   var setImmediates = [];
   var emscriptenMainLoopMessageId = "setimmediate";
   var Browser_setImmediate_messageHandler = function(event) {
    if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
     event.stopPropagation();
     setImmediates.shift()();
    }
   };
   addEventListener("message", Browser_setImmediate_messageHandler, true);
   setImmediate = function Browser_emulated_setImmediate(func) {
    setImmediates.push(func);
    if (ENVIRONMENT_IS_WORKER) {
     if (Module["setImmediates"] === undefined) Module["setImmediates"] = [];
     Module["setImmediates"].push(func);
     postMessage({
      target: emscriptenMainLoopMessageId
     });
    } else postMessage(emscriptenMainLoopMessageId, "*");
   };
  }
  Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
   setImmediate(Browser.mainLoop.runner);
  };
  Browser.mainLoop.method = "immediate";
 }
 return 0;
}

function runtimeKeepalivePush() {
 runtimeKeepaliveCounter += 1;
}

function maybeExit() {
 if (!keepRuntimeAlive()) {
  try {
   if (ENVIRONMENT_IS_PTHREAD) __emscripten_thread_exit(EXITSTATUS); else _exit(EXITSTATUS);
  } catch (e) {
   handleException(e);
  }
 }
}

function setMainLoop(browserIterationFunc, fps, simulateInfiniteLoop, arg, noSetTiming) {
 assert(!Browser.mainLoop.func, "emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.");
 Browser.mainLoop.func = browserIterationFunc;
 Browser.mainLoop.arg = arg;
 var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
 function checkIsRunning() {
  if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) {
   runtimeKeepalivePop();
   maybeExit();
   return false;
  }
  return true;
 }
 Browser.mainLoop.running = false;
 Browser.mainLoop.runner = function Browser_mainLoop_runner() {
  if (ABORT) return;
  if (Browser.mainLoop.queue.length > 0) {
   var start = Date.now();
   var blocker = Browser.mainLoop.queue.shift();
   blocker.func(blocker.arg);
   if (Browser.mainLoop.remainingBlockers) {
    var remaining = Browser.mainLoop.remainingBlockers;
    var next = remaining % 1 == 0 ? remaining - 1 : Math.floor(remaining);
    if (blocker.counted) {
     Browser.mainLoop.remainingBlockers = next;
    } else {
     next = next + .5;
     Browser.mainLoop.remainingBlockers = (8 * remaining + next) / 9;
    }
   }
   out('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + " ms");
   Browser.mainLoop.updateStatus();
   if (!checkIsRunning()) return;
   setTimeout(Browser.mainLoop.runner, 0);
   return;
  }
  if (!checkIsRunning()) return;
  Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
  if (Browser.mainLoop.timingMode == 1 && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
   Browser.mainLoop.scheduler();
   return;
  } else if (Browser.mainLoop.timingMode == 0) {
   Browser.mainLoop.tickStartTime = _emscripten_get_now();
  }
  if (Browser.mainLoop.method === "timeout" && Module.ctx) {
   warnOnce("Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!");
   Browser.mainLoop.method = "";
  }
  Browser.mainLoop.runIter(browserIterationFunc);
  checkStackCookie();
  if (!checkIsRunning()) return;
  if (typeof SDL === "object" && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  Browser.mainLoop.scheduler();
 };
 if (!noSetTiming) {
  if (fps && fps > 0) _emscripten_set_main_loop_timing(0, 1e3 / fps); else _emscripten_set_main_loop_timing(1, 1);
  Browser.mainLoop.scheduler();
 }
 if (simulateInfiniteLoop) {
  throw "unwind";
 }
}

function callUserCallback(func, synchronous) {
 if (runtimeExited || ABORT) {
  err("user callback triggered after runtime exited or application aborted.  Ignoring.");
  return;
 }
 if (synchronous) {
  func();
  return;
 }
 try {
  func();
  if (ENVIRONMENT_IS_PTHREAD) maybeExit();
 } catch (e) {
  handleException(e);
 }
}

function runtimeKeepalivePop() {
 assert(runtimeKeepaliveCounter > 0);
 runtimeKeepaliveCounter -= 1;
}

function safeSetTimeout(func, timeout) {
 runtimeKeepalivePush();
 return setTimeout(function() {
  runtimeKeepalivePop();
  callUserCallback(func);
 }, timeout);
}

var Browser = {
 mainLoop: {
  running: false,
  scheduler: null,
  method: "",
  currentlyRunningMainloop: 0,
  func: null,
  arg: 0,
  timingMode: 0,
  timingValue: 0,
  currentFrameNumber: 0,
  queue: [],
  pause: function() {
   Browser.mainLoop.scheduler = null;
   Browser.mainLoop.currentlyRunningMainloop++;
  },
  resume: function() {
   Browser.mainLoop.currentlyRunningMainloop++;
   var timingMode = Browser.mainLoop.timingMode;
   var timingValue = Browser.mainLoop.timingValue;
   var func = Browser.mainLoop.func;
   Browser.mainLoop.func = null;
   setMainLoop(func, 0, false, Browser.mainLoop.arg, true);
   _emscripten_set_main_loop_timing(timingMode, timingValue);
   Browser.mainLoop.scheduler();
  },
  updateStatus: function() {
   if (Module["setStatus"]) {
    var message = Module["statusMessage"] || "Please wait...";
    var remaining = Browser.mainLoop.remainingBlockers;
    var expected = Browser.mainLoop.expectedBlockers;
    if (remaining) {
     if (remaining < expected) {
      Module["setStatus"](message + " (" + (expected - remaining) + "/" + expected + ")");
     } else {
      Module["setStatus"](message);
     }
    } else {
     Module["setStatus"]("");
    }
   }
  },
  runIter: function(func) {
   if (ABORT) return;
   if (Module["preMainLoop"]) {
    var preRet = Module["preMainLoop"]();
    if (preRet === false) {
     return;
    }
   }
   callUserCallback(func);
   if (Module["postMainLoop"]) Module["postMainLoop"]();
  }
 },
 isFullscreen: false,
 pointerLock: false,
 moduleContextCreatedCallbacks: [],
 workers: [],
 init: function() {
  if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
  if (Browser.initted) return;
  Browser.initted = true;
  try {
   new Blob();
   Browser.hasBlobConstructor = true;
  } catch (e) {
   Browser.hasBlobConstructor = false;
   out("warning: no blob constructor, cannot create blobs with mimetypes");
  }
  Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : !Browser.hasBlobConstructor ? out("warning: no BlobBuilder") : null;
  Browser.URLObject = typeof window != "undefined" ? window.URL ? window.URL : window.webkitURL : undefined;
  if (!Module.noImageDecoding && typeof Browser.URLObject === "undefined") {
   out("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
   Module.noImageDecoding = true;
  }
  var imagePlugin = {};
  imagePlugin["canHandle"] = function imagePlugin_canHandle(name) {
   return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
  };
  imagePlugin["handle"] = function imagePlugin_handle(byteArray, name, onload, onerror) {
   var b = null;
   if (Browser.hasBlobConstructor) {
    try {
     b = new Blob([ byteArray ], {
      type: Browser.getMimetype(name)
     });
     if (b.size !== byteArray.length) {
      b = new Blob([ new Uint8Array(byteArray).buffer ], {
       type: Browser.getMimetype(name)
      });
     }
    } catch (e) {
     warnOnce("Blob constructor present but fails: " + e + "; falling back to blob builder");
    }
   }
   if (!b) {
    var bb = new Browser.BlobBuilder();
    bb.append(new Uint8Array(byteArray).buffer);
    b = bb.getBlob();
   }
   var url = Browser.URLObject.createObjectURL(b);
   assert(typeof url == "string", "createObjectURL must return a url as a string");
   var img = new Image();
   img.onload = function img_onload() {
    assert(img.complete, "Image " + name + " could not be decoded");
    var canvas = document.createElement("canvas");
    canvas.width = img.width;
    canvas.height = img.height;
    var ctx = canvas.getContext("2d");
    ctx.drawImage(img, 0, 0);
    Module["preloadedImages"][name] = canvas;
    Browser.URLObject.revokeObjectURL(url);
    if (onload) onload(byteArray);
   };
   img.onerror = function img_onerror(event) {
    out("Image " + url + " could not be decoded");
    if (onerror) onerror();
   };
   img.src = url;
  };
  Module["preloadPlugins"].push(imagePlugin);
  var audioPlugin = {};
  audioPlugin["canHandle"] = function audioPlugin_canHandle(name) {
   return !Module.noAudioDecoding && name.substr(-4) in {
    ".ogg": 1,
    ".wav": 1,
    ".mp3": 1
   };
  };
  audioPlugin["handle"] = function audioPlugin_handle(byteArray, name, onload, onerror) {
   var done = false;
   function finish(audio) {
    if (done) return;
    done = true;
    Module["preloadedAudios"][name] = audio;
    if (onload) onload(byteArray);
   }
   function fail() {
    if (done) return;
    done = true;
    Module["preloadedAudios"][name] = new Audio();
    if (onerror) onerror();
   }
   if (Browser.hasBlobConstructor) {
    try {
     var b = new Blob([ byteArray ], {
      type: Browser.getMimetype(name)
     });
    } catch (e) {
     return fail();
    }
    var url = Browser.URLObject.createObjectURL(b);
    assert(typeof url == "string", "createObjectURL must return a url as a string");
    var audio = new Audio();
    audio.addEventListener("canplaythrough", function() {
     finish(audio);
    }, false);
    audio.onerror = function audio_onerror(event) {
     if (done) return;
     out("warning: browser could not fully decode audio " + name + ", trying slower base64 approach");
     function encode64(data) {
      var BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      var PAD = "=";
      var ret = "";
      var leftchar = 0;
      var leftbits = 0;
      for (var i = 0; i < data.length; i++) {
       leftchar = leftchar << 8 | data[i];
       leftbits += 8;
       while (leftbits >= 6) {
        var curr = leftchar >> leftbits - 6 & 63;
        leftbits -= 6;
        ret += BASE[curr];
       }
      }
      if (leftbits == 2) {
       ret += BASE[(leftchar & 3) << 4];
       ret += PAD + PAD;
      } else if (leftbits == 4) {
       ret += BASE[(leftchar & 15) << 2];
       ret += PAD;
      }
      return ret;
     }
     audio.src = "data:audio/x-" + name.substr(-3) + ";base64," + encode64(byteArray);
     finish(audio);
    };
    audio.src = url;
    safeSetTimeout(function() {
     finish(audio);
    }, 1e4);
   } else {
    return fail();
   }
  };
  Module["preloadPlugins"].push(audioPlugin);
  function pointerLockChange() {
   Browser.pointerLock = document["pointerLockElement"] === Module["canvas"] || document["mozPointerLockElement"] === Module["canvas"] || document["webkitPointerLockElement"] === Module["canvas"] || document["msPointerLockElement"] === Module["canvas"];
  }
  var canvas = Module["canvas"];
  if (canvas) {
   canvas.requestPointerLock = canvas["requestPointerLock"] || canvas["mozRequestPointerLock"] || canvas["webkitRequestPointerLock"] || canvas["msRequestPointerLock"] || function() {};
   canvas.exitPointerLock = document["exitPointerLock"] || document["mozExitPointerLock"] || document["webkitExitPointerLock"] || document["msExitPointerLock"] || function() {};
   canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
   document.addEventListener("pointerlockchange", pointerLockChange, false);
   document.addEventListener("mozpointerlockchange", pointerLockChange, false);
   document.addEventListener("webkitpointerlockchange", pointerLockChange, false);
   document.addEventListener("mspointerlockchange", pointerLockChange, false);
   if (Module["elementPointerLock"]) {
    canvas.addEventListener("click", function(ev) {
     if (!Browser.pointerLock && Module["canvas"].requestPointerLock) {
      Module["canvas"].requestPointerLock();
      ev.preventDefault();
     }
    }, false);
   }
  }
 },
 createContext: function(canvas, useWebGL, setInModule, webGLContextAttributes) {
  if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx;
  var ctx;
  var contextHandle;
  if (useWebGL) {
   var contextAttributes = {
    antialias: false,
    alpha: false,
    majorVersion: 1
   };
   if (webGLContextAttributes) {
    for (var attribute in webGLContextAttributes) {
     contextAttributes[attribute] = webGLContextAttributes[attribute];
    }
   }
   if (typeof GL !== "undefined") {
    contextHandle = GL.createContext(canvas, contextAttributes);
    if (contextHandle) {
     ctx = GL.getContext(contextHandle).GLctx;
    }
   }
  } else {
   ctx = canvas.getContext("2d");
  }
  if (!ctx) return null;
  if (setInModule) {
   if (!useWebGL) assert(typeof GLctx === "undefined", "cannot set in module if GLctx is used, but we are a non-GL context that would replace it");
   Module.ctx = ctx;
   if (useWebGL) GL.makeContextCurrent(contextHandle);
   Module.useWebGL = useWebGL;
   Browser.moduleContextCreatedCallbacks.forEach(function(callback) {
    callback();
   });
   Browser.init();
  }
  return ctx;
 },
 destroyContext: function(canvas, useWebGL, setInModule) {},
 fullscreenHandlersInstalled: false,
 lockPointer: undefined,
 resizeCanvas: undefined,
 requestFullscreen: function(lockPointer, resizeCanvas) {
  Browser.lockPointer = lockPointer;
  Browser.resizeCanvas = resizeCanvas;
  if (typeof Browser.lockPointer === "undefined") Browser.lockPointer = true;
  if (typeof Browser.resizeCanvas === "undefined") Browser.resizeCanvas = false;
  var canvas = Module["canvas"];
  function fullscreenChange() {
   Browser.isFullscreen = false;
   var canvasContainer = canvas.parentNode;
   if ((document["fullscreenElement"] || document["mozFullScreenElement"] || document["msFullscreenElement"] || document["webkitFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvasContainer) {
    canvas.exitFullscreen = Browser.exitFullscreen;
    if (Browser.lockPointer) canvas.requestPointerLock();
    Browser.isFullscreen = true;
    if (Browser.resizeCanvas) {
     Browser.setFullscreenCanvasSize();
    } else {
     Browser.updateCanvasDimensions(canvas);
    }
   } else {
    canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
    canvasContainer.parentNode.removeChild(canvasContainer);
    if (Browser.resizeCanvas) {
     Browser.setWindowedCanvasSize();
    } else {
     Browser.updateCanvasDimensions(canvas);
    }
   }
   if (Module["onFullScreen"]) Module["onFullScreen"](Browser.isFullscreen);
   if (Module["onFullscreen"]) Module["onFullscreen"](Browser.isFullscreen);
  }
  if (!Browser.fullscreenHandlersInstalled) {
   Browser.fullscreenHandlersInstalled = true;
   document.addEventListener("fullscreenchange", fullscreenChange, false);
   document.addEventListener("mozfullscreenchange", fullscreenChange, false);
   document.addEventListener("webkitfullscreenchange", fullscreenChange, false);
   document.addEventListener("MSFullscreenChange", fullscreenChange, false);
  }
  var canvasContainer = document.createElement("div");
  canvas.parentNode.insertBefore(canvasContainer, canvas);
  canvasContainer.appendChild(canvas);
  canvasContainer.requestFullscreen = canvasContainer["requestFullscreen"] || canvasContainer["mozRequestFullScreen"] || canvasContainer["msRequestFullscreen"] || (canvasContainer["webkitRequestFullscreen"] ? function() {
   canvasContainer["webkitRequestFullscreen"](Element["ALLOW_KEYBOARD_INPUT"]);
  } : null) || (canvasContainer["webkitRequestFullScreen"] ? function() {
   canvasContainer["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"]);
  } : null);
  canvasContainer.requestFullscreen();
 },
 requestFullScreen: function() {
  abort("Module.requestFullScreen has been replaced by Module.requestFullscreen (without a capital S)");
 },
 exitFullscreen: function() {
  if (!Browser.isFullscreen) {
   return false;
  }
  var CFS = document["exitFullscreen"] || document["cancelFullScreen"] || document["mozCancelFullScreen"] || document["msExitFullscreen"] || document["webkitCancelFullScreen"] || function() {};
  CFS.apply(document, []);
  return true;
 },
 nextRAF: 0,
 fakeRequestAnimationFrame: function(func) {
  var now = Date.now();
  if (Browser.nextRAF === 0) {
   Browser.nextRAF = now + 1e3 / 60;
  } else {
   while (now + 2 >= Browser.nextRAF) {
    Browser.nextRAF += 1e3 / 60;
   }
  }
  var delay = Math.max(Browser.nextRAF - now, 0);
  setTimeout(func, delay);
 },
 requestAnimationFrame: function(func) {
  if (typeof requestAnimationFrame === "function") {
   requestAnimationFrame(func);
   return;
  }
  var RAF = Browser.fakeRequestAnimationFrame;
  RAF(func);
 },
 safeSetTimeout: function(func) {
  return safeSetTimeout(func);
 },
 safeRequestAnimationFrame: function(func) {
  runtimeKeepalivePush();
  return Browser.requestAnimationFrame(function() {
   runtimeKeepalivePop();
   callUserCallback(func);
  });
 },
 getMimetype: function(name) {
  return {
   "jpg": "image/jpeg",
   "jpeg": "image/jpeg",
   "png": "image/png",
   "bmp": "image/bmp",
   "ogg": "audio/ogg",
   "wav": "audio/wav",
   "mp3": "audio/mpeg"
  }[name.substr(name.lastIndexOf(".") + 1)];
 },
 getUserMedia: function(func) {
  if (!window.getUserMedia) {
   window.getUserMedia = navigator["getUserMedia"] || navigator["mozGetUserMedia"];
  }
  window.getUserMedia(func);
 },
 getMovementX: function(event) {
  return event["movementX"] || event["mozMovementX"] || event["webkitMovementX"] || 0;
 },
 getMovementY: function(event) {
  return event["movementY"] || event["mozMovementY"] || event["webkitMovementY"] || 0;
 },
 getMouseWheelDelta: function(event) {
  var delta = 0;
  switch (event.type) {
  case "DOMMouseScroll":
   delta = event.detail / 3;
   break;

  case "mousewheel":
   delta = event.wheelDelta / 120;
   break;

  case "wheel":
   delta = event.deltaY;
   switch (event.deltaMode) {
   case 0:
    delta /= 100;
    break;

   case 1:
    delta /= 3;
    break;

   case 2:
    delta *= 80;
    break;

   default:
    throw "unrecognized mouse wheel delta mode: " + event.deltaMode;
   }
   break;

  default:
   throw "unrecognized mouse wheel event: " + event.type;
  }
  return delta;
 },
 mouseX: 0,
 mouseY: 0,
 mouseMovementX: 0,
 mouseMovementY: 0,
 touches: {},
 lastTouches: {},
 calculateMouseEvent: function(event) {
  if (Browser.pointerLock) {
   if (event.type != "mousemove" && "mozMovementX" in event) {
    Browser.mouseMovementX = Browser.mouseMovementY = 0;
   } else {
    Browser.mouseMovementX = Browser.getMovementX(event);
    Browser.mouseMovementY = Browser.getMovementY(event);
   }
   if (typeof SDL != "undefined") {
    Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
    Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
   } else {
    Browser.mouseX += Browser.mouseMovementX;
    Browser.mouseY += Browser.mouseMovementY;
   }
  } else {
   var rect = Module["canvas"].getBoundingClientRect();
   var cw = Module["canvas"].width;
   var ch = Module["canvas"].height;
   var scrollX = typeof window.scrollX !== "undefined" ? window.scrollX : window.pageXOffset;
   var scrollY = typeof window.scrollY !== "undefined" ? window.scrollY : window.pageYOffset;
   assert(typeof scrollX !== "undefined" && typeof scrollY !== "undefined", "Unable to retrieve scroll position, mouse positions likely broken.");
   if (event.type === "touchstart" || event.type === "touchend" || event.type === "touchmove") {
    var touch = event.touch;
    if (touch === undefined) {
     return;
    }
    var adjustedX = touch.pageX - (scrollX + rect.left);
    var adjustedY = touch.pageY - (scrollY + rect.top);
    adjustedX = adjustedX * (cw / rect.width);
    adjustedY = adjustedY * (ch / rect.height);
    var coords = {
     x: adjustedX,
     y: adjustedY
    };
    if (event.type === "touchstart") {
     Browser.lastTouches[touch.identifier] = coords;
     Browser.touches[touch.identifier] = coords;
    } else if (event.type === "touchend" || event.type === "touchmove") {
     var last = Browser.touches[touch.identifier];
     if (!last) last = coords;
     Browser.lastTouches[touch.identifier] = last;
     Browser.touches[touch.identifier] = coords;
    }
    return;
   }
   var x = event.pageX - (scrollX + rect.left);
   var y = event.pageY - (scrollY + rect.top);
   x = x * (cw / rect.width);
   y = y * (ch / rect.height);
   Browser.mouseMovementX = x - Browser.mouseX;
   Browser.mouseMovementY = y - Browser.mouseY;
   Browser.mouseX = x;
   Browser.mouseY = y;
  }
 },
 resizeListeners: [],
 updateResizeListeners: function() {
  var canvas = Module["canvas"];
  Browser.resizeListeners.forEach(function(listener) {
   listener(canvas.width, canvas.height);
  });
 },
 setCanvasSize: function(width, height, noUpdates) {
  var canvas = Module["canvas"];
  Browser.updateCanvasDimensions(canvas, width, height);
  if (!noUpdates) Browser.updateResizeListeners();
 },
 windowedWidth: 0,
 windowedHeight: 0,
 setFullscreenCanvasSize: function() {
  if (typeof SDL != "undefined") {
   var flags = GROWABLE_HEAP_U32()[SDL.screen >> 2];
   flags = flags | 8388608;
   GROWABLE_HEAP_I32()[SDL.screen >> 2] = flags;
  }
  Browser.updateCanvasDimensions(Module["canvas"]);
  Browser.updateResizeListeners();
 },
 setWindowedCanvasSize: function() {
  if (typeof SDL != "undefined") {
   var flags = GROWABLE_HEAP_U32()[SDL.screen >> 2];
   flags = flags & ~8388608;
   GROWABLE_HEAP_I32()[SDL.screen >> 2] = flags;
  }
  Browser.updateCanvasDimensions(Module["canvas"]);
  Browser.updateResizeListeners();
 },
 updateCanvasDimensions: function(canvas, wNative, hNative) {
  if (wNative && hNative) {
   canvas.widthNative = wNative;
   canvas.heightNative = hNative;
  } else {
   wNative = canvas.widthNative;
   hNative = canvas.heightNative;
  }
  var w = wNative;
  var h = hNative;
  if (Module["forcedAspectRatio"] && Module["forcedAspectRatio"] > 0) {
   if (w / h < Module["forcedAspectRatio"]) {
    w = Math.round(h * Module["forcedAspectRatio"]);
   } else {
    h = Math.round(w / Module["forcedAspectRatio"]);
   }
  }
  if ((document["fullscreenElement"] || document["mozFullScreenElement"] || document["msFullscreenElement"] || document["webkitFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvas.parentNode && typeof screen != "undefined") {
   var factor = Math.min(screen.width / w, screen.height / h);
   w = Math.round(w * factor);
   h = Math.round(h * factor);
  }
  if (Browser.resizeCanvas) {
   if (canvas.width != w) canvas.width = w;
   if (canvas.height != h) canvas.height = h;
   if (typeof canvas.style != "undefined") {
    canvas.style.removeProperty("width");
    canvas.style.removeProperty("height");
   }
  } else {
   if (canvas.width != wNative) canvas.width = wNative;
   if (canvas.height != hNative) canvas.height = hNative;
   if (typeof canvas.style != "undefined") {
    if (w != wNative || h != hNative) {
     canvas.style.setProperty("width", w + "px", "important");
     canvas.style.setProperty("height", h + "px", "important");
    } else {
     canvas.style.removeProperty("width");
     canvas.style.removeProperty("height");
    }
   }
  }
 }
};

var EGL = {
 errorCode: 12288,
 defaultDisplayInitialized: false,
 currentContext: 0,
 currentReadSurface: 0,
 currentDrawSurface: 0,
 contextAttributes: {
  alpha: false,
  depth: false,
  stencil: false,
  antialias: false
 },
 stringCache: {},
 setErrorCode: function(code) {
  EGL.errorCode = code;
 },
 chooseConfig: function(display, attribList, config, config_size, numConfigs) {
  if (display != 62e3) {
   EGL.setErrorCode(12296);
   return 0;
  }
  if (attribList) {
   for (;;) {
    var param = GROWABLE_HEAP_I32()[attribList >> 2];
    if (param == 12321) {
     var alphaSize = GROWABLE_HEAP_I32()[attribList + 4 >> 2];
     EGL.contextAttributes.alpha = alphaSize > 0;
    } else if (param == 12325) {
     var depthSize = GROWABLE_HEAP_I32()[attribList + 4 >> 2];
     EGL.contextAttributes.depth = depthSize > 0;
    } else if (param == 12326) {
     var stencilSize = GROWABLE_HEAP_I32()[attribList + 4 >> 2];
     EGL.contextAttributes.stencil = stencilSize > 0;
    } else if (param == 12337) {
     var samples = GROWABLE_HEAP_I32()[attribList + 4 >> 2];
     EGL.contextAttributes.antialias = samples > 0;
    } else if (param == 12338) {
     var samples = GROWABLE_HEAP_I32()[attribList + 4 >> 2];
     EGL.contextAttributes.antialias = samples == 1;
    } else if (param == 12544) {
     var requestedPriority = GROWABLE_HEAP_I32()[attribList + 4 >> 2];
     EGL.contextAttributes.lowLatency = requestedPriority != 12547;
    } else if (param == 12344) {
     break;
    }
    attribList += 8;
   }
  }
  if ((!config || !config_size) && !numConfigs) {
   EGL.setErrorCode(12300);
   return 0;
  }
  if (numConfigs) {
   GROWABLE_HEAP_I32()[numConfigs >> 2] = 1;
  }
  if (config && config_size > 0) {
   GROWABLE_HEAP_I32()[config >> 2] = 62002;
  }
  EGL.setErrorCode(12288);
  return 1;
 }
};

function _eglBindAPI(api) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(18, 1, api);
 if (api == 12448) {
  EGL.setErrorCode(12288);
  return 1;
 } else {
  EGL.setErrorCode(12300);
  return 0;
 }
}

function _eglChooseConfig(display, attrib_list, configs, config_size, numConfigs) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(19, 1, display, attrib_list, configs, config_size, numConfigs);
 return EGL.chooseConfig(display, attrib_list, configs, config_size, numConfigs);
}

function __webgl_enable_ANGLE_instanced_arrays(ctx) {
 var ext = ctx.getExtension("ANGLE_instanced_arrays");
 if (ext) {
  ctx["vertexAttribDivisor"] = function(index, divisor) {
   ext["vertexAttribDivisorANGLE"](index, divisor);
  };
  ctx["drawArraysInstanced"] = function(mode, first, count, primcount) {
   ext["drawArraysInstancedANGLE"](mode, first, count, primcount);
  };
  ctx["drawElementsInstanced"] = function(mode, count, type, indices, primcount) {
   ext["drawElementsInstancedANGLE"](mode, count, type, indices, primcount);
  };
  return 1;
 }
}

function __webgl_enable_OES_vertex_array_object(ctx) {
 var ext = ctx.getExtension("OES_vertex_array_object");
 if (ext) {
  ctx["createVertexArray"] = function() {
   return ext["createVertexArrayOES"]();
  };
  ctx["deleteVertexArray"] = function(vao) {
   ext["deleteVertexArrayOES"](vao);
  };
  ctx["bindVertexArray"] = function(vao) {
   ext["bindVertexArrayOES"](vao);
  };
  ctx["isVertexArray"] = function(vao) {
   return ext["isVertexArrayOES"](vao);
  };
  return 1;
 }
}

function __webgl_enable_WEBGL_draw_buffers(ctx) {
 var ext = ctx.getExtension("WEBGL_draw_buffers");
 if (ext) {
  ctx["drawBuffers"] = function(n, bufs) {
   ext["drawBuffersWEBGL"](n, bufs);
  };
  return 1;
 }
}

function __webgl_enable_WEBGL_multi_draw(ctx) {
 return !!(ctx.multiDrawWebgl = ctx.getExtension("WEBGL_multi_draw"));
}

var GL = {
 counter: 1,
 buffers: [],
 programs: [],
 framebuffers: [],
 renderbuffers: [],
 textures: [],
 shaders: [],
 vaos: [],
 contexts: {},
 offscreenCanvases: {},
 queries: [],
 stringCache: {},
 unpackAlignment: 4,
 recordError: function recordError(errorCode) {
  if (!GL.lastError) {
   GL.lastError = errorCode;
  }
 },
 getNewId: function(table) {
  var ret = GL.counter++;
  for (var i = table.length; i < ret; i++) {
   table[i] = null;
  }
  return ret;
 },
 getSource: function(shader, count, string, length) {
  var source = "";
  for (var i = 0; i < count; ++i) {
   var len = length ? GROWABLE_HEAP_I32()[length + i * 4 >> 2] : -1;
   source += UTF8ToString(GROWABLE_HEAP_I32()[string + i * 4 >> 2], len < 0 ? undefined : len);
  }
  return source;
 },
 createContext: function(canvas, webGLContextAttributes) {
  if (!canvas.getContextSafariWebGL2Fixed) {
   canvas.getContextSafariWebGL2Fixed = canvas.getContext;
   canvas.getContext = function(ver, attrs) {
    var gl = canvas.getContextSafariWebGL2Fixed(ver, attrs);
    return ver == "webgl" == gl instanceof WebGLRenderingContext ? gl : null;
   };
  }
  var ctx = canvas.getContext("webgl", webGLContextAttributes);
  if (!ctx) return 0;
  var handle = GL.registerContext(ctx, webGLContextAttributes);
  return handle;
 },
 registerContext: function(ctx, webGLContextAttributes) {
  var handle = _malloc(8);
  GROWABLE_HEAP_I32()[handle + 4 >> 2] = _pthread_self();
  var context = {
   handle: handle,
   attributes: webGLContextAttributes,
   version: webGLContextAttributes.majorVersion,
   GLctx: ctx
  };
  if (ctx.canvas) ctx.canvas.GLctxObject = context;
  GL.contexts[handle] = context;
  if (typeof webGLContextAttributes.enableExtensionsByDefault === "undefined" || webGLContextAttributes.enableExtensionsByDefault) {
   GL.initExtensions(context);
  }
  return handle;
 },
 makeContextCurrent: function(contextHandle) {
  GL.currentContext = GL.contexts[contextHandle];
  Module.ctx = GLctx = GL.currentContext && GL.currentContext.GLctx;
  return !(contextHandle && !GLctx);
 },
 getContext: function(contextHandle) {
  return GL.contexts[contextHandle];
 },
 deleteContext: function(contextHandle) {
  if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
  if (typeof JSEvents === "object") JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas);
  if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined;
  _free(GL.contexts[contextHandle].handle);
  GL.contexts[contextHandle] = null;
 },
 initExtensions: function(context) {
  if (!context) context = GL.currentContext;
  if (context.initExtensionsDone) return;
  context.initExtensionsDone = true;
  var GLctx = context.GLctx;
  __webgl_enable_ANGLE_instanced_arrays(GLctx);
  __webgl_enable_OES_vertex_array_object(GLctx);
  __webgl_enable_WEBGL_draw_buffers(GLctx);
  {
   GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
  }
  __webgl_enable_WEBGL_multi_draw(GLctx);
  var exts = GLctx.getSupportedExtensions() || [];
  exts.forEach(function(ext) {
   if (!ext.includes("lose_context") && !ext.includes("debug")) {
    GLctx.getExtension(ext);
   }
  });
 }
};

function _eglCreateContext(display, config, hmm, contextAttribs) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(20, 1, display, config, hmm, contextAttribs);
 if (display != 62e3) {
  EGL.setErrorCode(12296);
  return 0;
 }
 var glesContextVersion = 1;
 for (;;) {
  var param = GROWABLE_HEAP_I32()[contextAttribs >> 2];
  if (param == 12440) {
   glesContextVersion = GROWABLE_HEAP_I32()[contextAttribs + 4 >> 2];
  } else if (param == 12344) {
   break;
  } else {
   EGL.setErrorCode(12292);
   return 0;
  }
  contextAttribs += 8;
 }
 if (glesContextVersion != 2) {
  EGL.setErrorCode(12293);
  return 0;
 }
 EGL.contextAttributes.majorVersion = glesContextVersion - 1;
 EGL.contextAttributes.minorVersion = 0;
 EGL.context = GL.createContext(Module["canvas"], EGL.contextAttributes);
 if (EGL.context != 0) {
  EGL.setErrorCode(12288);
  GL.makeContextCurrent(EGL.context);
  Module.useWebGL = true;
  Browser.moduleContextCreatedCallbacks.forEach(function(callback) {
   callback();
  });
  GL.makeContextCurrent(null);
  return 62004;
 } else {
  EGL.setErrorCode(12297);
  return 0;
 }
}

function _eglCreateWindowSurface(display, config, win, attrib_list) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(21, 1, display, config, win, attrib_list);
 if (display != 62e3) {
  EGL.setErrorCode(12296);
  return 0;
 }
 if (config != 62002) {
  EGL.setErrorCode(12293);
  return 0;
 }
 EGL.setErrorCode(12288);
 return 62006;
}

function _eglDestroyContext(display, context) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(22, 1, display, context);
 if (display != 62e3) {
  EGL.setErrorCode(12296);
  return 0;
 }
 if (context != 62004) {
  EGL.setErrorCode(12294);
  return 0;
 }
 GL.deleteContext(EGL.context);
 EGL.setErrorCode(12288);
 if (EGL.currentContext == context) {
  EGL.currentContext = 0;
 }
 return 1;
}

function _eglDestroySurface(display, surface) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(23, 1, display, surface);
 if (display != 62e3) {
  EGL.setErrorCode(12296);
  return 0;
 }
 if (surface != 62006) {
  EGL.setErrorCode(12301);
  return 1;
 }
 if (EGL.currentReadSurface == surface) {
  EGL.currentReadSurface = 0;
 }
 if (EGL.currentDrawSurface == surface) {
  EGL.currentDrawSurface = 0;
 }
 EGL.setErrorCode(12288);
 return 1;
}

function _eglGetConfigAttrib(display, config, attribute, value) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(24, 1, display, config, attribute, value);
 if (display != 62e3) {
  EGL.setErrorCode(12296);
  return 0;
 }
 if (config != 62002) {
  EGL.setErrorCode(12293);
  return 0;
 }
 if (!value) {
  EGL.setErrorCode(12300);
  return 0;
 }
 EGL.setErrorCode(12288);
 switch (attribute) {
 case 12320:
  GROWABLE_HEAP_I32()[value >> 2] = EGL.contextAttributes.alpha ? 32 : 24;
  return 1;

 case 12321:
  GROWABLE_HEAP_I32()[value >> 2] = EGL.contextAttributes.alpha ? 8 : 0;
  return 1;

 case 12322:
  GROWABLE_HEAP_I32()[value >> 2] = 8;
  return 1;

 case 12323:
  GROWABLE_HEAP_I32()[value >> 2] = 8;
  return 1;

 case 12324:
  GROWABLE_HEAP_I32()[value >> 2] = 8;
  return 1;

 case 12325:
  GROWABLE_HEAP_I32()[value >> 2] = EGL.contextAttributes.depth ? 24 : 0;
  return 1;

 case 12326:
  GROWABLE_HEAP_I32()[value >> 2] = EGL.contextAttributes.stencil ? 8 : 0;
  return 1;

 case 12327:
  GROWABLE_HEAP_I32()[value >> 2] = 12344;
  return 1;

 case 12328:
  GROWABLE_HEAP_I32()[value >> 2] = 62002;
  return 1;

 case 12329:
  GROWABLE_HEAP_I32()[value >> 2] = 0;
  return 1;

 case 12330:
  GROWABLE_HEAP_I32()[value >> 2] = 4096;
  return 1;

 case 12331:
  GROWABLE_HEAP_I32()[value >> 2] = 16777216;
  return 1;

 case 12332:
  GROWABLE_HEAP_I32()[value >> 2] = 4096;
  return 1;

 case 12333:
  GROWABLE_HEAP_I32()[value >> 2] = 0;
  return 1;

 case 12334:
  GROWABLE_HEAP_I32()[value >> 2] = 0;
  return 1;

 case 12335:
  GROWABLE_HEAP_I32()[value >> 2] = 12344;
  return 1;

 case 12337:
  GROWABLE_HEAP_I32()[value >> 2] = EGL.contextAttributes.antialias ? 4 : 0;
  return 1;

 case 12338:
  GROWABLE_HEAP_I32()[value >> 2] = EGL.contextAttributes.antialias ? 1 : 0;
  return 1;

 case 12339:
  GROWABLE_HEAP_I32()[value >> 2] = 4;
  return 1;

 case 12340:
  GROWABLE_HEAP_I32()[value >> 2] = 12344;
  return 1;

 case 12341:
 case 12342:
 case 12343:
  GROWABLE_HEAP_I32()[value >> 2] = -1;
  return 1;

 case 12345:
 case 12346:
  GROWABLE_HEAP_I32()[value >> 2] = 0;
  return 1;

 case 12347:
  GROWABLE_HEAP_I32()[value >> 2] = 0;
  return 1;

 case 12348:
  GROWABLE_HEAP_I32()[value >> 2] = 1;
  return 1;

 case 12349:
 case 12350:
  GROWABLE_HEAP_I32()[value >> 2] = 0;
  return 1;

 case 12351:
  GROWABLE_HEAP_I32()[value >> 2] = 12430;
  return 1;

 case 12352:
  GROWABLE_HEAP_I32()[value >> 2] = 4;
  return 1;

 case 12354:
  GROWABLE_HEAP_I32()[value >> 2] = 0;
  return 1;

 default:
  EGL.setErrorCode(12292);
  return 0;
 }
}

function _eglGetDisplay(nativeDisplayType) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(25, 1, nativeDisplayType);
 EGL.setErrorCode(12288);
 return 62e3;
}

function _eglGetError() {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(26, 1);
 return EGL.errorCode;
}

function _eglInitialize(display, majorVersion, minorVersion) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(27, 1, display, majorVersion, minorVersion);
 if (display == 62e3) {
  if (majorVersion) {
   GROWABLE_HEAP_I32()[majorVersion >> 2] = 1;
  }
  if (minorVersion) {
   GROWABLE_HEAP_I32()[minorVersion >> 2] = 4;
  }
  EGL.defaultDisplayInitialized = true;
  EGL.setErrorCode(12288);
  return 1;
 } else {
  EGL.setErrorCode(12296);
  return 0;
 }
}

function _eglMakeCurrent(display, draw, read, context) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(28, 1, display, draw, read, context);
 if (display != 62e3) {
  EGL.setErrorCode(12296);
  return 0;
 }
 if (context != 0 && context != 62004) {
  EGL.setErrorCode(12294);
  return 0;
 }
 if (read != 0 && read != 62006 || draw != 0 && draw != 62006) {
  EGL.setErrorCode(12301);
  return 0;
 }
 GL.makeContextCurrent(context ? EGL.context : null);
 EGL.currentContext = context;
 EGL.currentDrawSurface = draw;
 EGL.currentReadSurface = read;
 EGL.setErrorCode(12288);
 return 1;
}

function _eglQueryString(display, name) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(29, 1, display, name);
 if (display != 62e3) {
  EGL.setErrorCode(12296);
  return 0;
 }
 EGL.setErrorCode(12288);
 if (EGL.stringCache[name]) return EGL.stringCache[name];
 var ret;
 switch (name) {
 case 12371:
  ret = allocateUTF8("Emscripten");
  break;

 case 12372:
  ret = allocateUTF8("1.4 Emscripten EGL");
  break;

 case 12373:
  ret = allocateUTF8("");
  break;

 case 12429:
  ret = allocateUTF8("OpenGL_ES");
  break;

 default:
  EGL.setErrorCode(12300);
  return 0;
 }
 EGL.stringCache[name] = ret;
 return ret;
}

function _eglSwapBuffers() {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(30, 1);
 if (!EGL.defaultDisplayInitialized) {
  EGL.setErrorCode(12289);
 } else if (!Module.ctx) {
  EGL.setErrorCode(12290);
 } else if (Module.ctx.isContextLost()) {
  EGL.setErrorCode(12302);
 } else {
  EGL.setErrorCode(12288);
  return 1;
 }
 return 0;
}

function _eglSwapInterval(display, interval) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(31, 1, display, interval);
 if (display != 62e3) {
  EGL.setErrorCode(12296);
  return 0;
 }
 if (interval == 0) _emscripten_set_main_loop_timing(0, 0); else _emscripten_set_main_loop_timing(1, interval);
 EGL.setErrorCode(12288);
 return 1;
}

function _eglTerminate(display) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(32, 1, display);
 if (display != 62e3) {
  EGL.setErrorCode(12296);
  return 0;
 }
 EGL.currentContext = 0;
 EGL.currentReadSurface = 0;
 EGL.currentDrawSurface = 0;
 EGL.defaultDisplayInitialized = false;
 EGL.setErrorCode(12288);
 return 1;
}

function _eglWaitClient() {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(33, 1);
 EGL.setErrorCode(12288);
 return 1;
}

function _eglWaitGL() {
 return _eglWaitClient();
}

function _eglWaitNative(nativeEngineId) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(34, 1, nativeEngineId);
 EGL.setErrorCode(12288);
 return 1;
}

var readAsmConstArgsArray = [];

function readAsmConstArgs(sigPtr, buf) {
 assert(Array.isArray(readAsmConstArgsArray));
 assert(buf % 16 == 0);
 readAsmConstArgsArray.length = 0;
 var ch;
 buf >>= 2;
 while (ch = GROWABLE_HEAP_U8()[sigPtr++]) {
  assert(ch === 100 || ch === 102 || ch === 105);
  var readAsmConstArgsDouble = ch < 105;
  if (readAsmConstArgsDouble && buf & 1) buf++;
  readAsmConstArgsArray.push(readAsmConstArgsDouble ? GROWABLE_HEAP_F64()[buf++ >> 1] : GROWABLE_HEAP_I32()[buf]);
  ++buf;
 }
 return readAsmConstArgsArray;
}

function _emscripten_asm_const_int(code, sigPtr, argbuf) {
 var args = readAsmConstArgs(sigPtr, argbuf);
 if (!ASM_CONSTS.hasOwnProperty(code)) abort("No EM_ASM constant found at address " + code);
 return ASM_CONSTS[code].apply(null, args);
}

function _emscripten_check_blocking_allowed() {
 if (ENVIRONMENT_IS_NODE) return;
 if (ENVIRONMENT_IS_WORKER) return;
 warnOnce("Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread");
}

function _emscripten_conditional_set_current_thread_status_js(expectedStatus, newStatus) {}

function _emscripten_conditional_set_current_thread_status(expectedStatus, newStatus) {}

var JSEvents = {
 inEventHandler: 0,
 removeAllEventListeners: function() {
  for (var i = JSEvents.eventHandlers.length - 1; i >= 0; --i) {
   JSEvents._removeHandler(i);
  }
  JSEvents.eventHandlers = [];
  JSEvents.deferredCalls = [];
 },
 registerRemoveEventListeners: function() {
  if (!JSEvents.removeEventListenersRegistered) {
   __ATEXIT__.push(JSEvents.removeAllEventListeners);
   JSEvents.removeEventListenersRegistered = true;
  }
 },
 deferredCalls: [],
 deferCall: function(targetFunction, precedence, argsList) {
  function arraysHaveEqualContent(arrA, arrB) {
   if (arrA.length != arrB.length) return false;
   for (var i in arrA) {
    if (arrA[i] != arrB[i]) return false;
   }
   return true;
  }
  for (var i in JSEvents.deferredCalls) {
   var call = JSEvents.deferredCalls[i];
   if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
    return;
   }
  }
  JSEvents.deferredCalls.push({
   targetFunction: targetFunction,
   precedence: precedence,
   argsList: argsList
  });
  JSEvents.deferredCalls.sort(function(x, y) {
   return x.precedence < y.precedence;
  });
 },
 removeDeferredCalls: function(targetFunction) {
  for (var i = 0; i < JSEvents.deferredCalls.length; ++i) {
   if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
    JSEvents.deferredCalls.splice(i, 1);
    --i;
   }
  }
 },
 canPerformEventHandlerRequests: function() {
  return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
 },
 runDeferredCalls: function() {
  if (!JSEvents.canPerformEventHandlerRequests()) {
   return;
  }
  for (var i = 0; i < JSEvents.deferredCalls.length; ++i) {
   var call = JSEvents.deferredCalls[i];
   JSEvents.deferredCalls.splice(i, 1);
   --i;
   call.targetFunction.apply(null, call.argsList);
  }
 },
 eventHandlers: [],
 removeAllHandlersOnTarget: function(target, eventTypeString) {
  for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
   if (JSEvents.eventHandlers[i].target == target && (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
    JSEvents._removeHandler(i--);
   }
  }
 },
 _removeHandler: function(i) {
  var h = JSEvents.eventHandlers[i];
  h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
  JSEvents.eventHandlers.splice(i, 1);
 },
 registerOrRemoveHandler: function(eventHandler) {
  var jsEventHandler = function jsEventHandler(event) {
   if (Module.disableEvents) return;
   ++JSEvents.inEventHandler;
   JSEvents.currentEventHandler = eventHandler;
   JSEvents.runDeferredCalls();
   eventHandler.handlerFunc(event);
   JSEvents.runDeferredCalls();
   --JSEvents.inEventHandler;
  };
  if (eventHandler.callbackfunc) {
   eventHandler.eventListenerFunc = jsEventHandler;
   eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
   JSEvents.eventHandlers.push(eventHandler);
   JSEvents.registerRemoveEventListeners();
  } else {
   for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
    if (JSEvents.eventHandlers[i].target == eventHandler.target && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
     JSEvents._removeHandler(i--);
    }
   }
  }
 },
 queueEventHandlerOnThread_iiii: function(targetThread, eventHandlerFunc, eventTypeId, eventData, userData) {
  withStackSave(function() {
   var varargs = stackAlloc(12);
   GROWABLE_HEAP_I32()[varargs >> 2] = eventTypeId;
   GROWABLE_HEAP_I32()[varargs + 4 >> 2] = eventData;
   GROWABLE_HEAP_I32()[varargs + 8 >> 2] = userData;
   __emscripten_call_on_thread(0, targetThread, 637534208, eventHandlerFunc, eventData, varargs);
  });
 },
 getTargetThreadForEventCallback: function(targetThread) {
  switch (targetThread) {
  case 1:
   return 0;

  case 2:
   return PThread.currentProxiedOperationCallerThread;

  default:
   return targetThread;
  }
 },
 getNodeNameForTarget: function(target) {
  if (!target) return "";
  if (target == window) return "#window";
  if (target == screen) return "#screen";
  return target && target.nodeName ? target.nodeName : "";
 },
 fullscreenEnabled: function() {
  return document.fullscreenEnabled || document.webkitFullscreenEnabled;
 }
};

var currentFullscreenStrategy = {};

function maybeCStringToJsString(cString) {
 return cString > 2 ? UTF8ToString(cString) : cString;
}

var specialHTMLTargets = [ 0, typeof document !== "undefined" ? document : 0, typeof window !== "undefined" ? window : 0 ];

function findEventTarget(target) {
 target = maybeCStringToJsString(target);
 var domElement = specialHTMLTargets[target] || (typeof document !== "undefined" ? document.querySelector(target) : undefined);
 return domElement;
}

function findCanvasEventTarget(target) {
 return findEventTarget(target);
}

function _emscripten_get_canvas_element_size_calling_thread(target, width, height) {
 var canvas = findCanvasEventTarget(target);
 if (!canvas) return -4;
 if (canvas.canvasSharedPtr) {
  var w = GROWABLE_HEAP_I32()[canvas.canvasSharedPtr >> 2];
  var h = GROWABLE_HEAP_I32()[canvas.canvasSharedPtr + 4 >> 2];
  GROWABLE_HEAP_I32()[width >> 2] = w;
  GROWABLE_HEAP_I32()[height >> 2] = h;
 } else if (canvas.offscreenCanvas) {
  GROWABLE_HEAP_I32()[width >> 2] = canvas.offscreenCanvas.width;
  GROWABLE_HEAP_I32()[height >> 2] = canvas.offscreenCanvas.height;
 } else if (!canvas.controlTransferredOffscreen) {
  GROWABLE_HEAP_I32()[width >> 2] = canvas.width;
  GROWABLE_HEAP_I32()[height >> 2] = canvas.height;
 } else {
  return -4;
 }
 return 0;
}

function _emscripten_get_canvas_element_size_main_thread(target, width, height) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(36, 1, target, width, height);
 return _emscripten_get_canvas_element_size_calling_thread(target, width, height);
}

function _emscripten_get_canvas_element_size(target, width, height) {
 var canvas = findCanvasEventTarget(target);
 if (canvas) {
  return _emscripten_get_canvas_element_size_calling_thread(target, width, height);
 } else {
  return _emscripten_get_canvas_element_size_main_thread(target, width, height);
 }
}

function getCanvasElementSize(target) {
 return withStackSave(function() {
  var w = stackAlloc(8);
  var h = w + 4;
  var targetInt = stackAlloc(target.id.length + 1);
  stringToUTF8(target.id, targetInt, target.id.length + 1);
  var ret = _emscripten_get_canvas_element_size(targetInt, w, h);
  var size = [ GROWABLE_HEAP_I32()[w >> 2], GROWABLE_HEAP_I32()[h >> 2] ];
  return size;
 });
}

function stringToNewUTF8(jsString) {
 var length = lengthBytesUTF8(jsString) + 1;
 var cString = _malloc(length);
 stringToUTF8(jsString, cString, length);
 return cString;
}

function _emscripten_set_offscreencanvas_size_on_target_thread_js(targetThread, targetCanvas, width, height) {
 withStackSave(function() {
  var varargs = stackAlloc(12);
  var targetCanvasPtr = 0;
  if (targetCanvas) {
   targetCanvasPtr = stringToNewUTF8(targetCanvas);
  }
  GROWABLE_HEAP_I32()[varargs >> 2] = targetCanvasPtr;
  GROWABLE_HEAP_I32()[varargs + 4 >> 2] = width;
  GROWABLE_HEAP_I32()[varargs + 8 >> 2] = height;
  __emscripten_call_on_thread(0, targetThread, 657457152, 0, targetCanvasPtr, varargs);
 });
}

function _emscripten_set_offscreencanvas_size_on_target_thread(targetThread, targetCanvas, width, height) {
 targetCanvas = targetCanvas ? UTF8ToString(targetCanvas) : "";
 _emscripten_set_offscreencanvas_size_on_target_thread_js(targetThread, targetCanvas, width, height);
}

function _emscripten_set_canvas_element_size_calling_thread(target, width, height) {
 var canvas = findCanvasEventTarget(target);
 if (!canvas) return -4;
 if (canvas.canvasSharedPtr) {
  GROWABLE_HEAP_I32()[canvas.canvasSharedPtr >> 2] = width;
  GROWABLE_HEAP_I32()[canvas.canvasSharedPtr + 4 >> 2] = height;
 }
 if (canvas.offscreenCanvas || !canvas.controlTransferredOffscreen) {
  if (canvas.offscreenCanvas) canvas = canvas.offscreenCanvas;
  var autoResizeViewport = false;
  if (canvas.GLctxObject && canvas.GLctxObject.GLctx) {
   var prevViewport = canvas.GLctxObject.GLctx.getParameter(2978);
   autoResizeViewport = prevViewport[0] === 0 && prevViewport[1] === 0 && prevViewport[2] === canvas.width && prevViewport[3] === canvas.height;
  }
  canvas.width = width;
  canvas.height = height;
  if (autoResizeViewport) {
   canvas.GLctxObject.GLctx.viewport(0, 0, width, height);
  }
 } else if (canvas.canvasSharedPtr) {
  var targetThread = GROWABLE_HEAP_I32()[canvas.canvasSharedPtr + 8 >> 2];
  _emscripten_set_offscreencanvas_size_on_target_thread(targetThread, target, width, height);
  return 1;
 } else {
  return -4;
 }
 return 0;
}

function _emscripten_set_canvas_element_size_main_thread(target, width, height) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(37, 1, target, width, height);
 return _emscripten_set_canvas_element_size_calling_thread(target, width, height);
}

function _emscripten_set_canvas_element_size(target, width, height) {
 var canvas = findCanvasEventTarget(target);
 if (canvas) {
  return _emscripten_set_canvas_element_size_calling_thread(target, width, height);
 } else {
  return _emscripten_set_canvas_element_size_main_thread(target, width, height);
 }
}

function setCanvasElementSize(target, width, height) {
 if (!target.controlTransferredOffscreen) {
  target.width = width;
  target.height = height;
 } else {
  withStackSave(function() {
   var targetInt = stackAlloc(target.id.length + 1);
   stringToUTF8(target.id, targetInt, target.id.length + 1);
   _emscripten_set_canvas_element_size(targetInt, width, height);
  });
 }
}

function registerRestoreOldStyle(canvas) {
 var canvasSize = getCanvasElementSize(canvas);
 var oldWidth = canvasSize[0];
 var oldHeight = canvasSize[1];
 var oldCssWidth = canvas.style.width;
 var oldCssHeight = canvas.style.height;
 var oldBackgroundColor = canvas.style.backgroundColor;
 var oldDocumentBackgroundColor = document.body.style.backgroundColor;
 var oldPaddingLeft = canvas.style.paddingLeft;
 var oldPaddingRight = canvas.style.paddingRight;
 var oldPaddingTop = canvas.style.paddingTop;
 var oldPaddingBottom = canvas.style.paddingBottom;
 var oldMarginLeft = canvas.style.marginLeft;
 var oldMarginRight = canvas.style.marginRight;
 var oldMarginTop = canvas.style.marginTop;
 var oldMarginBottom = canvas.style.marginBottom;
 var oldDocumentBodyMargin = document.body.style.margin;
 var oldDocumentOverflow = document.documentElement.style.overflow;
 var oldDocumentScroll = document.body.scroll;
 var oldImageRendering = canvas.style.imageRendering;
 function restoreOldStyle() {
  var fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
  if (!fullscreenElement) {
   document.removeEventListener("fullscreenchange", restoreOldStyle);
   document.removeEventListener("webkitfullscreenchange", restoreOldStyle);
   setCanvasElementSize(canvas, oldWidth, oldHeight);
   canvas.style.width = oldCssWidth;
   canvas.style.height = oldCssHeight;
   canvas.style.backgroundColor = oldBackgroundColor;
   if (!oldDocumentBackgroundColor) document.body.style.backgroundColor = "white";
   document.body.style.backgroundColor = oldDocumentBackgroundColor;
   canvas.style.paddingLeft = oldPaddingLeft;
   canvas.style.paddingRight = oldPaddingRight;
   canvas.style.paddingTop = oldPaddingTop;
   canvas.style.paddingBottom = oldPaddingBottom;
   canvas.style.marginLeft = oldMarginLeft;
   canvas.style.marginRight = oldMarginRight;
   canvas.style.marginTop = oldMarginTop;
   canvas.style.marginBottom = oldMarginBottom;
   document.body.style.margin = oldDocumentBodyMargin;
   document.documentElement.style.overflow = oldDocumentOverflow;
   document.body.scroll = oldDocumentScroll;
   canvas.style.imageRendering = oldImageRendering;
   if (canvas.GLctxObject) canvas.GLctxObject.GLctx.viewport(0, 0, oldWidth, oldHeight);
   if (currentFullscreenStrategy.canvasResizedCallback) {
    if (currentFullscreenStrategy.canvasResizedCallbackTargetThread) JSEvents.queueEventHandlerOnThread_iiii(currentFullscreenStrategy.canvasResizedCallbackTargetThread, currentFullscreenStrategy.canvasResizedCallback, 37, 0, currentFullscreenStrategy.canvasResizedCallbackUserData); else (function(a1, a2, a3) {
     return dynCall_iiii.apply(null, [ currentFullscreenStrategy.canvasResizedCallback, a1, a2, a3 ]);
    })(37, 0, currentFullscreenStrategy.canvasResizedCallbackUserData);
   }
  }
 }
 document.addEventListener("fullscreenchange", restoreOldStyle);
 document.addEventListener("webkitfullscreenchange", restoreOldStyle);
 return restoreOldStyle;
}

function setLetterbox(element, topBottom, leftRight) {
 element.style.paddingLeft = element.style.paddingRight = leftRight + "px";
 element.style.paddingTop = element.style.paddingBottom = topBottom + "px";
}

function getBoundingClientRect(e) {
 return specialHTMLTargets.indexOf(e) < 0 ? e.getBoundingClientRect() : {
  "left": 0,
  "top": 0
 };
}

function _JSEvents_resizeCanvasForFullscreen(target, strategy) {
 var restoreOldStyle = registerRestoreOldStyle(target);
 var cssWidth = strategy.softFullscreen ? innerWidth : screen.width;
 var cssHeight = strategy.softFullscreen ? innerHeight : screen.height;
 var rect = getBoundingClientRect(target);
 var windowedCssWidth = rect.width;
 var windowedCssHeight = rect.height;
 var canvasSize = getCanvasElementSize(target);
 var windowedRttWidth = canvasSize[0];
 var windowedRttHeight = canvasSize[1];
 if (strategy.scaleMode == 3) {
  setLetterbox(target, (cssHeight - windowedCssHeight) / 2, (cssWidth - windowedCssWidth) / 2);
  cssWidth = windowedCssWidth;
  cssHeight = windowedCssHeight;
 } else if (strategy.scaleMode == 2) {
  if (cssWidth * windowedRttHeight < windowedRttWidth * cssHeight) {
   var desiredCssHeight = windowedRttHeight * cssWidth / windowedRttWidth;
   setLetterbox(target, (cssHeight - desiredCssHeight) / 2, 0);
   cssHeight = desiredCssHeight;
  } else {
   var desiredCssWidth = windowedRttWidth * cssHeight / windowedRttHeight;
   setLetterbox(target, 0, (cssWidth - desiredCssWidth) / 2);
   cssWidth = desiredCssWidth;
  }
 }
 if (!target.style.backgroundColor) target.style.backgroundColor = "black";
 if (!document.body.style.backgroundColor) document.body.style.backgroundColor = "black";
 target.style.width = cssWidth + "px";
 target.style.height = cssHeight + "px";
 if (strategy.filteringMode == 1) {
  target.style.imageRendering = "optimizeSpeed";
  target.style.imageRendering = "-moz-crisp-edges";
  target.style.imageRendering = "-o-crisp-edges";
  target.style.imageRendering = "-webkit-optimize-contrast";
  target.style.imageRendering = "optimize-contrast";
  target.style.imageRendering = "crisp-edges";
  target.style.imageRendering = "pixelated";
 }
 var dpiScale = strategy.canvasResolutionScaleMode == 2 ? devicePixelRatio : 1;
 if (strategy.canvasResolutionScaleMode != 0) {
  var newWidth = cssWidth * dpiScale | 0;
  var newHeight = cssHeight * dpiScale | 0;
  setCanvasElementSize(target, newWidth, newHeight);
  if (target.GLctxObject) target.GLctxObject.GLctx.viewport(0, 0, newWidth, newHeight);
 }
 return restoreOldStyle;
}

function _JSEvents_requestFullscreen(target, strategy) {
 if (strategy.scaleMode != 0 || strategy.canvasResolutionScaleMode != 0) {
  _JSEvents_resizeCanvasForFullscreen(target, strategy);
 }
 if (target.requestFullscreen) {
  target.requestFullscreen();
 } else if (target.webkitRequestFullscreen) {
  target.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
 } else {
  return JSEvents.fullscreenEnabled() ? -3 : -1;
 }
 currentFullscreenStrategy = strategy;
 if (strategy.canvasResizedCallback) {
  if (strategy.canvasResizedCallbackTargetThread) JSEvents.queueEventHandlerOnThread_iiii(strategy.canvasResizedCallbackTargetThread, strategy.canvasResizedCallback, 37, 0, strategy.canvasResizedCallbackUserData); else (function(a1, a2, a3) {
   return dynCall_iiii.apply(null, [ strategy.canvasResizedCallback, a1, a2, a3 ]);
  })(37, 0, strategy.canvasResizedCallbackUserData);
 }
 return 0;
}

function _emscripten_exit_fullscreen() {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(35, 1);
 if (!JSEvents.fullscreenEnabled()) return -1;
 JSEvents.removeDeferredCalls(_JSEvents_requestFullscreen);
 var d = specialHTMLTargets[1];
 if (d.exitFullscreen) {
  d.fullscreenElement && d.exitFullscreen();
 } else if (d.webkitExitFullscreen) {
  d.webkitFullscreenElement && d.webkitExitFullscreen();
 } else {
  return -1;
 }
 return 0;
}

function requestPointerLock(target) {
 if (target.requestPointerLock) {
  target.requestPointerLock();
 } else if (target.msRequestPointerLock) {
  target.msRequestPointerLock();
 } else {
  if (document.body.requestPointerLock || document.body.msRequestPointerLock) {
   return -3;
  } else {
   return -1;
  }
 }
 return 0;
}

function _emscripten_exit_pointerlock() {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(38, 1);
 JSEvents.removeDeferredCalls(requestPointerLock);
 if (document.exitPointerLock) {
  document.exitPointerLock();
 } else if (document.msExitPointerLock) {
  document.msExitPointerLock();
 } else {
  return -1;
 }
 return 0;
}

function _emscripten_futex_wait(addr, val, timeout) {
 if (addr <= 0 || addr > GROWABLE_HEAP_I8().length || addr & 3 != 0) return -28;
 if (!ENVIRONMENT_IS_WEB) {
  var ret = Atomics.wait(GROWABLE_HEAP_I32(), addr >> 2, val, timeout);
  if (ret === "timed-out") return -73;
  if (ret === "not-equal") return -6;
  if (ret === "ok") return 0;
  throw "Atomics.wait returned an unexpected value " + ret;
 } else {
  if (Atomics.load(GROWABLE_HEAP_I32(), addr >> 2) != val) {
   return -6;
  }
  var tNow = performance.now();
  var tEnd = tNow + timeout;
  assert(__emscripten_main_thread_futex > 0);
  var lastAddr = Atomics.exchange(GROWABLE_HEAP_I32(), __emscripten_main_thread_futex >> 2, addr);
  assert(lastAddr == 0);
  while (1) {
   tNow = performance.now();
   if (tNow > tEnd) {
    lastAddr = Atomics.exchange(GROWABLE_HEAP_I32(), __emscripten_main_thread_futex >> 2, 0);
    assert(lastAddr == addr || lastAddr == 0);
    return -73;
   }
   lastAddr = Atomics.exchange(GROWABLE_HEAP_I32(), __emscripten_main_thread_futex >> 2, 0);
   assert(lastAddr == addr || lastAddr == 0);
   if (lastAddr == 0) {
    break;
   }
   _emscripten_main_thread_process_queued_calls();
   if (Atomics.load(GROWABLE_HEAP_I32(), addr >> 2) != val) {
    return -6;
   }
   lastAddr = Atomics.exchange(GROWABLE_HEAP_I32(), __emscripten_main_thread_futex >> 2, addr);
   assert(lastAddr == 0);
  }
  return 0;
 }
}

function _emscripten_get_device_pixel_ratio() {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(39, 1);
 return typeof devicePixelRatio === "number" && devicePixelRatio || 1;
}

function _emscripten_get_element_css_size(target, width, height) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(40, 1, target, width, height);
 target = findEventTarget(target);
 if (!target) return -4;
 var rect = getBoundingClientRect(target);
 GROWABLE_HEAP_F64()[width >> 3] = rect.width;
 GROWABLE_HEAP_F64()[height >> 3] = rect.height;
 return 0;
}

function fillGamepadEventData(eventStruct, e) {
 GROWABLE_HEAP_F64()[eventStruct >> 3] = e.timestamp;
 for (var i = 0; i < e.axes.length; ++i) {
  GROWABLE_HEAP_F64()[eventStruct + i * 8 + 16 >> 3] = e.axes[i];
 }
 for (var i = 0; i < e.buttons.length; ++i) {
  if (typeof e.buttons[i] === "object") {
   GROWABLE_HEAP_F64()[eventStruct + i * 8 + 528 >> 3] = e.buttons[i].value;
  } else {
   GROWABLE_HEAP_F64()[eventStruct + i * 8 + 528 >> 3] = e.buttons[i];
  }
 }
 for (var i = 0; i < e.buttons.length; ++i) {
  if (typeof e.buttons[i] === "object") {
   GROWABLE_HEAP_I32()[eventStruct + i * 4 + 1040 >> 2] = e.buttons[i].pressed;
  } else {
   GROWABLE_HEAP_I32()[eventStruct + i * 4 + 1040 >> 2] = e.buttons[i] == 1;
  }
 }
 GROWABLE_HEAP_I32()[eventStruct + 1296 >> 2] = e.connected;
 GROWABLE_HEAP_I32()[eventStruct + 1300 >> 2] = e.index;
 GROWABLE_HEAP_I32()[eventStruct + 8 >> 2] = e.axes.length;
 GROWABLE_HEAP_I32()[eventStruct + 12 >> 2] = e.buttons.length;
 stringToUTF8(e.id, eventStruct + 1304, 64);
 stringToUTF8(e.mapping, eventStruct + 1368, 64);
}

function _emscripten_get_gamepad_status(index, gamepadState) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(41, 1, index, gamepadState);
 if (!JSEvents.lastGamepadState) throw "emscripten_get_gamepad_status() can only be called after having first called emscripten_sample_gamepad_data() and that function has returned EMSCRIPTEN_RESULT_SUCCESS!";
 if (index < 0 || index >= JSEvents.lastGamepadState.length) return -5;
 if (!JSEvents.lastGamepadState[index]) return -7;
 fillGamepadEventData(gamepadState, JSEvents.lastGamepadState[index]);
 return 0;
}

function _emscripten_get_num_gamepads() {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(42, 1);
 if (!JSEvents.lastGamepadState) throw "emscripten_get_num_gamepads() can only be called after having first called emscripten_sample_gamepad_data() and that function has returned EMSCRIPTEN_RESULT_SUCCESS!";
 return JSEvents.lastGamepadState.length;
}

function _emscripten_glActiveTexture(x0) {
 GLctx["activeTexture"](x0);
}

function _emscripten_glAttachShader(program, shader) {
 GLctx.attachShader(GL.programs[program], GL.shaders[shader]);
}

function _emscripten_glBeginQueryEXT(target, id) {
 GLctx.disjointTimerQueryExt["beginQueryEXT"](target, GL.queries[id]);
}

function _emscripten_glBindAttribLocation(program, index, name) {
 GLctx.bindAttribLocation(GL.programs[program], index, UTF8ToString(name));
}

function _emscripten_glBindBuffer(target, buffer) {
 GLctx.bindBuffer(target, GL.buffers[buffer]);
}

function _emscripten_glBindFramebuffer(target, framebuffer) {
 GLctx.bindFramebuffer(target, GL.framebuffers[framebuffer]);
}

function _emscripten_glBindRenderbuffer(target, renderbuffer) {
 GLctx.bindRenderbuffer(target, GL.renderbuffers[renderbuffer]);
}

function _emscripten_glBindTexture(target, texture) {
 GLctx.bindTexture(target, GL.textures[texture]);
}

function _emscripten_glBindVertexArrayOES(vao) {
 GLctx["bindVertexArray"](GL.vaos[vao]);
}

function _emscripten_glBlendColor(x0, x1, x2, x3) {
 GLctx["blendColor"](x0, x1, x2, x3);
}

function _emscripten_glBlendEquation(x0) {
 GLctx["blendEquation"](x0);
}

function _emscripten_glBlendEquationSeparate(x0, x1) {
 GLctx["blendEquationSeparate"](x0, x1);
}

function _emscripten_glBlendFunc(x0, x1) {
 GLctx["blendFunc"](x0, x1);
}

function _emscripten_glBlendFuncSeparate(x0, x1, x2, x3) {
 GLctx["blendFuncSeparate"](x0, x1, x2, x3);
}

function _emscripten_glBufferData(target, size, data, usage) {
 GLctx.bufferData(target, data ? GROWABLE_HEAP_U8().subarray(data, data + size) : size, usage);
}

function _emscripten_glBufferSubData(target, offset, size, data) {
 GLctx.bufferSubData(target, offset, GROWABLE_HEAP_U8().subarray(data, data + size));
}

function _emscripten_glCheckFramebufferStatus(x0) {
 return GLctx["checkFramebufferStatus"](x0);
}

function _emscripten_glClear(x0) {
 GLctx["clear"](x0);
}

function _emscripten_glClearColor(x0, x1, x2, x3) {
 GLctx["clearColor"](x0, x1, x2, x3);
}

function _emscripten_glClearDepthf(x0) {
 GLctx["clearDepth"](x0);
}

function _emscripten_glClearStencil(x0) {
 GLctx["clearStencil"](x0);
}

function _emscripten_glColorMask(red, green, blue, alpha) {
 GLctx.colorMask(!!red, !!green, !!blue, !!alpha);
}

function _emscripten_glCompileShader(shader) {
 GLctx.compileShader(GL.shaders[shader]);
}

function _emscripten_glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
 GLctx["compressedTexImage2D"](target, level, internalFormat, width, height, border, data ? GROWABLE_HEAP_U8().subarray(data, data + imageSize) : null);
}

function _emscripten_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
 GLctx["compressedTexSubImage2D"](target, level, xoffset, yoffset, width, height, format, data ? GROWABLE_HEAP_U8().subarray(data, data + imageSize) : null);
}

function _emscripten_glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) {
 GLctx["copyTexImage2D"](x0, x1, x2, x3, x4, x5, x6, x7);
}

function _emscripten_glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) {
 GLctx["copyTexSubImage2D"](x0, x1, x2, x3, x4, x5, x6, x7);
}

function _emscripten_glCreateProgram() {
 var id = GL.getNewId(GL.programs);
 var program = GLctx.createProgram();
 program.name = id;
 program.maxUniformLength = program.maxAttributeLength = program.maxUniformBlockNameLength = 0;
 program.uniformIdCounter = 1;
 GL.programs[id] = program;
 return id;
}

function _emscripten_glCreateShader(shaderType) {
 var id = GL.getNewId(GL.shaders);
 GL.shaders[id] = GLctx.createShader(shaderType);
 return id;
}

function _emscripten_glCullFace(x0) {
 GLctx["cullFace"](x0);
}

function _emscripten_glDeleteBuffers(n, buffers) {
 for (var i = 0; i < n; i++) {
  var id = GROWABLE_HEAP_I32()[buffers + i * 4 >> 2];
  var buffer = GL.buffers[id];
  if (!buffer) continue;
  GLctx.deleteBuffer(buffer);
  buffer.name = 0;
  GL.buffers[id] = null;
 }
}

function _emscripten_glDeleteFramebuffers(n, framebuffers) {
 for (var i = 0; i < n; ++i) {
  var id = GROWABLE_HEAP_I32()[framebuffers + i * 4 >> 2];
  var framebuffer = GL.framebuffers[id];
  if (!framebuffer) continue;
  GLctx.deleteFramebuffer(framebuffer);
  framebuffer.name = 0;
  GL.framebuffers[id] = null;
 }
}

function _emscripten_glDeleteProgram(id) {
 if (!id) return;
 var program = GL.programs[id];
 if (!program) {
  GL.recordError(1281);
  return;
 }
 GLctx.deleteProgram(program);
 program.name = 0;
 GL.programs[id] = null;
}

function _emscripten_glDeleteQueriesEXT(n, ids) {
 for (var i = 0; i < n; i++) {
  var id = GROWABLE_HEAP_I32()[ids + i * 4 >> 2];
  var query = GL.queries[id];
  if (!query) continue;
  GLctx.disjointTimerQueryExt["deleteQueryEXT"](query);
  GL.queries[id] = null;
 }
}

function _emscripten_glDeleteRenderbuffers(n, renderbuffers) {
 for (var i = 0; i < n; i++) {
  var id = GROWABLE_HEAP_I32()[renderbuffers + i * 4 >> 2];
  var renderbuffer = GL.renderbuffers[id];
  if (!renderbuffer) continue;
  GLctx.deleteRenderbuffer(renderbuffer);
  renderbuffer.name = 0;
  GL.renderbuffers[id] = null;
 }
}

function _emscripten_glDeleteShader(id) {
 if (!id) return;
 var shader = GL.shaders[id];
 if (!shader) {
  GL.recordError(1281);
  return;
 }
 GLctx.deleteShader(shader);
 GL.shaders[id] = null;
}

function _emscripten_glDeleteTextures(n, textures) {
 for (var i = 0; i < n; i++) {
  var id = GROWABLE_HEAP_I32()[textures + i * 4 >> 2];
  var texture = GL.textures[id];
  if (!texture) continue;
  GLctx.deleteTexture(texture);
  texture.name = 0;
  GL.textures[id] = null;
 }
}

function _emscripten_glDeleteVertexArraysOES(n, vaos) {
 for (var i = 0; i < n; i++) {
  var id = GROWABLE_HEAP_I32()[vaos + i * 4 >> 2];
  GLctx["deleteVertexArray"](GL.vaos[id]);
  GL.vaos[id] = null;
 }
}

function _emscripten_glDepthFunc(x0) {
 GLctx["depthFunc"](x0);
}

function _emscripten_glDepthMask(flag) {
 GLctx.depthMask(!!flag);
}

function _emscripten_glDepthRangef(x0, x1) {
 GLctx["depthRange"](x0, x1);
}

function _emscripten_glDetachShader(program, shader) {
 GLctx.detachShader(GL.programs[program], GL.shaders[shader]);
}

function _emscripten_glDisable(x0) {
 GLctx["disable"](x0);
}

function _emscripten_glDisableVertexAttribArray(index) {
 GLctx.disableVertexAttribArray(index);
}

function _emscripten_glDrawArrays(mode, first, count) {
 GLctx.drawArrays(mode, first, count);
}

function _emscripten_glDrawArraysInstancedANGLE(mode, first, count, primcount) {
 GLctx["drawArraysInstanced"](mode, first, count, primcount);
}

var tempFixedLengthArray = [];

function _emscripten_glDrawBuffersWEBGL(n, bufs) {
 var bufArray = tempFixedLengthArray[n];
 for (var i = 0; i < n; i++) {
  bufArray[i] = GROWABLE_HEAP_I32()[bufs + i * 4 >> 2];
 }
 GLctx["drawBuffers"](bufArray);
}

function _emscripten_glDrawElements(mode, count, type, indices) {
 GLctx.drawElements(mode, count, type, indices);
}

function _emscripten_glDrawElementsInstancedANGLE(mode, count, type, indices, primcount) {
 GLctx["drawElementsInstanced"](mode, count, type, indices, primcount);
}

function _emscripten_glEnable(x0) {
 GLctx["enable"](x0);
}

function _emscripten_glEnableVertexAttribArray(index) {
 GLctx.enableVertexAttribArray(index);
}

function _emscripten_glEndQueryEXT(target) {
 GLctx.disjointTimerQueryExt["endQueryEXT"](target);
}

function _emscripten_glFinish() {
 GLctx["finish"]();
}

function _emscripten_glFlush() {
 GLctx["flush"]();
}

function _emscripten_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
 GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget, GL.renderbuffers[renderbuffer]);
}

function _emscripten_glFramebufferTexture2D(target, attachment, textarget, texture, level) {
 GLctx.framebufferTexture2D(target, attachment, textarget, GL.textures[texture], level);
}

function _emscripten_glFrontFace(x0) {
 GLctx["frontFace"](x0);
}

function __glGenObject(n, buffers, createFunction, objectTable) {
 for (var i = 0; i < n; i++) {
  var buffer = GLctx[createFunction]();
  var id = buffer && GL.getNewId(objectTable);
  if (buffer) {
   buffer.name = id;
   objectTable[id] = buffer;
  } else {
   GL.recordError(1282);
  }
  GROWABLE_HEAP_I32()[buffers + i * 4 >> 2] = id;
 }
}

function _emscripten_glGenBuffers(n, buffers) {
 __glGenObject(n, buffers, "createBuffer", GL.buffers);
}

function _emscripten_glGenFramebuffers(n, ids) {
 __glGenObject(n, ids, "createFramebuffer", GL.framebuffers);
}

function _emscripten_glGenQueriesEXT(n, ids) {
 for (var i = 0; i < n; i++) {
  var query = GLctx.disjointTimerQueryExt["createQueryEXT"]();
  if (!query) {
   GL.recordError(1282);
   while (i < n) GROWABLE_HEAP_I32()[ids + i++ * 4 >> 2] = 0;
   return;
  }
  var id = GL.getNewId(GL.queries);
  query.name = id;
  GL.queries[id] = query;
  GROWABLE_HEAP_I32()[ids + i * 4 >> 2] = id;
 }
}

function _emscripten_glGenRenderbuffers(n, renderbuffers) {
 __glGenObject(n, renderbuffers, "createRenderbuffer", GL.renderbuffers);
}

function _emscripten_glGenTextures(n, textures) {
 __glGenObject(n, textures, "createTexture", GL.textures);
}

function _emscripten_glGenVertexArraysOES(n, arrays) {
 __glGenObject(n, arrays, "createVertexArray", GL.vaos);
}

function _emscripten_glGenerateMipmap(x0) {
 GLctx["generateMipmap"](x0);
}

function __glGetActiveAttribOrUniform(funcName, program, index, bufSize, length, size, type, name) {
 program = GL.programs[program];
 var info = GLctx[funcName](program, index);
 if (info) {
  var numBytesWrittenExclNull = name && stringToUTF8(info.name, name, bufSize);
  if (length) GROWABLE_HEAP_I32()[length >> 2] = numBytesWrittenExclNull;
  if (size) GROWABLE_HEAP_I32()[size >> 2] = info.size;
  if (type) GROWABLE_HEAP_I32()[type >> 2] = info.type;
 }
}

function _emscripten_glGetActiveAttrib(program, index, bufSize, length, size, type, name) {
 __glGetActiveAttribOrUniform("getActiveAttrib", program, index, bufSize, length, size, type, name);
}

function _emscripten_glGetActiveUniform(program, index, bufSize, length, size, type, name) {
 __glGetActiveAttribOrUniform("getActiveUniform", program, index, bufSize, length, size, type, name);
}

function _emscripten_glGetAttachedShaders(program, maxCount, count, shaders) {
 var result = GLctx.getAttachedShaders(GL.programs[program]);
 var len = result.length;
 if (len > maxCount) {
  len = maxCount;
 }
 GROWABLE_HEAP_I32()[count >> 2] = len;
 for (var i = 0; i < len; ++i) {
  var id = GL.shaders.indexOf(result[i]);
  GROWABLE_HEAP_I32()[shaders + i * 4 >> 2] = id;
 }
}

function _emscripten_glGetAttribLocation(program, name) {
 return GLctx.getAttribLocation(GL.programs[program], UTF8ToString(name));
}

function readI53FromI64(ptr) {
 return GROWABLE_HEAP_U32()[ptr >> 2] + GROWABLE_HEAP_I32()[ptr + 4 >> 2] * 4294967296;
}

function readI53FromU64(ptr) {
 return GROWABLE_HEAP_U32()[ptr >> 2] + GROWABLE_HEAP_U32()[ptr + 4 >> 2] * 4294967296;
}

function writeI53ToI64(ptr, num) {
 GROWABLE_HEAP_U32()[ptr >> 2] = num;
 GROWABLE_HEAP_U32()[ptr + 4 >> 2] = (num - GROWABLE_HEAP_U32()[ptr >> 2]) / 4294967296;
 var deserialized = num >= 0 ? readI53FromU64(ptr) : readI53FromI64(ptr);
 if (deserialized != num) warnOnce("writeI53ToI64() out of range: serialized JS Number " + num + " to Wasm heap as bytes lo=0x" + GROWABLE_HEAP_U32()[ptr >> 2].toString(16) + ", hi=0x" + GROWABLE_HEAP_U32()[ptr + 4 >> 2].toString(16) + ", which deserializes back to " + deserialized + " instead!");
}

function emscriptenWebGLGet(name_, p, type) {
 if (!p) {
  GL.recordError(1281);
  return;
 }
 var ret = undefined;
 switch (name_) {
 case 36346:
  ret = 1;
  break;

 case 36344:
  if (type != 0 && type != 1) {
   GL.recordError(1280);
  }
  return;

 case 36345:
  ret = 0;
  break;

 case 34466:
  var formats = GLctx.getParameter(34467);
  ret = formats ? formats.length : 0;
  break;
 }
 if (ret === undefined) {
  var result = GLctx.getParameter(name_);
  switch (typeof result) {
  case "number":
   ret = result;
   break;

  case "boolean":
   ret = result ? 1 : 0;
   break;

  case "string":
   GL.recordError(1280);
   return;

  case "object":
   if (result === null) {
    switch (name_) {
    case 34964:
    case 35725:
    case 34965:
    case 36006:
    case 36007:
    case 32873:
    case 34229:
    case 34068:
     {
      ret = 0;
      break;
     }

    default:
     {
      GL.recordError(1280);
      return;
     }
    }
   } else if (result instanceof Float32Array || result instanceof Uint32Array || result instanceof Int32Array || result instanceof Array) {
    for (var i = 0; i < result.length; ++i) {
     switch (type) {
     case 0:
      GROWABLE_HEAP_I32()[p + i * 4 >> 2] = result[i];
      break;

     case 2:
      GROWABLE_HEAP_F32()[p + i * 4 >> 2] = result[i];
      break;

     case 4:
      GROWABLE_HEAP_I8()[p + i >> 0] = result[i] ? 1 : 0;
      break;
     }
    }
    return;
   } else {
    try {
     ret = result.name | 0;
    } catch (e) {
     GL.recordError(1280);
     err("GL_INVALID_ENUM in glGet" + type + "v: Unknown object returned from WebGL getParameter(" + name_ + ")! (error: " + e + ")");
     return;
    }
   }
   break;

  default:
   GL.recordError(1280);
   err("GL_INVALID_ENUM in glGet" + type + "v: Native code calling glGet" + type + "v(" + name_ + ") and it returns " + result + " of type " + typeof result + "!");
   return;
  }
 }
 switch (type) {
 case 1:
  writeI53ToI64(p, ret);
  break;

 case 0:
  GROWABLE_HEAP_I32()[p >> 2] = ret;
  break;

 case 2:
  GROWABLE_HEAP_F32()[p >> 2] = ret;
  break;

 case 4:
  GROWABLE_HEAP_I8()[p >> 0] = ret ? 1 : 0;
  break;
 }
}

function _emscripten_glGetBooleanv(name_, p) {
 emscriptenWebGLGet(name_, p, 4);
}

function _emscripten_glGetBufferParameteriv(target, value, data) {
 if (!data) {
  GL.recordError(1281);
  return;
 }
 GROWABLE_HEAP_I32()[data >> 2] = GLctx.getBufferParameter(target, value);
}

function _emscripten_glGetError() {
 var error = GLctx.getError() || GL.lastError;
 GL.lastError = 0;
 return error;
}

function _emscripten_glGetFloatv(name_, p) {
 emscriptenWebGLGet(name_, p, 2);
}

function _emscripten_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) {
 var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
 if (result instanceof WebGLRenderbuffer || result instanceof WebGLTexture) {
  result = result.name | 0;
 }
 GROWABLE_HEAP_I32()[params >> 2] = result;
}

function _emscripten_glGetIntegerv(name_, p) {
 emscriptenWebGLGet(name_, p, 0);
}

function _emscripten_glGetProgramInfoLog(program, maxLength, length, infoLog) {
 var log = GLctx.getProgramInfoLog(GL.programs[program]);
 if (log === null) log = "(unknown error)";
 var numBytesWrittenExclNull = maxLength > 0 && infoLog ? stringToUTF8(log, infoLog, maxLength) : 0;
 if (length) GROWABLE_HEAP_I32()[length >> 2] = numBytesWrittenExclNull;
}

function _emscripten_glGetProgramiv(program, pname, p) {
 if (!p) {
  GL.recordError(1281);
  return;
 }
 if (program >= GL.counter) {
  GL.recordError(1281);
  return;
 }
 program = GL.programs[program];
 if (pname == 35716) {
  var log = GLctx.getProgramInfoLog(program);
  if (log === null) log = "(unknown error)";
  GROWABLE_HEAP_I32()[p >> 2] = log.length + 1;
 } else if (pname == 35719) {
  if (!program.maxUniformLength) {
   for (var i = 0; i < GLctx.getProgramParameter(program, 35718); ++i) {
    program.maxUniformLength = Math.max(program.maxUniformLength, GLctx.getActiveUniform(program, i).name.length + 1);
   }
  }
  GROWABLE_HEAP_I32()[p >> 2] = program.maxUniformLength;
 } else if (pname == 35722) {
  if (!program.maxAttributeLength) {
   for (var i = 0; i < GLctx.getProgramParameter(program, 35721); ++i) {
    program.maxAttributeLength = Math.max(program.maxAttributeLength, GLctx.getActiveAttrib(program, i).name.length + 1);
   }
  }
  GROWABLE_HEAP_I32()[p >> 2] = program.maxAttributeLength;
 } else if (pname == 35381) {
  if (!program.maxUniformBlockNameLength) {
   for (var i = 0; i < GLctx.getProgramParameter(program, 35382); ++i) {
    program.maxUniformBlockNameLength = Math.max(program.maxUniformBlockNameLength, GLctx.getActiveUniformBlockName(program, i).length + 1);
   }
  }
  GROWABLE_HEAP_I32()[p >> 2] = program.maxUniformBlockNameLength;
 } else {
  GROWABLE_HEAP_I32()[p >> 2] = GLctx.getProgramParameter(program, pname);
 }
}

function _emscripten_glGetQueryObjecti64vEXT(id, pname, params) {
 if (!params) {
  GL.recordError(1281);
  return;
 }
 var query = GL.queries[id];
 var param;
 {
  param = GLctx.disjointTimerQueryExt["getQueryObjectEXT"](query, pname);
 }
 var ret;
 if (typeof param == "boolean") {
  ret = param ? 1 : 0;
 } else {
  ret = param;
 }
 writeI53ToI64(params, ret);
}

function _emscripten_glGetQueryObjectivEXT(id, pname, params) {
 if (!params) {
  GL.recordError(1281);
  return;
 }
 var query = GL.queries[id];
 var param = GLctx.disjointTimerQueryExt["getQueryObjectEXT"](query, pname);
 var ret;
 if (typeof param == "boolean") {
  ret = param ? 1 : 0;
 } else {
  ret = param;
 }
 GROWABLE_HEAP_I32()[params >> 2] = ret;
}

function _emscripten_glGetQueryObjectui64vEXT(id, pname, params) {
 if (!params) {
  GL.recordError(1281);
  return;
 }
 var query = GL.queries[id];
 var param;
 {
  param = GLctx.disjointTimerQueryExt["getQueryObjectEXT"](query, pname);
 }
 var ret;
 if (typeof param == "boolean") {
  ret = param ? 1 : 0;
 } else {
  ret = param;
 }
 writeI53ToI64(params, ret);
}

function _emscripten_glGetQueryObjectuivEXT(id, pname, params) {
 if (!params) {
  GL.recordError(1281);
  return;
 }
 var query = GL.queries[id];
 var param = GLctx.disjointTimerQueryExt["getQueryObjectEXT"](query, pname);
 var ret;
 if (typeof param == "boolean") {
  ret = param ? 1 : 0;
 } else {
  ret = param;
 }
 GROWABLE_HEAP_I32()[params >> 2] = ret;
}

function _emscripten_glGetQueryivEXT(target, pname, params) {
 if (!params) {
  GL.recordError(1281);
  return;
 }
 GROWABLE_HEAP_I32()[params >> 2] = GLctx.disjointTimerQueryExt["getQueryEXT"](target, pname);
}

function _emscripten_glGetRenderbufferParameteriv(target, pname, params) {
 if (!params) {
  GL.recordError(1281);
  return;
 }
 GROWABLE_HEAP_I32()[params >> 2] = GLctx.getRenderbufferParameter(target, pname);
}

function _emscripten_glGetShaderInfoLog(shader, maxLength, length, infoLog) {
 var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
 if (log === null) log = "(unknown error)";
 var numBytesWrittenExclNull = maxLength > 0 && infoLog ? stringToUTF8(log, infoLog, maxLength) : 0;
 if (length) GROWABLE_HEAP_I32()[length >> 2] = numBytesWrittenExclNull;
}

function _emscripten_glGetShaderPrecisionFormat(shaderType, precisionType, range, precision) {
 var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
 GROWABLE_HEAP_I32()[range >> 2] = result.rangeMin;
 GROWABLE_HEAP_I32()[range + 4 >> 2] = result.rangeMax;
 GROWABLE_HEAP_I32()[precision >> 2] = result.precision;
}

function _emscripten_glGetShaderSource(shader, bufSize, length, source) {
 var result = GLctx.getShaderSource(GL.shaders[shader]);
 if (!result) return;
 var numBytesWrittenExclNull = bufSize > 0 && source ? stringToUTF8(result, source, bufSize) : 0;
 if (length) GROWABLE_HEAP_I32()[length >> 2] = numBytesWrittenExclNull;
}

function _emscripten_glGetShaderiv(shader, pname, p) {
 if (!p) {
  GL.recordError(1281);
  return;
 }
 if (pname == 35716) {
  var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
  if (log === null) log = "(unknown error)";
  var logLength = log ? log.length + 1 : 0;
  GROWABLE_HEAP_I32()[p >> 2] = logLength;
 } else if (pname == 35720) {
  var source = GLctx.getShaderSource(GL.shaders[shader]);
  var sourceLength = source ? source.length + 1 : 0;
  GROWABLE_HEAP_I32()[p >> 2] = sourceLength;
 } else {
  GROWABLE_HEAP_I32()[p >> 2] = GLctx.getShaderParameter(GL.shaders[shader], pname);
 }
}

function _emscripten_glGetString(name_) {
 var ret = GL.stringCache[name_];
 if (!ret) {
  switch (name_) {
  case 7939:
   var exts = GLctx.getSupportedExtensions() || [];
   exts = exts.concat(exts.map(function(e) {
    return "GL_" + e;
   }));
   ret = stringToNewUTF8(exts.join(" "));
   break;

  case 7936:
  case 7937:
  case 37445:
  case 37446:
   var s = GLctx.getParameter(name_);
   if (!s) {
    GL.recordError(1280);
   }
   ret = s && stringToNewUTF8(s);
   break;

  case 7938:
   var glVersion = GLctx.getParameter(7938);
   {
    glVersion = "OpenGL ES 2.0 (" + glVersion + ")";
   }
   ret = stringToNewUTF8(glVersion);
   break;

  case 35724:
   var glslVersion = GLctx.getParameter(35724);
   var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
   var ver_num = glslVersion.match(ver_re);
   if (ver_num !== null) {
    if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + "0";
    glslVersion = "OpenGL ES GLSL ES " + ver_num[1] + " (" + glslVersion + ")";
   }
   ret = stringToNewUTF8(glslVersion);
   break;

  default:
   GL.recordError(1280);
  }
  GL.stringCache[name_] = ret;
 }
 return ret;
}

function _emscripten_glGetTexParameterfv(target, pname, params) {
 if (!params) {
  GL.recordError(1281);
  return;
 }
 GROWABLE_HEAP_F32()[params >> 2] = GLctx.getTexParameter(target, pname);
}

function _emscripten_glGetTexParameteriv(target, pname, params) {
 if (!params) {
  GL.recordError(1281);
  return;
 }
 GROWABLE_HEAP_I32()[params >> 2] = GLctx.getTexParameter(target, pname);
}

function jstoi_q(str) {
 return parseInt(str);
}

function webglGetLeftBracePos(name) {
 return name.slice(-1) == "]" && name.lastIndexOf("[");
}

function webglPrepareUniformLocationsBeforeFirstUse(program) {
 var uniformLocsById = program.uniformLocsById, uniformSizeAndIdsByName = program.uniformSizeAndIdsByName, i, j;
 if (!uniformLocsById) {
  program.uniformLocsById = uniformLocsById = {};
  program.uniformArrayNamesById = {};
  for (i = 0; i < GLctx.getProgramParameter(program, 35718); ++i) {
   var u = GLctx.getActiveUniform(program, i);
   var nm = u.name;
   var sz = u.size;
   var lb = webglGetLeftBracePos(nm);
   var arrayName = lb > 0 ? nm.slice(0, lb) : nm;
   var id = program.uniformIdCounter;
   program.uniformIdCounter += sz;
   uniformSizeAndIdsByName[arrayName] = [ sz, id ];
   for (j = 0; j < sz; ++j) {
    uniformLocsById[id] = j;
    program.uniformArrayNamesById[id++] = arrayName;
   }
  }
 }
}

function _emscripten_glGetUniformLocation(program, name) {
 name = UTF8ToString(name);
 if (program = GL.programs[program]) {
  webglPrepareUniformLocationsBeforeFirstUse(program);
  var uniformLocsById = program.uniformLocsById;
  var arrayIndex = 0;
  var uniformBaseName = name;
  var leftBrace = webglGetLeftBracePos(name);
  if (leftBrace > 0) {
   arrayIndex = jstoi_q(name.slice(leftBrace + 1)) >>> 0;
   uniformBaseName = name.slice(0, leftBrace);
  }
  var sizeAndId = program.uniformSizeAndIdsByName[uniformBaseName];
  if (sizeAndId && arrayIndex < sizeAndId[0]) {
   arrayIndex += sizeAndId[1];
   if (uniformLocsById[arrayIndex] = uniformLocsById[arrayIndex] || GLctx.getUniformLocation(program, name)) {
    return arrayIndex;
   }
  }
 } else {
  GL.recordError(1281);
 }
 return -1;
}

function webglGetUniformLocation(location) {
 var p = GLctx.currentProgram;
 if (p) {
  var webglLoc = p.uniformLocsById[location];
  if (typeof webglLoc === "number") {
   p.uniformLocsById[location] = webglLoc = GLctx.getUniformLocation(p, p.uniformArrayNamesById[location] + (webglLoc > 0 ? "[" + webglLoc + "]" : ""));
  }
  return webglLoc;
 } else {
  GL.recordError(1282);
 }
}

function emscriptenWebGLGetUniform(program, location, params, type) {
 if (!params) {
  GL.recordError(1281);
  return;
 }
 program = GL.programs[program];
 webglPrepareUniformLocationsBeforeFirstUse(program);
 var data = GLctx.getUniform(program, webglGetUniformLocation(location));
 if (typeof data == "number" || typeof data == "boolean") {
  switch (type) {
  case 0:
   GROWABLE_HEAP_I32()[params >> 2] = data;
   break;

  case 2:
   GROWABLE_HEAP_F32()[params >> 2] = data;
   break;
  }
 } else {
  for (var i = 0; i < data.length; i++) {
   switch (type) {
   case 0:
    GROWABLE_HEAP_I32()[params + i * 4 >> 2] = data[i];
    break;

   case 2:
    GROWABLE_HEAP_F32()[params + i * 4 >> 2] = data[i];
    break;
   }
  }
 }
}

function _emscripten_glGetUniformfv(program, location, params) {
 emscriptenWebGLGetUniform(program, location, params, 2);
}

function _emscripten_glGetUniformiv(program, location, params) {
 emscriptenWebGLGetUniform(program, location, params, 0);
}

function _emscripten_glGetVertexAttribPointerv(index, pname, pointer) {
 if (!pointer) {
  GL.recordError(1281);
  return;
 }
 GROWABLE_HEAP_I32()[pointer >> 2] = GLctx.getVertexAttribOffset(index, pname);
}

function emscriptenWebGLGetVertexAttrib(index, pname, params, type) {
 if (!params) {
  GL.recordError(1281);
  return;
 }
 var data = GLctx.getVertexAttrib(index, pname);
 if (pname == 34975) {
  GROWABLE_HEAP_I32()[params >> 2] = data && data["name"];
 } else if (typeof data == "number" || typeof data == "boolean") {
  switch (type) {
  case 0:
   GROWABLE_HEAP_I32()[params >> 2] = data;
   break;

  case 2:
   GROWABLE_HEAP_F32()[params >> 2] = data;
   break;

  case 5:
   GROWABLE_HEAP_I32()[params >> 2] = Math.fround(data);
   break;
  }
 } else {
  for (var i = 0; i < data.length; i++) {
   switch (type) {
   case 0:
    GROWABLE_HEAP_I32()[params + i * 4 >> 2] = data[i];
    break;

   case 2:
    GROWABLE_HEAP_F32()[params + i * 4 >> 2] = data[i];
    break;

   case 5:
    GROWABLE_HEAP_I32()[params + i * 4 >> 2] = Math.fround(data[i]);
    break;
   }
  }
 }
}

function _emscripten_glGetVertexAttribfv(index, pname, params) {
 emscriptenWebGLGetVertexAttrib(index, pname, params, 2);
}

function _emscripten_glGetVertexAttribiv(index, pname, params) {
 emscriptenWebGLGetVertexAttrib(index, pname, params, 5);
}

function _emscripten_glHint(x0, x1) {
 GLctx["hint"](x0, x1);
}

function _emscripten_glIsBuffer(buffer) {
 var b = GL.buffers[buffer];
 if (!b) return 0;
 return GLctx.isBuffer(b);
}

function _emscripten_glIsEnabled(x0) {
 return GLctx["isEnabled"](x0);
}

function _emscripten_glIsFramebuffer(framebuffer) {
 var fb = GL.framebuffers[framebuffer];
 if (!fb) return 0;
 return GLctx.isFramebuffer(fb);
}

function _emscripten_glIsProgram(program) {
 program = GL.programs[program];
 if (!program) return 0;
 return GLctx.isProgram(program);
}

function _emscripten_glIsQueryEXT(id) {
 var query = GL.queries[id];
 if (!query) return 0;
 return GLctx.disjointTimerQueryExt["isQueryEXT"](query);
}

function _emscripten_glIsRenderbuffer(renderbuffer) {
 var rb = GL.renderbuffers[renderbuffer];
 if (!rb) return 0;
 return GLctx.isRenderbuffer(rb);
}

function _emscripten_glIsShader(shader) {
 var s = GL.shaders[shader];
 if (!s) return 0;
 return GLctx.isShader(s);
}

function _emscripten_glIsTexture(id) {
 var texture = GL.textures[id];
 if (!texture) return 0;
 return GLctx.isTexture(texture);
}

function _emscripten_glIsVertexArrayOES(array) {
 var vao = GL.vaos[array];
 if (!vao) return 0;
 return GLctx["isVertexArray"](vao);
}

function _emscripten_glLineWidth(x0) {
 GLctx["lineWidth"](x0);
}

function _emscripten_glLinkProgram(program) {
 program = GL.programs[program];
 GLctx.linkProgram(program);
 program.uniformLocsById = 0;
 program.uniformSizeAndIdsByName = {};
}

function _emscripten_glPixelStorei(pname, param) {
 if (pname == 3317) {
  GL.unpackAlignment = param;
 }
 GLctx.pixelStorei(pname, param);
}

function _emscripten_glPolygonOffset(x0, x1) {
 GLctx["polygonOffset"](x0, x1);
}

function _emscripten_glQueryCounterEXT(id, target) {
 GLctx.disjointTimerQueryExt["queryCounterEXT"](GL.queries[id], target);
}

function computeUnpackAlignedImageSize(width, height, sizePerPixel, alignment) {
 function roundedToNextMultipleOf(x, y) {
  return x + y - 1 & -y;
 }
 var plainRowSize = width * sizePerPixel;
 var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
 return height * alignedRowSize;
}

function __colorChannelsInGlTextureFormat(format) {
 var colorChannels = {
  5: 3,
  6: 4,
  8: 2,
  29502: 3,
  29504: 4
 };
 return colorChannels[format - 6402] || 1;
}

function heapObjectForWebGLType(type) {
 type -= 5120;
 if (type == 1) return GROWABLE_HEAP_U8();
 if (type == 4) return GROWABLE_HEAP_I32();
 if (type == 6) return GROWABLE_HEAP_F32();
 if (type == 5 || type == 28922) return GROWABLE_HEAP_U32();
 return GROWABLE_HEAP_U16();
}

function heapAccessShiftForWebGLHeap(heap) {
 return 31 - Math.clz32(heap.BYTES_PER_ELEMENT);
}

function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
 var heap = heapObjectForWebGLType(type);
 var shift = heapAccessShiftForWebGLHeap(heap);
 var byteSize = 1 << shift;
 var sizePerPixel = __colorChannelsInGlTextureFormat(format) * byteSize;
 var bytes = computeUnpackAlignedImageSize(width, height, sizePerPixel, GL.unpackAlignment);
 return heap.subarray(pixels >> shift, pixels + bytes >> shift);
}

function _emscripten_glReadPixels(x, y, width, height, format, type, pixels) {
 var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
 if (!pixelData) {
  GL.recordError(1280);
  return;
 }
 GLctx.readPixels(x, y, width, height, format, type, pixelData);
}

function _emscripten_glReleaseShaderCompiler() {}

function _emscripten_glRenderbufferStorage(x0, x1, x2, x3) {
 GLctx["renderbufferStorage"](x0, x1, x2, x3);
}

function _emscripten_glSampleCoverage(value, invert) {
 GLctx.sampleCoverage(value, !!invert);
}

function _emscripten_glScissor(x0, x1, x2, x3) {
 GLctx["scissor"](x0, x1, x2, x3);
}

function _emscripten_glShaderBinary() {
 GL.recordError(1280);
}

function _emscripten_glShaderSource(shader, count, string, length) {
 var source = GL.getSource(shader, count, string, length);
 GLctx.shaderSource(GL.shaders[shader], source);
}

function _emscripten_glStencilFunc(x0, x1, x2) {
 GLctx["stencilFunc"](x0, x1, x2);
}

function _emscripten_glStencilFuncSeparate(x0, x1, x2, x3) {
 GLctx["stencilFuncSeparate"](x0, x1, x2, x3);
}

function _emscripten_glStencilMask(x0) {
 GLctx["stencilMask"](x0);
}

function _emscripten_glStencilMaskSeparate(x0, x1) {
 GLctx["stencilMaskSeparate"](x0, x1);
}

function _emscripten_glStencilOp(x0, x1, x2) {
 GLctx["stencilOp"](x0, x1, x2);
}

function _emscripten_glStencilOpSeparate(x0, x1, x2, x3) {
 GLctx["stencilOpSeparate"](x0, x1, x2, x3);
}

function _emscripten_glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
 GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null);
}

function _emscripten_glTexParameterf(x0, x1, x2) {
 GLctx["texParameterf"](x0, x1, x2);
}

function _emscripten_glTexParameterfv(target, pname, params) {
 var param = GROWABLE_HEAP_F32()[params >> 2];
 GLctx.texParameterf(target, pname, param);
}

function _emscripten_glTexParameteri(x0, x1, x2) {
 GLctx["texParameteri"](x0, x1, x2);
}

function _emscripten_glTexParameteriv(target, pname, params) {
 var param = GROWABLE_HEAP_I32()[params >> 2];
 GLctx.texParameteri(target, pname, param);
}

function _emscripten_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
 var pixelData = null;
 if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, 0);
 GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData);
}

function _emscripten_glUniform1f(location, v0) {
 GLctx.uniform1f(webglGetUniformLocation(location), v0);
}

var miniTempWebGLFloatBuffers = [];

function _emscripten_glUniform1fv(location, count, value) {
 if (count <= 288) {
  var view = miniTempWebGLFloatBuffers[count - 1];
  for (var i = 0; i < count; ++i) {
   view[i] = GROWABLE_HEAP_F32()[value + 4 * i >> 2];
  }
 } else {
  var view = GROWABLE_HEAP_F32().subarray(value >> 2, value + count * 4 >> 2);
 }
 GLctx.uniform1fv(webglGetUniformLocation(location), view);
}

function _emscripten_glUniform1i(location, v0) {
 GLctx.uniform1i(webglGetUniformLocation(location), v0);
}

var __miniTempWebGLIntBuffers = [];

function _emscripten_glUniform1iv(location, count, value) {
 if (count <= 288) {
  var view = __miniTempWebGLIntBuffers[count - 1];
  for (var i = 0; i < count; ++i) {
   view[i] = GROWABLE_HEAP_I32()[value + 4 * i >> 2];
  }
 } else {
  var view = GROWABLE_HEAP_I32().subarray(value >> 2, value + count * 4 >> 2);
 }
 GLctx.uniform1iv(webglGetUniformLocation(location), view);
}

function _emscripten_glUniform2f(location, v0, v1) {
 GLctx.uniform2f(webglGetUniformLocation(location), v0, v1);
}

function _emscripten_glUniform2fv(location, count, value) {
 if (count <= 144) {
  var view = miniTempWebGLFloatBuffers[2 * count - 1];
  for (var i = 0; i < 2 * count; i += 2) {
   view[i] = GROWABLE_HEAP_F32()[value + 4 * i >> 2];
   view[i + 1] = GROWABLE_HEAP_F32()[value + (4 * i + 4) >> 2];
  }
 } else {
  var view = GROWABLE_HEAP_F32().subarray(value >> 2, value + count * 8 >> 2);
 }
 GLctx.uniform2fv(webglGetUniformLocation(location), view);
}

function _emscripten_glUniform2i(location, v0, v1) {
 GLctx.uniform2i(webglGetUniformLocation(location), v0, v1);
}

function _emscripten_glUniform2iv(location, count, value) {
 if (count <= 144) {
  var view = __miniTempWebGLIntBuffers[2 * count - 1];
  for (var i = 0; i < 2 * count; i += 2) {
   view[i] = GROWABLE_HEAP_I32()[value + 4 * i >> 2];
   view[i + 1] = GROWABLE_HEAP_I32()[value + (4 * i + 4) >> 2];
  }
 } else {
  var view = GROWABLE_HEAP_I32().subarray(value >> 2, value + count * 8 >> 2);
 }
 GLctx.uniform2iv(webglGetUniformLocation(location), view);
}

function _emscripten_glUniform3f(location, v0, v1, v2) {
 GLctx.uniform3f(webglGetUniformLocation(location), v0, v1, v2);
}

function _emscripten_glUniform3fv(location, count, value) {
 if (count <= 96) {
  var view = miniTempWebGLFloatBuffers[3 * count - 1];
  for (var i = 0; i < 3 * count; i += 3) {
   view[i] = GROWABLE_HEAP_F32()[value + 4 * i >> 2];
   view[i + 1] = GROWABLE_HEAP_F32()[value + (4 * i + 4) >> 2];
   view[i + 2] = GROWABLE_HEAP_F32()[value + (4 * i + 8) >> 2];
  }
 } else {
  var view = GROWABLE_HEAP_F32().subarray(value >> 2, value + count * 12 >> 2);
 }
 GLctx.uniform3fv(webglGetUniformLocation(location), view);
}

function _emscripten_glUniform3i(location, v0, v1, v2) {
 GLctx.uniform3i(webglGetUniformLocation(location), v0, v1, v2);
}

function _emscripten_glUniform3iv(location, count, value) {
 if (count <= 96) {
  var view = __miniTempWebGLIntBuffers[3 * count - 1];
  for (var i = 0; i < 3 * count; i += 3) {
   view[i] = GROWABLE_HEAP_I32()[value + 4 * i >> 2];
   view[i + 1] = GROWABLE_HEAP_I32()[value + (4 * i + 4) >> 2];
   view[i + 2] = GROWABLE_HEAP_I32()[value + (4 * i + 8) >> 2];
  }
 } else {
  var view = GROWABLE_HEAP_I32().subarray(value >> 2, value + count * 12 >> 2);
 }
 GLctx.uniform3iv(webglGetUniformLocation(location), view);
}

function _emscripten_glUniform4f(location, v0, v1, v2, v3) {
 GLctx.uniform4f(webglGetUniformLocation(location), v0, v1, v2, v3);
}

function _emscripten_glUniform4fv(location, count, value) {
 if (count <= 72) {
  var view = miniTempWebGLFloatBuffers[4 * count - 1];
  var heap = GROWABLE_HEAP_F32();
  value >>= 2;
  for (var i = 0; i < 4 * count; i += 4) {
   var dst = value + i;
   view[i] = heap[dst];
   view[i + 1] = heap[dst + 1];
   view[i + 2] = heap[dst + 2];
   view[i + 3] = heap[dst + 3];
  }
 } else {
  var view = GROWABLE_HEAP_F32().subarray(value >> 2, value + count * 16 >> 2);
 }
 GLctx.uniform4fv(webglGetUniformLocation(location), view);
}

function _emscripten_glUniform4i(location, v0, v1, v2, v3) {
 GLctx.uniform4i(webglGetUniformLocation(location), v0, v1, v2, v3);
}

function _emscripten_glUniform4iv(location, count, value) {
 if (count <= 72) {
  var view = __miniTempWebGLIntBuffers[4 * count - 1];
  for (var i = 0; i < 4 * count; i += 4) {
   view[i] = GROWABLE_HEAP_I32()[value + 4 * i >> 2];
   view[i + 1] = GROWABLE_HEAP_I32()[value + (4 * i + 4) >> 2];
   view[i + 2] = GROWABLE_HEAP_I32()[value + (4 * i + 8) >> 2];
   view[i + 3] = GROWABLE_HEAP_I32()[value + (4 * i + 12) >> 2];
  }
 } else {
  var view = GROWABLE_HEAP_I32().subarray(value >> 2, value + count * 16 >> 2);
 }
 GLctx.uniform4iv(webglGetUniformLocation(location), view);
}

function _emscripten_glUniformMatrix2fv(location, count, transpose, value) {
 if (count <= 72) {
  var view = miniTempWebGLFloatBuffers[4 * count - 1];
  for (var i = 0; i < 4 * count; i += 4) {
   view[i] = GROWABLE_HEAP_F32()[value + 4 * i >> 2];
   view[i + 1] = GROWABLE_HEAP_F32()[value + (4 * i + 4) >> 2];
   view[i + 2] = GROWABLE_HEAP_F32()[value + (4 * i + 8) >> 2];
   view[i + 3] = GROWABLE_HEAP_F32()[value + (4 * i + 12) >> 2];
  }
 } else {
  var view = GROWABLE_HEAP_F32().subarray(value >> 2, value + count * 16 >> 2);
 }
 GLctx.uniformMatrix2fv(webglGetUniformLocation(location), !!transpose, view);
}

function _emscripten_glUniformMatrix3fv(location, count, transpose, value) {
 if (count <= 32) {
  var view = miniTempWebGLFloatBuffers[9 * count - 1];
  for (var i = 0; i < 9 * count; i += 9) {
   view[i] = GROWABLE_HEAP_F32()[value + 4 * i >> 2];
   view[i + 1] = GROWABLE_HEAP_F32()[value + (4 * i + 4) >> 2];
   view[i + 2] = GROWABLE_HEAP_F32()[value + (4 * i + 8) >> 2];
   view[i + 3] = GROWABLE_HEAP_F32()[value + (4 * i + 12) >> 2];
   view[i + 4] = GROWABLE_HEAP_F32()[value + (4 * i + 16) >> 2];
   view[i + 5] = GROWABLE_HEAP_F32()[value + (4 * i + 20) >> 2];
   view[i + 6] = GROWABLE_HEAP_F32()[value + (4 * i + 24) >> 2];
   view[i + 7] = GROWABLE_HEAP_F32()[value + (4 * i + 28) >> 2];
   view[i + 8] = GROWABLE_HEAP_F32()[value + (4 * i + 32) >> 2];
  }
 } else {
  var view = GROWABLE_HEAP_F32().subarray(value >> 2, value + count * 36 >> 2);
 }
 GLctx.uniformMatrix3fv(webglGetUniformLocation(location), !!transpose, view);
}

function _emscripten_glUniformMatrix4fv(location, count, transpose, value) {
 if (count <= 18) {
  var view = miniTempWebGLFloatBuffers[16 * count - 1];
  var heap = GROWABLE_HEAP_F32();
  value >>= 2;
  for (var i = 0; i < 16 * count; i += 16) {
   var dst = value + i;
   view[i] = heap[dst];
   view[i + 1] = heap[dst + 1];
   view[i + 2] = heap[dst + 2];
   view[i + 3] = heap[dst + 3];
   view[i + 4] = heap[dst + 4];
   view[i + 5] = heap[dst + 5];
   view[i + 6] = heap[dst + 6];
   view[i + 7] = heap[dst + 7];
   view[i + 8] = heap[dst + 8];
   view[i + 9] = heap[dst + 9];
   view[i + 10] = heap[dst + 10];
   view[i + 11] = heap[dst + 11];
   view[i + 12] = heap[dst + 12];
   view[i + 13] = heap[dst + 13];
   view[i + 14] = heap[dst + 14];
   view[i + 15] = heap[dst + 15];
  }
 } else {
  var view = GROWABLE_HEAP_F32().subarray(value >> 2, value + count * 64 >> 2);
 }
 GLctx.uniformMatrix4fv(webglGetUniformLocation(location), !!transpose, view);
}

function _emscripten_glUseProgram(program) {
 program = GL.programs[program];
 GLctx.useProgram(program);
 GLctx.currentProgram = program;
}

function _emscripten_glValidateProgram(program) {
 GLctx.validateProgram(GL.programs[program]);
}

function _emscripten_glVertexAttrib1f(x0, x1) {
 GLctx["vertexAttrib1f"](x0, x1);
}

function _emscripten_glVertexAttrib1fv(index, v) {
 GLctx.vertexAttrib1f(index, GROWABLE_HEAP_F32()[v >> 2]);
}

function _emscripten_glVertexAttrib2f(x0, x1, x2) {
 GLctx["vertexAttrib2f"](x0, x1, x2);
}

function _emscripten_glVertexAttrib2fv(index, v) {
 GLctx.vertexAttrib2f(index, GROWABLE_HEAP_F32()[v >> 2], GROWABLE_HEAP_F32()[v + 4 >> 2]);
}

function _emscripten_glVertexAttrib3f(x0, x1, x2, x3) {
 GLctx["vertexAttrib3f"](x0, x1, x2, x3);
}

function _emscripten_glVertexAttrib3fv(index, v) {
 GLctx.vertexAttrib3f(index, GROWABLE_HEAP_F32()[v >> 2], GROWABLE_HEAP_F32()[v + 4 >> 2], GROWABLE_HEAP_F32()[v + 8 >> 2]);
}

function _emscripten_glVertexAttrib4f(x0, x1, x2, x3, x4) {
 GLctx["vertexAttrib4f"](x0, x1, x2, x3, x4);
}

function _emscripten_glVertexAttrib4fv(index, v) {
 GLctx.vertexAttrib4f(index, GROWABLE_HEAP_F32()[v >> 2], GROWABLE_HEAP_F32()[v + 4 >> 2], GROWABLE_HEAP_F32()[v + 8 >> 2], GROWABLE_HEAP_F32()[v + 12 >> 2]);
}

function _emscripten_glVertexAttribDivisorANGLE(index, divisor) {
 GLctx["vertexAttribDivisor"](index, divisor);
}

function _emscripten_glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
 GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
}

function _emscripten_glViewport(x0, x1, x2, x3) {
 GLctx["viewport"](x0, x1, x2, x3);
}

function _emscripten_has_asyncify() {
 return 1;
}

function _emscripten_memcpy_big(dest, src, num) {
 GROWABLE_HEAP_U8().copyWithin(dest, src, src + num);
}

function _emscripten_proxy_to_main_thread_js(index, sync) {
 var numCallArgs = arguments.length - 2;
 var outerArgs = arguments;
 if (numCallArgs > 20 - 1) throw "emscripten_proxy_to_main_thread_js: Too many arguments " + numCallArgs + " to proxied function idx=" + index + ", maximum supported is " + (20 - 1) + "!";
 return withStackSave(function() {
  var serializedNumCallArgs = numCallArgs;
  var args = stackAlloc(serializedNumCallArgs * 8);
  var b = args >> 3;
  for (var i = 0; i < numCallArgs; i++) {
   var arg = outerArgs[2 + i];
   GROWABLE_HEAP_F64()[b + i] = arg;
  }
  return _emscripten_run_in_main_runtime_thread_js(index, serializedNumCallArgs, args, sync);
 });
}

var _emscripten_receive_on_main_thread_js_callArgs = [];

function _emscripten_receive_on_main_thread_js(index, numCallArgs, args) {
 _emscripten_receive_on_main_thread_js_callArgs.length = numCallArgs;
 var b = args >> 3;
 for (var i = 0; i < numCallArgs; i++) {
  _emscripten_receive_on_main_thread_js_callArgs[i] = GROWABLE_HEAP_F64()[b + i];
 }
 var isEmAsmConst = index < 0;
 var func = !isEmAsmConst ? proxiedFunctionTable[index] : ASM_CONSTS[-index - 1];
 assert(func.length == numCallArgs, "Call args mismatch in emscripten_receive_on_main_thread_js");
 return func.apply(null, _emscripten_receive_on_main_thread_js_callArgs);
}

function doRequestFullscreen(target, strategy) {
 if (!JSEvents.fullscreenEnabled()) return -1;
 target = findEventTarget(target);
 if (!target) return -4;
 if (!target.requestFullscreen && !target.webkitRequestFullscreen) {
  return -3;
 }
 var canPerformRequests = JSEvents.canPerformEventHandlerRequests();
 if (!canPerformRequests) {
  if (strategy.deferUntilInEventHandler) {
   JSEvents.deferCall(_JSEvents_requestFullscreen, 1, [ target, strategy ]);
   return 1;
  } else {
   return -2;
  }
 }
 return _JSEvents_requestFullscreen(target, strategy);
}

function _emscripten_request_fullscreen_strategy(target, deferUntilInEventHandler, fullscreenStrategy) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(43, 1, target, deferUntilInEventHandler, fullscreenStrategy);
 var strategy = {
  scaleMode: GROWABLE_HEAP_I32()[fullscreenStrategy >> 2],
  canvasResolutionScaleMode: GROWABLE_HEAP_I32()[fullscreenStrategy + 4 >> 2],
  filteringMode: GROWABLE_HEAP_I32()[fullscreenStrategy + 8 >> 2],
  deferUntilInEventHandler: deferUntilInEventHandler,
  canvasResizedCallbackTargetThread: GROWABLE_HEAP_I32()[fullscreenStrategy + 20 >> 2],
  canvasResizedCallback: GROWABLE_HEAP_I32()[fullscreenStrategy + 12 >> 2],
  canvasResizedCallbackUserData: GROWABLE_HEAP_I32()[fullscreenStrategy + 16 >> 2]
 };
 return doRequestFullscreen(target, strategy);
}

function _emscripten_request_pointerlock(target, deferUntilInEventHandler) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(44, 1, target, deferUntilInEventHandler);
 target = findEventTarget(target);
 if (!target) return -4;
 if (!target.requestPointerLock && !target.msRequestPointerLock) {
  return -1;
 }
 var canPerformRequests = JSEvents.canPerformEventHandlerRequests();
 if (!canPerformRequests) {
  if (deferUntilInEventHandler) {
   JSEvents.deferCall(requestPointerLock, 2, [ target ]);
   return 1;
  } else {
   return -2;
  }
 }
 return requestPointerLock(target);
}

function emscripten_realloc_buffer(size) {
 try {
  wasmMemory.grow(size - buffer.byteLength + 65535 >>> 16);
  updateGlobalBufferAndViews(wasmMemory.buffer);
  return 1;
 } catch (e) {
  err("emscripten_realloc_buffer: Attempted to grow heap from " + buffer.byteLength + " bytes to " + size + " bytes, but got error: " + e);
 }
}

function _emscripten_resize_heap(requestedSize) {
 var oldSize = GROWABLE_HEAP_U8().length;
 requestedSize = requestedSize >>> 0;
 if (requestedSize <= oldSize) {
  return false;
 }
 var maxHeapSize = 2147483648;
 if (requestedSize > maxHeapSize) {
  err("Cannot enlarge memory, asked to go up to " + requestedSize + " bytes, but the limit is " + maxHeapSize + " bytes!");
  return false;
 }
 for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
  var overGrownHeapSize = oldSize * (1 + .2 / cutDown);
  overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);
  var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));
  var replacement = emscripten_realloc_buffer(newSize);
  if (replacement) {
   return true;
  }
 }
 err("Failed to grow the heap from " + oldSize + " bytes to " + newSize + " bytes, not enough memory!");
 return false;
}

function _emscripten_sample_gamepad_data() {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(45, 1);
 return (JSEvents.lastGamepadState = navigator.getGamepads ? navigator.getGamepads() : navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : null) ? 0 : -1;
}

function registerBeforeUnloadEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
 var beforeUnloadEventHandlerFunc = function(ev) {
  var e = ev || event;
  var confirmationMessage = function(a1, a2, a3) {
   return dynCall_iiii.apply(null, [ callbackfunc, a1, a2, a3 ]);
  }(eventTypeId, 0, userData);
  if (confirmationMessage) {
   confirmationMessage = UTF8ToString(confirmationMessage);
  }
  if (confirmationMessage) {
   e.preventDefault();
   e.returnValue = confirmationMessage;
   return confirmationMessage;
  }
 };
 var eventHandler = {
  target: findEventTarget(target),
  eventTypeString: eventTypeString,
  callbackfunc: callbackfunc,
  handlerFunc: beforeUnloadEventHandlerFunc,
  useCapture: useCapture
 };
 JSEvents.registerOrRemoveHandler(eventHandler);
}

function _emscripten_set_beforeunload_callback_on_thread(userData, callbackfunc, targetThread) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(46, 1, userData, callbackfunc, targetThread);
 if (typeof onbeforeunload === "undefined") return -1;
 if (targetThread !== 1) return -5;
 registerBeforeUnloadEventCallback(2, userData, true, callbackfunc, 28, "beforeunload");
 return 0;
}

function registerFocusEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
 targetThread = JSEvents.getTargetThreadForEventCallback(targetThread);
 if (!JSEvents.focusEvent) JSEvents.focusEvent = _malloc(256);
 var focusEventHandlerFunc = function(ev) {
  var e = ev || event;
  var nodeName = JSEvents.getNodeNameForTarget(e.target);
  var id = e.target.id ? e.target.id : "";
  var focusEvent = targetThread ? _malloc(256) : JSEvents.focusEvent;
  stringToUTF8(nodeName, focusEvent + 0, 128);
  stringToUTF8(id, focusEvent + 128, 128);
  if (targetThread) JSEvents.queueEventHandlerOnThread_iiii(targetThread, callbackfunc, eventTypeId, focusEvent, userData); else if (function(a1, a2, a3) {
   return dynCall_iiii.apply(null, [ callbackfunc, a1, a2, a3 ]);
  }(eventTypeId, focusEvent, userData)) e.preventDefault();
 };
 var eventHandler = {
  target: findEventTarget(target),
  eventTypeString: eventTypeString,
  callbackfunc: callbackfunc,
  handlerFunc: focusEventHandlerFunc,
  useCapture: useCapture
 };
 JSEvents.registerOrRemoveHandler(eventHandler);
}

function _emscripten_set_blur_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(47, 1, target, userData, useCapture, callbackfunc, targetThread);
 registerFocusEventCallback(target, userData, useCapture, callbackfunc, 12, "blur", targetThread);
 return 0;
}

function _emscripten_set_current_thread_status_js(newStatus) {}

function _emscripten_set_current_thread_status(newStatus) {}

function _emscripten_set_element_css_size(target, width, height) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(48, 1, target, width, height);
 target = findEventTarget(target);
 if (!target) return -4;
 target.style.width = width + "px";
 target.style.height = height + "px";
 return 0;
}

function _emscripten_set_focus_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(49, 1, target, userData, useCapture, callbackfunc, targetThread);
 registerFocusEventCallback(target, userData, useCapture, callbackfunc, 13, "focus", targetThread);
 return 0;
}

function fillFullscreenChangeEventData(eventStruct) {
 var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
 var isFullscreen = !!fullscreenElement;
 GROWABLE_HEAP_I32()[eventStruct >> 2] = isFullscreen;
 GROWABLE_HEAP_I32()[eventStruct + 4 >> 2] = JSEvents.fullscreenEnabled();
 var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
 var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
 var id = reportedElement && reportedElement.id ? reportedElement.id : "";
 stringToUTF8(nodeName, eventStruct + 8, 128);
 stringToUTF8(id, eventStruct + 136, 128);
 GROWABLE_HEAP_I32()[eventStruct + 264 >> 2] = reportedElement ? reportedElement.clientWidth : 0;
 GROWABLE_HEAP_I32()[eventStruct + 268 >> 2] = reportedElement ? reportedElement.clientHeight : 0;
 GROWABLE_HEAP_I32()[eventStruct + 272 >> 2] = screen.width;
 GROWABLE_HEAP_I32()[eventStruct + 276 >> 2] = screen.height;
 if (isFullscreen) {
  JSEvents.previousFullscreenElement = fullscreenElement;
 }
}

function registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
 targetThread = JSEvents.getTargetThreadForEventCallback(targetThread);
 if (!JSEvents.fullscreenChangeEvent) JSEvents.fullscreenChangeEvent = _malloc(280);
 var fullscreenChangeEventhandlerFunc = function(ev) {
  var e = ev || event;
  var fullscreenChangeEvent = targetThread ? _malloc(280) : JSEvents.fullscreenChangeEvent;
  fillFullscreenChangeEventData(fullscreenChangeEvent);
  if (targetThread) JSEvents.queueEventHandlerOnThread_iiii(targetThread, callbackfunc, eventTypeId, fullscreenChangeEvent, userData); else if (function(a1, a2, a3) {
   return dynCall_iiii.apply(null, [ callbackfunc, a1, a2, a3 ]);
  }(eventTypeId, fullscreenChangeEvent, userData)) e.preventDefault();
 };
 var eventHandler = {
  target: target,
  eventTypeString: eventTypeString,
  callbackfunc: callbackfunc,
  handlerFunc: fullscreenChangeEventhandlerFunc,
  useCapture: useCapture
 };
 JSEvents.registerOrRemoveHandler(eventHandler);
}

function _emscripten_set_fullscreenchange_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(50, 1, target, userData, useCapture, callbackfunc, targetThread);
 if (!JSEvents.fullscreenEnabled()) return -1;
 target = findEventTarget(target);
 if (!target) return -4;
 registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "fullscreenchange", targetThread);
 registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "webkitfullscreenchange", targetThread);
 return 0;
}

function registerGamepadEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
 targetThread = JSEvents.getTargetThreadForEventCallback(targetThread);
 if (!JSEvents.gamepadEvent) JSEvents.gamepadEvent = _malloc(1432);
 var gamepadEventHandlerFunc = function(ev) {
  var e = ev || event;
  var gamepadEvent = targetThread ? _malloc(1432) : JSEvents.gamepadEvent;
  fillGamepadEventData(gamepadEvent, e["gamepad"]);
  if (targetThread) JSEvents.queueEventHandlerOnThread_iiii(targetThread, callbackfunc, eventTypeId, gamepadEvent, userData); else if (function(a1, a2, a3) {
   return dynCall_iiii.apply(null, [ callbackfunc, a1, a2, a3 ]);
  }(eventTypeId, gamepadEvent, userData)) e.preventDefault();
 };
 var eventHandler = {
  target: findEventTarget(target),
  allowsDeferredCalls: true,
  eventTypeString: eventTypeString,
  callbackfunc: callbackfunc,
  handlerFunc: gamepadEventHandlerFunc,
  useCapture: useCapture
 };
 JSEvents.registerOrRemoveHandler(eventHandler);
}

function _emscripten_set_gamepadconnected_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(51, 1, userData, useCapture, callbackfunc, targetThread);
 if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
 registerGamepadEventCallback(2, userData, useCapture, callbackfunc, 26, "gamepadconnected", targetThread);
 return 0;
}

function _emscripten_set_gamepaddisconnected_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(52, 1, userData, useCapture, callbackfunc, targetThread);
 if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
 registerGamepadEventCallback(2, userData, useCapture, callbackfunc, 27, "gamepaddisconnected", targetThread);
 return 0;
}

function registerKeyEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
 targetThread = JSEvents.getTargetThreadForEventCallback(targetThread);
 if (!JSEvents.keyEvent) JSEvents.keyEvent = _malloc(176);
 var keyEventHandlerFunc = function(e) {
  assert(e);
  var keyEventData = targetThread ? _malloc(176) : JSEvents.keyEvent;
  GROWABLE_HEAP_F64()[keyEventData >> 3] = e.timeStamp;
  var idx = keyEventData >> 2;
  GROWABLE_HEAP_I32()[idx + 2] = e.location;
  GROWABLE_HEAP_I32()[idx + 3] = e.ctrlKey;
  GROWABLE_HEAP_I32()[idx + 4] = e.shiftKey;
  GROWABLE_HEAP_I32()[idx + 5] = e.altKey;
  GROWABLE_HEAP_I32()[idx + 6] = e.metaKey;
  GROWABLE_HEAP_I32()[idx + 7] = e.repeat;
  GROWABLE_HEAP_I32()[idx + 8] = e.charCode;
  GROWABLE_HEAP_I32()[idx + 9] = e.keyCode;
  GROWABLE_HEAP_I32()[idx + 10] = e.which;
  stringToUTF8(e.key || "", keyEventData + 44, 32);
  stringToUTF8(e.code || "", keyEventData + 76, 32);
  stringToUTF8(e.char || "", keyEventData + 108, 32);
  stringToUTF8(e.locale || "", keyEventData + 140, 32);
  if (targetThread) JSEvents.queueEventHandlerOnThread_iiii(targetThread, callbackfunc, eventTypeId, keyEventData, userData); else if (function(a1, a2, a3) {
   return dynCall_iiii.apply(null, [ callbackfunc, a1, a2, a3 ]);
  }(eventTypeId, keyEventData, userData)) e.preventDefault();
 };
 var eventHandler = {
  target: findEventTarget(target),
  allowsDeferredCalls: true,
  eventTypeString: eventTypeString,
  callbackfunc: callbackfunc,
  handlerFunc: keyEventHandlerFunc,
  useCapture: useCapture
 };
 JSEvents.registerOrRemoveHandler(eventHandler);
}

function _emscripten_set_keydown_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(53, 1, target, userData, useCapture, callbackfunc, targetThread);
 registerKeyEventCallback(target, userData, useCapture, callbackfunc, 2, "keydown", targetThread);
 return 0;
}

function _emscripten_set_keypress_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(54, 1, target, userData, useCapture, callbackfunc, targetThread);
 registerKeyEventCallback(target, userData, useCapture, callbackfunc, 1, "keypress", targetThread);
 return 0;
}

function _emscripten_set_keyup_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(55, 1, target, userData, useCapture, callbackfunc, targetThread);
 registerKeyEventCallback(target, userData, useCapture, callbackfunc, 3, "keyup", targetThread);
 return 0;
}

function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop) {
 var browserIterationFunc = function() {
  dynCall_v.call(null, func);
 };
 setMainLoop(browserIterationFunc, fps, simulateInfiniteLoop);
}

function fillMouseEventData(eventStruct, e, target) {
 assert(eventStruct % 4 == 0);
 GROWABLE_HEAP_F64()[eventStruct >> 3] = e.timeStamp;
 var idx = eventStruct >> 2;
 GROWABLE_HEAP_I32()[idx + 2] = e.screenX;
 GROWABLE_HEAP_I32()[idx + 3] = e.screenY;
 GROWABLE_HEAP_I32()[idx + 4] = e.clientX;
 GROWABLE_HEAP_I32()[idx + 5] = e.clientY;
 GROWABLE_HEAP_I32()[idx + 6] = e.ctrlKey;
 GROWABLE_HEAP_I32()[idx + 7] = e.shiftKey;
 GROWABLE_HEAP_I32()[idx + 8] = e.altKey;
 GROWABLE_HEAP_I32()[idx + 9] = e.metaKey;
 GROWABLE_HEAP_I16()[idx * 2 + 20] = e.button;
 GROWABLE_HEAP_I16()[idx * 2 + 21] = e.buttons;
 GROWABLE_HEAP_I32()[idx + 11] = e["movementX"];
 GROWABLE_HEAP_I32()[idx + 12] = e["movementY"];
 var rect = getBoundingClientRect(target);
 GROWABLE_HEAP_I32()[idx + 13] = e.clientX - rect.left;
 GROWABLE_HEAP_I32()[idx + 14] = e.clientY - rect.top;
}

function registerMouseEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
 targetThread = JSEvents.getTargetThreadForEventCallback(targetThread);
 if (!JSEvents.mouseEvent) JSEvents.mouseEvent = _malloc(72);
 target = findEventTarget(target);
 var mouseEventHandlerFunc = function(ev) {
  var e = ev || event;
  fillMouseEventData(JSEvents.mouseEvent, e, target);
  if (targetThread) {
   var mouseEventData = _malloc(72);
   fillMouseEventData(mouseEventData, e, target);
   JSEvents.queueEventHandlerOnThread_iiii(targetThread, callbackfunc, eventTypeId, mouseEventData, userData);
  } else if (function(a1, a2, a3) {
   return dynCall_iiii.apply(null, [ callbackfunc, a1, a2, a3 ]);
  }(eventTypeId, JSEvents.mouseEvent, userData)) e.preventDefault();
 };
 var eventHandler = {
  target: target,
  allowsDeferredCalls: eventTypeString != "mousemove" && eventTypeString != "mouseenter" && eventTypeString != "mouseleave",
  eventTypeString: eventTypeString,
  callbackfunc: callbackfunc,
  handlerFunc: mouseEventHandlerFunc,
  useCapture: useCapture
 };
 JSEvents.registerOrRemoveHandler(eventHandler);
}

function _emscripten_set_mousedown_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(56, 1, target, userData, useCapture, callbackfunc, targetThread);
 registerMouseEventCallback(target, userData, useCapture, callbackfunc, 5, "mousedown", targetThread);
 return 0;
}

function _emscripten_set_mouseenter_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(57, 1, target, userData, useCapture, callbackfunc, targetThread);
 registerMouseEventCallback(target, userData, useCapture, callbackfunc, 33, "mouseenter", targetThread);
 return 0;
}

function _emscripten_set_mouseleave_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(58, 1, target, userData, useCapture, callbackfunc, targetThread);
 registerMouseEventCallback(target, userData, useCapture, callbackfunc, 34, "mouseleave", targetThread);
 return 0;
}

function _emscripten_set_mousemove_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(59, 1, target, userData, useCapture, callbackfunc, targetThread);
 registerMouseEventCallback(target, userData, useCapture, callbackfunc, 8, "mousemove", targetThread);
 return 0;
}

function _emscripten_set_mouseup_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(60, 1, target, userData, useCapture, callbackfunc, targetThread);
 registerMouseEventCallback(target, userData, useCapture, callbackfunc, 6, "mouseup", targetThread);
 return 0;
}

function fillPointerlockChangeEventData(eventStruct) {
 var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
 var isPointerlocked = !!pointerLockElement;
 GROWABLE_HEAP_I32()[eventStruct >> 2] = isPointerlocked;
 var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
 var id = pointerLockElement && pointerLockElement.id ? pointerLockElement.id : "";
 stringToUTF8(nodeName, eventStruct + 4, 128);
 stringToUTF8(id, eventStruct + 132, 128);
}

function registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
 targetThread = JSEvents.getTargetThreadForEventCallback(targetThread);
 if (!JSEvents.pointerlockChangeEvent) JSEvents.pointerlockChangeEvent = _malloc(260);
 var pointerlockChangeEventHandlerFunc = function(ev) {
  var e = ev || event;
  var pointerlockChangeEvent = targetThread ? _malloc(260) : JSEvents.pointerlockChangeEvent;
  fillPointerlockChangeEventData(pointerlockChangeEvent);
  if (targetThread) JSEvents.queueEventHandlerOnThread_iiii(targetThread, callbackfunc, eventTypeId, pointerlockChangeEvent, userData); else if (function(a1, a2, a3) {
   return dynCall_iiii.apply(null, [ callbackfunc, a1, a2, a3 ]);
  }(eventTypeId, pointerlockChangeEvent, userData)) e.preventDefault();
 };
 var eventHandler = {
  target: target,
  eventTypeString: eventTypeString,
  callbackfunc: callbackfunc,
  handlerFunc: pointerlockChangeEventHandlerFunc,
  useCapture: useCapture
 };
 JSEvents.registerOrRemoveHandler(eventHandler);
}

function _emscripten_set_pointerlockchange_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(61, 1, target, userData, useCapture, callbackfunc, targetThread);
 if (!document || !document.body || !document.body.requestPointerLock && !document.body.mozRequestPointerLock && !document.body.webkitRequestPointerLock && !document.body.msRequestPointerLock) {
  return -1;
 }
 target = findEventTarget(target);
 if (!target) return -4;
 registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "pointerlockchange", targetThread);
 registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "mozpointerlockchange", targetThread);
 registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "webkitpointerlockchange", targetThread);
 registerPointerlockChangeEventCallback(target, userData, useCapture, callbackfunc, 20, "mspointerlockchange", targetThread);
 return 0;
}

function registerUiEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
 targetThread = JSEvents.getTargetThreadForEventCallback(targetThread);
 if (!JSEvents.uiEvent) JSEvents.uiEvent = _malloc(36);
 target = findEventTarget(target);
 var uiEventHandlerFunc = function(ev) {
  var e = ev || event;
  if (e.target != target) {
   return;
  }
  var b = document.body;
  if (!b) {
   return;
  }
  var uiEvent = targetThread ? _malloc(36) : JSEvents.uiEvent;
  GROWABLE_HEAP_I32()[uiEvent >> 2] = e.detail;
  GROWABLE_HEAP_I32()[uiEvent + 4 >> 2] = b.clientWidth;
  GROWABLE_HEAP_I32()[uiEvent + 8 >> 2] = b.clientHeight;
  GROWABLE_HEAP_I32()[uiEvent + 12 >> 2] = innerWidth;
  GROWABLE_HEAP_I32()[uiEvent + 16 >> 2] = innerHeight;
  GROWABLE_HEAP_I32()[uiEvent + 20 >> 2] = outerWidth;
  GROWABLE_HEAP_I32()[uiEvent + 24 >> 2] = outerHeight;
  GROWABLE_HEAP_I32()[uiEvent + 28 >> 2] = pageXOffset;
  GROWABLE_HEAP_I32()[uiEvent + 32 >> 2] = pageYOffset;
  if (targetThread) JSEvents.queueEventHandlerOnThread_iiii(targetThread, callbackfunc, eventTypeId, uiEvent, userData); else if (function(a1, a2, a3) {
   return dynCall_iiii.apply(null, [ callbackfunc, a1, a2, a3 ]);
  }(eventTypeId, uiEvent, userData)) e.preventDefault();
 };
 var eventHandler = {
  target: target,
  eventTypeString: eventTypeString,
  callbackfunc: callbackfunc,
  handlerFunc: uiEventHandlerFunc,
  useCapture: useCapture
 };
 JSEvents.registerOrRemoveHandler(eventHandler);
}

function _emscripten_set_resize_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(62, 1, target, userData, useCapture, callbackfunc, targetThread);
 registerUiEventCallback(target, userData, useCapture, callbackfunc, 10, "resize", targetThread);
 return 0;
}

function _emscripten_set_timeout(cb, msecs, userData) {
 runtimeKeepalivePush();
 return setTimeout(function() {
  runtimeKeepalivePop();
  callUserCallback(function() {
   (function(a1) {
    dynCall_vi.apply(null, [ cb, a1 ]);
   })(userData);
  });
 }, msecs);
}

function registerTouchEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
 targetThread = JSEvents.getTargetThreadForEventCallback(targetThread);
 if (!JSEvents.touchEvent) JSEvents.touchEvent = _malloc(1696);
 target = findEventTarget(target);
 var touchEventHandlerFunc = function(e) {
  assert(e);
  var t, touches = {}, et = e.touches;
  for (var i = 0; i < et.length; ++i) {
   t = et[i];
   t.isChanged = t.onTarget = 0;
   touches[t.identifier] = t;
  }
  for (var i = 0; i < e.changedTouches.length; ++i) {
   t = e.changedTouches[i];
   t.isChanged = 1;
   touches[t.identifier] = t;
  }
  for (var i = 0; i < e.targetTouches.length; ++i) {
   touches[e.targetTouches[i].identifier].onTarget = 1;
  }
  var touchEvent = targetThread ? _malloc(1696) : JSEvents.touchEvent;
  GROWABLE_HEAP_F64()[touchEvent >> 3] = e.timeStamp;
  var idx = touchEvent >> 2;
  GROWABLE_HEAP_I32()[idx + 3] = e.ctrlKey;
  GROWABLE_HEAP_I32()[idx + 4] = e.shiftKey;
  GROWABLE_HEAP_I32()[idx + 5] = e.altKey;
  GROWABLE_HEAP_I32()[idx + 6] = e.metaKey;
  idx += 7;
  var targetRect = getBoundingClientRect(target);
  var numTouches = 0;
  for (var i in touches) {
   var t = touches[i];
   GROWABLE_HEAP_I32()[idx + 0] = t.identifier;
   GROWABLE_HEAP_I32()[idx + 1] = t.screenX;
   GROWABLE_HEAP_I32()[idx + 2] = t.screenY;
   GROWABLE_HEAP_I32()[idx + 3] = t.clientX;
   GROWABLE_HEAP_I32()[idx + 4] = t.clientY;
   GROWABLE_HEAP_I32()[idx + 5] = t.pageX;
   GROWABLE_HEAP_I32()[idx + 6] = t.pageY;
   GROWABLE_HEAP_I32()[idx + 7] = t.isChanged;
   GROWABLE_HEAP_I32()[idx + 8] = t.onTarget;
   GROWABLE_HEAP_I32()[idx + 9] = t.clientX - targetRect.left;
   GROWABLE_HEAP_I32()[idx + 10] = t.clientY - targetRect.top;
   idx += 13;
   if (++numTouches > 31) {
    break;
   }
  }
  GROWABLE_HEAP_I32()[touchEvent + 8 >> 2] = numTouches;
  if (targetThread) JSEvents.queueEventHandlerOnThread_iiii(targetThread, callbackfunc, eventTypeId, touchEvent, userData); else if (function(a1, a2, a3) {
   return dynCall_iiii.apply(null, [ callbackfunc, a1, a2, a3 ]);
  }(eventTypeId, touchEvent, userData)) e.preventDefault();
 };
 var eventHandler = {
  target: target,
  allowsDeferredCalls: eventTypeString == "touchstart" || eventTypeString == "touchend",
  eventTypeString: eventTypeString,
  callbackfunc: callbackfunc,
  handlerFunc: touchEventHandlerFunc,
  useCapture: useCapture
 };
 JSEvents.registerOrRemoveHandler(eventHandler);
}

function _emscripten_set_touchcancel_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(63, 1, target, userData, useCapture, callbackfunc, targetThread);
 registerTouchEventCallback(target, userData, useCapture, callbackfunc, 25, "touchcancel", targetThread);
 return 0;
}

function _emscripten_set_touchend_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(64, 1, target, userData, useCapture, callbackfunc, targetThread);
 registerTouchEventCallback(target, userData, useCapture, callbackfunc, 23, "touchend", targetThread);
 return 0;
}

function _emscripten_set_touchmove_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(65, 1, target, userData, useCapture, callbackfunc, targetThread);
 registerTouchEventCallback(target, userData, useCapture, callbackfunc, 24, "touchmove", targetThread);
 return 0;
}

function _emscripten_set_touchstart_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(66, 1, target, userData, useCapture, callbackfunc, targetThread);
 registerTouchEventCallback(target, userData, useCapture, callbackfunc, 22, "touchstart", targetThread);
 return 0;
}

function fillVisibilityChangeEventData(eventStruct) {
 var visibilityStates = [ "hidden", "visible", "prerender", "unloaded" ];
 var visibilityState = visibilityStates.indexOf(document.visibilityState);
 GROWABLE_HEAP_I32()[eventStruct >> 2] = document.hidden;
 GROWABLE_HEAP_I32()[eventStruct + 4 >> 2] = visibilityState;
}

function registerVisibilityChangeEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
 targetThread = JSEvents.getTargetThreadForEventCallback(targetThread);
 if (!JSEvents.visibilityChangeEvent) JSEvents.visibilityChangeEvent = _malloc(8);
 var visibilityChangeEventHandlerFunc = function(ev) {
  var e = ev || event;
  var visibilityChangeEvent = targetThread ? _malloc(8) : JSEvents.visibilityChangeEvent;
  fillVisibilityChangeEventData(visibilityChangeEvent);
  if (targetThread) JSEvents.queueEventHandlerOnThread_iiii(targetThread, callbackfunc, eventTypeId, visibilityChangeEvent, userData); else if (function(a1, a2, a3) {
   return dynCall_iiii.apply(null, [ callbackfunc, a1, a2, a3 ]);
  }(eventTypeId, visibilityChangeEvent, userData)) e.preventDefault();
 };
 var eventHandler = {
  target: target,
  eventTypeString: eventTypeString,
  callbackfunc: callbackfunc,
  handlerFunc: visibilityChangeEventHandlerFunc,
  useCapture: useCapture
 };
 JSEvents.registerOrRemoveHandler(eventHandler);
}

function _emscripten_set_visibilitychange_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(67, 1, userData, useCapture, callbackfunc, targetThread);
 if (!specialHTMLTargets[1]) {
  return -4;
 }
 registerVisibilityChangeEventCallback(specialHTMLTargets[1], userData, useCapture, callbackfunc, 21, "visibilitychange", targetThread);
 return 0;
}

function registerWheelEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
 targetThread = JSEvents.getTargetThreadForEventCallback(targetThread);
 if (!JSEvents.wheelEvent) JSEvents.wheelEvent = _malloc(104);
 var wheelHandlerFunc = function(ev) {
  var e = ev || event;
  var wheelEvent = targetThread ? _malloc(104) : JSEvents.wheelEvent;
  fillMouseEventData(wheelEvent, e, target);
  GROWABLE_HEAP_F64()[wheelEvent + 72 >> 3] = e["deltaX"];
  GROWABLE_HEAP_F64()[wheelEvent + 80 >> 3] = e["deltaY"];
  GROWABLE_HEAP_F64()[wheelEvent + 88 >> 3] = e["deltaZ"];
  GROWABLE_HEAP_I32()[wheelEvent + 96 >> 2] = e["deltaMode"];
  if (targetThread) JSEvents.queueEventHandlerOnThread_iiii(targetThread, callbackfunc, eventTypeId, wheelEvent, userData); else if (function(a1, a2, a3) {
   return dynCall_iiii.apply(null, [ callbackfunc, a1, a2, a3 ]);
  }(eventTypeId, wheelEvent, userData)) e.preventDefault();
 };
 var eventHandler = {
  target: target,
  allowsDeferredCalls: true,
  eventTypeString: eventTypeString,
  callbackfunc: callbackfunc,
  handlerFunc: wheelHandlerFunc,
  useCapture: useCapture
 };
 JSEvents.registerOrRemoveHandler(eventHandler);
}

function _emscripten_set_wheel_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(68, 1, target, userData, useCapture, callbackfunc, targetThread);
 target = findEventTarget(target);
 if (typeof target.onwheel !== "undefined") {
  registerWheelEventCallback(target, userData, useCapture, callbackfunc, 9, "wheel", targetThread);
  return 0;
 } else {
  return -1;
 }
}

function _emscripten_sleep(ms) {
 Asyncify.handleSleep(function(wakeUp) {
  safeSetTimeout(wakeUp, ms);
 });
}

var Fetch = {
 xhrs: [],
 setu64: function(addr, val) {
  GROWABLE_HEAP_U32()[addr >> 2] = val;
  GROWABLE_HEAP_U32()[addr + 4 >> 2] = val / 4294967296 | 0;
 },
 openDatabase: function(dbname, dbversion, onsuccess, onerror) {
  try {
   var openRequest = indexedDB.open(dbname, dbversion);
  } catch (e) {
   return onerror(e);
  }
  openRequest.onupgradeneeded = function(event) {
   var db = event.target.result;
   if (db.objectStoreNames.contains("FILES")) {
    db.deleteObjectStore("FILES");
   }
   db.createObjectStore("FILES");
  };
  openRequest.onsuccess = function(event) {
   onsuccess(event.target.result);
  };
  openRequest.onerror = function(error) {
   onerror(error);
  };
 },
 staticInit: function() {
  var isMainThread = true;
  var onsuccess = function(db) {
   Fetch.dbInstance = db;
   if (isMainThread) {
    removeRunDependency("library_fetch_init");
   }
  };
  var onerror = function() {
   Fetch.dbInstance = false;
   if (isMainThread) {
    removeRunDependency("library_fetch_init");
   }
  };
  Fetch.openDatabase("emscripten_filesystem", 1, onsuccess, onerror);
  if (typeof ENVIRONMENT_IS_FETCH_WORKER === "undefined" || !ENVIRONMENT_IS_FETCH_WORKER) addRunDependency("library_fetch_init");
 }
};

function fetchXHR(fetch, onsuccess, onerror, onprogress, onreadystatechange) {
 var url = GROWABLE_HEAP_U32()[fetch + 8 >> 2];
 if (!url) {
  onerror(fetch, 0, "no url specified!");
  return;
 }
 var url_ = UTF8ToString(url);
 var fetch_attr = fetch + 112;
 var requestMethod = UTF8ToString(fetch_attr);
 if (!requestMethod) requestMethod = "GET";
 var userData = GROWABLE_HEAP_U32()[fetch + 4 >> 2];
 var fetchAttributes = GROWABLE_HEAP_U32()[fetch_attr + 52 >> 2];
 var timeoutMsecs = GROWABLE_HEAP_U32()[fetch_attr + 56 >> 2];
 var withCredentials = !!GROWABLE_HEAP_U32()[fetch_attr + 60 >> 2];
 var destinationPath = GROWABLE_HEAP_U32()[fetch_attr + 64 >> 2];
 var userName = GROWABLE_HEAP_U32()[fetch_attr + 68 >> 2];
 var password = GROWABLE_HEAP_U32()[fetch_attr + 72 >> 2];
 var requestHeaders = GROWABLE_HEAP_U32()[fetch_attr + 76 >> 2];
 var overriddenMimeType = GROWABLE_HEAP_U32()[fetch_attr + 80 >> 2];
 var dataPtr = GROWABLE_HEAP_U32()[fetch_attr + 84 >> 2];
 var dataLength = GROWABLE_HEAP_U32()[fetch_attr + 88 >> 2];
 var fetchAttrLoadToMemory = !!(fetchAttributes & 1);
 var fetchAttrStreamData = !!(fetchAttributes & 2);
 var fetchAttrPersistFile = !!(fetchAttributes & 4);
 var fetchAttrAppend = !!(fetchAttributes & 8);
 var fetchAttrReplace = !!(fetchAttributes & 16);
 var fetchAttrSynchronous = !!(fetchAttributes & 64);
 var fetchAttrWaitable = !!(fetchAttributes & 128);
 var userNameStr = userName ? UTF8ToString(userName) : undefined;
 var passwordStr = password ? UTF8ToString(password) : undefined;
 var overriddenMimeTypeStr = overriddenMimeType ? UTF8ToString(overriddenMimeType) : undefined;
 var xhr = new XMLHttpRequest();
 xhr.withCredentials = withCredentials;
 xhr.open(requestMethod, url_, !fetchAttrSynchronous, userNameStr, passwordStr);
 if (!fetchAttrSynchronous) xhr.timeout = timeoutMsecs;
 xhr.url_ = url_;
 assert(!fetchAttrStreamData, "streaming uses moz-chunked-arraybuffer which is no longer supported; TODO: rewrite using fetch()");
 xhr.responseType = "arraybuffer";
 if (overriddenMimeType) {
  xhr.overrideMimeType(overriddenMimeTypeStr);
 }
 if (requestHeaders) {
  for (;;) {
   var key = GROWABLE_HEAP_U32()[requestHeaders >> 2];
   if (!key) break;
   var value = GROWABLE_HEAP_U32()[requestHeaders + 4 >> 2];
   if (!value) break;
   requestHeaders += 8;
   var keyStr = UTF8ToString(key);
   var valueStr = UTF8ToString(value);
   xhr.setRequestHeader(keyStr, valueStr);
  }
 }
 Fetch.xhrs.push(xhr);
 var id = Fetch.xhrs.length;
 GROWABLE_HEAP_U32()[fetch + 0 >> 2] = id;
 var data = dataPtr && dataLength ? GROWABLE_HEAP_U8().slice(dataPtr, dataPtr + dataLength) : null;
 function saveResponse(condition) {
  var ptr = 0;
  var ptrLen = 0;
  if (condition) {
   ptrLen = xhr.response ? xhr.response.byteLength : 0;
   ptr = _malloc(ptrLen);
   GROWABLE_HEAP_U8().set(new Uint8Array(xhr.response), ptr);
  }
  GROWABLE_HEAP_U32()[fetch + 12 >> 2] = ptr;
  Fetch.setu64(fetch + 16, ptrLen);
 }
 xhr.onload = function(e) {
  saveResponse(fetchAttrLoadToMemory && !fetchAttrStreamData);
  var len = xhr.response ? xhr.response.byteLength : 0;
  Fetch.setu64(fetch + 24, 0);
  if (len) {
   Fetch.setu64(fetch + 32, len);
  }
  GROWABLE_HEAP_U16()[fetch + 40 >> 1] = xhr.readyState;
  GROWABLE_HEAP_U16()[fetch + 42 >> 1] = xhr.status;
  if (xhr.statusText) stringToUTF8(xhr.statusText, fetch + 44, 64);
  if (xhr.status >= 200 && xhr.status < 300) {
   if (onsuccess) onsuccess(fetch, xhr, e);
  } else {
   if (onerror) onerror(fetch, xhr, e);
  }
 };
 xhr.onerror = function(e) {
  saveResponse(fetchAttrLoadToMemory);
  var status = xhr.status;
  Fetch.setu64(fetch + 24, 0);
  Fetch.setu64(fetch + 32, xhr.response ? xhr.response.byteLength : 0);
  GROWABLE_HEAP_U16()[fetch + 40 >> 1] = xhr.readyState;
  GROWABLE_HEAP_U16()[fetch + 42 >> 1] = status;
  if (onerror) onerror(fetch, xhr, e);
 };
 xhr.ontimeout = function(e) {
  if (onerror) onerror(fetch, xhr, e);
 };
 xhr.onprogress = function(e) {
  var ptrLen = fetchAttrLoadToMemory && fetchAttrStreamData && xhr.response ? xhr.response.byteLength : 0;
  var ptr = 0;
  if (fetchAttrLoadToMemory && fetchAttrStreamData) {
   assert(onprogress, "When doing a streaming fetch, you should have an onprogress handler registered to receive the chunks!");
   ptr = _malloc(ptrLen);
   GROWABLE_HEAP_U8().set(new Uint8Array(xhr.response), ptr);
  }
  GROWABLE_HEAP_U32()[fetch + 12 >> 2] = ptr;
  Fetch.setu64(fetch + 16, ptrLen);
  Fetch.setu64(fetch + 24, e.loaded - ptrLen);
  Fetch.setu64(fetch + 32, e.total);
  GROWABLE_HEAP_U16()[fetch + 40 >> 1] = xhr.readyState;
  if (xhr.readyState >= 3 && xhr.status === 0 && e.loaded > 0) xhr.status = 200;
  GROWABLE_HEAP_U16()[fetch + 42 >> 1] = xhr.status;
  if (xhr.statusText) stringToUTF8(xhr.statusText, fetch + 44, 64);
  if (onprogress) onprogress(fetch, xhr, e);
  if (ptr) {
   _free(ptr);
  }
 };
 xhr.onreadystatechange = function(e) {
  GROWABLE_HEAP_U16()[fetch + 40 >> 1] = xhr.readyState;
  if (xhr.readyState >= 2) {
   GROWABLE_HEAP_U16()[fetch + 42 >> 1] = xhr.status;
  }
  if (onreadystatechange) onreadystatechange(fetch, xhr, e);
 };
 try {
  xhr.send(data);
 } catch (e) {
  if (onerror) onerror(fetch, xhr, e);
 }
}

function fetchCacheData(db, fetch, data, onsuccess, onerror) {
 if (!db) {
  onerror(fetch, 0, "IndexedDB not available!");
  return;
 }
 var fetch_attr = fetch + 112;
 var destinationPath = GROWABLE_HEAP_U32()[fetch_attr + 64 >> 2];
 if (!destinationPath) destinationPath = GROWABLE_HEAP_U32()[fetch + 8 >> 2];
 var destinationPathStr = UTF8ToString(destinationPath);
 try {
  var transaction = db.transaction([ "FILES" ], "readwrite");
  var packages = transaction.objectStore("FILES");
  var putRequest = packages.put(data, destinationPathStr);
  putRequest.onsuccess = function(event) {
   GROWABLE_HEAP_U16()[fetch + 40 >> 1] = 4;
   GROWABLE_HEAP_U16()[fetch + 42 >> 1] = 200;
   stringToUTF8("OK", fetch + 44, 64);
   onsuccess(fetch, 0, destinationPathStr);
  };
  putRequest.onerror = function(error) {
   GROWABLE_HEAP_U16()[fetch + 40 >> 1] = 4;
   GROWABLE_HEAP_U16()[fetch + 42 >> 1] = 413;
   stringToUTF8("Payload Too Large", fetch + 44, 64);
   onerror(fetch, 0, error);
  };
 } catch (e) {
  onerror(fetch, 0, e);
 }
}

function fetchLoadCachedData(db, fetch, onsuccess, onerror) {
 if (!db) {
  onerror(fetch, 0, "IndexedDB not available!");
  return;
 }
 var fetch_attr = fetch + 112;
 var path = GROWABLE_HEAP_U32()[fetch_attr + 64 >> 2];
 if (!path) path = GROWABLE_HEAP_U32()[fetch + 8 >> 2];
 var pathStr = UTF8ToString(path);
 try {
  var transaction = db.transaction([ "FILES" ], "readonly");
  var packages = transaction.objectStore("FILES");
  var getRequest = packages.get(pathStr);
  getRequest.onsuccess = function(event) {
   if (event.target.result) {
    var value = event.target.result;
    var len = value.byteLength || value.length;
    var ptr = _malloc(len);
    GROWABLE_HEAP_U8().set(new Uint8Array(value), ptr);
    GROWABLE_HEAP_U32()[fetch + 12 >> 2] = ptr;
    Fetch.setu64(fetch + 16, len);
    Fetch.setu64(fetch + 24, 0);
    Fetch.setu64(fetch + 32, len);
    GROWABLE_HEAP_U16()[fetch + 40 >> 1] = 4;
    GROWABLE_HEAP_U16()[fetch + 42 >> 1] = 200;
    stringToUTF8("OK", fetch + 44, 64);
    onsuccess(fetch, 0, value);
   } else {
    GROWABLE_HEAP_U16()[fetch + 40 >> 1] = 4;
    GROWABLE_HEAP_U16()[fetch + 42 >> 1] = 404;
    stringToUTF8("Not Found", fetch + 44, 64);
    onerror(fetch, 0, "no data");
   }
  };
  getRequest.onerror = function(error) {
   GROWABLE_HEAP_U16()[fetch + 40 >> 1] = 4;
   GROWABLE_HEAP_U16()[fetch + 42 >> 1] = 404;
   stringToUTF8("Not Found", fetch + 44, 64);
   onerror(fetch, 0, error);
  };
 } catch (e) {
  onerror(fetch, 0, e);
 }
}

function fetchDeleteCachedData(db, fetch, onsuccess, onerror) {
 if (!db) {
  onerror(fetch, 0, "IndexedDB not available!");
  return;
 }
 var fetch_attr = fetch + 112;
 var path = GROWABLE_HEAP_U32()[fetch_attr + 64 >> 2];
 if (!path) path = GROWABLE_HEAP_U32()[fetch + 8 >> 2];
 var pathStr = UTF8ToString(path);
 try {
  var transaction = db.transaction([ "FILES" ], "readwrite");
  var packages = transaction.objectStore("FILES");
  var request = packages.delete(pathStr);
  request.onsuccess = function(event) {
   var value = event.target.result;
   GROWABLE_HEAP_U32()[fetch + 12 >> 2] = 0;
   Fetch.setu64(fetch + 16, 0);
   Fetch.setu64(fetch + 24, 0);
   Fetch.setu64(fetch + 32, 0);
   GROWABLE_HEAP_U16()[fetch + 40 >> 1] = 4;
   GROWABLE_HEAP_U16()[fetch + 42 >> 1] = 200;
   stringToUTF8("OK", fetch + 44, 64);
   onsuccess(fetch, 0, value);
  };
  request.onerror = function(error) {
   GROWABLE_HEAP_U16()[fetch + 40 >> 1] = 4;
   GROWABLE_HEAP_U16()[fetch + 42 >> 1] = 404;
   stringToUTF8("Not Found", fetch + 44, 64);
   onerror(fetch, 0, error);
  };
 } catch (e) {
  onerror(fetch, 0, e);
 }
}

function _emscripten_start_fetch(fetch, successcb, errorcb, progresscb, readystatechangecb) {
 runtimeKeepalivePush();
 var fetch_attr = fetch + 112;
 var requestMethod = UTF8ToString(fetch_attr);
 var onsuccess = GROWABLE_HEAP_U32()[fetch_attr + 36 >> 2];
 var onerror = GROWABLE_HEAP_U32()[fetch_attr + 40 >> 2];
 var onprogress = GROWABLE_HEAP_U32()[fetch_attr + 44 >> 2];
 var onreadystatechange = GROWABLE_HEAP_U32()[fetch_attr + 48 >> 2];
 var fetchAttributes = GROWABLE_HEAP_U32()[fetch_attr + 52 >> 2];
 var fetchAttrLoadToMemory = !!(fetchAttributes & 1);
 var fetchAttrStreamData = !!(fetchAttributes & 2);
 var fetchAttrPersistFile = !!(fetchAttributes & 4);
 var fetchAttrNoDownload = !!(fetchAttributes & 32);
 var fetchAttrAppend = !!(fetchAttributes & 8);
 var fetchAttrReplace = !!(fetchAttributes & 16);
 var fetchAttrSynchronous = !!(fetchAttributes & 64);
 var reportSuccess = function(fetch, xhr, e) {
  runtimeKeepalivePop();
  callUserCallback(function() {
   if (onsuccess) (function(a1) {
    dynCall_vi.apply(null, [ onsuccess, a1 ]);
   })(fetch); else if (successcb) successcb(fetch);
  }, fetchAttrSynchronous);
 };
 var reportProgress = function(fetch, xhr, e) {
  callUserCallback(function() {
   if (onprogress) (function(a1) {
    dynCall_vi.apply(null, [ onprogress, a1 ]);
   })(fetch); else if (progresscb) progresscb(fetch);
  }, fetchAttrSynchronous);
 };
 var reportError = function(fetch, xhr, e) {
  runtimeKeepalivePop();
  callUserCallback(function() {
   if (onerror) (function(a1) {
    dynCall_vi.apply(null, [ onerror, a1 ]);
   })(fetch); else if (errorcb) errorcb(fetch);
  }, fetchAttrSynchronous);
 };
 var reportReadyStateChange = function(fetch, xhr, e) {
  callUserCallback(function() {
   if (onreadystatechange) (function(a1) {
    dynCall_vi.apply(null, [ onreadystatechange, a1 ]);
   })(fetch); else if (readystatechangecb) readystatechangecb(fetch);
  }, fetchAttrSynchronous);
 };
 var performUncachedXhr = function(fetch, xhr, e) {
  fetchXHR(fetch, reportSuccess, reportError, reportProgress, reportReadyStateChange);
 };
 var cacheResultAndReportSuccess = function(fetch, xhr, e) {
  var storeSuccess = function(fetch, xhr, e) {
   runtimeKeepalivePop();
   callUserCallback(function() {
    if (onsuccess) (function(a1) {
     dynCall_vi.apply(null, [ onsuccess, a1 ]);
    })(fetch); else if (successcb) successcb(fetch);
   }, fetchAttrSynchronous);
  };
  var storeError = function(fetch, xhr, e) {
   runtimeKeepalivePop();
   callUserCallback(function() {
    if (onsuccess) (function(a1) {
     dynCall_vi.apply(null, [ onsuccess, a1 ]);
    })(fetch); else if (successcb) successcb(fetch);
   }, fetchAttrSynchronous);
  };
  fetchCacheData(Fetch.dbInstance, fetch, xhr.response, storeSuccess, storeError);
 };
 var performCachedXhr = function(fetch, xhr, e) {
  fetchXHR(fetch, cacheResultAndReportSuccess, reportError, reportProgress, reportReadyStateChange);
 };
 if (requestMethod === "EM_IDB_STORE") {
  var ptr = GROWABLE_HEAP_U32()[fetch_attr + 84 >> 2];
  fetchCacheData(Fetch.dbInstance, fetch, GROWABLE_HEAP_U8().slice(ptr, ptr + GROWABLE_HEAP_U32()[fetch_attr + 88 >> 2]), reportSuccess, reportError);
 } else if (requestMethod === "EM_IDB_DELETE") {
  fetchDeleteCachedData(Fetch.dbInstance, fetch, reportSuccess, reportError);
 } else if (!fetchAttrReplace) {
  fetchLoadCachedData(Fetch.dbInstance, fetch, reportSuccess, fetchAttrNoDownload ? reportError : fetchAttrPersistFile ? performCachedXhr : performUncachedXhr);
 } else if (!fetchAttrNoDownload) {
  fetchXHR(fetch, fetchAttrPersistFile ? cacheResultAndReportSuccess : reportSuccess, reportError, reportProgress, reportReadyStateChange);
 } else {
  return 0;
 }
 return fetch;
}

function _emscripten_unwind_to_js_event_loop() {
 throw "unwind";
}

var __emscripten_webgl_power_preferences = [ "default", "low-power", "high-performance" ];

function _emscripten_webgl_do_create_context(target, attributes) {
 assert(attributes);
 var a = attributes >> 2;
 var powerPreference = GROWABLE_HEAP_I32()[a + (24 >> 2)];
 var contextAttributes = {
  "alpha": !!GROWABLE_HEAP_I32()[a + (0 >> 2)],
  "depth": !!GROWABLE_HEAP_I32()[a + (4 >> 2)],
  "stencil": !!GROWABLE_HEAP_I32()[a + (8 >> 2)],
  "antialias": !!GROWABLE_HEAP_I32()[a + (12 >> 2)],
  "premultipliedAlpha": !!GROWABLE_HEAP_I32()[a + (16 >> 2)],
  "preserveDrawingBuffer": !!GROWABLE_HEAP_I32()[a + (20 >> 2)],
  "powerPreference": __emscripten_webgl_power_preferences[powerPreference],
  "failIfMajorPerformanceCaveat": !!GROWABLE_HEAP_I32()[a + (28 >> 2)],
  majorVersion: GROWABLE_HEAP_I32()[a + (32 >> 2)],
  minorVersion: GROWABLE_HEAP_I32()[a + (36 >> 2)],
  enableExtensionsByDefault: GROWABLE_HEAP_I32()[a + (40 >> 2)],
  explicitSwapControl: GROWABLE_HEAP_I32()[a + (44 >> 2)],
  proxyContextToMainThread: GROWABLE_HEAP_I32()[a + (48 >> 2)],
  renderViaOffscreenBackBuffer: GROWABLE_HEAP_I32()[a + (52 >> 2)]
 };
 var canvas = findCanvasEventTarget(target);
 if (!canvas) {
  return 0;
 }
 if (contextAttributes.explicitSwapControl) {
  return 0;
 }
 var contextHandle = GL.createContext(canvas, contextAttributes);
 return contextHandle;
}

function _emscripten_webgl_create_context(a0, a1) {
 return _emscripten_webgl_do_create_context(a0, a1);
}

var ENV = {};

function getExecutableName() {
 return thisProgram || "./this.program";
}

function getEnvStrings() {
 if (!getEnvStrings.strings) {
  var lang = (typeof navigator === "object" && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8";
  var env = {
   "USER": "web_user",
   "LOGNAME": "web_user",
   "PATH": "/",
   "PWD": "/",
   "HOME": "/home/web_user",
   "LANG": lang,
   "_": getExecutableName()
  };
  for (var x in ENV) {
   if (ENV[x] === undefined) delete env[x]; else env[x] = ENV[x];
  }
  var strings = [];
  for (var x in env) {
   strings.push(x + "=" + env[x]);
  }
  getEnvStrings.strings = strings;
 }
 return getEnvStrings.strings;
}

function _environ_get(__environ, environ_buf) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(69, 1, __environ, environ_buf);
 var bufSize = 0;
 getEnvStrings().forEach(function(string, i) {
  var ptr = environ_buf + bufSize;
  GROWABLE_HEAP_I32()[__environ + i * 4 >> 2] = ptr;
  writeAsciiToMemory(string, ptr);
  bufSize += string.length + 1;
 });
 return 0;
}

function _environ_sizes_get(penviron_count, penviron_buf_size) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(70, 1, penviron_count, penviron_buf_size);
 var strings = getEnvStrings();
 GROWABLE_HEAP_I32()[penviron_count >> 2] = strings.length;
 var bufSize = 0;
 strings.forEach(function(string) {
  bufSize += string.length + 1;
 });
 GROWABLE_HEAP_I32()[penviron_buf_size >> 2] = bufSize;
 return 0;
}

function _fd_close(fd) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(71, 1, fd);
 try {
  var stream = SYSCALLS.getStreamFromFD(fd);
  FS.close(stream);
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) throw e;
  return e.errno;
 }
}

function _fd_read(fd, iov, iovcnt, pnum) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(72, 1, fd, iov, iovcnt, pnum);
 try {
  var stream = SYSCALLS.getStreamFromFD(fd);
  var num = SYSCALLS.doReadv(stream, iov, iovcnt);
  GROWABLE_HEAP_I32()[pnum >> 2] = num;
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) throw e;
  return e.errno;
 }
}

function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(73, 1, fd, offset_low, offset_high, whence, newOffset);
 try {
  var stream = SYSCALLS.getStreamFromFD(fd);
  var HIGH_OFFSET = 4294967296;
  var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  var DOUBLE_LIMIT = 9007199254740992;
  if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
   return -61;
  }
  FS.llseek(stream, offset, whence);
  tempI64 = [ stream.position >>> 0, (tempDouble = stream.position, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0) ], 
  GROWABLE_HEAP_I32()[newOffset >> 2] = tempI64[0], GROWABLE_HEAP_I32()[newOffset + 4 >> 2] = tempI64[1];
  if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null;
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) throw e;
  return e.errno;
 }
}

function _fd_write(fd, iov, iovcnt, pnum) {
 if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(74, 1, fd, iov, iovcnt, pnum);
 try {
  var stream = SYSCALLS.getStreamFromFD(fd);
  var num = SYSCALLS.doWritev(stream, iov, iovcnt);
  GROWABLE_HEAP_I32()[pnum >> 2] = num;
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) throw e;
  return e.errno;
 }
}

function _getTempRet0() {
 return getTempRet0();
}

function _gettimeofday(ptr) {
 var now = Date.now();
 GROWABLE_HEAP_I32()[ptr >> 2] = now / 1e3 | 0;
 GROWABLE_HEAP_I32()[ptr + 4 >> 2] = now % 1e3 * 1e3 | 0;
 return 0;
}

function _llvm_eh_typeid_for(type) {
 return type;
}

function _mktime(tmPtr) {
 _tzset();
 var date = new Date(GROWABLE_HEAP_I32()[tmPtr + 20 >> 2] + 1900, GROWABLE_HEAP_I32()[tmPtr + 16 >> 2], GROWABLE_HEAP_I32()[tmPtr + 12 >> 2], GROWABLE_HEAP_I32()[tmPtr + 8 >> 2], GROWABLE_HEAP_I32()[tmPtr + 4 >> 2], GROWABLE_HEAP_I32()[tmPtr >> 2], 0);
 var dst = GROWABLE_HEAP_I32()[tmPtr + 32 >> 2];
 var guessedOffset = date.getTimezoneOffset();
 var start = new Date(date.getFullYear(), 0, 1);
 var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
 var winterOffset = start.getTimezoneOffset();
 var dstOffset = Math.min(winterOffset, summerOffset);
 if (dst < 0) {
  GROWABLE_HEAP_I32()[tmPtr + 32 >> 2] = Number(summerOffset != winterOffset && dstOffset == guessedOffset);
 } else if (dst > 0 != (dstOffset == guessedOffset)) {
  var nonDstOffset = Math.max(winterOffset, summerOffset);
  var trueOffset = dst > 0 ? dstOffset : nonDstOffset;
  date.setTime(date.getTime() + (trueOffset - guessedOffset) * 6e4);
 }
 GROWABLE_HEAP_I32()[tmPtr + 24 >> 2] = date.getDay();
 var yday = (date.getTime() - start.getTime()) / (1e3 * 60 * 60 * 24) | 0;
 GROWABLE_HEAP_I32()[tmPtr + 28 >> 2] = yday;
 GROWABLE_HEAP_I32()[tmPtr >> 2] = date.getSeconds();
 GROWABLE_HEAP_I32()[tmPtr + 4 >> 2] = date.getMinutes();
 GROWABLE_HEAP_I32()[tmPtr + 8 >> 2] = date.getHours();
 GROWABLE_HEAP_I32()[tmPtr + 12 >> 2] = date.getDate();
 GROWABLE_HEAP_I32()[tmPtr + 16 >> 2] = date.getMonth();
 return date.getTime() / 1e3 | 0;
}

function _setTempRet0(val) {
 setTempRet0(val);
}

function __isLeapYear(year) {
 return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}

function __arraySum(array, index) {
 var sum = 0;
 for (var i = 0; i <= index; sum += array[i++]) {}
 return sum;
}

var __MONTH_DAYS_LEAP = [ 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];

var __MONTH_DAYS_REGULAR = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];

function __addDays(date, days) {
 var newDate = new Date(date.getTime());
 while (days > 0) {
  var leap = __isLeapYear(newDate.getFullYear());
  var currentMonth = newDate.getMonth();
  var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  if (days > daysInCurrentMonth - newDate.getDate()) {
   days -= daysInCurrentMonth - newDate.getDate() + 1;
   newDate.setDate(1);
   if (currentMonth < 11) {
    newDate.setMonth(currentMonth + 1);
   } else {
    newDate.setMonth(0);
    newDate.setFullYear(newDate.getFullYear() + 1);
   }
  } else {
   newDate.setDate(newDate.getDate() + days);
   return newDate;
  }
 }
 return newDate;
}

function _strftime(s, maxsize, format, tm) {
 var tm_zone = GROWABLE_HEAP_I32()[tm + 40 >> 2];
 var date = {
  tm_sec: GROWABLE_HEAP_I32()[tm >> 2],
  tm_min: GROWABLE_HEAP_I32()[tm + 4 >> 2],
  tm_hour: GROWABLE_HEAP_I32()[tm + 8 >> 2],
  tm_mday: GROWABLE_HEAP_I32()[tm + 12 >> 2],
  tm_mon: GROWABLE_HEAP_I32()[tm + 16 >> 2],
  tm_year: GROWABLE_HEAP_I32()[tm + 20 >> 2],
  tm_wday: GROWABLE_HEAP_I32()[tm + 24 >> 2],
  tm_yday: GROWABLE_HEAP_I32()[tm + 28 >> 2],
  tm_isdst: GROWABLE_HEAP_I32()[tm + 32 >> 2],
  tm_gmtoff: GROWABLE_HEAP_I32()[tm + 36 >> 2],
  tm_zone: tm_zone ? UTF8ToString(tm_zone) : ""
 };
 var pattern = UTF8ToString(format);
 var EXPANSION_RULES_1 = {
  "%c": "%a %b %d %H:%M:%S %Y",
  "%D": "%m/%d/%y",
  "%F": "%Y-%m-%d",
  "%h": "%b",
  "%r": "%I:%M:%S %p",
  "%R": "%H:%M",
  "%T": "%H:%M:%S",
  "%x": "%m/%d/%y",
  "%X": "%H:%M:%S",
  "%Ec": "%c",
  "%EC": "%C",
  "%Ex": "%m/%d/%y",
  "%EX": "%H:%M:%S",
  "%Ey": "%y",
  "%EY": "%Y",
  "%Od": "%d",
  "%Oe": "%e",
  "%OH": "%H",
  "%OI": "%I",
  "%Om": "%m",
  "%OM": "%M",
  "%OS": "%S",
  "%Ou": "%u",
  "%OU": "%U",
  "%OV": "%V",
  "%Ow": "%w",
  "%OW": "%W",
  "%Oy": "%y"
 };
 for (var rule in EXPANSION_RULES_1) {
  pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_1[rule]);
 }
 var WEEKDAYS = [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ];
 var MONTHS = [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ];
 function leadingSomething(value, digits, character) {
  var str = typeof value === "number" ? value.toString() : value || "";
  while (str.length < digits) {
   str = character[0] + str;
  }
  return str;
 }
 function leadingNulls(value, digits) {
  return leadingSomething(value, digits, "0");
 }
 function compareByDay(date1, date2) {
  function sgn(value) {
   return value < 0 ? -1 : value > 0 ? 1 : 0;
  }
  var compare;
  if ((compare = sgn(date1.getFullYear() - date2.getFullYear())) === 0) {
   if ((compare = sgn(date1.getMonth() - date2.getMonth())) === 0) {
    compare = sgn(date1.getDate() - date2.getDate());
   }
  }
  return compare;
 }
 function getFirstWeekStartDate(janFourth) {
  switch (janFourth.getDay()) {
  case 0:
   return new Date(janFourth.getFullYear() - 1, 11, 29);

  case 1:
   return janFourth;

  case 2:
   return new Date(janFourth.getFullYear(), 0, 3);

  case 3:
   return new Date(janFourth.getFullYear(), 0, 2);

  case 4:
   return new Date(janFourth.getFullYear(), 0, 1);

  case 5:
   return new Date(janFourth.getFullYear() - 1, 11, 31);

  case 6:
   return new Date(janFourth.getFullYear() - 1, 11, 30);
  }
 }
 function getWeekBasedYear(date) {
  var thisDate = __addDays(new Date(date.tm_year + 1900, 0, 1), date.tm_yday);
  var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
  var janFourthNextYear = new Date(thisDate.getFullYear() + 1, 0, 4);
  var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
  var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
   if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
    return thisDate.getFullYear() + 1;
   } else {
    return thisDate.getFullYear();
   }
  } else {
   return thisDate.getFullYear() - 1;
  }
 }
 var EXPANSION_RULES_2 = {
  "%a": function(date) {
   return WEEKDAYS[date.tm_wday].substring(0, 3);
  },
  "%A": function(date) {
   return WEEKDAYS[date.tm_wday];
  },
  "%b": function(date) {
   return MONTHS[date.tm_mon].substring(0, 3);
  },
  "%B": function(date) {
   return MONTHS[date.tm_mon];
  },
  "%C": function(date) {
   var year = date.tm_year + 1900;
   return leadingNulls(year / 100 | 0, 2);
  },
  "%d": function(date) {
   return leadingNulls(date.tm_mday, 2);
  },
  "%e": function(date) {
   return leadingSomething(date.tm_mday, 2, " ");
  },
  "%g": function(date) {
   return getWeekBasedYear(date).toString().substring(2);
  },
  "%G": function(date) {
   return getWeekBasedYear(date);
  },
  "%H": function(date) {
   return leadingNulls(date.tm_hour, 2);
  },
  "%I": function(date) {
   var twelveHour = date.tm_hour;
   if (twelveHour == 0) twelveHour = 12; else if (twelveHour > 12) twelveHour -= 12;
   return leadingNulls(twelveHour, 2);
  },
  "%j": function(date) {
   return leadingNulls(date.tm_mday + __arraySum(__isLeapYear(date.tm_year + 1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon - 1), 3);
  },
  "%m": function(date) {
   return leadingNulls(date.tm_mon + 1, 2);
  },
  "%M": function(date) {
   return leadingNulls(date.tm_min, 2);
  },
  "%n": function() {
   return "\n";
  },
  "%p": function(date) {
   if (date.tm_hour >= 0 && date.tm_hour < 12) {
    return "AM";
   } else {
    return "PM";
   }
  },
  "%S": function(date) {
   return leadingNulls(date.tm_sec, 2);
  },
  "%t": function() {
   return "\t";
  },
  "%u": function(date) {
   return date.tm_wday || 7;
  },
  "%U": function(date) {
   var janFirst = new Date(date.tm_year + 1900, 0, 1);
   var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7 - janFirst.getDay());
   var endDate = new Date(date.tm_year + 1900, date.tm_mon, date.tm_mday);
   if (compareByDay(firstSunday, endDate) < 0) {
    var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth() - 1) - 31;
    var firstSundayUntilEndJanuary = 31 - firstSunday.getDate();
    var days = firstSundayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
    return leadingNulls(Math.ceil(days / 7), 2);
   }
   return compareByDay(firstSunday, janFirst) === 0 ? "01" : "00";
  },
  "%V": function(date) {
   var janFourthThisYear = new Date(date.tm_year + 1900, 0, 4);
   var janFourthNextYear = new Date(date.tm_year + 1901, 0, 4);
   var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
   var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
   var endDate = __addDays(new Date(date.tm_year + 1900, 0, 1), date.tm_yday);
   if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
    return "53";
   }
   if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
    return "01";
   }
   var daysDifference;
   if (firstWeekStartThisYear.getFullYear() < date.tm_year + 1900) {
    daysDifference = date.tm_yday + 32 - firstWeekStartThisYear.getDate();
   } else {
    daysDifference = date.tm_yday + 1 - firstWeekStartThisYear.getDate();
   }
   return leadingNulls(Math.ceil(daysDifference / 7), 2);
  },
  "%w": function(date) {
   return date.tm_wday;
  },
  "%W": function(date) {
   var janFirst = new Date(date.tm_year, 0, 1);
   var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7 - janFirst.getDay() + 1);
   var endDate = new Date(date.tm_year + 1900, date.tm_mon, date.tm_mday);
   if (compareByDay(firstMonday, endDate) < 0) {
    var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth() - 1) - 31;
    var firstMondayUntilEndJanuary = 31 - firstMonday.getDate();
    var days = firstMondayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
    return leadingNulls(Math.ceil(days / 7), 2);
   }
   return compareByDay(firstMonday, janFirst) === 0 ? "01" : "00";
  },
  "%y": function(date) {
   return (date.tm_year + 1900).toString().substring(2);
  },
  "%Y": function(date) {
   return date.tm_year + 1900;
  },
  "%z": function(date) {
   var off = date.tm_gmtoff;
   var ahead = off >= 0;
   off = Math.abs(off) / 60;
   off = off / 60 * 100 + off % 60;
   return (ahead ? "+" : "-") + String("0000" + off).slice(-4);
  },
  "%Z": function(date) {
   return date.tm_zone;
  },
  "%%": function() {
   return "%";
  }
 };
 for (var rule in EXPANSION_RULES_2) {
  if (pattern.includes(rule)) {
   pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_2[rule](date));
  }
 }
 var bytes = intArrayFromString(pattern, false);
 if (bytes.length > maxsize) {
  return 0;
 }
 writeArrayToMemory(bytes, s);
 return bytes.length - 1;
}

function _strftime_l(s, maxsize, format, tm) {
 return _strftime(s, maxsize, format, tm);
}

function _time(ptr) {
 var ret = Date.now() / 1e3 | 0;
 if (ptr) {
  GROWABLE_HEAP_I32()[ptr >> 2] = ret;
 }
 return ret;
}

function runAndAbortIfError(func) {
 try {
  return func();
 } catch (e) {
  abort(e);
 }
}

var Asyncify = {
 State: {
  Normal: 0,
  Unwinding: 1,
  Rewinding: 2,
  Disabled: 3
 },
 state: 0,
 StackSize: 4096,
 currData: null,
 handleSleepReturnValue: 0,
 exportCallStack: [],
 callStackNameToId: {},
 callStackIdToName: {},
 callStackId: 0,
 asyncPromiseHandlers: null,
 sleepCallbacks: [],
 getCallStackId: function(funcName) {
  var id = Asyncify.callStackNameToId[funcName];
  if (id === undefined) {
   id = Asyncify.callStackId++;
   Asyncify.callStackNameToId[funcName] = id;
   Asyncify.callStackIdToName[id] = funcName;
  }
  return id;
 },
 instrumentWasmImports: function(imports) {
  var ASYNCIFY_IMPORTS = [ "env.invoke_*", "env.__call_main", "env.emscripten_sleep", "env.emscripten_wget", "env.emscripten_wget_data", "env.emscripten_idb_load", "env.emscripten_idb_store", "env.emscripten_idb_delete", "env.emscripten_idb_exists", "env.emscripten_idb_load_blob", "env.emscripten_idb_store_blob", "env.SDL_Delay", "env.emscripten_scan_registers", "env.emscripten_lazy_load_code", "env.emscripten_fiber_swap", "wasi_snapshot_preview1.fd_sync", "env.__wasi_fd_sync", "env._emval_await", "env._dlopen_js", "env.__asyncjs__*" ].map(function(x) {
   return x.split(".")[1];
  });
  for (var x in imports) {
   (function(x) {
    var original = imports[x];
    if (typeof original === "function") {
     imports[x] = function() {
      var originalAsyncifyState = Asyncify.state;
      try {
       return original.apply(null, arguments);
      } finally {
       var isAsyncifyImport = ASYNCIFY_IMPORTS.indexOf(x) >= 0 || x.startsWith("__asyncjs__");
       var changedToDisabled = originalAsyncifyState === Asyncify.State.Normal && Asyncify.state === Asyncify.State.Disabled;
       var ignoredInvoke = x.startsWith("invoke_") && true;
       if (Asyncify.state !== originalAsyncifyState && !isAsyncifyImport && !changedToDisabled && !ignoredInvoke) {
        throw new Error("import " + x + " was not in ASYNCIFY_IMPORTS, but changed the state");
       }
      }
     };
    }
   })(x);
  }
 },
 instrumentWasmExports: function(exports) {
  var ret = {};
  for (var x in exports) {
   (function(x) {
    var original = exports[x];
    if (typeof original === "function") {
     ret[x] = function() {
      Asyncify.exportCallStack.push(x);
      try {
       return original.apply(null, arguments);
      } finally {
       if (!ABORT) {
        var y = Asyncify.exportCallStack.pop();
        assert(y === x);
        Asyncify.maybeStopUnwind();
       }
      }
     };
    } else {
     ret[x] = original;
    }
   })(x);
  }
  return ret;
 },
 maybeStopUnwind: function() {
  if (Asyncify.currData && Asyncify.state === Asyncify.State.Unwinding && Asyncify.exportCallStack.length === 0) {
   runtimeKeepalivePush();
   Asyncify.state = Asyncify.State.Normal;
   runAndAbortIfError(Module["_asyncify_stop_unwind"]);
   if (typeof Fibers !== "undefined") {
    Fibers.trampoline();
   }
  }
 },
 whenDone: function() {
  assert(Asyncify.currData, "Tried to wait for an async operation when none is in progress.");
  assert(!Asyncify.asyncPromiseHandlers, "Cannot have multiple async operations in flight at once");
  return new Promise(function(resolve, reject) {
   Asyncify.asyncPromiseHandlers = {
    resolve: resolve,
    reject: reject
   };
  });
 },
 allocateData: function() {
  var ptr = _malloc(12 + Asyncify.StackSize);
  Asyncify.setDataHeader(ptr, ptr + 12, Asyncify.StackSize);
  Asyncify.setDataRewindFunc(ptr);
  return ptr;
 },
 setDataHeader: function(ptr, stack, stackSize) {
  GROWABLE_HEAP_I32()[ptr >> 2] = stack;
  GROWABLE_HEAP_I32()[ptr + 4 >> 2] = stack + stackSize;
 },
 setDataRewindFunc: function(ptr) {
  var bottomOfCallStack = Asyncify.exportCallStack[0];
  var rewindId = Asyncify.getCallStackId(bottomOfCallStack);
  GROWABLE_HEAP_I32()[ptr + 8 >> 2] = rewindId;
 },
 getDataRewindFunc: function(ptr) {
  var id = GROWABLE_HEAP_I32()[ptr + 8 >> 2];
  var name = Asyncify.callStackIdToName[id];
  var func = Module["asm"][name];
  return func;
 },
 doRewind: function(ptr) {
  var start = Asyncify.getDataRewindFunc(ptr);
  runtimeKeepalivePop();
  return start();
 },
 handleSleep: function(startAsync) {
  assert(Asyncify.state !== Asyncify.State.Disabled, "Asyncify cannot be done during or after the runtime exits");
  if (ABORT) return;
  if (Asyncify.state === Asyncify.State.Normal) {
   var reachedCallback = false;
   var reachedAfterCallback = false;
   startAsync(function(handleSleepReturnValue) {
    assert(!handleSleepReturnValue || typeof handleSleepReturnValue === "number" || typeof handleSleepReturnValue === "boolean");
    if (ABORT) return;
    Asyncify.handleSleepReturnValue = handleSleepReturnValue || 0;
    reachedCallback = true;
    if (!reachedAfterCallback) {
     return;
    }
    assert(!Asyncify.exportCallStack.length, "Waking up (starting to rewind) must be done from JS, without compiled code on the stack.");
    Asyncify.state = Asyncify.State.Rewinding;
    runAndAbortIfError(function() {
     Module["_asyncify_start_rewind"](Asyncify.currData);
    });
    if (typeof Browser !== "undefined" && Browser.mainLoop.func) {
     Browser.mainLoop.resume();
    }
    var asyncWasmReturnValue, isError = false;
    try {
     asyncWasmReturnValue = Asyncify.doRewind(Asyncify.currData);
    } catch (err) {
     asyncWasmReturnValue = err;
     isError = true;
    }
    var handled = false;
    if (!Asyncify.currData) {
     var asyncPromiseHandlers = Asyncify.asyncPromiseHandlers;
     if (asyncPromiseHandlers) {
      Asyncify.asyncPromiseHandlers = null;
      (isError ? asyncPromiseHandlers.reject : asyncPromiseHandlers.resolve)(asyncWasmReturnValue);
      handled = true;
     }
    }
    if (isError && !handled) {
     throw asyncWasmReturnValue;
    }
   });
   reachedAfterCallback = true;
   if (!reachedCallback) {
    Asyncify.state = Asyncify.State.Unwinding;
    Asyncify.currData = Asyncify.allocateData();
    runAndAbortIfError(function() {
     Module["_asyncify_start_unwind"](Asyncify.currData);
    });
    if (typeof Browser !== "undefined" && Browser.mainLoop.func) {
     Browser.mainLoop.pause();
    }
   }
  } else if (Asyncify.state === Asyncify.State.Rewinding) {
   Asyncify.state = Asyncify.State.Normal;
   runAndAbortIfError(Module["_asyncify_stop_rewind"]);
   _free(Asyncify.currData);
   Asyncify.currData = null;
   Asyncify.sleepCallbacks.forEach(function(func) {
    callUserCallback(func);
   });
  } else {
   abort("invalid state: " + Asyncify.state);
  }
  return Asyncify.handleSleepReturnValue;
 },
 handleAsync: function(startAsync) {
  return Asyncify.handleSleep(function(wakeUp) {
   startAsync().then(wakeUp);
  });
 }
};

if (!ENVIRONMENT_IS_PTHREAD) PThread.initMainThreadBlock();

var FSNode = function(parent, name, mode, rdev) {
 if (!parent) {
  parent = this;
 }
 this.parent = parent;
 this.mount = parent.mount;
 this.mounted = null;
 this.id = FS.nextInode++;
 this.name = name;
 this.mode = mode;
 this.node_ops = {};
 this.stream_ops = {};
 this.rdev = rdev;
};

var readMode = 292 | 73;

var writeMode = 146;

Object.defineProperties(FSNode.prototype, {
 read: {
  get: function() {
   return (this.mode & readMode) === readMode;
  },
  set: function(val) {
   val ? this.mode |= readMode : this.mode &= ~readMode;
  }
 },
 write: {
  get: function() {
   return (this.mode & writeMode) === writeMode;
  },
  set: function(val) {
   val ? this.mode |= writeMode : this.mode &= ~writeMode;
  }
 },
 isFolder: {
  get: function() {
   return FS.isDir(this.mode);
  }
 },
 isDevice: {
  get: function() {
   return FS.isChrdev(this.mode);
  }
 }
});

FS.FSNode = FSNode;

FS.staticInit();

Module["FS_createPath"] = FS.createPath;

Module["FS_createDataFile"] = FS.createDataFile;

Module["FS_createPreloadedFile"] = FS.createPreloadedFile;

Module["FS_createLazyFile"] = FS.createLazyFile;

Module["FS_createDevice"] = FS.createDevice;

Module["FS_unlink"] = FS.unlink;

ERRNO_CODES = {
 "EPERM": 63,
 "ENOENT": 44,
 "ESRCH": 71,
 "EINTR": 27,
 "EIO": 29,
 "ENXIO": 60,
 "E2BIG": 1,
 "ENOEXEC": 45,
 "EBADF": 8,
 "ECHILD": 12,
 "EAGAIN": 6,
 "EWOULDBLOCK": 6,
 "ENOMEM": 48,
 "EACCES": 2,
 "EFAULT": 21,
 "ENOTBLK": 105,
 "EBUSY": 10,
 "EEXIST": 20,
 "EXDEV": 75,
 "ENODEV": 43,
 "ENOTDIR": 54,
 "EISDIR": 31,
 "EINVAL": 28,
 "ENFILE": 41,
 "EMFILE": 33,
 "ENOTTY": 59,
 "ETXTBSY": 74,
 "EFBIG": 22,
 "ENOSPC": 51,
 "ESPIPE": 70,
 "EROFS": 69,
 "EMLINK": 34,
 "EPIPE": 64,
 "EDOM": 18,
 "ERANGE": 68,
 "ENOMSG": 49,
 "EIDRM": 24,
 "ECHRNG": 106,
 "EL2NSYNC": 156,
 "EL3HLT": 107,
 "EL3RST": 108,
 "ELNRNG": 109,
 "EUNATCH": 110,
 "ENOCSI": 111,
 "EL2HLT": 112,
 "EDEADLK": 16,
 "ENOLCK": 46,
 "EBADE": 113,
 "EBADR": 114,
 "EXFULL": 115,
 "ENOANO": 104,
 "EBADRQC": 103,
 "EBADSLT": 102,
 "EDEADLOCK": 16,
 "EBFONT": 101,
 "ENOSTR": 100,
 "ENODATA": 116,
 "ETIME": 117,
 "ENOSR": 118,
 "ENONET": 119,
 "ENOPKG": 120,
 "EREMOTE": 121,
 "ENOLINK": 47,
 "EADV": 122,
 "ESRMNT": 123,
 "ECOMM": 124,
 "EPROTO": 65,
 "EMULTIHOP": 36,
 "EDOTDOT": 125,
 "EBADMSG": 9,
 "ENOTUNIQ": 126,
 "EBADFD": 127,
 "EREMCHG": 128,
 "ELIBACC": 129,
 "ELIBBAD": 130,
 "ELIBSCN": 131,
 "ELIBMAX": 132,
 "ELIBEXEC": 133,
 "ENOSYS": 52,
 "ENOTEMPTY": 55,
 "ENAMETOOLONG": 37,
 "ELOOP": 32,
 "EOPNOTSUPP": 138,
 "EPFNOSUPPORT": 139,
 "ECONNRESET": 15,
 "ENOBUFS": 42,
 "EAFNOSUPPORT": 5,
 "EPROTOTYPE": 67,
 "ENOTSOCK": 57,
 "ENOPROTOOPT": 50,
 "ESHUTDOWN": 140,
 "ECONNREFUSED": 14,
 "EADDRINUSE": 3,
 "ECONNABORTED": 13,
 "ENETUNREACH": 40,
 "ENETDOWN": 38,
 "ETIMEDOUT": 73,
 "EHOSTDOWN": 142,
 "EHOSTUNREACH": 23,
 "EINPROGRESS": 26,
 "EALREADY": 7,
 "EDESTADDRREQ": 17,
 "EMSGSIZE": 35,
 "EPROTONOSUPPORT": 66,
 "ESOCKTNOSUPPORT": 137,
 "EADDRNOTAVAIL": 4,
 "ENETRESET": 39,
 "EISCONN": 30,
 "ENOTCONN": 53,
 "ETOOMANYREFS": 141,
 "EUSERS": 136,
 "EDQUOT": 19,
 "ESTALE": 72,
 "ENOTSUP": 138,
 "ENOMEDIUM": 148,
 "EILSEQ": 25,
 "EOVERFLOW": 61,
 "ECANCELED": 11,
 "ENOTRECOVERABLE": 56,
 "EOWNERDEAD": 62,
 "ESTRPIPE": 135
};

Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas) {
 Browser.requestFullscreen(lockPointer, resizeCanvas);
};

Module["requestFullScreen"] = function Module_requestFullScreen() {
 Browser.requestFullScreen();
};

Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) {
 Browser.requestAnimationFrame(func);
};

Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) {
 Browser.setCanvasSize(width, height, noUpdates);
};

Module["pauseMainLoop"] = function Module_pauseMainLoop() {
 Browser.mainLoop.pause();
};

Module["resumeMainLoop"] = function Module_resumeMainLoop() {
 Browser.mainLoop.resume();
};

Module["getUserMedia"] = function Module_getUserMedia() {
 Browser.getUserMedia();
};

Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) {
 return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes);
};

var GLctx;

for (var i = 0; i < 32; ++i) tempFixedLengthArray.push(new Array(i));

var miniTempWebGLFloatBuffersStorage = new Float32Array(288);

for (var i = 0; i < 288; ++i) {
 miniTempWebGLFloatBuffers[i] = miniTempWebGLFloatBuffersStorage.subarray(0, i + 1);
}

var __miniTempWebGLIntBuffersStorage = new Int32Array(288);

for (var i = 0; i < 288; ++i) {
 __miniTempWebGLIntBuffers[i] = __miniTempWebGLIntBuffersStorage.subarray(0, i + 1);
}

if (!ENVIRONMENT_IS_PTHREAD) Fetch.staticInit();

var proxiedFunctionTable = [ null, exitOnMainThread, _atexit, _tzset_impl, ___syscall_access, ___syscall_dup3, ___syscall_fcntl64, ___syscall_fstat64, ___syscall_fstatat64, ___syscall_getdents64, ___syscall_ioctl, ___syscall_lstat64, ___syscall_mkdir, ___syscall_open, ___syscall_rename, ___syscall_rmdir, ___syscall_stat64, ___syscall_unlink, _eglBindAPI, _eglChooseConfig, _eglCreateContext, _eglCreateWindowSurface, _eglDestroyContext, _eglDestroySurface, _eglGetConfigAttrib, _eglGetDisplay, _eglGetError, _eglInitialize, _eglMakeCurrent, _eglQueryString, _eglSwapBuffers, _eglSwapInterval, _eglTerminate, _eglWaitClient, _eglWaitNative, _emscripten_exit_fullscreen, _emscripten_get_canvas_element_size_main_thread, _emscripten_set_canvas_element_size_main_thread, _emscripten_exit_pointerlock, _emscripten_get_device_pixel_ratio, _emscripten_get_element_css_size, _emscripten_get_gamepad_status, _emscripten_get_num_gamepads, _emscripten_request_fullscreen_strategy, _emscripten_request_pointerlock, _emscripten_sample_gamepad_data, _emscripten_set_beforeunload_callback_on_thread, _emscripten_set_blur_callback_on_thread, _emscripten_set_element_css_size, _emscripten_set_focus_callback_on_thread, _emscripten_set_fullscreenchange_callback_on_thread, _emscripten_set_gamepadconnected_callback_on_thread, _emscripten_set_gamepaddisconnected_callback_on_thread, _emscripten_set_keydown_callback_on_thread, _emscripten_set_keypress_callback_on_thread, _emscripten_set_keyup_callback_on_thread, _emscripten_set_mousedown_callback_on_thread, _emscripten_set_mouseenter_callback_on_thread, _emscripten_set_mouseleave_callback_on_thread, _emscripten_set_mousemove_callback_on_thread, _emscripten_set_mouseup_callback_on_thread, _emscripten_set_pointerlockchange_callback_on_thread, _emscripten_set_resize_callback_on_thread, _emscripten_set_touchcancel_callback_on_thread, _emscripten_set_touchend_callback_on_thread, _emscripten_set_touchmove_callback_on_thread, _emscripten_set_touchstart_callback_on_thread, _emscripten_set_visibilitychange_callback_on_thread, _emscripten_set_wheel_callback_on_thread, _environ_get, _environ_sizes_get, _fd_close, _fd_read, _fd_seek, _fd_write ];

var ASSERTIONS = true;

function intArrayFromString(stringy, dontAddNull, length) {
 var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
 var u8array = new Array(len);
 var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
 if (dontAddNull) u8array.length = numBytesWritten;
 return u8array;
}

function intArrayToString(array) {
 var ret = [];
 for (var i = 0; i < array.length; i++) {
  var chr = array[i];
  if (chr > 255) {
   if (ASSERTIONS) {
    assert(false, "Character code " + chr + " (" + String.fromCharCode(chr) + ")  at offset " + i + " not in 0x00-0xFF.");
   }
   chr &= 255;
  }
  ret.push(String.fromCharCode(chr));
 }
 return ret.join("");
}

var decodeBase64 = typeof atob === "function" ? atob : function(input) {
 var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
 var output = "";
 var chr1, chr2, chr3;
 var enc1, enc2, enc3, enc4;
 var i = 0;
 input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
 do {
  enc1 = keyStr.indexOf(input.charAt(i++));
  enc2 = keyStr.indexOf(input.charAt(i++));
  enc3 = keyStr.indexOf(input.charAt(i++));
  enc4 = keyStr.indexOf(input.charAt(i++));
  chr1 = enc1 << 2 | enc2 >> 4;
  chr2 = (enc2 & 15) << 4 | enc3 >> 2;
  chr3 = (enc3 & 3) << 6 | enc4;
  output = output + String.fromCharCode(chr1);
  if (enc3 !== 64) {
   output = output + String.fromCharCode(chr2);
  }
  if (enc4 !== 64) {
   output = output + String.fromCharCode(chr3);
  }
 } while (i < input.length);
 return output;
};

function intArrayFromBase64(s) {
 if (typeof ENVIRONMENT_IS_NODE === "boolean" && ENVIRONMENT_IS_NODE) {
  var buf = Buffer.from(s, "base64");
  return new Uint8Array(buf["buffer"], buf["byteOffset"], buf["byteLength"]);
 }
 try {
  var decoded = decodeBase64(s);
  var bytes = new Uint8Array(decoded.length);
  for (var i = 0; i < decoded.length; ++i) {
   bytes[i] = decoded.charCodeAt(i);
  }
  return bytes;
 } catch (_) {
  throw new Error("Converting base64 string to bytes failed.");
 }
}

function tryParseAsDataURI(filename) {
 if (!isDataURI(filename)) {
  return;
 }
 return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}

var asmLibraryArg = {
 "__assert_fail": ___assert_fail,
 "__call_sighandler": ___call_sighandler,
 "__clock_gettime": ___clock_gettime,
 "__cxa_allocate_exception": ___cxa_allocate_exception,
 "__cxa_atexit": ___cxa_atexit,
 "__cxa_begin_catch": ___cxa_begin_catch,
 "__cxa_current_primary_exception": ___cxa_current_primary_exception,
 "__cxa_decrement_exception_refcount": ___cxa_decrement_exception_refcount,
 "__cxa_end_catch": ___cxa_end_catch,
 "__cxa_find_matching_catch_2": ___cxa_find_matching_catch_2,
 "__cxa_find_matching_catch_3": ___cxa_find_matching_catch_3,
 "__cxa_find_matching_catch_4": ___cxa_find_matching_catch_4,
 "__cxa_find_matching_catch_5": ___cxa_find_matching_catch_5,
 "__cxa_free_exception": ___cxa_free_exception,
 "__cxa_increment_exception_refcount": ___cxa_increment_exception_refcount,
 "__cxa_rethrow": ___cxa_rethrow,
 "__cxa_rethrow_primary_exception": ___cxa_rethrow_primary_exception,
 "__cxa_throw": ___cxa_throw,
 "__cxa_uncaught_exceptions": ___cxa_uncaught_exceptions,
 "__emscripten_init_main_thread_js": ___emscripten_init_main_thread_js,
 "__emscripten_thread_cleanup": ___emscripten_thread_cleanup,
 "__gmtime_r": ___gmtime_r,
 "__localtime_r": ___localtime_r,
 "__pthread_create_js": ___pthread_create_js,
 "__pthread_detached_exit": ___pthread_detached_exit,
 "__resumeException": ___resumeException,
 "__syscall_access": ___syscall_access,
 "__syscall_dup3": ___syscall_dup3,
 "__syscall_fcntl64": ___syscall_fcntl64,
 "__syscall_fstat64": ___syscall_fstat64,
 "__syscall_fstatat64": ___syscall_fstatat64,
 "__syscall_getdents64": ___syscall_getdents64,
 "__syscall_ioctl": ___syscall_ioctl,
 "__syscall_lstat64": ___syscall_lstat64,
 "__syscall_mkdir": ___syscall_mkdir,
 "__syscall_open": ___syscall_open,
 "__syscall_rename": ___syscall_rename,
 "__syscall_rmdir": ___syscall_rmdir,
 "__syscall_stat64": ___syscall_stat64,
 "__syscall_unlink": ___syscall_unlink,
 "_dlopen_js": __dlopen_js,
 "_dlsym_js": __dlsym_js,
 "_emscripten_default_pthread_stack_size": __emscripten_default_pthread_stack_size,
 "_emscripten_fetch_free": __emscripten_fetch_free,
 "_emscripten_fetch_get_response_headers": __emscripten_fetch_get_response_headers,
 "_emscripten_fetch_get_response_headers_length": __emscripten_fetch_get_response_headers_length,
 "_emscripten_notify_thread_queue": __emscripten_notify_thread_queue,
 "_emscripten_throw_longjmp": __emscripten_throw_longjmp,
 "abort": _abort,
 "clock": _clock,
 "clock_gettime": _clock_gettime,
 "difftime": _difftime,
 "eglBindAPI": _eglBindAPI,
 "eglChooseConfig": _eglChooseConfig,
 "eglCreateContext": _eglCreateContext,
 "eglCreateWindowSurface": _eglCreateWindowSurface,
 "eglDestroyContext": _eglDestroyContext,
 "eglDestroySurface": _eglDestroySurface,
 "eglGetConfigAttrib": _eglGetConfigAttrib,
 "eglGetDisplay": _eglGetDisplay,
 "eglGetError": _eglGetError,
 "eglInitialize": _eglInitialize,
 "eglMakeCurrent": _eglMakeCurrent,
 "eglQueryString": _eglQueryString,
 "eglSwapBuffers": _eglSwapBuffers,
 "eglSwapInterval": _eglSwapInterval,
 "eglTerminate": _eglTerminate,
 "eglWaitGL": _eglWaitGL,
 "eglWaitNative": _eglWaitNative,
 "emscripten_asm_const_int": _emscripten_asm_const_int,
 "emscripten_check_blocking_allowed": _emscripten_check_blocking_allowed,
 "emscripten_conditional_set_current_thread_status": _emscripten_conditional_set_current_thread_status,
 "emscripten_exit_fullscreen": _emscripten_exit_fullscreen,
 "emscripten_exit_pointerlock": _emscripten_exit_pointerlock,
 "emscripten_futex_wait": _emscripten_futex_wait,
 "emscripten_futex_wake": _emscripten_futex_wake,
 "emscripten_get_device_pixel_ratio": _emscripten_get_device_pixel_ratio,
 "emscripten_get_element_css_size": _emscripten_get_element_css_size,
 "emscripten_get_gamepad_status": _emscripten_get_gamepad_status,
 "emscripten_get_now": _emscripten_get_now,
 "emscripten_get_num_gamepads": _emscripten_get_num_gamepads,
 "emscripten_glActiveTexture": _emscripten_glActiveTexture,
 "emscripten_glAttachShader": _emscripten_glAttachShader,
 "emscripten_glBeginQueryEXT": _emscripten_glBeginQueryEXT,
 "emscripten_glBindAttribLocation": _emscripten_glBindAttribLocation,
 "emscripten_glBindBuffer": _emscripten_glBindBuffer,
 "emscripten_glBindFramebuffer": _emscripten_glBindFramebuffer,
 "emscripten_glBindRenderbuffer": _emscripten_glBindRenderbuffer,
 "emscripten_glBindTexture": _emscripten_glBindTexture,
 "emscripten_glBindVertexArrayOES": _emscripten_glBindVertexArrayOES,
 "emscripten_glBlendColor": _emscripten_glBlendColor,
 "emscripten_glBlendEquation": _emscripten_glBlendEquation,
 "emscripten_glBlendEquationSeparate": _emscripten_glBlendEquationSeparate,
 "emscripten_glBlendFunc": _emscripten_glBlendFunc,
 "emscripten_glBlendFuncSeparate": _emscripten_glBlendFuncSeparate,
 "emscripten_glBufferData": _emscripten_glBufferData,
 "emscripten_glBufferSubData": _emscripten_glBufferSubData,
 "emscripten_glCheckFramebufferStatus": _emscripten_glCheckFramebufferStatus,
 "emscripten_glClear": _emscripten_glClear,
 "emscripten_glClearColor": _emscripten_glClearColor,
 "emscripten_glClearDepthf": _emscripten_glClearDepthf,
 "emscripten_glClearStencil": _emscripten_glClearStencil,
 "emscripten_glColorMask": _emscripten_glColorMask,
 "emscripten_glCompileShader": _emscripten_glCompileShader,
 "emscripten_glCompressedTexImage2D": _emscripten_glCompressedTexImage2D,
 "emscripten_glCompressedTexSubImage2D": _emscripten_glCompressedTexSubImage2D,
 "emscripten_glCopyTexImage2D": _emscripten_glCopyTexImage2D,
 "emscripten_glCopyTexSubImage2D": _emscripten_glCopyTexSubImage2D,
 "emscripten_glCreateProgram": _emscripten_glCreateProgram,
 "emscripten_glCreateShader": _emscripten_glCreateShader,
 "emscripten_glCullFace": _emscripten_glCullFace,
 "emscripten_glDeleteBuffers": _emscripten_glDeleteBuffers,
 "emscripten_glDeleteFramebuffers": _emscripten_glDeleteFramebuffers,
 "emscripten_glDeleteProgram": _emscripten_glDeleteProgram,
 "emscripten_glDeleteQueriesEXT": _emscripten_glDeleteQueriesEXT,
 "emscripten_glDeleteRenderbuffers": _emscripten_glDeleteRenderbuffers,
 "emscripten_glDeleteShader": _emscripten_glDeleteShader,
 "emscripten_glDeleteTextures": _emscripten_glDeleteTextures,
 "emscripten_glDeleteVertexArraysOES": _emscripten_glDeleteVertexArraysOES,
 "emscripten_glDepthFunc": _emscripten_glDepthFunc,
 "emscripten_glDepthMask": _emscripten_glDepthMask,
 "emscripten_glDepthRangef": _emscripten_glDepthRangef,
 "emscripten_glDetachShader": _emscripten_glDetachShader,
 "emscripten_glDisable": _emscripten_glDisable,
 "emscripten_glDisableVertexAttribArray": _emscripten_glDisableVertexAttribArray,
 "emscripten_glDrawArrays": _emscripten_glDrawArrays,
 "emscripten_glDrawArraysInstancedANGLE": _emscripten_glDrawArraysInstancedANGLE,
 "emscripten_glDrawBuffersWEBGL": _emscripten_glDrawBuffersWEBGL,
 "emscripten_glDrawElements": _emscripten_glDrawElements,
 "emscripten_glDrawElementsInstancedANGLE": _emscripten_glDrawElementsInstancedANGLE,
 "emscripten_glEnable": _emscripten_glEnable,
 "emscripten_glEnableVertexAttribArray": _emscripten_glEnableVertexAttribArray,
 "emscripten_glEndQueryEXT": _emscripten_glEndQueryEXT,
 "emscripten_glFinish": _emscripten_glFinish,
 "emscripten_glFlush": _emscripten_glFlush,
 "emscripten_glFramebufferRenderbuffer": _emscripten_glFramebufferRenderbuffer,
 "emscripten_glFramebufferTexture2D": _emscripten_glFramebufferTexture2D,
 "emscripten_glFrontFace": _emscripten_glFrontFace,
 "emscripten_glGenBuffers": _emscripten_glGenBuffers,
 "emscripten_glGenFramebuffers": _emscripten_glGenFramebuffers,
 "emscripten_glGenQueriesEXT": _emscripten_glGenQueriesEXT,
 "emscripten_glGenRenderbuffers": _emscripten_glGenRenderbuffers,
 "emscripten_glGenTextures": _emscripten_glGenTextures,
 "emscripten_glGenVertexArraysOES": _emscripten_glGenVertexArraysOES,
 "emscripten_glGenerateMipmap": _emscripten_glGenerateMipmap,
 "emscripten_glGetActiveAttrib": _emscripten_glGetActiveAttrib,
 "emscripten_glGetActiveUniform": _emscripten_glGetActiveUniform,
 "emscripten_glGetAttachedShaders": _emscripten_glGetAttachedShaders,
 "emscripten_glGetAttribLocation": _emscripten_glGetAttribLocation,
 "emscripten_glGetBooleanv": _emscripten_glGetBooleanv,
 "emscripten_glGetBufferParameteriv": _emscripten_glGetBufferParameteriv,
 "emscripten_glGetError": _emscripten_glGetError,
 "emscripten_glGetFloatv": _emscripten_glGetFloatv,
 "emscripten_glGetFramebufferAttachmentParameteriv": _emscripten_glGetFramebufferAttachmentParameteriv,
 "emscripten_glGetIntegerv": _emscripten_glGetIntegerv,
 "emscripten_glGetProgramInfoLog": _emscripten_glGetProgramInfoLog,
 "emscripten_glGetProgramiv": _emscripten_glGetProgramiv,
 "emscripten_glGetQueryObjecti64vEXT": _emscripten_glGetQueryObjecti64vEXT,
 "emscripten_glGetQueryObjectivEXT": _emscripten_glGetQueryObjectivEXT,
 "emscripten_glGetQueryObjectui64vEXT": _emscripten_glGetQueryObjectui64vEXT,
 "emscripten_glGetQueryObjectuivEXT": _emscripten_glGetQueryObjectuivEXT,
 "emscripten_glGetQueryivEXT": _emscripten_glGetQueryivEXT,
 "emscripten_glGetRenderbufferParameteriv": _emscripten_glGetRenderbufferParameteriv,
 "emscripten_glGetShaderInfoLog": _emscripten_glGetShaderInfoLog,
 "emscripten_glGetShaderPrecisionFormat": _emscripten_glGetShaderPrecisionFormat,
 "emscripten_glGetShaderSource": _emscripten_glGetShaderSource,
 "emscripten_glGetShaderiv": _emscripten_glGetShaderiv,
 "emscripten_glGetString": _emscripten_glGetString,
 "emscripten_glGetTexParameterfv": _emscripten_glGetTexParameterfv,
 "emscripten_glGetTexParameteriv": _emscripten_glGetTexParameteriv,
 "emscripten_glGetUniformLocation": _emscripten_glGetUniformLocation,
 "emscripten_glGetUniformfv": _emscripten_glGetUniformfv,
 "emscripten_glGetUniformiv": _emscripten_glGetUniformiv,
 "emscripten_glGetVertexAttribPointerv": _emscripten_glGetVertexAttribPointerv,
 "emscripten_glGetVertexAttribfv": _emscripten_glGetVertexAttribfv,
 "emscripten_glGetVertexAttribiv": _emscripten_glGetVertexAttribiv,
 "emscripten_glHint": _emscripten_glHint,
 "emscripten_glIsBuffer": _emscripten_glIsBuffer,
 "emscripten_glIsEnabled": _emscripten_glIsEnabled,
 "emscripten_glIsFramebuffer": _emscripten_glIsFramebuffer,
 "emscripten_glIsProgram": _emscripten_glIsProgram,
 "emscripten_glIsQueryEXT": _emscripten_glIsQueryEXT,
 "emscripten_glIsRenderbuffer": _emscripten_glIsRenderbuffer,
 "emscripten_glIsShader": _emscripten_glIsShader,
 "emscripten_glIsTexture": _emscripten_glIsTexture,
 "emscripten_glIsVertexArrayOES": _emscripten_glIsVertexArrayOES,
 "emscripten_glLineWidth": _emscripten_glLineWidth,
 "emscripten_glLinkProgram": _emscripten_glLinkProgram,
 "emscripten_glPixelStorei": _emscripten_glPixelStorei,
 "emscripten_glPolygonOffset": _emscripten_glPolygonOffset,
 "emscripten_glQueryCounterEXT": _emscripten_glQueryCounterEXT,
 "emscripten_glReadPixels": _emscripten_glReadPixels,
 "emscripten_glReleaseShaderCompiler": _emscripten_glReleaseShaderCompiler,
 "emscripten_glRenderbufferStorage": _emscripten_glRenderbufferStorage,
 "emscripten_glSampleCoverage": _emscripten_glSampleCoverage,
 "emscripten_glScissor": _emscripten_glScissor,
 "emscripten_glShaderBinary": _emscripten_glShaderBinary,
 "emscripten_glShaderSource": _emscripten_glShaderSource,
 "emscripten_glStencilFunc": _emscripten_glStencilFunc,
 "emscripten_glStencilFuncSeparate": _emscripten_glStencilFuncSeparate,
 "emscripten_glStencilMask": _emscripten_glStencilMask,
 "emscripten_glStencilMaskSeparate": _emscripten_glStencilMaskSeparate,
 "emscripten_glStencilOp": _emscripten_glStencilOp,
 "emscripten_glStencilOpSeparate": _emscripten_glStencilOpSeparate,
 "emscripten_glTexImage2D": _emscripten_glTexImage2D,
 "emscripten_glTexParameterf": _emscripten_glTexParameterf,
 "emscripten_glTexParameterfv": _emscripten_glTexParameterfv,
 "emscripten_glTexParameteri": _emscripten_glTexParameteri,
 "emscripten_glTexParameteriv": _emscripten_glTexParameteriv,
 "emscripten_glTexSubImage2D": _emscripten_glTexSubImage2D,
 "emscripten_glUniform1f": _emscripten_glUniform1f,
 "emscripten_glUniform1fv": _emscripten_glUniform1fv,
 "emscripten_glUniform1i": _emscripten_glUniform1i,
 "emscripten_glUniform1iv": _emscripten_glUniform1iv,
 "emscripten_glUniform2f": _emscripten_glUniform2f,
 "emscripten_glUniform2fv": _emscripten_glUniform2fv,
 "emscripten_glUniform2i": _emscripten_glUniform2i,
 "emscripten_glUniform2iv": _emscripten_glUniform2iv,
 "emscripten_glUniform3f": _emscripten_glUniform3f,
 "emscripten_glUniform3fv": _emscripten_glUniform3fv,
 "emscripten_glUniform3i": _emscripten_glUniform3i,
 "emscripten_glUniform3iv": _emscripten_glUniform3iv,
 "emscripten_glUniform4f": _emscripten_glUniform4f,
 "emscripten_glUniform4fv": _emscripten_glUniform4fv,
 "emscripten_glUniform4i": _emscripten_glUniform4i,
 "emscripten_glUniform4iv": _emscripten_glUniform4iv,
 "emscripten_glUniformMatrix2fv": _emscripten_glUniformMatrix2fv,
 "emscripten_glUniformMatrix3fv": _emscripten_glUniformMatrix3fv,
 "emscripten_glUniformMatrix4fv": _emscripten_glUniformMatrix4fv,
 "emscripten_glUseProgram": _emscripten_glUseProgram,
 "emscripten_glValidateProgram": _emscripten_glValidateProgram,
 "emscripten_glVertexAttrib1f": _emscripten_glVertexAttrib1f,
 "emscripten_glVertexAttrib1fv": _emscripten_glVertexAttrib1fv,
 "emscripten_glVertexAttrib2f": _emscripten_glVertexAttrib2f,
 "emscripten_glVertexAttrib2fv": _emscripten_glVertexAttrib2fv,
 "emscripten_glVertexAttrib3f": _emscripten_glVertexAttrib3f,
 "emscripten_glVertexAttrib3fv": _emscripten_glVertexAttrib3fv,
 "emscripten_glVertexAttrib4f": _emscripten_glVertexAttrib4f,
 "emscripten_glVertexAttrib4fv": _emscripten_glVertexAttrib4fv,
 "emscripten_glVertexAttribDivisorANGLE": _emscripten_glVertexAttribDivisorANGLE,
 "emscripten_glVertexAttribPointer": _emscripten_glVertexAttribPointer,
 "emscripten_glViewport": _emscripten_glViewport,
 "emscripten_has_asyncify": _emscripten_has_asyncify,
 "emscripten_memcpy_big": _emscripten_memcpy_big,
 "emscripten_receive_on_main_thread_js": _emscripten_receive_on_main_thread_js,
 "emscripten_request_fullscreen_strategy": _emscripten_request_fullscreen_strategy,
 "emscripten_request_pointerlock": _emscripten_request_pointerlock,
 "emscripten_resize_heap": _emscripten_resize_heap,
 "emscripten_sample_gamepad_data": _emscripten_sample_gamepad_data,
 "emscripten_set_beforeunload_callback_on_thread": _emscripten_set_beforeunload_callback_on_thread,
 "emscripten_set_blur_callback_on_thread": _emscripten_set_blur_callback_on_thread,
 "emscripten_set_canvas_element_size": _emscripten_set_canvas_element_size,
 "emscripten_set_current_thread_status": _emscripten_set_current_thread_status,
 "emscripten_set_element_css_size": _emscripten_set_element_css_size,
 "emscripten_set_focus_callback_on_thread": _emscripten_set_focus_callback_on_thread,
 "emscripten_set_fullscreenchange_callback_on_thread": _emscripten_set_fullscreenchange_callback_on_thread,
 "emscripten_set_gamepadconnected_callback_on_thread": _emscripten_set_gamepadconnected_callback_on_thread,
 "emscripten_set_gamepaddisconnected_callback_on_thread": _emscripten_set_gamepaddisconnected_callback_on_thread,
 "emscripten_set_keydown_callback_on_thread": _emscripten_set_keydown_callback_on_thread,
 "emscripten_set_keypress_callback_on_thread": _emscripten_set_keypress_callback_on_thread,
 "emscripten_set_keyup_callback_on_thread": _emscripten_set_keyup_callback_on_thread,
 "emscripten_set_main_loop": _emscripten_set_main_loop,
 "emscripten_set_mousedown_callback_on_thread": _emscripten_set_mousedown_callback_on_thread,
 "emscripten_set_mouseenter_callback_on_thread": _emscripten_set_mouseenter_callback_on_thread,
 "emscripten_set_mouseleave_callback_on_thread": _emscripten_set_mouseleave_callback_on_thread,
 "emscripten_set_mousemove_callback_on_thread": _emscripten_set_mousemove_callback_on_thread,
 "emscripten_set_mouseup_callback_on_thread": _emscripten_set_mouseup_callback_on_thread,
 "emscripten_set_pointerlockchange_callback_on_thread": _emscripten_set_pointerlockchange_callback_on_thread,
 "emscripten_set_resize_callback_on_thread": _emscripten_set_resize_callback_on_thread,
 "emscripten_set_timeout": _emscripten_set_timeout,
 "emscripten_set_touchcancel_callback_on_thread": _emscripten_set_touchcancel_callback_on_thread,
 "emscripten_set_touchend_callback_on_thread": _emscripten_set_touchend_callback_on_thread,
 "emscripten_set_touchmove_callback_on_thread": _emscripten_set_touchmove_callback_on_thread,
 "emscripten_set_touchstart_callback_on_thread": _emscripten_set_touchstart_callback_on_thread,
 "emscripten_set_visibilitychange_callback_on_thread": _emscripten_set_visibilitychange_callback_on_thread,
 "emscripten_set_wheel_callback_on_thread": _emscripten_set_wheel_callback_on_thread,
 "emscripten_sleep": _emscripten_sleep,
 "emscripten_start_fetch": _emscripten_start_fetch,
 "emscripten_unwind_to_js_event_loop": _emscripten_unwind_to_js_event_loop,
 "emscripten_webgl_create_context": _emscripten_webgl_create_context,
 "environ_get": _environ_get,
 "environ_sizes_get": _environ_sizes_get,
 "exit": _exit,
 "fd_close": _fd_close,
 "fd_read": _fd_read,
 "fd_seek": _fd_seek,
 "fd_write": _fd_write,
 "getTempRet0": _getTempRet0,
 "gettimeofday": _gettimeofday,
 "invoke_d": invoke_d,
 "invoke_dii": invoke_dii,
 "invoke_diid": invoke_diid,
 "invoke_diii": invoke_diii,
 "invoke_diiiii": invoke_diiiii,
 "invoke_fi": invoke_fi,
 "invoke_fiii": invoke_fiii,
 "invoke_i": invoke_i,
 "invoke_ii": invoke_ii,
 "invoke_iid": invoke_iid,
 "invoke_iidii": invoke_iidii,
 "invoke_iif": invoke_iif,
 "invoke_iiffi": invoke_iiffi,
 "invoke_iii": invoke_iii,
 "invoke_iiii": invoke_iiii,
 "invoke_iiiii": invoke_iiiii,
 "invoke_iiiiid": invoke_iiiiid,
 "invoke_iiiiii": invoke_iiiiii,
 "invoke_iiiiiii": invoke_iiiiiii,
 "invoke_iiiiiiii": invoke_iiiiiiii,
 "invoke_iiiiiiiii": invoke_iiiiiiiii,
 "invoke_iiiiiiiiii": invoke_iiiiiiiiii,
 "invoke_iiiiiiiiiii": invoke_iiiiiiiiiii,
 "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii,
 "invoke_iiiiiiiiiiiii": invoke_iiiiiiiiiiiii,
 "invoke_iiiiij": invoke_iiiiij,
 "invoke_iiiiijj": invoke_iiiiijj,
 "invoke_iij": invoke_iij,
 "invoke_iijj": invoke_iijj,
 "invoke_ij": invoke_ij,
 "invoke_ijiiiiiii": invoke_ijiiiiiii,
 "invoke_j": invoke_j,
 "invoke_ji": invoke_ji,
 "invoke_jii": invoke_jii,
 "invoke_jiiii": invoke_jiiii,
 "invoke_v": invoke_v,
 "invoke_vi": invoke_vi,
 "invoke_vid": invoke_vid,
 "invoke_vii": invoke_vii,
 "invoke_viii": invoke_viii,
 "invoke_viiii": invoke_viiii,
 "invoke_viiiii": invoke_viiiii,
 "invoke_viiiiii": invoke_viiiiii,
 "invoke_viiiiiii": invoke_viiiiiii,
 "invoke_viiiiiiii": invoke_viiiiiiii,
 "invoke_viiiiiiiiii": invoke_viiiiiiiiii,
 "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii,
 "invoke_viijii": invoke_viijii,
 "invoke_vij": invoke_vij,
 "llvm_eh_typeid_for": _llvm_eh_typeid_for,
 "localtime_r": _localtime_r,
 "memory": wasmMemory,
 "mktime": _mktime,
 "setTempRet0": _setTempRet0,
 "strftime": _strftime,
 "strftime_l": _strftime_l,
 "syncfs": syncfs,
 "time": _time,
 "tzset": _tzset
};

Asyncify.instrumentWasmImports(asmLibraryArg);

var asm = createWasm();

var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");

var _memcpy = Module["_memcpy"] = createExportWrapper("memcpy");

var _malloc = Module["_malloc"] = createExportWrapper("malloc");

var _saveSetjmp = Module["_saveSetjmp"] = createExportWrapper("saveSetjmp");

var _free = Module["_free"] = createExportWrapper("free");

var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location");

var _fflush = Module["_fflush"] = createExportWrapper("fflush");

var _main = Module["_main"] = createExportWrapper("main");

var _pthread_self = Module["_pthread_self"] = createExportWrapper("pthread_self");

var _selectRenderTarget = Module["_selectRenderTarget"] = createExportWrapper("selectRenderTarget");

var _getRenderTargetName = Module["_getRenderTargetName"] = createExportWrapper("getRenderTargetName");

var _emscripten_tls_init = Module["_emscripten_tls_init"] = createExportWrapper("emscripten_tls_init");

var _emscripten_current_thread_process_queued_calls = Module["_emscripten_current_thread_process_queued_calls"] = createExportWrapper("emscripten_current_thread_process_queued_calls");

var _emscripten_main_browser_thread_id = Module["_emscripten_main_browser_thread_id"] = createExportWrapper("emscripten_main_browser_thread_id");

var _emscripten_sync_run_in_main_thread_2 = Module["_emscripten_sync_run_in_main_thread_2"] = createExportWrapper("emscripten_sync_run_in_main_thread_2");

var _emscripten_sync_run_in_main_thread_4 = Module["_emscripten_sync_run_in_main_thread_4"] = createExportWrapper("emscripten_sync_run_in_main_thread_4");

var _emscripten_main_thread_process_queued_calls = Module["_emscripten_main_thread_process_queued_calls"] = createExportWrapper("emscripten_main_thread_process_queued_calls");

var _emscripten_run_in_main_runtime_thread_js = Module["_emscripten_run_in_main_runtime_thread_js"] = createExportWrapper("emscripten_run_in_main_runtime_thread_js");

var __emscripten_call_on_thread = Module["__emscripten_call_on_thread"] = createExportWrapper("_emscripten_call_on_thread");

var ___emscripten_init_main_thread = Module["___emscripten_init_main_thread"] = createExportWrapper("__emscripten_init_main_thread");

var _emscripten_stack_get_base = Module["_emscripten_stack_get_base"] = function() {
 return (_emscripten_stack_get_base = Module["_emscripten_stack_get_base"] = Module["asm"]["emscripten_stack_get_base"]).apply(null, arguments);
};

var _emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = function() {
 return (_emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = Module["asm"]["emscripten_stack_get_end"]).apply(null, arguments);
};

var __emscripten_thread_free_data = Module["__emscripten_thread_free_data"] = createExportWrapper("_emscripten_thread_free_data");

var __emscripten_thread_exit = Module["__emscripten_thread_exit"] = createExportWrapper("_emscripten_thread_exit");

var _memalign = Module["_memalign"] = createExportWrapper("memalign");

var __emscripten_thread_init = Module["__emscripten_thread_init"] = createExportWrapper("_emscripten_thread_init");

var _pthread_testcancel = Module["_pthread_testcancel"] = createExportWrapper("pthread_testcancel");

var _htons = Module["_htons"] = createExportWrapper("htons");

var _ntohs = Module["_ntohs"] = createExportWrapper("ntohs");

var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = createExportWrapper("emscripten_get_global_libc");

var _fileno = Module["_fileno"] = createExportWrapper("fileno");

var ___dl_seterr = Module["___dl_seterr"] = createExportWrapper("__dl_seterr");

var __get_tzname = Module["__get_tzname"] = createExportWrapper("_get_tzname");

var __get_daylight = Module["__get_daylight"] = createExportWrapper("_get_daylight");

var __get_timezone = Module["__get_timezone"] = createExportWrapper("_get_timezone");

var stackSave = Module["stackSave"] = createExportWrapper("stackSave");

var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore");

var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc");

var _emscripten_stack_init = Module["_emscripten_stack_init"] = function() {
 return (_emscripten_stack_init = Module["_emscripten_stack_init"] = Module["asm"]["emscripten_stack_init"]).apply(null, arguments);
};

var _emscripten_stack_set_limits = Module["_emscripten_stack_set_limits"] = function() {
 return (_emscripten_stack_set_limits = Module["_emscripten_stack_set_limits"] = Module["asm"]["emscripten_stack_set_limits"]).apply(null, arguments);
};

var _emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = function() {
 return (_emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = Module["asm"]["emscripten_stack_get_free"]).apply(null, arguments);
};

var _setThrew = Module["_setThrew"] = createExportWrapper("setThrew");

var ___cxa_demangle = Module["___cxa_demangle"] = createExportWrapper("__cxa_demangle");

var ___cxa_can_catch = Module["___cxa_can_catch"] = createExportWrapper("__cxa_can_catch");

var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = createExportWrapper("__cxa_is_pointer_type");

var dynCall_iii = Module["dynCall_iii"] = createExportWrapper("dynCall_iii");

var dynCall_iiiii = Module["dynCall_iiiii"] = createExportWrapper("dynCall_iiiii");

var dynCall_iiii = Module["dynCall_iiii"] = createExportWrapper("dynCall_iiii");

var dynCall_ii = Module["dynCall_ii"] = createExportWrapper("dynCall_ii");

var dynCall_vii = Module["dynCall_vii"] = createExportWrapper("dynCall_vii");

var dynCall_vi = Module["dynCall_vi"] = createExportWrapper("dynCall_vi");

var dynCall_viii = Module["dynCall_viii"] = createExportWrapper("dynCall_viii");

var dynCall_viiii = Module["dynCall_viiii"] = createExportWrapper("dynCall_viiii");

var dynCall_iiiiii = Module["dynCall_iiiiii"] = createExportWrapper("dynCall_iiiiii");

var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = createExportWrapper("dynCall_viiiiiiii");

var dynCall_j = Module["dynCall_j"] = createExportWrapper("dynCall_j");

var dynCall_i = Module["dynCall_i"] = createExportWrapper("dynCall_i");

var dynCall_v = Module["dynCall_v"] = createExportWrapper("dynCall_v");

var dynCall_viiiii = Module["dynCall_viiiii"] = createExportWrapper("dynCall_viiiii");

var dynCall_jii = Module["dynCall_jii"] = createExportWrapper("dynCall_jii");

var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = createExportWrapper("dynCall_iiiiiiii");

var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = createExportWrapper("dynCall_iiiiiii");

var dynCall_ji = Module["dynCall_ji"] = createExportWrapper("dynCall_ji");

var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = createExportWrapper("dynCall_iiiiiiiii");

var dynCall_iiiiiiiiii = Module["dynCall_iiiiiiiiii"] = createExportWrapper("dynCall_iiiiiiiiii");

var dynCall_viiiiii = Module["dynCall_viiiiii"] = createExportWrapper("dynCall_viiiiii");

var dynCall_vid = Module["dynCall_vid"] = createExportWrapper("dynCall_vid");

var dynCall_dii = Module["dynCall_dii"] = createExportWrapper("dynCall_dii");

var dynCall_diii = Module["dynCall_diii"] = createExportWrapper("dynCall_diii");

var dynCall_diid = Module["dynCall_diid"] = createExportWrapper("dynCall_diid");

var dynCall_iiffi = Module["dynCall_iiffi"] = createExportWrapper("dynCall_iiffi");

var dynCall_fi = Module["dynCall_fi"] = createExportWrapper("dynCall_fi");

var dynCall_d = Module["dynCall_d"] = createExportWrapper("dynCall_d");

var dynCall_ij = Module["dynCall_ij"] = createExportWrapper("dynCall_ij");

var dynCall_ijiiiiiii = Module["dynCall_ijiiiiiii"] = createExportWrapper("dynCall_ijiiiiiii");

var dynCall_vij = Module["dynCall_vij"] = createExportWrapper("dynCall_vij");

var dynCall_viijii = Module["dynCall_viijii"] = createExportWrapper("dynCall_viijii");

var dynCall_iij = Module["dynCall_iij"] = createExportWrapper("dynCall_iij");

var dynCall_iijj = Module["dynCall_iijj"] = createExportWrapper("dynCall_iijj");

var dynCall_iif = Module["dynCall_iif"] = createExportWrapper("dynCall_iif");

var dynCall_iid = Module["dynCall_iid"] = createExportWrapper("dynCall_iid");

var dynCall_iidii = Module["dynCall_iidii"] = createExportWrapper("dynCall_iidii");

var dynCall_diiiii = Module["dynCall_diiiii"] = createExportWrapper("dynCall_diiiii");

var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = createExportWrapper("dynCall_viiiiiii");

var dynCall_iiji = Module["dynCall_iiji"] = createExportWrapper("dynCall_iiji");

var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");

var dynCall_iiiiiidii = Module["dynCall_iiiiiidii"] = createExportWrapper("dynCall_iiiiiidii");

var dynCall_viiiiiiiiiii = Module["dynCall_viiiiiiiiiii"] = createExportWrapper("dynCall_viiiiiiiiiii");

var dynCall_vffff = Module["dynCall_vffff"] = createExportWrapper("dynCall_vffff");

var dynCall_vf = Module["dynCall_vf"] = createExportWrapper("dynCall_vf");

var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = createExportWrapper("dynCall_viiiiiiiii");

var dynCall_vff = Module["dynCall_vff"] = createExportWrapper("dynCall_vff");

var dynCall_vfi = Module["dynCall_vfi"] = createExportWrapper("dynCall_vfi");

var dynCall_viif = Module["dynCall_viif"] = createExportWrapper("dynCall_viif");

var dynCall_vif = Module["dynCall_vif"] = createExportWrapper("dynCall_vif");

var dynCall_viff = Module["dynCall_viff"] = createExportWrapper("dynCall_viff");

var dynCall_vifff = Module["dynCall_vifff"] = createExportWrapper("dynCall_vifff");

var dynCall_viffff = Module["dynCall_viffff"] = createExportWrapper("dynCall_viffff");

var dynCall_iidiiii = Module["dynCall_iidiiii"] = createExportWrapper("dynCall_iidiiii");

var dynCall_iiiiiiiiiii = Module["dynCall_iiiiiiiiiii"] = createExportWrapper("dynCall_iiiiiiiiiii");

var dynCall_jiiii = Module["dynCall_jiiii"] = createExportWrapper("dynCall_jiiii");

var dynCall_iiiiiiiiiiiii = Module["dynCall_iiiiiiiiiiiii"] = createExportWrapper("dynCall_iiiiiiiiiiiii");

var dynCall_fiii = Module["dynCall_fiii"] = createExportWrapper("dynCall_fiii");

var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = createExportWrapper("dynCall_iiiiiiiiiiii");

var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = createExportWrapper("dynCall_viiiiiiiiii");

var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = createExportWrapper("dynCall_viiiiiiiiiiiiiii");

var dynCall_iiiiij = Module["dynCall_iiiiij"] = createExportWrapper("dynCall_iiiiij");

var dynCall_iiiiid = Module["dynCall_iiiiid"] = createExportWrapper("dynCall_iiiiid");

var dynCall_iiiiijj = Module["dynCall_iiiiijj"] = createExportWrapper("dynCall_iiiiijj");

var dynCall_iiiiiijj = Module["dynCall_iiiiiijj"] = createExportWrapper("dynCall_iiiiiijj");

var _asyncify_start_unwind = Module["_asyncify_start_unwind"] = createExportWrapper("asyncify_start_unwind");

var _asyncify_stop_unwind = Module["_asyncify_stop_unwind"] = createExportWrapper("asyncify_stop_unwind");

var _asyncify_start_rewind = Module["_asyncify_start_rewind"] = createExportWrapper("asyncify_start_rewind");

var _asyncify_stop_rewind = Module["_asyncify_stop_rewind"] = createExportWrapper("asyncify_stop_rewind");

var __emscripten_allow_main_runtime_queued_calls = Module["__emscripten_allow_main_runtime_queued_calls"] = 746080;

var __emscripten_main_thread_futex = Module["__emscripten_main_thread_futex"] = 779500;

function invoke_iiii(index, a1, a2, a3) {
 var sp = stackSave();
 try {
  return dynCall_iiii(index, a1, a2, a3);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_vii(index, a1, a2) {
 var sp = stackSave();
 try {
  dynCall_vii(index, a1, a2);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_iii(index, a1, a2) {
 var sp = stackSave();
 try {
  return dynCall_iii(index, a1, a2);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_viii(index, a1, a2, a3) {
 var sp = stackSave();
 try {
  dynCall_viii(index, a1, a2, a3);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_ii(index, a1) {
 var sp = stackSave();
 try {
  return dynCall_ii(index, a1);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_vi(index, a1) {
 var sp = stackSave();
 try {
  dynCall_vi(index, a1);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_iiiii(index, a1, a2, a3, a4) {
 var sp = stackSave();
 try {
  return dynCall_iiiii(index, a1, a2, a3, a4);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_viiii(index, a1, a2, a3, a4) {
 var sp = stackSave();
 try {
  dynCall_viiii(index, a1, a2, a3, a4);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_iiiiii(index, a1, a2, a3, a4, a5) {
 var sp = stackSave();
 try {
  return dynCall_iiiiii(index, a1, a2, a3, a4, a5);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_viiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 var sp = stackSave();
 try {
  dynCall_viiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_i(index) {
 var sp = stackSave();
 try {
  return dynCall_i(index);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_v(index) {
 var sp = stackSave();
 try {
  dynCall_v(index);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_viiiii(index, a1, a2, a3, a4, a5) {
 var sp = stackSave();
 try {
  dynCall_viiiii(index, a1, a2, a3, a4, a5);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 var sp = stackSave();
 try {
  return dynCall_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 var sp = stackSave();
 try {
  return dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_iiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 var sp = stackSave();
 try {
  return dynCall_iiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_iiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
 var sp = stackSave();
 try {
  return dynCall_iiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 var sp = stackSave();
 try {
  dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_vid(index, a1, a2) {
 var sp = stackSave();
 try {
  dynCall_vid(index, a1, a2);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_dii(index, a1, a2) {
 var sp = stackSave();
 try {
  return dynCall_dii(index, a1, a2);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_diii(index, a1, a2, a3) {
 var sp = stackSave();
 try {
  return dynCall_diii(index, a1, a2, a3);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_diid(index, a1, a2, a3) {
 var sp = stackSave();
 try {
  return dynCall_diid(index, a1, a2, a3);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_iiffi(index, a1, a2, a3, a4) {
 var sp = stackSave();
 try {
  return dynCall_iiffi(index, a1, a2, a3, a4);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_fi(index, a1) {
 var sp = stackSave();
 try {
  return dynCall_fi(index, a1);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_d(index) {
 var sp = stackSave();
 try {
  return dynCall_d(index);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_iif(index, a1, a2) {
 var sp = stackSave();
 try {
  return dynCall_iif(index, a1, a2);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_iid(index, a1, a2) {
 var sp = stackSave();
 try {
  return dynCall_iid(index, a1, a2);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_iidii(index, a1, a2, a3, a4) {
 var sp = stackSave();
 try {
  return dynCall_iidii(index, a1, a2, a3, a4);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_diiiii(index, a1, a2, a3, a4, a5) {
 var sp = stackSave();
 try {
  return dynCall_diiiii(index, a1, a2, a3, a4, a5);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_viiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 var sp = stackSave();
 try {
  dynCall_viiiiiii(index, a1, a2, a3, a4, a5, a6, a7);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_iiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
 var sp = stackSave();
 try {
  return dynCall_iiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_iiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) {
 var sp = stackSave();
 try {
  return dynCall_iiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_fiii(index, a1, a2, a3) {
 var sp = stackSave();
 try {
  return dynCall_fiii(index, a1, a2, a3);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_iiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) {
 var sp = stackSave();
 try {
  return dynCall_iiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_viiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
 var sp = stackSave();
 try {
  dynCall_viiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_viiiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
 var sp = stackSave();
 try {
  dynCall_viiiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_iiiiid(index, a1, a2, a3, a4, a5) {
 var sp = stackSave();
 try {
  return dynCall_iiiiid(index, a1, a2, a3, a4, a5);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_j(index) {
 var sp = stackSave();
 try {
  return dynCall_j(index);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_jii(index, a1, a2) {
 var sp = stackSave();
 try {
  return dynCall_jii(index, a1, a2);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_ji(index, a1) {
 var sp = stackSave();
 try {
  return dynCall_ji(index, a1);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_ij(index, a1, a2) {
 var sp = stackSave();
 try {
  return dynCall_ij(index, a1, a2);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_vij(index, a1, a2, a3) {
 var sp = stackSave();
 try {
  dynCall_vij(index, a1, a2, a3);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_ijiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
 var sp = stackSave();
 try {
  return dynCall_ijiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_iij(index, a1, a2, a3) {
 var sp = stackSave();
 try {
  return dynCall_iij(index, a1, a2, a3);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_iijj(index, a1, a2, a3, a4, a5) {
 var sp = stackSave();
 try {
  return dynCall_iijj(index, a1, a2, a3, a4, a5);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_jiiii(index, a1, a2, a3, a4) {
 var sp = stackSave();
 try {
  return dynCall_jiiii(index, a1, a2, a3, a4);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_viijii(index, a1, a2, a3, a4, a5, a6) {
 var sp = stackSave();
 try {
  dynCall_viijii(index, a1, a2, a3, a4, a5, a6);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_iiiiij(index, a1, a2, a3, a4, a5, a6) {
 var sp = stackSave();
 try {
  return dynCall_iiiiij(index, a1, a2, a3, a4, a5, a6);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

function invoke_iiiiijj(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 var sp = stackSave();
 try {
  return dynCall_iiiiijj(index, a1, a2, a3, a4, a5, a6, a7, a8);
 } catch (e) {
  stackRestore(sp);
  if (e !== e + 0 && e !== "longjmp") throw e;
  _setThrew(1, 0);
 }
}

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() {
 abort("'intArrayFromString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() {
 abort("'intArrayToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

Module["ccall"] = ccall;

Module["cwrap"] = cwrap;

if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() {
 abort("'setValue' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() {
 abort("'getValue' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() {
 abort("'allocate' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() {
 abort("'UTF8ArrayToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() {
 abort("'UTF8ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() {
 abort("'stringToUTF8Array' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() {
 abort("'stringToUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() {
 abort("'lengthBytesUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() {
 abort("'stackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() {
 abort("'addOnPreRun' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() {
 abort("'addOnInit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() {
 abort("'addOnPreMain' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() {
 abort("'addOnExit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() {
 abort("'addOnPostRun' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() {
 abort("'writeStringToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() {
 abort("'writeArrayToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() {
 abort("'writeAsciiToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

Module["addRunDependency"] = addRunDependency;

Module["removeRunDependency"] = removeRunDependency;

if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() {
 abort("'FS_createFolder' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

Module["FS_createPath"] = FS.createPath;

Module["FS_createDataFile"] = FS.createDataFile;

Module["FS_createPreloadedFile"] = FS.createPreloadedFile;

Module["FS_createLazyFile"] = FS.createLazyFile;

if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() {
 abort("'FS_createLink' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

Module["FS_createDevice"] = FS.createDevice;

Module["FS_unlink"] = FS.unlink;

if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() {
 abort("'getLEB' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() {
 abort("'getFunctionTables' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() {
 abort("'alignFunctionTables' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() {
 abort("'registerFunctions' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() {
 abort("'addFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() {
 abort("'removeFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() {
 abort("'getFuncWrapper' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() {
 abort("'prettyPrint' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() {
 abort("'dynCall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() {
 abort("'getCompilerSetting' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() {
 abort("'print' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() {
 abort("'printErr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() {
 abort("'getTempRet0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() {
 abort("'setTempRet0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() {
 abort("'callMain' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() {
 abort("'abort' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

Module["keepRuntimeAlive"] = keepRuntimeAlive;

if (!Object.getOwnPropertyDescriptor(Module, "zeroMemory")) Module["zeroMemory"] = function() {
 abort("'zeroMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() {
 abort("'stringToNewUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "setFileTime")) Module["setFileTime"] = function() {
 abort("'setFileTime' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() {
 abort("'emscripten_realloc_buffer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() {
 abort("'ENV' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "withStackSave")) Module["withStackSave"] = function() {
 abort("'withStackSave' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() {
 abort("'ERRNO_CODES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() {
 abort("'ERRNO_MESSAGES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "setErrNo")) Module["setErrNo"] = function() {
 abort("'setErrNo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "inetPton4")) Module["inetPton4"] = function() {
 abort("'inetPton4' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "inetNtop4")) Module["inetNtop4"] = function() {
 abort("'inetNtop4' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "inetPton6")) Module["inetPton6"] = function() {
 abort("'inetPton6' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "inetNtop6")) Module["inetNtop6"] = function() {
 abort("'inetNtop6' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "readSockaddr")) Module["readSockaddr"] = function() {
 abort("'readSockaddr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "writeSockaddr")) Module["writeSockaddr"] = function() {
 abort("'writeSockaddr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() {
 abort("'DNS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getHostByName")) Module["getHostByName"] = function() {
 abort("'getHostByName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() {
 abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() {
 abort("'Protocols' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() {
 abort("'Sockets' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getRandomDevice")) Module["getRandomDevice"] = function() {
 abort("'getRandomDevice' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "traverseStack")) Module["traverseStack"] = function() {
 abort("'traverseStack' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() {
 abort("'UNWIND_CACHE' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgsArray")) Module["readAsmConstArgsArray"] = function() {
 abort("'readAsmConstArgsArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() {
 abort("'readAsmConstArgs' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "mainThreadEM_ASM")) Module["mainThreadEM_ASM"] = function() {
 abort("'mainThreadEM_ASM' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() {
 abort("'jstoi_q' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() {
 abort("'jstoi_s' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getExecutableName")) Module["getExecutableName"] = function() {
 abort("'getExecutableName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "listenOnce")) Module["listenOnce"] = function() {
 abort("'listenOnce' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "autoResumeAudioContext")) Module["autoResumeAudioContext"] = function() {
 abort("'autoResumeAudioContext' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "dynCallLegacy")) Module["dynCallLegacy"] = function() {
 abort("'dynCallLegacy' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getDynCaller")) Module["getDynCaller"] = function() {
 abort("'getDynCaller' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() {
 abort("'dynCall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "callRuntimeCallbacks")) Module["callRuntimeCallbacks"] = function() {
 abort("'callRuntimeCallbacks' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "wasmTableMirror")) Module["wasmTableMirror"] = function() {
 abort("'wasmTableMirror' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "setWasmTableEntry")) Module["setWasmTableEntry"] = function() {
 abort("'setWasmTableEntry' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getWasmTableEntry")) Module["getWasmTableEntry"] = function() {
 abort("'getWasmTableEntry' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "handleException")) Module["handleException"] = function() {
 abort("'handleException' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "runtimeKeepalivePush")) Module["runtimeKeepalivePush"] = function() {
 abort("'runtimeKeepalivePush' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "runtimeKeepalivePop")) Module["runtimeKeepalivePop"] = function() {
 abort("'runtimeKeepalivePop' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "callUserCallback")) Module["callUserCallback"] = function() {
 abort("'callUserCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "maybeExit")) Module["maybeExit"] = function() {
 abort("'maybeExit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "safeSetTimeout")) Module["safeSetTimeout"] = function() {
 abort("'safeSetTimeout' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "asmjsMangle")) Module["asmjsMangle"] = function() {
 abort("'asmjsMangle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "asyncLoad")) Module["asyncLoad"] = function() {
 abort("'asyncLoad' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "alignMemory")) Module["alignMemory"] = function() {
 abort("'alignMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "mmapAlloc")) Module["mmapAlloc"] = function() {
 abort("'mmapAlloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "reallyNegative")) Module["reallyNegative"] = function() {
 abort("'reallyNegative' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "unSign")) Module["unSign"] = function() {
 abort("'unSign' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "reSign")) Module["reSign"] = function() {
 abort("'reSign' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "formatString")) Module["formatString"] = function() {
 abort("'formatString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() {
 abort("'PATH' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() {
 abort("'PATH_FS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() {
 abort("'SYSCALLS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() {
 abort("'syscallMmap2' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() {
 abort("'syscallMunmap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getSocketFromFD")) Module["getSocketFromFD"] = function() {
 abort("'getSocketFromFD' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getSocketAddress")) Module["getSocketAddress"] = function() {
 abort("'getSocketAddress' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() {
 abort("'JSEvents' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerKeyEventCallback")) Module["registerKeyEventCallback"] = function() {
 abort("'registerKeyEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "specialHTMLTargets")) Module["specialHTMLTargets"] = function() {
 abort("'specialHTMLTargets' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "maybeCStringToJsString")) Module["maybeCStringToJsString"] = function() {
 abort("'maybeCStringToJsString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "findEventTarget")) Module["findEventTarget"] = function() {
 abort("'findEventTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "findCanvasEventTarget")) Module["findCanvasEventTarget"] = function() {
 abort("'findCanvasEventTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getBoundingClientRect")) Module["getBoundingClientRect"] = function() {
 abort("'getBoundingClientRect' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "fillMouseEventData")) Module["fillMouseEventData"] = function() {
 abort("'fillMouseEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerMouseEventCallback")) Module["registerMouseEventCallback"] = function() {
 abort("'registerMouseEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerWheelEventCallback")) Module["registerWheelEventCallback"] = function() {
 abort("'registerWheelEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerUiEventCallback")) Module["registerUiEventCallback"] = function() {
 abort("'registerUiEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerFocusEventCallback")) Module["registerFocusEventCallback"] = function() {
 abort("'registerFocusEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "fillDeviceOrientationEventData")) Module["fillDeviceOrientationEventData"] = function() {
 abort("'fillDeviceOrientationEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerDeviceOrientationEventCallback")) Module["registerDeviceOrientationEventCallback"] = function() {
 abort("'registerDeviceOrientationEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "fillDeviceMotionEventData")) Module["fillDeviceMotionEventData"] = function() {
 abort("'fillDeviceMotionEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerDeviceMotionEventCallback")) Module["registerDeviceMotionEventCallback"] = function() {
 abort("'registerDeviceMotionEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "screenOrientation")) Module["screenOrientation"] = function() {
 abort("'screenOrientation' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "fillOrientationChangeEventData")) Module["fillOrientationChangeEventData"] = function() {
 abort("'fillOrientationChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerOrientationChangeEventCallback")) Module["registerOrientationChangeEventCallback"] = function() {
 abort("'registerOrientationChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "fillFullscreenChangeEventData")) Module["fillFullscreenChangeEventData"] = function() {
 abort("'fillFullscreenChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerFullscreenChangeEventCallback")) Module["registerFullscreenChangeEventCallback"] = function() {
 abort("'registerFullscreenChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerRestoreOldStyle")) Module["registerRestoreOldStyle"] = function() {
 abort("'registerRestoreOldStyle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "hideEverythingExceptGivenElement")) Module["hideEverythingExceptGivenElement"] = function() {
 abort("'hideEverythingExceptGivenElement' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "restoreHiddenElements")) Module["restoreHiddenElements"] = function() {
 abort("'restoreHiddenElements' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "setLetterbox")) Module["setLetterbox"] = function() {
 abort("'setLetterbox' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "currentFullscreenStrategy")) Module["currentFullscreenStrategy"] = function() {
 abort("'currentFullscreenStrategy' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "restoreOldWindowedStyle")) Module["restoreOldWindowedStyle"] = function() {
 abort("'restoreOldWindowedStyle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "softFullscreenResizeWebGLRenderTarget")) Module["softFullscreenResizeWebGLRenderTarget"] = function() {
 abort("'softFullscreenResizeWebGLRenderTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "doRequestFullscreen")) Module["doRequestFullscreen"] = function() {
 abort("'doRequestFullscreen' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "fillPointerlockChangeEventData")) Module["fillPointerlockChangeEventData"] = function() {
 abort("'fillPointerlockChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerPointerlockChangeEventCallback")) Module["registerPointerlockChangeEventCallback"] = function() {
 abort("'registerPointerlockChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerPointerlockErrorEventCallback")) Module["registerPointerlockErrorEventCallback"] = function() {
 abort("'registerPointerlockErrorEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "requestPointerLock")) Module["requestPointerLock"] = function() {
 abort("'requestPointerLock' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "fillVisibilityChangeEventData")) Module["fillVisibilityChangeEventData"] = function() {
 abort("'fillVisibilityChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerVisibilityChangeEventCallback")) Module["registerVisibilityChangeEventCallback"] = function() {
 abort("'registerVisibilityChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerTouchEventCallback")) Module["registerTouchEventCallback"] = function() {
 abort("'registerTouchEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "fillGamepadEventData")) Module["fillGamepadEventData"] = function() {
 abort("'fillGamepadEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerGamepadEventCallback")) Module["registerGamepadEventCallback"] = function() {
 abort("'registerGamepadEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerBeforeUnloadEventCallback")) Module["registerBeforeUnloadEventCallback"] = function() {
 abort("'registerBeforeUnloadEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "fillBatteryEventData")) Module["fillBatteryEventData"] = function() {
 abort("'fillBatteryEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "battery")) Module["battery"] = function() {
 abort("'battery' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerBatteryEventCallback")) Module["registerBatteryEventCallback"] = function() {
 abort("'registerBatteryEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "setCanvasElementSize")) Module["setCanvasElementSize"] = function() {
 abort("'setCanvasElementSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getCanvasElementSize")) Module["getCanvasElementSize"] = function() {
 abort("'getCanvasElementSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() {
 abort("'demangle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() {
 abort("'demangleAll' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() {
 abort("'jsStackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() {
 abort("'stackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getEnvStrings")) Module["getEnvStrings"] = function() {
 abort("'getEnvStrings' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "checkWasiClock")) Module["checkWasiClock"] = function() {
 abort("'checkWasiClock' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() {
 abort("'writeI53ToI64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() {
 abort("'writeI53ToI64Clamped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() {
 abort("'writeI53ToI64Signaling' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() {
 abort("'writeI53ToU64Clamped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() {
 abort("'writeI53ToU64Signaling' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() {
 abort("'readI53FromI64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() {
 abort("'readI53FromU64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() {
 abort("'convertI32PairToI53' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() {
 abort("'convertU32PairToI53' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "setImmediateWrapped")) Module["setImmediateWrapped"] = function() {
 abort("'setImmediateWrapped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "clearImmediateWrapped")) Module["clearImmediateWrapped"] = function() {
 abort("'clearImmediateWrapped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "polyfillSetImmediate")) Module["polyfillSetImmediate"] = function() {
 abort("'polyfillSetImmediate' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "uncaughtExceptionCount")) Module["uncaughtExceptionCount"] = function() {
 abort("'uncaughtExceptionCount' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "exceptionLast")) Module["exceptionLast"] = function() {
 abort("'exceptionLast' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "exceptionCaught")) Module["exceptionCaught"] = function() {
 abort("'exceptionCaught' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfo")) Module["ExceptionInfo"] = function() {
 abort("'ExceptionInfo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "CatchInfo")) Module["CatchInfo"] = function() {
 abort("'CatchInfo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "exception_addRef")) Module["exception_addRef"] = function() {
 abort("'exception_addRef' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "exception_decRef")) Module["exception_decRef"] = function() {
 abort("'exception_decRef' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() {
 abort("'Browser' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "funcWrappers")) Module["funcWrappers"] = function() {
 abort("'funcWrappers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() {
 abort("'getFuncWrapper' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "setMainLoop")) Module["setMainLoop"] = function() {
 abort("'setMainLoop' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "wget")) Module["wget"] = function() {
 abort("'wget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "tempFixedLengthArray")) Module["tempFixedLengthArray"] = function() {
 abort("'tempFixedLengthArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "miniTempWebGLFloatBuffers")) Module["miniTempWebGLFloatBuffers"] = function() {
 abort("'miniTempWebGLFloatBuffers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "heapObjectForWebGLType")) Module["heapObjectForWebGLType"] = function() {
 abort("'heapObjectForWebGLType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "heapAccessShiftForWebGLHeap")) Module["heapAccessShiftForWebGLHeap"] = function() {
 abort("'heapAccessShiftForWebGLHeap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() {
 abort("'GL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet")) Module["emscriptenWebGLGet"] = function() {
 abort("'emscriptenWebGLGet' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "computeUnpackAlignedImageSize")) Module["computeUnpackAlignedImageSize"] = function() {
 abort("'computeUnpackAlignedImageSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData")) Module["emscriptenWebGLGetTexPixelData"] = function() {
 abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform")) Module["emscriptenWebGLGetUniform"] = function() {
 abort("'emscriptenWebGLGetUniform' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "webglGetUniformLocation")) Module["webglGetUniformLocation"] = function() {
 abort("'webglGetUniformLocation' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "webglPrepareUniformLocationsBeforeFirstUse")) Module["webglPrepareUniformLocationsBeforeFirstUse"] = function() {
 abort("'webglPrepareUniformLocationsBeforeFirstUse' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "webglGetLeftBracePos")) Module["webglGetLeftBracePos"] = function() {
 abort("'webglGetLeftBracePos' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib")) Module["emscriptenWebGLGetVertexAttrib"] = function() {
 abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "writeGLArray")) Module["writeGLArray"] = function() {
 abort("'writeGLArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() {
 abort("'FS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "MEMFS")) Module["MEMFS"] = function() {
 abort("'MEMFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "TTY")) Module["TTY"] = function() {
 abort("'TTY' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS")) Module["PIPEFS"] = function() {
 abort("'PIPEFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS")) Module["SOCKFS"] = function() {
 abort("'SOCKFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "_setNetworkCallback")) Module["_setNetworkCallback"] = function() {
 abort("'_setNetworkCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "AL")) Module["AL"] = function() {
 abort("'AL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "SDL_unicode")) Module["SDL_unicode"] = function() {
 abort("'SDL_unicode' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "SDL_ttfContext")) Module["SDL_ttfContext"] = function() {
 abort("'SDL_ttfContext' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "SDL_audio")) Module["SDL_audio"] = function() {
 abort("'SDL_audio' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() {
 abort("'SDL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() {
 abort("'SDL_gfx' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "GLUT")) Module["GLUT"] = function() {
 abort("'GLUT' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "EGL")) Module["EGL"] = function() {
 abort("'EGL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "GLFW_Window")) Module["GLFW_Window"] = function() {
 abort("'GLFW_Window' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "GLFW")) Module["GLFW"] = function() {
 abort("'GLFW' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "GLEW")) Module["GLEW"] = function() {
 abort("'GLEW' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "IDBStore")) Module["IDBStore"] = function() {
 abort("'IDBStore' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError")) Module["runAndAbortIfError"] = function() {
 abort("'runAndAbortIfError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "Asyncify")) Module["Asyncify"] = function() {
 abort("'Asyncify' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "Fibers")) Module["Fibers"] = function() {
 abort("'Fibers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "Fetch")) Module["Fetch"] = function() {
 abort("'Fetch' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "fetchDeleteCachedData")) Module["fetchDeleteCachedData"] = function() {
 abort("'fetchDeleteCachedData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "fetchLoadCachedData")) Module["fetchLoadCachedData"] = function() {
 abort("'fetchLoadCachedData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "fetchCacheData")) Module["fetchCacheData"] = function() {
 abort("'fetchCacheData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "fetchXHR")) Module["fetchXHR"] = function() {
 abort("'fetchXHR' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

Module["PThread"] = PThread;

if (!Object.getOwnPropertyDescriptor(Module, "killThread")) Module["killThread"] = function() {
 abort("'killThread' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "cleanupThread")) Module["cleanupThread"] = function() {
 abort("'cleanupThread' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "registerTlsInit")) Module["registerTlsInit"] = function() {
 abort("'registerTlsInit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "cancelThread")) Module["cancelThread"] = function() {
 abort("'cancelThread' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "spawnThread")) Module["spawnThread"] = function() {
 abort("'spawnThread' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "exitOnMainThread")) Module["exitOnMainThread"] = function() {
 abort("'exitOnMainThread' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "establishStackSpace")) Module["establishStackSpace"] = function() {
 abort("'establishStackSpace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "invokeEntryPoint")) Module["invokeEntryPoint"] = function() {
 abort("'invokeEntryPoint' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "IDBFS")) Module["IDBFS"] = function() {
 abort("'IDBFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() {
 abort("'warnOnce' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() {
 abort("'stackSave' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() {
 abort("'stackRestore' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() {
 abort("'stackAlloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() {
 abort("'AsciiToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() {
 abort("'stringToAscii' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() {
 abort("'UTF16ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() {
 abort("'stringToUTF16' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() {
 abort("'lengthBytesUTF16' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() {
 abort("'UTF32ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() {
 abort("'stringToUTF32' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() {
 abort("'lengthBytesUTF32' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() {
 abort("'allocateUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() {
 abort("'allocateUTF8OnStack' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
};

Module["writeStackCookie"] = writeStackCookie;

Module["checkStackCookie"] = checkStackCookie;

Module["PThread"] = PThread;

Module["wasmMemory"] = wasmMemory;

Module["ExitStatus"] = ExitStatus;

if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", {
 configurable: true,
 get: function() {
  abort("'ALLOC_NORMAL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
 }
});

if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", {
 configurable: true,
 get: function() {
  abort("'ALLOC_STACK' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
 }
});

var calledRun;

function ExitStatus(status) {
 this.name = "ExitStatus";
 this.message = "Program terminated with exit(" + status + ")";
 this.status = status;
}

var calledMain = false;

dependenciesFulfilled = function runCaller() {
 if (!calledRun) run();
 if (!calledRun) dependenciesFulfilled = runCaller;
};

function callMain(args) {
 assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])');
 assert(__ATPRERUN__.length == 0, "cannot call main when preRun functions remain to be called");
 var entryFunction = Module["_main"];
 args = args || [];
 var argc = args.length + 1;
 var argv = stackAlloc((argc + 1) * 4);
 GROWABLE_HEAP_I32()[argv >> 2] = allocateUTF8OnStack(thisProgram);
 for (var i = 1; i < argc; i++) {
  GROWABLE_HEAP_I32()[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
 }
 GROWABLE_HEAP_I32()[(argv >> 2) + argc] = 0;
 try {
  var ret = entryFunction(argc, argv);
  exit(ret, true);
  return ret;
 } catch (e) {
  return handleException(e);
 } finally {
  calledMain = true;
 }
}

function stackCheckInit() {
 _emscripten_stack_init();
 writeStackCookie();
}

function run(args) {
 args = args || arguments_;
 if (runDependencies > 0) {
  return;
 }
 stackCheckInit();
 if (ENVIRONMENT_IS_PTHREAD) {
  initRuntime();
  postMessage({
   "cmd": "loaded"
  });
  return;
 }
 preRun();
 if (runDependencies > 0) {
  return;
 }
 function doRun() {
  if (calledRun) return;
  calledRun = true;
  Module["calledRun"] = true;
  if (ABORT) return;
  initRuntime();
  preMain();
  if (Module["onRuntimeInitialized"]) Module["onRuntimeInitialized"]();
  if (shouldRunNow) callMain(args);
  postRun();
 }
 if (Module["setStatus"]) {
  Module["setStatus"]("Running...");
  setTimeout(function() {
   setTimeout(function() {
    Module["setStatus"]("");
   }, 1);
   doRun();
  }, 1);
 } else {
  doRun();
 }
 checkStackCookie();
}

Module["run"] = run;

function checkUnflushedContent() {
 var oldOut = out;
 var oldErr = err;
 var has = false;
 out = err = function(x) {
  has = true;
 };
 try {
  var flush = Module["_fflush"];
  if (flush) flush(0);
  [ "stdout", "stderr" ].forEach(function(name) {
   var info = FS.analyzePath("/dev/" + name);
   if (!info) return;
   var stream = info.object;
   var rdev = stream.rdev;
   var tty = TTY.ttys[rdev];
   if (tty && tty.output && tty.output.length) {
    has = true;
   }
  });
 } catch (e) {}
 out = oldOut;
 err = oldErr;
 if (has) {
  warnOnce("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.");
 }
}

function exit(status, implicit) {
 EXITSTATUS = status;
 checkUnflushedContent();
 if (!implicit) {
  if (ENVIRONMENT_IS_PTHREAD) {
   exitOnMainThread(status);
   throw "unwind";
  } else {}
 }
 if (keepRuntimeAlive()) {
  if (!implicit) {
   var msg = "program exited (with status: " + status + "), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)";
   err(msg);
  }
 } else {
  exitRuntime();
 }
 procExit(status);
}

function procExit(code) {
 EXITSTATUS = code;
 if (!keepRuntimeAlive()) {
  PThread.terminateAllThreads();
  if (Module["onExit"]) Module["onExit"](code);
  ABORT = true;
 }
 quit_(code, new ExitStatus(code));
}

if (Module["preInit"]) {
 if (typeof Module["preInit"] == "function") Module["preInit"] = [ Module["preInit"] ];
 while (Module["preInit"].length > 0) {
  Module["preInit"].pop()();
 }
}

var shouldRunNow = true;

if (Module["noInitialRun"]) shouldRunNow = false;

if (ENVIRONMENT_IS_PTHREAD) {
 noExitRuntime = false;
 PThread.initWorker();
}

run();
